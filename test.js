/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */
console.log('hello world')
(function( window, undefined ) {

    // Can't do this because several apps including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    // Support: Firefox 18+
    //"use strict";
    var
        // The deferred used on DOM ready
        readyList,
    
        // A central reference to the root jQuery(document)
        rootjQuery,
    
        // Support: IE<10
        // For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
        core_strundefined = typeof undefined,
    
        // Use the correct document accordingly with window argument (sandbox)
        location = window.location,
        document = window.document,
        docElem = document.documentElement,
    
        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,
    
        // Map over the $ in case of overwrite
        _$ = window.$,
    
        // [[Class]] -> type pairs
        class2type = {},
    
        // List of deleted data cache ids, so we can reuse them
        core_deletedIds = [],
    
        core_version = "1.10.2",
    
        // Save a reference to some core methods
        core_concat = core_deletedIds.concat,
        core_push = core_deletedIds.push,
        core_slice = core_deletedIds.slice,
        core_indexOf = core_deletedIds.indexOf,
        core_toString = class2type.toString,
        core_hasOwn = class2type.hasOwnProperty,
        core_trim = core_version.trim,
    
        // Define a local copy of jQuery
        jQuery = function( selector, context ) {
            // The jQuery object is actually just the init constructor 'enhanced'
            return new jQuery.fn.init( selector, context, rootjQuery );
        },
    
        // Used for matching numbers
        core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
    
        // Used for splitting on whitespace
        core_rnotwhite = /\S+/g,
    
        // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    
        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    
        // Match a standalone tag
        rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    
        // JSON RegExp
        rvalidchars = /^[\],:{}\s]*$/,
        rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
        rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
        rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,
    
        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,
    
        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function( all, letter ) {
            return letter.toUpperCase();
        },
    
        // The ready event handler
        completed = function( event ) {
    
            // readyState === "complete" is good enough for us to call the dom ready in oldIE
            if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
                detach();
                jQuery.ready();
            }
        },
        // Clean-up method for dom ready events
        detach = function() {
            if ( document.addEventListener ) {
                document.removeEventListener( "DOMContentLoaded", completed, false );
                window.removeEventListener( "load", completed, false );
    
            } else {
                document.detachEvent( "onreadystatechange", completed );
                window.detachEvent( "onload", completed );
            }
        };
    
    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: core_version,
    
        constructor: jQuery,
        init: function( selector, context, rootjQuery ) {
            var match, elem;
    
            // HANDLE: $(""), $(null), $(undefined), $(false)
            if ( !selector ) {
                return this;
            }
    
            // Handle HTML strings
            if ( typeof selector === "string" ) {
                if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [ null, selector, null ];
    
                } else {
                    match = rquickExpr.exec( selector );
                }
    
                // Match html or make sure no context is specified for #id
                if ( match && (match[1] || !context) ) {
    
                    // HANDLE: $(html) -> $(array)
                    if ( match[1] ) {
                        context = context instanceof jQuery ? context[0] : context;
    
                        // scripts is true for back-compat
                        jQuery.merge( this, jQuery.parseHTML(
                            match[1],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ) );
    
                        // HANDLE: $(html, props)
                        if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                            for ( match in context ) {
                                // Properties of context are called as methods if possible
                                if ( jQuery.isFunction( this[ match ] ) ) {
                                    this[ match ]( context[ match ] );
    
                                // ...and otherwise set as attributes
                                } else {
                                    this.attr( match, context[ match ] );
                                }
                            }
                        }
    
                        return this;
    
                    // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById( match[2] );
    
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if ( elem && elem.parentNode ) {
                            // Handle the case where IE and Opera return items
                            // by name instead of ID
                            if ( elem.id !== match[2] ) {
                                return rootjQuery.find( selector );
                            }
    
                            // Otherwise, we inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }
    
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
    
                // HANDLE: $(expr, $(...))
                } else if ( !context || context.jquery ) {
                    return ( context || rootjQuery ).find( selector );
    
                // HANDLE: $(expr, context)
                // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor( context ).find( selector );
                }
    
            // HANDLE: $(DOMElement)
            } else if ( selector.nodeType ) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
    
            // HANDLE: $(function)
            // Shortcut for document ready
            } else if ( jQuery.isFunction( selector ) ) {
                return rootjQuery.ready( selector );
            }
    
            if ( selector.selector !== undefined ) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
    
            return jQuery.makeArray( selector, this );
        },
    
        // Start with an empty selector
        selector: "",
    
        // The default length of a jQuery object is 0
        length: 0,
    
        toArray: function() {
            return core_slice.call( this );
        },
    
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function( num ) {
            return num == null ?
    
                // Return a 'clean' array
                this.toArray() :
    
                // Return just the object
                ( num < 0 ? this[ this.length + num ] : this[ num ] );
        },
    
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function( elems ) {
    
            // Build a new jQuery matched element set
            var ret = jQuery.merge( this.constructor(), elems );
    
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;
    
            // Return the newly-formed element set
            return ret;
        },
    
        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function( callback, args ) {
            return jQuery.each( this, callback, args );
        },
    
        ready: function( fn ) {
            // Add the callback
            jQuery.ready.promise().done( fn );
    
            return this;
        },
    
        slice: function() {
            return this.pushStack( core_slice.apply( this, arguments ) );
        },
    
        first: function() {
            return this.eq( 0 );
        },
    
        last: function() {
            return this.eq( -1 );
        },
    
        eq: function( i ) {
            var len = this.length,
                j = +i + ( i < 0 ? len : 0 );
            return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
        },
    
        map: function( callback ) {
            return this.pushStack( jQuery.map(this, function( elem, i ) {
                return callback.call( elem, i, elem );
            }));
        },
    
        end: function() {
            return this.prevObject || this.constructor(null);
        },
    
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    
    // Give the init function the jQuery prototype for later instantiation
    jQuery.fn.init.prototype = jQuery.fn;
    
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;
    
        // Handle a deep copy situation
        if ( typeof target === "boolean" ) {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }
    
        // Handle case when target is a string or something (possible in deep copy)
        if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
            target = {};
        }
    
        // extend jQuery itself if only one argument is passed
        if ( length === i ) {
            target = this;
            --i;
        }
    
        for ( ; i < length; i++ ) {
            // Only deal with non-null/undefined values
            if ( (options = arguments[ i ]) != null ) {
                // Extend the base object
                for ( name in options ) {
                    src = target[ name ];
                    copy = options[ name ];
    
                    // Prevent never-ending loop
                    if ( target === copy ) {
                        continue;
                    }
    
                    // Recurse if we're merging plain objects or arrays
                    if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                        if ( copyIsArray ) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
    
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
    
                        // Never move original objects, clone them
                        target[ name ] = jQuery.extend( deep, clone, copy );
    
                    // Don't bring in undefined values
                    } else if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }
    
        // Return the modified object
        return target;
    };
    
    jQuery.extend({
        // Unique for each copy of jQuery on the page
        // Non-digits removed to match rinlinejQuery
        expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),
    
        noConflict: function( deep ) {
            if ( window.$ === jQuery ) {
                window.$ = _$;
            }
    
            if ( deep && window.jQuery === jQuery ) {
                window.jQuery = _jQuery;
            }
    
            return jQuery;
        },
    
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
    
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
    
        // Hold (or release) the ready event
        holdReady: function( hold ) {
            if ( hold ) {
                jQuery.readyWait++;
            } else {
                jQuery.ready( true );
            }
        },
    
        // Handle when the DOM is ready
        ready: function( wait ) {
    
            // Abort if there are pending holds or we're already ready
            if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                return;
            }
    
            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if ( !document.body ) {
                return setTimeout( jQuery.ready );
            }
    
            // Remember that the DOM is ready
            jQuery.isReady = true;
    
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if ( wait !== true && --jQuery.readyWait > 0 ) {
                return;
            }
    
            // If there are functions bound, to execute
            readyList.resolveWith( document, [ jQuery ] );
    
            // Trigger any bound ready events
            if ( jQuery.fn.trigger ) {
                jQuery( document ).trigger("ready").off("ready");
            }
        },
    
        // See test/unit/core.js for details concerning isFunction.
        // Since version 1.3, DOM methods and functions like alert
        // aren't supported. They return false on IE (#2968).
        isFunction: function( obj ) {
            return jQuery.type(obj) === "function";
        },
    
        isArray: Array.isArray || function( obj ) {
            return jQuery.type(obj) === "array";
        },
    
        isWindow: function( obj ) {
            /* jshint eqeqeq: false */
            return obj != null && obj == obj.window;
        },
    
        isNumeric: function( obj ) {
            return !isNaN( parseFloat(obj) ) && isFinite( obj );
        },
    
        type: function( obj ) {
            if ( obj == null ) {
                return String( obj );
            }
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[ core_toString.call(obj) ] || "object" :
                typeof obj;
        },
    
        isPlainObject: function( obj ) {
            var key;
    
            // Must be an Object.
            // Because of IE, we also have to check the presence of the constructor property.
            // Make sure that DOM nodes and window objects don't pass through, as well
            if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
                return false;
            }
    
            try {
                // Not own constructor property must be Object
                if ( obj.constructor &&
                    !core_hasOwn.call(obj, "constructor") &&
                    !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
                    return false;
                }
            } catch ( e ) {
                // IE8,9 Will throw exceptions on certain host objects #9897
                return false;
            }
    
            // Support: IE<9
            // Handle iteration over inherited properties before own properties.
            if ( jQuery.support.ownLast ) {
                for ( key in obj ) {
                    return core_hasOwn.call( obj, key );
                }
            }
    
            // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.
            for ( key in obj ) {}
    
            return key === undefined || core_hasOwn.call( obj, key );
        },
    
        isEmptyObject: function( obj ) {
            var name;
            for ( name in obj ) {
                return false;
            }
            return true;
        },
    
        error: function( msg ) {
            throw new Error( msg );
        },
    
        // data: string of html
        // context (optional): If specified, the fragment will be created in this context, defaults to document
        // keepScripts (optional): If true, will include scripts passed in the html string
        parseHTML: function( data, context, keepScripts ) {
            if ( !data || typeof data !== "string" ) {
                return null;
            }
            if ( typeof context === "boolean" ) {
                keepScripts = context;
                context = false;
            }
            context = context || document;
    
            var parsed = rsingleTag.exec( data ),
                scripts = !keepScripts && [];
    
            // Single tag
            if ( parsed ) {
                return [ context.createElement( parsed[1] ) ];
            }
    
            parsed = jQuery.buildFragment( [ data ], context, scripts );
            if ( scripts ) {
                jQuery( scripts ).remove();
            }
            return jQuery.merge( [], parsed.childNodes );
        },
    
        parseJSON: function( data ) {
            // Attempt to parse using the native JSON parser first
            if ( window.JSON && window.JSON.parse ) {
                return window.JSON.parse( data );
            }
    
            if ( data === null ) {
                return data;
            }
    
            if ( typeof data === "string" ) {
    
                // Make sure leading/trailing whitespace is removed (IE can't handle it)
                data = jQuery.trim( data );
    
                if ( data ) {
                    // Make sure the incoming data is actual JSON
                    // Logic borrowed from http://json.org/json2.js
                    if ( rvalidchars.test( data.replace( rvalidescape, "@" )
                        .replace( rvalidtokens, "]" )
                        .replace( rvalidbraces, "")) ) {
    
                        return ( new Function( "return " + data ) )();
                    }
                }
            }
    
            jQuery.error( "Invalid JSON: " + data );
        },
    
        // Cross-browser xml parsing
        parseXML: function( data ) {
            var xml, tmp;
            if ( !data || typeof data !== "string" ) {
                return null;
            }
            try {
                if ( window.DOMParser ) { // Standard
                    tmp = new DOMParser();
                    xml = tmp.parseFromString( data , "text/xml" );
                } else { // IE
                    xml = new ActiveXObject( "Microsoft.XMLDOM" );
                    xml.async = "false";
                    xml.loadXML( data );
                }
            } catch( e ) {
                xml = undefined;
            }
            if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
                jQuery.error( "Invalid XML: " + data );
            }
            return xml;
        },
    
        noop: function() {},
    
        // Evaluates a script in a global context
        // Workarounds based on findings by Jim Driscoll
        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
        globalEval: function( data ) {
            if ( data && jQuery.trim( data ) ) {
                // We use execScript on Internet Explorer
                // We use an anonymous function so that context is window
                // rather than jQuery in Firefox
                ( window.execScript || function( data ) {
                    window[ "eval" ].call( window, data );
                } )( data );
            }
        },
    
        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function( string ) {
            return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
        },
    
        nodeName: function( elem, name ) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
    
        // args is for internal usage only
        each: function( obj, callback, args ) {
            var value,
                i = 0,
                length = obj.length,
                isArray = isArraylike( obj );
    
            if ( args ) {
                if ( isArray ) {
                    for ( ; i < length; i++ ) {
                        value = callback.apply( obj[ i ], args );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                } else {
                    for ( i in obj ) {
                        value = callback.apply( obj[ i ], args );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                }
    
            // A special, fast, case for the most common use of each
            } else {
                if ( isArray ) {
                    for ( ; i < length; i++ ) {
                        value = callback.call( obj[ i ], i, obj[ i ] );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                } else {
                    for ( i in obj ) {
                        value = callback.call( obj[ i ], i, obj[ i ] );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                }
            }
    
            return obj;
        },
    
        // Use native String.trim function wherever possible
        trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
            function( text ) {
                return text == null ?
                    "" :
                    core_trim.call( text );
            } :
    
            // Otherwise use our own trimming functionality
            function( text ) {
                return text == null ?
                    "" :
                    ( text + "" ).replace( rtrim, "" );
            },
    
        // results is for internal usage only
        makeArray: function( arr, results ) {
            var ret = results || [];
    
            if ( arr != null ) {
                if ( isArraylike( Object(arr) ) ) {
                    jQuery.merge( ret,
                        typeof arr === "string" ?
                        [ arr ] : arr
                    );
                } else {
                    core_push.call( ret, arr );
                }
            }
    
            return ret;
        },
    
        inArray: function( elem, arr, i ) {
            var len;
    
            if ( arr ) {
                if ( core_indexOf ) {
                    return core_indexOf.call( arr, elem, i );
                }
    
                len = arr.length;
                i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
    
                for ( ; i < len; i++ ) {
                    // Skip accessing in sparse arrays
                    if ( i in arr && arr[ i ] === elem ) {
                        return i;
                    }
                }
            }
    
            return -1;
        },
    
        merge: function( first, second ) {
            var l = second.length,
                i = first.length,
                j = 0;
    
            if ( typeof l === "number" ) {
                for ( ; j < l; j++ ) {
                    first[ i++ ] = second[ j ];
                }
            } else {
                while ( second[j] !== undefined ) {
                    first[ i++ ] = second[ j++ ];
                }
            }
    
            first.length = i;
    
            return first;
        },
    
        grep: function( elems, callback, inv ) {
            var retVal,
                ret = [],
                i = 0,
                length = elems.length;
            inv = !!inv;
    
            // Go through the array, only saving the items
            // that pass the validator function
            for ( ; i < length; i++ ) {
                retVal = !!callback( elems[ i ], i );
                if ( inv !== retVal ) {
                    ret.push( elems[ i ] );
                }
            }
    
            return ret;
        },
    
        // arg is for internal usage only
        map: function( elems, callback, arg ) {
            var value,
                i = 0,
                length = elems.length,
                isArray = isArraylike( elems ),
                ret = [];
    
            // Go through the array, translating each of the items to their
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback( elems[ i ], i, arg );
    
                    if ( value != null ) {
                        ret[ ret.length ] = value;
                    }
                }
    
            // Go through every key on the object,
            } else {
                for ( i in elems ) {
                    value = callback( elems[ i ], i, arg );
    
                    if ( value != null ) {
                        ret[ ret.length ] = value;
                    }
                }
            }
    
            // Flatten any nested arrays
            return core_concat.apply( [], ret );
        },
    
        // A global GUID counter for objects
        guid: 1,
    
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function( fn, context ) {
            var args, proxy, tmp;
    
            if ( typeof context === "string" ) {
                tmp = fn[ context ];
                context = fn;
                fn = tmp;
            }
    
            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if ( !jQuery.isFunction( fn ) ) {
                return undefined;
            }
    
            // Simulated bind
            args = core_slice.call( arguments, 2 );
            proxy = function() {
                return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
            };
    
            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    
            return proxy;
        },
    
        // Multifunctional method to get and set values of a collection
        // The value/s can optionally be executed if it's a function
        access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
            var i = 0,
                length = elems.length,
                bulk = key == null;
    
            // Sets many values
            if ( jQuery.type( key ) === "object" ) {
                chainable = true;
                for ( i in key ) {
                    jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
                }
    
            // Sets one value
            } else if ( value !== undefined ) {
                chainable = true;
    
                if ( !jQuery.isFunction( value ) ) {
                    raw = true;
                }
    
                if ( bulk ) {
                    // Bulk operations run against the entire set
                    if ( raw ) {
                        fn.call( elems, value );
                        fn = null;
    
                    // ...except when executing function values
                    } else {
                        bulk = fn;
                        fn = function( elem, key, value ) {
                            return bulk.call( jQuery( elem ), value );
                        };
                    }
                }
    
                if ( fn ) {
                    for ( ; i < length; i++ ) {
                        fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
                    }
                }
            }
    
            return chainable ?
                elems :
    
                // Gets
                bulk ?
                    fn.call( elems ) :
                    length ? fn( elems[0], key ) : emptyGet;
        },
    
        now: function() {
            return ( new Date() ).getTime();
        },
    
        // A method for quickly swapping in/out CSS properties to get correct calculations.
        // Note: this method belongs to the css module but it's needed here for the support module.
        // If support gets modularized, this method should be moved back to the css module.
        swap: function( elem, options, callback, args ) {
            var ret, name,
                old = {};
    
            // Remember the old values, and insert the new ones
            for ( name in options ) {
                old[ name ] = elem.style[ name ];
                elem.style[ name ] = options[ name ];
            }
    
            ret = callback.apply( elem, args || [] );
    
            // Revert the old values
            for ( name in options ) {
                elem.style[ name ] = old[ name ];
            }
    
            return ret;
        }
    });
    
    jQuery.ready.promise = function( obj ) {
        if ( !readyList ) {
    
            readyList = jQuery.Deferred();
    
            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // we once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if ( document.readyState === "complete" ) {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout( jQuery.ready );
    
            // Standards-based browsers support DOMContentLoaded
            } else if ( document.addEventListener ) {
                // Use the handy event callback
                document.addEventListener( "DOMContentLoaded", completed, false );
    
                // A fallback to window.onload, that will always work
                window.addEventListener( "load", completed, false );
    
            // If IE event model is used
            } else {
                // Ensure firing before onload, maybe late but safe also for iframes
                document.attachEvent( "onreadystatechange", completed );
    
                // A fallback to window.onload, that will always work
                window.attachEvent( "onload", completed );
    
                // If IE and not a frame
                // continually check to see if the document is ready
                var top = false;
    
                try {
                    top = window.frameElement == null && document.documentElement;
                } catch(e) {}
    
                if ( top && top.doScroll ) {
                    (function doScrollCheck() {
                        if ( !jQuery.isReady ) {
    
                            try {
                                // Use the trick by Diego Perini
                                // http://javascript.nwbox.com/IEContentLoaded/
                                top.doScroll("left");
                            } catch(e) {
                                return setTimeout( doScrollCheck, 50 );
                            }
    
                            // detach all dom ready events
                            detach();
    
                            // and execute any waiting functions
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise( obj );
    };
    
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type[ "[object " + name + "]" ] = name.toLowerCase();
    });
    
    function isArraylike( obj ) {
        var length = obj.length,
            type = jQuery.type( obj );
    
        if ( jQuery.isWindow( obj ) ) {
            return false;
        }
    
        if ( obj.nodeType === 1 && length ) {
            return true;
        }
    
        return type === "array" || type !== "function" &&
            ( length === 0 ||
            typeof length === "number" && length > 0 && ( length - 1 ) in obj );
    }
    
    // All jQuery objects should point back to these
    rootjQuery = jQuery(document);
    /*!
     * Sizzle CSS Selector Engine v1.10.2
     * http://sizzlejs.com/
     *
     * Copyright 2013 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2013-07-03
     */
    (function( window, undefined ) {
    
    var i,
        support,
        cachedruns,
        Expr,
        getText,
        isXML,
        compile,
        outermostContext,
        sortInput,
    
        // Local document vars
        setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
    
        // Instance-specific data
        expando = "sizzle" + -(new Date()),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        hasDuplicate = false,
        sortOrder = function( a, b ) {
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
            }
            return 0;
        },
    
        // General-purpose constants
        strundefined = typeof undefined,
        MAX_NEGATIVE = 1 << 31,
    
        // Instance methods
        hasOwn = ({}).hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf if we can't use a native one
        indexOf = arr.indexOf || function( elem ) {
            var i = 0,
                len = this.length;
            for ( ; i < len; i++ ) {
                if ( this[i] === elem ) {
                    return i;
                }
            }
            return -1;
        },
    
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
    
        // Regular expressions
    
        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
    
        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace( "w", "w#" ),
    
        // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
            "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
    
        // Prefer arguments quoted,
        //   then not containing pseudos/brackets,
        //   then attribute selectors/non-parenthetical expressions,
        //   then anything else
        // These preferences are here to reduce the number of selectors
        //   needing tokenize in the PSEUDO preFilter
        pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",
    
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
    
        rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
        rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
    
        rsibling = new RegExp( whitespace + "*[+~]" ),
        rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),
    
        rpseudo = new RegExp( pseudos ),
        ridentifier = new RegExp( "^" + identifier + "$" ),
    
        matchExpr = {
            "ID": new RegExp( "^#(" + characterEncoding + ")" ),
            "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
            "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
            "ATTR": new RegExp( "^" + attributes ),
            "PSEUDO": new RegExp( "^" + pseudos ),
            "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
            "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
        },
    
        rnative = /^[^{]+\{\s*\[native \w/,
    
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
    
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
    
        rescape = /'|\\/g,
    
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
        funescape = function( _, escaped, escapedWhitespace ) {
            var high = "0x" + escaped - 0x10000;
            // NaN means non-codepoint
            // Support: Firefox
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ?
                escaped :
                // BMP codepoint
                high < 0 ?
                    String.fromCharCode( high + 0x10000 ) :
                    // Supplemental Plane codepoint (surrogate pair)
                    String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
        };
    
    // Optimize for push.apply( _, NodeList )
    try {
        push.apply(
            (arr = slice.call( preferredDoc.childNodes )),
            preferredDoc.childNodes
        );
        // Support: Android<4.0
        // Detect silently failing push.apply
        arr[ preferredDoc.childNodes.length ].nodeType;
    } catch ( e ) {
        push = { apply: arr.length ?
    
            // Leverage slice if possible
            function( target, els ) {
                push_native.apply( target, slice.call(els) );
            } :
    
            // Support: IE<9
            // Otherwise append directly
            function( target, els ) {
                var j = target.length,
                    i = 0;
                // Can't trust NodeList.length
                while ( (target[j++] = els[i++]) ) {}
                target.length = j - 1;
            }
        };
    }
    
    function Sizzle( selector, context, results, seed ) {
        var match, elem, m, nodeType,
            // QSA vars
            i, groups, old, nid, newContext, newSelector;
    
        if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
            setDocument( context );
        }
    
        context = context || document;
        results = results || [];
    
        if ( !selector || typeof selector !== "string" ) {
            return results;
        }
    
        if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
            return [];
        }
    
        if ( documentIsHTML && !seed ) {
    
            // Shortcuts
            if ( (match = rquickExpr.exec( selector )) ) {
                // Speed-up: Sizzle("#ID")
                if ( (m = match[1]) ) {
                    if ( nodeType === 9 ) {
                        elem = context.getElementById( m );
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if ( elem && elem.parentNode ) {
                            // Handle the case where IE, Opera, and Webkit return items
                            // by name instead of ID
                            if ( elem.id === m ) {
                                results.push( elem );
                                return results;
                            }
                        } else {
                            return results;
                        }
                    } else {
                        // Context is not a document
                        if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                            contains( context, elem ) && elem.id === m ) {
                            results.push( elem );
                            return results;
                        }
                    }
    
                // Speed-up: Sizzle("TAG")
                } else if ( match[2] ) {
                    push.apply( results, context.getElementsByTagName( selector ) );
                    return results;
    
                // Speed-up: Sizzle(".CLASS")
                } else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
                    push.apply( results, context.getElementsByClassName( m ) );
                    return results;
                }
            }
    
            // QSA path
            if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
                nid = old = expando;
                newContext = context;
                newSelector = nodeType === 9 && selector;
    
                // qSA works strangely on Element-rooted queries
                // We can work around this by specifying an extra ID on the root
                // and working up from there (Thanks to Andrew Dupont for the technique)
                // IE 8 doesn't work on object elements
                if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                    groups = tokenize( selector );
    
                    if ( (old = context.getAttribute("id")) ) {
                        nid = old.replace( rescape, "\\$&" );
                    } else {
                        context.setAttribute( "id", nid );
                    }
                    nid = "[id='" + nid + "'] ";
    
                    i = groups.length;
                    while ( i-- ) {
                        groups[i] = nid + toSelector( groups[i] );
                    }
                    newContext = rsibling.test( selector ) && context.parentNode || context;
                    newSelector = groups.join(",");
                }
    
                if ( newSelector ) {
                    try {
                        push.apply( results,
                            newContext.querySelectorAll( newSelector )
                        );
                        return results;
                    } catch(qsaError) {
                    } finally {
                        if ( !old ) {
                            context.removeAttribute("id");
                        }
                    }
                }
            }
        }
    
        // All others
        return select( selector.replace( rtrim, "$1" ), context, results, seed );
    }
    
    /**
     * Create key-value caches of limited size
     * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
        var keys = [];
    
        function cache( key, value ) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if ( keys.push( key += " " ) > Expr.cacheLength ) {
                // Only keep the most recent entries
                delete cache[ keys.shift() ];
            }
            return (cache[ key ] = value);
        }
        return cache;
    }
    
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */
    function markFunction( fn ) {
        fn[ expando ] = true;
        return fn;
    }
    
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created div and expects a boolean result
     */
    function assert( fn ) {
        var div = document.createElement("div");
    
        try {
            return !!fn( div );
        } catch (e) {
            return false;
        } finally {
            // Remove from its parent by default
            if ( div.parentNode ) {
                div.parentNode.removeChild( div );
            }
            // release memory in IE
            div = null;
        }
    }
    
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */
    function addHandle( attrs, handler ) {
        var arr = attrs.split("|"),
            i = attrs.length;
    
        while ( i-- ) {
            Expr.attrHandle[ arr[i] ] = handler;
        }
    }
    
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */
    function siblingCheck( a, b ) {
        var cur = b && a,
            diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                ( ~b.sourceIndex || MAX_NEGATIVE ) -
                ( ~a.sourceIndex || MAX_NEGATIVE );
    
        // Use IE sourceIndex if available on both nodes
        if ( diff ) {
            return diff;
        }
    
        // Check if b follows a
        if ( cur ) {
            while ( (cur = cur.nextSibling) ) {
                if ( cur === b ) {
                    return -1;
                }
            }
        }
    
        return a ? 1 : -1;
    }
    
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo( type ) {
        return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
        };
    }
    
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo( type ) {
        return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
        };
    }
    
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo( fn ) {
        return markFunction(function( argument ) {
            argument = +argument;
            return markFunction(function( seed, matches ) {
                var j,
                    matchIndexes = fn( [], seed.length, argument ),
                    i = matchIndexes.length;
    
                // Match elements found at the specified indexes
                while ( i-- ) {
                    if ( seed[ (j = matchIndexes[i]) ] ) {
                        seed[j] = !(matches[j] = seed[j]);
                    }
                }
            });
        });
    }
    
    /**
     * Detect xml
     * @param {Element|Object} elem An element or a document
     */
    isXML = Sizzle.isXML = function( elem ) {
        // documentElement is verified for cases where it doesn't yet exist
        // (such as loading iframes in IE - #4833)
        var documentElement = elem && (elem.ownerDocument || elem).documentElement;
        return documentElement ? documentElement.nodeName !== "HTML" : false;
    };
    
    // Expose support vars for convenience
    support = Sizzle.support = {};
    
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    setDocument = Sizzle.setDocument = function( node ) {
        var doc = node ? node.ownerDocument || node : preferredDoc,
            parent = doc.defaultView;
    
        // If no document and documentElement is available, return
        if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
            return document;
        }
    
        // Set our document
        document = doc;
        docElem = doc.documentElement;
    
        // Support tests
        documentIsHTML = !isXML( doc );
    
        // Support: IE>8
        // If iframe document is assigned to "document" variable and if iframe has been reloaded,
        // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
        // IE6-8 do not support the defaultView property so parent will be undefined
        if ( parent && parent.attachEvent && parent !== parent.top ) {
            parent.attachEvent( "onbeforeunload", function() {
                setDocument();
            });
        }
    
        /* Attributes
        ---------------------------------------------------------------------- */
    
        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
        support.attributes = assert(function( div ) {
            div.className = "i";
            return !div.getAttribute("className");
        });
    
        /* getElement(s)By*
        ---------------------------------------------------------------------- */
    
        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function( div ) {
            div.appendChild( doc.createComment("") );
            return !div.getElementsByTagName("*").length;
        });
    
        // Check if getElementsByClassName can be trusted
        support.getElementsByClassName = assert(function( div ) {
            div.innerHTML = "<div class='a'></div><div class='a i'></div>";
    
            // Support: Safari<4
            // Catch class over-caching
            div.firstChild.className = "i";
            // Support: Opera<10
            // Catch gEBCN failure to find non-leading classes
            return div.getElementsByClassName("i").length === 2;
        });
    
        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function( div ) {
            docElem.appendChild( div ).id = expando;
            return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
        });
    
        // ID find and filter
        if ( support.getById ) {
            Expr.find["ID"] = function( id, context ) {
                if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
                    var m = context.getElementById( id );
                    // Check parentNode to catch when Blackberry 4.6 returns
                    // nodes that are no longer in the document #6963
                    return m && m.parentNode ? [m] : [];
                }
            };
            Expr.filter["ID"] = function( id ) {
                var attrId = id.replace( runescape, funescape );
                return function( elem ) {
                    return elem.getAttribute("id") === attrId;
                };
            };
        } else {
            // Support: IE6/7
            // getElementById is not reliable as a find shortcut
            delete Expr.find["ID"];
    
            Expr.filter["ID"] =  function( id ) {
                var attrId = id.replace( runescape, funescape );
                return function( elem ) {
                    var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                    return node && node.value === attrId;
                };
            };
        }
    
        // Tag
        Expr.find["TAG"] = support.getElementsByTagName ?
            function( tag, context ) {
                if ( typeof context.getElementsByTagName !== strundefined ) {
                    return context.getElementsByTagName( tag );
                }
            } :
            function( tag, context ) {
                var elem,
                    tmp = [],
                    i = 0,
                    results = context.getElementsByTagName( tag );
    
                // Filter out possible comments
                if ( tag === "*" ) {
                    while ( (elem = results[i++]) ) {
                        if ( elem.nodeType === 1 ) {
                            tmp.push( elem );
                        }
                    }
    
                    return tmp;
                }
                return results;
            };
    
        // Class
        Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
            if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
                return context.getElementsByClassName( className );
            }
        };
    
        /* QSA/matchesSelector
        ---------------------------------------------------------------------- */
    
        // QSA and matchesSelector support
    
        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];
    
        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See http://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];
    
        if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function( div ) {
                // Select is set to empty string on purpose
                // This is to test IE's treatment of not explicitly
                // setting a boolean content attribute,
                // since its presence should be enough
                // http://bugs.jquery.com/ticket/12359
                div.innerHTML = "<select><option selected=''></option></select>";
    
                // Support: IE8
                // Boolean attributes and "value" are not treated correctly
                if ( !div.querySelectorAll("[selected]").length ) {
                    rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
                }
    
                // Webkit/Opera - :checked should return selected option elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                // IE8 throws error here and will not see later tests
                if ( !div.querySelectorAll(":checked").length ) {
                    rbuggyQSA.push(":checked");
                }
            });
    
            assert(function( div ) {
    
                // Support: Opera 10-12/IE8
                // ^= $= *= and empty values
                // Should not select anything
                // Support: Windows 8 Native Apps
                // The type attribute is restricted during .innerHTML assignment
                var input = doc.createElement("input");
                input.setAttribute( "type", "hidden" );
                div.appendChild( input ).setAttribute( "t", "" );
    
                if ( div.querySelectorAll("[t^='']").length ) {
                    rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
                }
    
                // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                // IE8 throws error here and will not see later tests
                if ( !div.querySelectorAll(":enabled").length ) {
                    rbuggyQSA.push( ":enabled", ":disabled" );
                }
    
                // Opera 10-11 does not throw on post-comma invalid pseudos
                div.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
            });
        }
    
        if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
            docElem.mozMatchesSelector ||
            docElem.oMatchesSelector ||
            docElem.msMatchesSelector) )) ) {
    
            assert(function( div ) {
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node (IE 9)
                support.disconnectedMatch = matches.call( div, "div" );
    
                // This should fail with an exception
                // Gecko does not error, returns false instead
                matches.call( div, "[s!='']:x" );
                rbuggyMatches.push( "!=", pseudos );
            });
        }
    
        rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
        rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
    
        /* Contains
        ---------------------------------------------------------------------- */
    
        // Element contains another
        // Purposefully does not implement inclusive descendent
        // As in, an element does not contain itself
        contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
            function( a, b ) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                    bup = b && b.parentNode;
                return a === bup || !!( bup && bup.nodeType === 1 && (
                    adown.contains ?
                        adown.contains( bup ) :
                        a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                ));
            } :
            function( a, b ) {
                if ( b ) {
                    while ( (b = b.parentNode) ) {
                        if ( b === a ) {
                            return true;
                        }
                    }
                }
                return false;
            };
    
        /* Sorting
        ---------------------------------------------------------------------- */
    
        // Document order sorting
        sortOrder = docElem.compareDocumentPosition ?
        function( a, b ) {
    
            // Flag for duplicate removal
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
            }
    
            var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );
    
            if ( compare ) {
                // Disconnected nodes
                if ( compare & 1 ||
                    (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
    
                    // Choose the first element that is related to our preferred document
                    if ( a === doc || contains(preferredDoc, a) ) {
                        return -1;
                    }
                    if ( b === doc || contains(preferredDoc, b) ) {
                        return 1;
                    }
    
                    // Maintain original order
                    return sortInput ?
                        ( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
                        0;
                }
    
                return compare & 4 ? -1 : 1;
            }
    
            // Not directly comparable, sort on existence of method
            return a.compareDocumentPosition ? -1 : 1;
        } :
        function( a, b ) {
            var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [ a ],
                bp = [ b ];
    
            // Exit early if the nodes are identical
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
    
            // Parentless nodes are either documents or disconnected
            } else if ( !aup || !bup ) {
                return a === doc ? -1 :
                    b === doc ? 1 :
                    aup ? -1 :
                    bup ? 1 :
                    sortInput ?
                    ( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
                    0;
    
            // If the nodes are siblings, we can do a quick check
            } else if ( aup === bup ) {
                return siblingCheck( a, b );
            }
    
            // Otherwise we need full lists of their ancestors for comparison
            cur = a;
            while ( (cur = cur.parentNode) ) {
                ap.unshift( cur );
            }
            cur = b;
            while ( (cur = cur.parentNode) ) {
                bp.unshift( cur );
            }
    
            // Walk down the tree looking for a discrepancy
            while ( ap[i] === bp[i] ) {
                i++;
            }
    
            return i ?
                // Do a sibling check if the nodes have a common ancestor
                siblingCheck( ap[i], bp[i] ) :
    
                // Otherwise nodes in our document sort first
                ap[i] === preferredDoc ? -1 :
                bp[i] === preferredDoc ? 1 :
                0;
        };
    
        return doc;
    };
    
    Sizzle.matches = function( expr, elements ) {
        return Sizzle( expr, null, null, elements );
    };
    
    Sizzle.matchesSelector = function( elem, expr ) {
        // Set document vars if needed
        if ( ( elem.ownerDocument || elem ) !== document ) {
            setDocument( elem );
        }
    
        // Make sure that attribute selectors are quoted
        expr = expr.replace( rattributeQuotes, "='$1']" );
    
        if ( support.matchesSelector && documentIsHTML &&
            ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
            ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
    
            try {
                var ret = matches.call( elem, expr );
    
                // IE 9's matchesSelector returns false on disconnected nodes
                if ( ret || support.disconnectedMatch ||
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        elem.document && elem.document.nodeType !== 11 ) {
                    return ret;
                }
            } catch(e) {}
        }
    
        return Sizzle( expr, document, null, [elem] ).length > 0;
    };
    
    Sizzle.contains = function( context, elem ) {
        // Set document vars if needed
        if ( ( context.ownerDocument || context ) !== document ) {
            setDocument( context );
        }
        return contains( context, elem );
    };
    
    Sizzle.attr = function( elem, name ) {
        // Set document vars if needed
        if ( ( elem.ownerDocument || elem ) !== document ) {
            setDocument( elem );
        }
    
        var fn = Expr.attrHandle[ name.toLowerCase() ],
            // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
                fn( elem, name, !documentIsHTML ) :
                undefined;
    
        return val === undefined ?
            support.attributes || !documentIsHTML ?
                elem.getAttribute( name ) :
                (val = elem.getAttributeNode(name)) && val.specified ?
                    val.value :
                    null :
            val;
    };
    
    Sizzle.error = function( msg ) {
        throw new Error( "Syntax error, unrecognized expression: " + msg );
    };
    
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    Sizzle.uniqueSort = function( results ) {
        var elem,
            duplicates = [],
            j = 0,
            i = 0;
    
        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice( 0 );
        results.sort( sortOrder );
    
        if ( hasDuplicate ) {
            while ( (elem = results[i++]) ) {
                if ( elem === results[ i ] ) {
                    j = duplicates.push( i );
                }
            }
            while ( j-- ) {
                results.splice( duplicates[ j ], 1 );
            }
        }
    
        return results;
    };
    
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */
    getText = Sizzle.getText = function( elem ) {
        var node,
            ret = "",
            i = 0,
            nodeType = elem.nodeType;
    
        if ( !nodeType ) {
            // If no nodeType, this is expected to be an array
            for ( ; (node = elem[i]); i++ ) {
                // Do not traverse comment nodes
                ret += getText( node );
            }
        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (see #11153)
            if ( typeof elem.textContent === "string" ) {
                return elem.textContent;
            } else {
                // Traverse its children
                for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                    ret += getText( elem );
                }
            }
        } else if ( nodeType === 3 || nodeType === 4 ) {
            return elem.nodeValue;
        }
        // Do not include comment or processing instruction nodes
    
        return ret;
    };
    
    Expr = Sizzle.selectors = {
    
        // Can be adjusted by the user
        cacheLength: 50,
    
        createPseudo: markFunction,
    
        match: matchExpr,
    
        attrHandle: {},
    
        find: {},
    
        relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
        },
    
        preFilter: {
            "ATTR": function( match ) {
                match[1] = match[1].replace( runescape, funescape );
    
                // Move the given value to match[3] whether quoted or unquoted
                match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );
    
                if ( match[2] === "~=" ) {
                    match[3] = " " + match[3] + " ";
                }
    
                return match.slice( 0, 4 );
            },
    
            "CHILD": function( match ) {
                /* matches from matchExpr["CHILD"]
                    1 type (only|nth|...)
                    2 what (child|of-type)
                    3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                    4 xn-component of xn+y argument ([+-]?\d*n|)
                    5 sign of xn-component
                    6 x of xn-component
                    7 sign of y-component
                    8 y of y-component
                */
                match[1] = match[1].toLowerCase();
    
                if ( match[1].slice( 0, 3 ) === "nth" ) {
                    // nth-* requires argument
                    if ( !match[3] ) {
                        Sizzle.error( match[0] );
                    }
    
                    // numeric x and y parameters for Expr.filter.CHILD
                    // remember that false/true cast respectively to 0/1
                    match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                    match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
    
                // other types prohibit arguments
                } else if ( match[3] ) {
                    Sizzle.error( match[0] );
                }
    
                return match;
            },
    
            "PSEUDO": function( match ) {
                var excess,
                    unquoted = !match[5] && match[2];
    
                if ( matchExpr["CHILD"].test( match[0] ) ) {
                    return null;
                }
    
                // Accept quoted arguments as-is
                if ( match[3] && match[4] !== undefined ) {
                    match[2] = match[4];
    
                // Strip excess characters from unquoted arguments
                } else if ( unquoted && rpseudo.test( unquoted ) &&
                    // Get excess from tokenize (recursively)
                    (excess = tokenize( unquoted, true )) &&
                    // advance to the next closing parenthesis
                    (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
    
                    // excess is a negative index
                    match[0] = match[0].slice( 0, excess );
                    match[2] = unquoted.slice( 0, excess );
                }
    
                // Return only captures needed by the pseudo filter method (type and argument)
                return match.slice( 0, 3 );
            }
        },
    
        filter: {
    
            "TAG": function( nodeNameSelector ) {
                var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
                return nodeNameSelector === "*" ?
                    function() { return true; } :
                    function( elem ) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
            },
    
            "CLASS": function( className ) {
                var pattern = classCache[ className + " " ];
    
                return pattern ||
                    (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                    classCache( className, function( elem ) {
                        return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
                    });
            },
    
            "ATTR": function( name, operator, check ) {
                return function( elem ) {
                    var result = Sizzle.attr( elem, name );
    
                    if ( result == null ) {
                        return operator === "!=";
                    }
                    if ( !operator ) {
                        return true;
                    }
    
                    result += "";
    
                    return operator === "=" ? result === check :
                        operator === "!=" ? result !== check :
                        operator === "^=" ? check && result.indexOf( check ) === 0 :
                        operator === "*=" ? check && result.indexOf( check ) > -1 :
                        operator === "$=" ? check && result.slice( -check.length ) === check :
                        operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
                        operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                        false;
                };
            },
    
            "CHILD": function( type, what, argument, first, last ) {
                var simple = type.slice( 0, 3 ) !== "nth",
                    forward = type.slice( -4 ) !== "last",
                    ofType = what === "of-type";
    
                return first === 1 && last === 0 ?
    
                    // Shortcut for :nth-*(n)
                    function( elem ) {
                        return !!elem.parentNode;
                    } :
    
                    function( elem, context, xml ) {
                        var cache, outerCache, node, diff, nodeIndex, start,
                            dir = simple !== forward ? "nextSibling" : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType;
    
                        if ( parent ) {
    
                            // :(first|last|only)-(child|of-type)
                            if ( simple ) {
                                while ( dir ) {
                                    node = elem;
                                    while ( (node = node[ dir ]) ) {
                                        if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                                            return false;
                                        }
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
    
                            start = [ forward ? parent.firstChild : parent.lastChild ];
    
                            // non-xml :nth-child(...) stores cache data on `parent`
                            if ( forward && useCache ) {
                                // Seek `elem` from a previously-cached index
                                outerCache = parent[ expando ] || (parent[ expando ] = {});
                                cache = outerCache[ type ] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[ nodeIndex ];
    
                                while ( (node = ++nodeIndex && node && node[ dir ] ||
    
                                    // Fallback to seeking `elem` from the start
                                    (diff = nodeIndex = 0) || start.pop()) ) {
    
                                    // When found, cache indexes on `parent` and break
                                    if ( node.nodeType === 1 && ++diff && node === elem ) {
                                        outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
    
                            // Use previously-cached element index if available
                            } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                                diff = cache[1];
    
                            // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                            } else {
                                // Use the same loop as above to seek `elem` from the start
                                while ( (node = ++nodeIndex && node && node[ dir ] ||
                                    (diff = nodeIndex = 0) || start.pop()) ) {
    
                                    if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                                        // Cache the index of each encountered element
                                        if ( useCache ) {
                                            (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                                        }
    
                                        if ( node === elem ) {
                                            break;
                                        }
                                    }
                                }
                            }
    
                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || ( diff % first === 0 && diff / first >= 0 );
                        }
                    };
            },
    
            "PSEUDO": function( pseudo, argument ) {
                // pseudo-class names are case-insensitive
                // http://www.w3.org/TR/selectors/#pseudo-classes
                // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                // Remember that setFilters inherits from pseudos
                var args,
                    fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                        Sizzle.error( "unsupported pseudo: " + pseudo );
    
                // The user may use createPseudo to indicate that
                // arguments are needed to create the filter function
                // just as Sizzle does
                if ( fn[ expando ] ) {
                    return fn( argument );
                }
    
                // But maintain support for old signatures
                if ( fn.length > 1 ) {
                    args = [ pseudo, pseudo, "", argument ];
                    return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                        markFunction(function( seed, matches ) {
                            var idx,
                                matched = fn( seed, argument ),
                                i = matched.length;
                            while ( i-- ) {
                                idx = indexOf.call( seed, matched[i] );
                                seed[ idx ] = !( matches[ idx ] = matched[i] );
                            }
                        }) :
                        function( elem ) {
                            return fn( elem, 0, args );
                        };
                }
    
                return fn;
            }
        },
    
        pseudos: {
            // Potentially complex pseudos
            "not": markFunction(function( selector ) {
                // Trim the selector passed to compile
                // to avoid treating leading and trailing
                // spaces as combinators
                var input = [],
                    results = [],
                    matcher = compile( selector.replace( rtrim, "$1" ) );
    
                return matcher[ expando ] ?
                    markFunction(function( seed, matches, context, xml ) {
                        var elem,
                            unmatched = matcher( seed, null, xml, [] ),
                            i = seed.length;
    
                        // Match elements unmatched by `matcher`
                        while ( i-- ) {
                            if ( (elem = unmatched[i]) ) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) :
                    function( elem, context, xml ) {
                        input[0] = elem;
                        matcher( input, null, xml, results );
                        return !results.pop();
                    };
            }),
    
            "has": markFunction(function( selector ) {
                return function( elem ) {
                    return Sizzle( selector, elem ).length > 0;
                };
            }),
    
            "contains": markFunction(function( text ) {
                return function( elem ) {
                    return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
                };
            }),
    
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            "lang": markFunction( function( lang ) {
                // lang value must be a valid identifier
                if ( !ridentifier.test(lang || "") ) {
                    Sizzle.error( "unsupported lang: " + lang );
                }
                lang = lang.replace( runescape, funescape ).toLowerCase();
                return function( elem ) {
                    var elemLang;
                    do {
                        if ( (elemLang = documentIsHTML ?
                            elem.lang :
                            elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
    
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                        }
                    } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                    return false;
                };
            }),
    
            // Miscellaneous
            "target": function( elem ) {
                var hash = window.location && window.location.hash;
                return hash && hash.slice( 1 ) === elem.id;
            },
    
            "root": function( elem ) {
                return elem === docElem;
            },
    
            "focus": function( elem ) {
                return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
    
            // Boolean properties
            "enabled": function( elem ) {
                return elem.disabled === false;
            },
    
            "disabled": function( elem ) {
                return elem.disabled === true;
            },
    
            "checked": function( elem ) {
                // In CSS3, :checked should return both checked and selected elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                var nodeName = elem.nodeName.toLowerCase();
                return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
            },
    
            "selected": function( elem ) {
                // Accessing this property makes selected-by-default
                // options in Safari work properly
                if ( elem.parentNode ) {
                    elem.parentNode.selectedIndex;
                }
    
                return elem.selected === true;
            },
    
            // Contents
            "empty": function( elem ) {
                // http://www.w3.org/TR/selectors/#empty-pseudo
                // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                //   not comment, processing instructions, or others
                // Thanks to Diego Perini for the nodeName shortcut
                //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                    if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
                        return false;
                    }
                }
                return true;
            },
    
            "parent": function( elem ) {
                return !Expr.pseudos["empty"]( elem );
            },
    
            // Element/input types
            "header": function( elem ) {
                return rheader.test( elem.nodeName );
            },
    
            "input": function( elem ) {
                return rinputs.test( elem.nodeName );
            },
    
            "button": function( elem ) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === "button" || name === "button";
            },
    
            "text": function( elem ) {
                var attr;
                // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                // use getAttribute instead to test this case
                return elem.nodeName.toLowerCase() === "input" &&
                    elem.type === "text" &&
                    ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
            },
    
            // Position-in-collection
            "first": createPositionalPseudo(function() {
                return [ 0 ];
            }),
    
            "last": createPositionalPseudo(function( matchIndexes, length ) {
                return [ length - 1 ];
            }),
    
            "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
                return [ argument < 0 ? argument + length : argument ];
            }),
    
            "even": createPositionalPseudo(function( matchIndexes, length ) {
                var i = 0;
                for ( ; i < length; i += 2 ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            }),
    
            "odd": createPositionalPseudo(function( matchIndexes, length ) {
                var i = 1;
                for ( ; i < length; i += 2 ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            }),
    
            "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                var i = argument < 0 ? argument + length : argument;
                for ( ; --i >= 0; ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            }),
    
            "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                var i = argument < 0 ? argument + length : argument;
                for ( ; ++i < length; ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            })
        }
    };
    
    Expr.pseudos["nth"] = Expr.pseudos["eq"];
    
    // Add button/input type pseudos
    for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
        Expr.pseudos[ i ] = createInputPseudo( i );
    }
    for ( i in { submit: true, reset: true } ) {
        Expr.pseudos[ i ] = createButtonPseudo( i );
    }
    
    // Easy API for creating new setFilters
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    
    function tokenize( selector, parseOnly ) {
        var matched, match, tokens, type,
            soFar, groups, preFilters,
            cached = tokenCache[ selector + " " ];
    
        if ( cached ) {
            return parseOnly ? 0 : cached.slice( 0 );
        }
    
        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;
    
        while ( soFar ) {
    
            // Comma and first run
            if ( !matched || (match = rcomma.exec( soFar )) ) {
                if ( match ) {
                    // Don't consume trailing commas as valid
                    soFar = soFar.slice( match[0].length ) || soFar;
                }
                groups.push( tokens = [] );
            }
    
            matched = false;
    
            // Combinators
            if ( (match = rcombinators.exec( soFar )) ) {
                matched = match.shift();
                tokens.push({
                    value: matched,
                    // Cast descendant combinators to space
                    type: match[0].replace( rtrim, " " )
                });
                soFar = soFar.slice( matched.length );
            }
    
            // Filters
            for ( type in Expr.filter ) {
                if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                    (match = preFilters[ type ]( match ))) ) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice( matched.length );
                }
            }
    
            if ( !matched ) {
                break;
            }
        }
    
        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly ?
            soFar.length :
            soFar ?
                Sizzle.error( selector ) :
                // Cache the tokens
                tokenCache( selector, groups ).slice( 0 );
    }
    
    function toSelector( tokens ) {
        var i = 0,
            len = tokens.length,
            selector = "";
        for ( ; i < len; i++ ) {
            selector += tokens[i].value;
        }
        return selector;
    }
    
    function addCombinator( matcher, combinator, base ) {
        var dir = combinator.dir,
            checkNonElements = base && dir === "parentNode",
            doneName = done++;
    
        return combinator.first ?
            // Check against closest ancestor/preceding element
            function( elem, context, xml ) {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        return matcher( elem, context, xml );
                    }
                }
            } :
    
            // Check against all ancestor/preceding elements
            function( elem, context, xml ) {
                var data, cache, outerCache,
                    dirkey = dirruns + " " + doneName;
    
                // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                if ( xml ) {
                    while ( (elem = elem[ dir ]) ) {
                        if ( elem.nodeType === 1 || checkNonElements ) {
                            if ( matcher( elem, context, xml ) ) {
                                return true;
                            }
                        }
                    }
                } else {
                    while ( (elem = elem[ dir ]) ) {
                        if ( elem.nodeType === 1 || checkNonElements ) {
                            outerCache = elem[ expando ] || (elem[ expando ] = {});
                            if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
                                if ( (data = cache[1]) === true || data === cachedruns ) {
                                    return data === true;
                                }
                            } else {
                                cache = outerCache[ dir ] = [ dirkey ];
                                cache[1] = matcher( elem, context, xml ) || cachedruns;
                                if ( cache[1] === true ) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
    }
    
    function elementMatcher( matchers ) {
        return matchers.length > 1 ?
            function( elem, context, xml ) {
                var i = matchers.length;
                while ( i-- ) {
                    if ( !matchers[i]( elem, context, xml ) ) {
                        return false;
                    }
                }
                return true;
            } :
            matchers[0];
    }
    
    function condense( unmatched, map, filter, context, xml ) {
        var elem,
            newUnmatched = [],
            i = 0,
            len = unmatched.length,
            mapped = map != null;
    
        for ( ; i < len; i++ ) {
            if ( (elem = unmatched[i]) ) {
                if ( !filter || filter( elem, context, xml ) ) {
                    newUnmatched.push( elem );
                    if ( mapped ) {
                        map.push( i );
                    }
                }
            }
        }
    
        return newUnmatched;
    }
    
    function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
        if ( postFilter && !postFilter[ expando ] ) {
            postFilter = setMatcher( postFilter );
        }
        if ( postFinder && !postFinder[ expando ] ) {
            postFinder = setMatcher( postFinder, postSelector );
        }
        return markFunction(function( seed, results, context, xml ) {
            var temp, i, elem,
                preMap = [],
                postMap = [],
                preexisting = results.length,
    
                // Get initial elements from seed or context
                elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
    
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && ( seed || !selector ) ?
                    condense( elems, preMap, preFilter, context, xml ) :
                    elems,
    
                matcherOut = matcher ?
                    // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                    postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
    
                        // ...intermediate processing is necessary
                        [] :
    
                        // ...otherwise use results directly
                        results :
                    matcherIn;
    
            // Find primary matches
            if ( matcher ) {
                matcher( matcherIn, matcherOut, context, xml );
            }
    
            // Apply postFilter
            if ( postFilter ) {
                temp = condense( matcherOut, postMap );
                postFilter( temp, [], context, xml );
    
                // Un-match failing elements by moving them back to matcherIn
                i = temp.length;
                while ( i-- ) {
                    if ( (elem = temp[i]) ) {
                        matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                    }
                }
            }
    
            if ( seed ) {
                if ( postFinder || preFilter ) {
                    if ( postFinder ) {
                        // Get the final matcherOut by condensing this intermediate into postFinder contexts
                        temp = [];
                        i = matcherOut.length;
                        while ( i-- ) {
                            if ( (elem = matcherOut[i]) ) {
                                // Restore matcherIn since elem is not yet a final match
                                temp.push( (matcherIn[i] = elem) );
                            }
                        }
                        postFinder( null, (matcherOut = []), temp, xml );
                    }
    
                    // Move matched elements from seed to results to keep them synchronized
                    i = matcherOut.length;
                    while ( i-- ) {
                        if ( (elem = matcherOut[i]) &&
                            (temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {
    
                            seed[temp] = !(results[temp] = elem);
                        }
                    }
                }
    
            // Add elements to results, through postFinder if defined
            } else {
                matcherOut = condense(
                    matcherOut === results ?
                        matcherOut.splice( preexisting, matcherOut.length ) :
                        matcherOut
                );
                if ( postFinder ) {
                    postFinder( null, results, matcherOut, xml );
                } else {
                    push.apply( results, matcherOut );
                }
            }
        });
    }
    
    function matcherFromTokens( tokens ) {
        var checkContext, matcher, j,
            len = tokens.length,
            leadingRelative = Expr.relative[ tokens[0].type ],
            implicitRelative = leadingRelative || Expr.relative[" "],
            i = leadingRelative ? 1 : 0,
    
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator( function( elem ) {
                return elem === checkContext;
            }, implicitRelative, true ),
            matchAnyContext = addCombinator( function( elem ) {
                return indexOf.call( checkContext, elem ) > -1;
            }, implicitRelative, true ),
            matchers = [ function( elem, context, xml ) {
                return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                    (checkContext = context).nodeType ?
                        matchContext( elem, context, xml ) :
                        matchAnyContext( elem, context, xml ) );
            } ];
    
        for ( ; i < len; i++ ) {
            if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
                matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
            } else {
                matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
    
                // Return special upon seeing a positional matcher
                if ( matcher[ expando ] ) {
                    // Find the next relative operator (if any) for proper handling
                    j = ++i;
                    for ( ; j < len; j++ ) {
                        if ( Expr.relative[ tokens[j].type ] ) {
                            break;
                        }
                    }
                    return setMatcher(
                        i > 1 && elementMatcher( matchers ),
                        i > 1 && toSelector(
                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                            tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
                        ).replace( rtrim, "$1" ),
                        matcher,
                        i < j && matcherFromTokens( tokens.slice( i, j ) ),
                        j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                        j < len && toSelector( tokens )
                    );
                }
                matchers.push( matcher );
            }
        }
    
        return elementMatcher( matchers );
    }
    
    function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
        // A counter to specify which element is currently being matched
        var matcherCachedRuns = 0,
            bySet = setMatchers.length > 0,
            byElement = elementMatchers.length > 0,
            superMatcher = function( seed, context, xml, results, expandContext ) {
                var elem, j, matcher,
                    setMatched = [],
                    matchedCount = 0,
                    i = "0",
                    unmatched = seed && [],
                    outermost = expandContext != null,
                    contextBackup = outermostContext,
                    // We must always have either seed elements or context
                    elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
                    // Use integer dirruns iff this is the outermost matcher
                    dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);
    
                if ( outermost ) {
                    outermostContext = context !== document && context;
                    cachedruns = matcherCachedRuns;
                }
    
                // Add elements passing elementMatchers directly to results
                // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
                for ( ; (elem = elems[i]) != null; i++ ) {
                    if ( byElement && elem ) {
                        j = 0;
                        while ( (matcher = elementMatchers[j++]) ) {
                            if ( matcher( elem, context, xml ) ) {
                                results.push( elem );
                                break;
                            }
                        }
                        if ( outermost ) {
                            dirruns = dirrunsUnique;
                            cachedruns = ++matcherCachedRuns;
                        }
                    }
    
                    // Track unmatched elements for set filters
                    if ( bySet ) {
                        // They will have gone through all possible matchers
                        if ( (elem = !matcher && elem) ) {
                            matchedCount--;
                        }
    
                        // Lengthen the array for every element, matched or not
                        if ( seed ) {
                            unmatched.push( elem );
                        }
                    }
                }
    
                // Apply set filters to unmatched elements
                matchedCount += i;
                if ( bySet && i !== matchedCount ) {
                    j = 0;
                    while ( (matcher = setMatchers[j++]) ) {
                        matcher( unmatched, setMatched, context, xml );
                    }
    
                    if ( seed ) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if ( matchedCount > 0 ) {
                            while ( i-- ) {
                                if ( !(unmatched[i] || setMatched[i]) ) {
                                    setMatched[i] = pop.call( results );
                                }
                            }
                        }
    
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense( setMatched );
                    }
    
                    // Add matches to results
                    push.apply( results, setMatched );
    
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if ( outermost && !seed && setMatched.length > 0 &&
                        ( matchedCount + setMatchers.length ) > 1 ) {
    
                        Sizzle.uniqueSort( results );
                    }
                }
    
                // Override manipulation of globals by nested matchers
                if ( outermost ) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
    
                return unmatched;
            };
    
        return bySet ?
            markFunction( superMatcher ) :
            superMatcher;
    }
    
    compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
        var i,
            setMatchers = [],
            elementMatchers = [],
            cached = compilerCache[ selector + " " ];
    
        if ( !cached ) {
            // Generate a function of recursive functions that can be used to check each element
            if ( !group ) {
                group = tokenize( selector );
            }
            i = group.length;
            while ( i-- ) {
                cached = matcherFromTokens( group[i] );
                if ( cached[ expando ] ) {
                    setMatchers.push( cached );
                } else {
                    elementMatchers.push( cached );
                }
            }
    
            // Cache the compiled function
            cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
        }
        return cached;
    };
    
    function multipleContexts( selector, contexts, results ) {
        var i = 0,
            len = contexts.length;
        for ( ; i < len; i++ ) {
            Sizzle( selector, contexts[i], results );
        }
        return results;
    }
    
    function select( selector, context, results, seed ) {
        var i, tokens, token, type, find,
            match = tokenize( selector );
    
        if ( !seed ) {
            // Try to minimize operations if there is only one group
            if ( match.length === 1 ) {
    
                // Take a shortcut and set the context if the root selector is an ID
                tokens = match[0] = match[0].slice( 0 );
                if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        support.getById && context.nodeType === 9 && documentIsHTML &&
                        Expr.relative[ tokens[1].type ] ) {
    
                    context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
                    if ( !context ) {
                        return results;
                    }
                    selector = selector.slice( tokens.shift().value.length );
                }
    
                // Fetch a seed set for right-to-left matching
                i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
                while ( i-- ) {
                    token = tokens[i];
    
                    // Abort if we hit a combinator
                    if ( Expr.relative[ (type = token.type) ] ) {
                        break;
                    }
                    if ( (find = Expr.find[ type ]) ) {
                        // Search, expanding context for leading sibling combinators
                        if ( (seed = find(
                            token.matches[0].replace( runescape, funescape ),
                            rsibling.test( tokens[0].type ) && context.parentNode || context
                        )) ) {
    
                            // If seed is empty or no tokens remain, we can return early
                            tokens.splice( i, 1 );
                            selector = seed.length && toSelector( tokens );
                            if ( !selector ) {
                                push.apply( results, seed );
                                return results;
                            }
    
                            break;
                        }
                    }
                }
            }
        }
    
        // Compile and execute a filtering function
        // Provide `match` to avoid retokenization if we modified the selector above
        compile( selector, match )(
            seed,
            context,
            !documentIsHTML,
            results,
            rsibling.test( selector )
        );
        return results;
    }
    
    // One-time assignments
    
    // Sort stability
    support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
    
    // Support: Chrome<14
    // Always assume duplicates if they aren't passed to the comparison function
    support.detectDuplicates = hasDuplicate;
    
    // Initialize against the default document
    setDocument();
    
    // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function( div1 ) {
        // Should return 1, but returns 4 (following)
        return div1.compareDocumentPosition( document.createElement("div") ) & 1;
    });
    
    // Support: IE<8
    // Prevent attribute/property "interpolation"
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if ( !assert(function( div ) {
        div.innerHTML = "<a href='#'></a>";
        return div.firstChild.getAttribute("href") === "#" ;
    }) ) {
        addHandle( "type|href|height|width", function( elem, name, isXML ) {
            if ( !isXML ) {
                return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
            }
        });
    }
    
    // Support: IE<9
    // Use defaultValue in place of getAttribute("value")
    if ( !support.attributes || !assert(function( div ) {
        div.innerHTML = "<input/>";
        div.firstChild.setAttribute( "value", "" );
        return div.firstChild.getAttribute( "value" ) === "";
    }) ) {
        addHandle( "value", function( elem, name, isXML ) {
            if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
                return elem.defaultValue;
            }
        });
    }
    
    // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies
    if ( !assert(function( div ) {
        return div.getAttribute("disabled") == null;
    }) ) {
        addHandle( booleans, function( elem, name, isXML ) {
            var val;
            if ( !isXML ) {
                return (val = elem.getAttributeNode( name )) && val.specified ?
                    val.value :
                    elem[ name ] === true ? name.toLowerCase() : null;
            }
        });
    }
    
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    
    
    })( window );
    // String to Object options format cache
    var optionsCache = {};
    
    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions( options ) {
        var object = optionsCache[ options ] = {};
        jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
            object[ flag ] = true;
        });
        return object;
    }
    
    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function( options ) {
    
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            ( optionsCache[ options ] || createOptions( options ) ) :
            jQuery.extend( {}, options );
    
        var // Flag to know if list is currently firing
            firing,
            // Last fire value (for non-forgettable lists)
            memory,
            // Flag to know if list was already fired
            fired,
            // End of the loop when firing
            firingLength,
            // Index of currently firing callback (modified by remove if needed)
            firingIndex,
            // First callback to fire (used internally by add and fireWith)
            firingStart,
            // Actual callback list
            list = [],
            // Stack of fire calls for repeatable lists
            stack = !options.once && [],
            // Fire callbacks
            fire = function( data ) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                    if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                        memory = false; // To prevent further calls using add
                        break;
                    }
                }
                firing = false;
                if ( list ) {
                    if ( stack ) {
                        if ( stack.length ) {
                            fire( stack.shift() );
                        }
                    } else if ( memory ) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            },
            // Actual Callbacks object
            self = {
                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if ( list ) {
                        // First, we save the current length
                        var start = list.length;
                        (function add( args ) {
                            jQuery.each( args, function( _, arg ) {
                                var type = jQuery.type( arg );
                                if ( type === "function" ) {
                                    if ( !options.unique || !self.has( arg ) ) {
                                        list.push( arg );
                                    }
                                } else if ( arg && arg.length && type !== "string" ) {
                                    // Inspect recursively
                                    add( arg );
                                }
                            });
                        })( arguments );
                        // Do we need to add the callbacks to the
                        // current firing batch?
                        if ( firing ) {
                            firingLength = list.length;
                        // With memory, if we're not firing then
                        // we should call right away
                        } else if ( memory ) {
                            firingStart = start;
                            fire( memory );
                        }
                    }
                    return this;
                },
                // Remove a callback from the list
                remove: function() {
                    if ( list ) {
                        jQuery.each( arguments, function( _, arg ) {
                            var index;
                            while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                                list.splice( index, 1 );
                                // Handle firing indexes
                                if ( firing ) {
                                    if ( index <= firingLength ) {
                                        firingLength--;
                                    }
                                    if ( index <= firingIndex ) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function( fn ) {
                    return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
                },
                // Remove all callbacks from the list
                empty: function() {
                    list = [];
                    firingLength = 0;
                    return this;
                },
                // Have the list do nothing anymore
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                // Is it disabled?
                disabled: function() {
                    return !list;
                },
                // Lock the list in its current state
                lock: function() {
                    stack = undefined;
                    if ( !memory ) {
                        self.disable();
                    }
                    return this;
                },
                // Is it locked?
                locked: function() {
                    return !stack;
                },
                // Call all callbacks with the given context and arguments
                fireWith: function( context, args ) {
                    if ( list && ( !fired || stack ) ) {
                        args = args || [];
                        args = [ context, args.slice ? args.slice() : args ];
                        if ( firing ) {
                            stack.push( args );
                        } else {
                            fire( args );
                        }
                    }
                    return this;
                },
                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith( this, arguments );
                    return this;
                },
                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };
    
        return self;
    };
    jQuery.extend({
    
        Deferred: function( func ) {
            var tuples = [
                    // action, add listener, listener list, final state
                    [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                    [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                    [ "notify", "progress", jQuery.Callbacks("memory") ]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done( arguments ).fail( arguments );
                        return this;
                    },
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        return jQuery.Deferred(function( newDefer ) {
                            jQuery.each( tuples, function( i, tuple ) {
                                var action = tuple[ 0 ],
                                    fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                deferred[ tuple[1] ](function() {
                                    var returned = fn && fn.apply( this, arguments );
                                    if ( returned && jQuery.isFunction( returned.promise ) ) {
                                        returned.promise()
                                            .done( newDefer.resolve )
                                            .fail( newDefer.reject )
                                            .progress( newDefer.notify );
                                    } else {
                                        newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function( obj ) {
                        return obj != null ? jQuery.extend( obj, promise ) : promise;
                    }
                },
                deferred = {};
    
            // Keep pipe for back-compat
            promise.pipe = promise.then;
    
            // Add list-specific methods
            jQuery.each( tuples, function( i, tuple ) {
                var list = tuple[ 2 ],
                    stateString = tuple[ 3 ];
    
                // promise[ done | fail | progress ] = list.add
                promise[ tuple[1] ] = list.add;
    
                // Handle state
                if ( stateString ) {
                    list.add(function() {
                        // state = [ resolved | rejected ]
                        state = stateString;
    
                    // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
                }
    
                // deferred[ resolve | reject | notify ]
                deferred[ tuple[0] ] = function() {
                    deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
                    return this;
                };
                deferred[ tuple[0] + "With" ] = list.fireWith;
            });
    
            // Make the deferred a promise
            promise.promise( deferred );
    
            // Call given func if any
            if ( func ) {
                func.call( deferred, deferred );
            }
    
            // All done!
            return deferred;
        },
    
        // Deferred helper
        when: function( subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                resolveValues = core_slice.call( arguments ),
                length = resolveValues.length,
    
                // the count of uncompleted subordinates
                remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
    
                // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
    
                // Update function for both resolve and progress values
                updateFunc = function( i, contexts, values ) {
                    return function( value ) {
                        contexts[ i ] = this;
                        values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
                        if( values === progressValues ) {
                            deferred.notifyWith( contexts, values );
                        } else if ( !( --remaining ) ) {
                            deferred.resolveWith( contexts, values );
                        }
                    };
                },
    
                progressValues, progressContexts, resolveContexts;
    
            // add listeners to Deferred subordinates; treat others as resolved
            if ( length > 1 ) {
                progressValues = new Array( length );
                progressContexts = new Array( length );
                resolveContexts = new Array( length );
                for ( ; i < length; i++ ) {
                    if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                        resolveValues[ i ].promise()
                            .done( updateFunc( i, resolveContexts, resolveValues ) )
                            .fail( deferred.reject )
                            .progress( updateFunc( i, progressContexts, progressValues ) );
                    } else {
                        --remaining;
                    }
                }
            }
    
            // if we're not waiting on anything, resolve the master
            if ( !remaining ) {
                deferred.resolveWith( resolveContexts, resolveValues );
            }
    
            return deferred.promise();
        }
    });
    jQuery.support = (function( support ) {
    
        var all, a, input, select, fragment, opt, eventName, isSupported, i,
            div = document.createElement("div");
    
        // Setup
        div.setAttribute( "className", "t" );
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    
        // Finish early in limited (non-browser) environments
        all = div.getElementsByTagName("*") || [];
        a = div.getElementsByTagName("a")[ 0 ];
        if ( !a || !a.style || !all.length ) {
            return support;
        }
    
        // First batch of tests
        select = document.createElement("select");
        opt = select.appendChild( document.createElement("option") );
        input = div.getElementsByTagName("input")[ 0 ];
    
        a.style.cssText = "top:1px;float:left;opacity:.5";
    
        // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
        support.getSetAttribute = div.className !== "t";
    
        // IE strips leading whitespace when .innerHTML is used
        support.leadingWhitespace = div.firstChild.nodeType === 3;
    
        // Make sure that tbody elements aren't automatically inserted
        // IE will insert them into empty tables
        support.tbody = !div.getElementsByTagName("tbody").length;
    
        // Make sure that link elements get serialized correctly by innerHTML
        // This requires a wrapper element in IE
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
    
        // Get the style information from getAttribute
        // (IE uses .cssText instead)
        support.style = /top/.test( a.getAttribute("style") );
    
        // Make sure that URLs aren't manipulated
        // (IE normalizes it by default)
        support.hrefNormalized = a.getAttribute("href") === "/a";
    
        // Make sure that element opacity exists
        // (IE uses filter instead)
        // Use a regex to work around a WebKit issue. See #5145
        support.opacity = /^0.5/.test( a.style.opacity );
    
        // Verify style float existence
        // (IE uses styleFloat instead of cssFloat)
        support.cssFloat = !!a.style.cssFloat;
    
        // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
        support.checkOn = !!input.value;
    
        // Make sure that a selected-by-default option has a working selected property.
        // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
        support.optSelected = opt.selected;
    
        // Tests for enctype support on a form (#6743)
        support.enctype = !!document.createElement("form").enctype;
    
        // Makes sure cloning an html5 element does not cause problems
        // Where outerHTML is undefined, this still works
        support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";
    
        // Will be defined later
        support.inlineBlockNeedsLayout = false;
        support.shrinkWrapBlocks = false;
        support.pixelPosition = false;
        support.deleteExpando = true;
        support.noCloneEvent = true;
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
    
        // Make sure checked status is properly cloned
        input.checked = true;
        support.noCloneChecked = input.cloneNode( true ).checked;
    
        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;
    
        // Support: IE<9
        try {
            delete div.test;
        } catch( e ) {
            support.deleteExpando = false;
        }
    
        // Check if we can trust getAttribute("value")
        input = document.createElement("input");
        input.setAttribute( "value", "" );
        support.input = input.getAttribute( "value" ) === "";
    
        // Check if an input maintains its value after becoming a radio
        input.value = "t";
        input.setAttribute( "type", "radio" );
        support.radioValue = input.value === "t";
    
        // #11217 - WebKit loses check when the name is after the checked attribute
        input.setAttribute( "checked", "t" );
        input.setAttribute( "name", "t" );
    
        fragment = document.createDocumentFragment();
        fragment.appendChild( input );
    
        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        support.appendChecked = input.checked;
    
        // WebKit doesn't clone checked state correctly in fragments
        support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;
    
        // Support: IE<9
        // Opera does not clone events (and typeof div.attachEvent === undefined).
        // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
        if ( div.attachEvent ) {
            div.attachEvent( "onclick", function() {
                support.noCloneEvent = false;
            });
    
            div.cloneNode( true ).click();
        }
    
        // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
        // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
        for ( i in { submit: true, change: true, focusin: true }) {
            div.setAttribute( eventName = "on" + i, "t" );
    
            support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
        }
    
        div.style.backgroundClip = "content-box";
        div.cloneNode( true ).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
    
        // Support: IE<9
        // Iteration over object's inherited properties before its own.
        for ( i in jQuery( support ) ) {
            break;
        }
        support.ownLast = i !== "0";
    
        // Run tests that need a body at doc ready
        jQuery(function() {
            var container, marginDiv, tds,
                divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
                body = document.getElementsByTagName("body")[0];
    
            if ( !body ) {
                // Return for frameset docs that don't have a body
                return;
            }
    
            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
    
            body.appendChild( container ).appendChild( div );
    
            // Support: IE8
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = ( tds[ 0 ].offsetHeight === 0 );
    
            tds[ 0 ].style.display = "";
            tds[ 1 ].style.display = "none";
    
            // Support: IE8
            // Check if empty table cells still have offsetWidth/Height
            support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );
    
            // Check box-sizing and margin behavior.
            div.innerHTML = "";
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
    
            // Workaround failing boxSizing test due to offsetWidth returning wrong value
            // with some non-1 values of body zoom, ticket #13543
            jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
                support.boxSizing = div.offsetWidth === 4;
            });
    
            // Use window.getComputedStyle because jsdom on node.js will break without it.
            if ( window.getComputedStyle ) {
                support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
                support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";
    
                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // Fails in WebKit before Feb 2011 nightlies
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                marginDiv = div.appendChild( document.createElement("div") );
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
    
                support.reliableMarginRight =
                    !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
            }
    
            if ( typeof div.style.zoom !== core_strundefined ) {
                // Support: IE<8
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                div.innerHTML = "";
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );
    
                // Support: IE6
                // Check if elements with layout shrink-wrap their children
                div.style.display = "block";
                div.innerHTML = "<div></div>";
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
    
                if ( support.inlineBlockNeedsLayout ) {
                    // Prevent IE 6 from affecting layout for positioned elements #11048
                    // Prevent IE from shrinking the body in IE 7 mode #12869
                    // Support: IE<8
                    body.style.zoom = 1;
                }
            }
    
            body.removeChild( container );
    
            // Null elements to avoid leaks in IE
            container = div = tds = marginDiv = null;
        });
    
        // Null elements to avoid leaks in IE
        all = select = fragment = opt = a = input = null;
    
        return support;
    })({});
    
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        rmultiDash = /([A-Z])/g;
    
    function internalData( elem, name, data, pvt /* Internal Use Only */ ){
        if ( !jQuery.acceptData( elem ) ) {
            return;
        }
    
        var ret, thisCache,
            internalKey = jQuery.expando,
    
            // We have to handle DOM nodes and JS objects differently because IE6-7
            // can't GC object references properly across the DOM-JS boundary
            isNode = elem.nodeType,
    
            // Only DOM nodes need the global jQuery cache; JS object data is
            // attached directly to the object so GC can occur automatically
            cache = isNode ? jQuery.cache : elem,
    
            // Only defining an ID for JS objects if its cache already exists allows
            // the code to shortcut on the same path as a DOM node with no cache
            id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;
    
        // Avoid doing any more work than we need to when trying to get data on an
        // object that has no data at all
        if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
            return;
        }
    
        if ( !id ) {
            // Only DOM nodes need a new unique ID for each element since their data
            // ends up in the global cache
            if ( isNode ) {
                id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }
    
        if ( !cache[ id ] ) {
            // Avoid exposing jQuery metadata on plain JS objects when the object
            // is serialized using JSON.stringify
            cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
        }
    
        // An object can be passed to jQuery.data instead of a key/value pair; this gets
        // shallow copied over onto the existing cache
        if ( typeof name === "object" || typeof name === "function" ) {
            if ( pvt ) {
                cache[ id ] = jQuery.extend( cache[ id ], name );
            } else {
                cache[ id ].data = jQuery.extend( cache[ id ].data, name );
            }
        }
    
        thisCache = cache[ id ];
    
        // jQuery data() is stored in a separate object inside the object's internal data
        // cache in order to avoid key collisions between internal data and user-defined
        // data.
        if ( !pvt ) {
            if ( !thisCache.data ) {
                thisCache.data = {};
            }
    
            thisCache = thisCache.data;
        }
    
        if ( data !== undefined ) {
            thisCache[ jQuery.camelCase( name ) ] = data;
        }
    
        // Check for both converted-to-camel and non-converted data property names
        // If a data property was specified
        if ( typeof name === "string" ) {
    
            // First Try to find as-is property data
            ret = thisCache[ name ];
    
            // Test for null|undefined property data
            if ( ret == null ) {
    
                // Try to find the camelCased property
                ret = thisCache[ jQuery.camelCase( name ) ];
            }
        } else {
            ret = thisCache;
        }
    
        return ret;
    }
    
    function internalRemoveData( elem, name, pvt ) {
        if ( !jQuery.acceptData( elem ) ) {
            return;
        }
    
        var thisCache, i,
            isNode = elem.nodeType,
    
            // See jQuery.data for more information
            cache = isNode ? jQuery.cache : elem,
            id = isNode ? elem[ jQuery.expando ] : jQuery.expando;
    
        // If there is already no cache entry for this object, there is no
        // purpose in continuing
        if ( !cache[ id ] ) {
            return;
        }
    
        if ( name ) {
    
            thisCache = pvt ? cache[ id ] : cache[ id ].data;
    
            if ( thisCache ) {
    
                // Support array or space separated string names for data keys
                if ( !jQuery.isArray( name ) ) {
    
                    // try the string as a key before any manipulation
                    if ( name in thisCache ) {
                        name = [ name ];
                    } else {
    
                        // split the camel cased version by spaces unless a key with the spaces exists
                        name = jQuery.camelCase( name );
                        if ( name in thisCache ) {
                            name = [ name ];
                        } else {
                            name = name.split(" ");
                        }
                    }
                } else {
                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = name.concat( jQuery.map( name, jQuery.camelCase ) );
                }
    
                i = name.length;
                while ( i-- ) {
                    delete thisCache[ name[i] ];
                }
    
                // If there is no data left in the cache, we want to continue
                // and let the cache object itself get destroyed
                if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
                    return;
                }
            }
        }
    
        // See jQuery.data for more information
        if ( !pvt ) {
            delete cache[ id ].data;
    
            // Don't destroy the parent cache unless the internal data object
            // had been the only thing left in it
            if ( !isEmptyDataObject( cache[ id ] ) ) {
                return;
            }
        }
    
        // Destroy the cache
        if ( isNode ) {
            jQuery.cleanData( [ elem ], true );
    
        // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
        /* jshint eqeqeq: false */
        } else if ( jQuery.support.deleteExpando || cache != cache.window ) {
            /* jshint eqeqeq: true */
            delete cache[ id ];
    
        // When all else fails, null
        } else {
            cache[ id ] = null;
        }
    }
    
    jQuery.extend({
        cache: {},
    
        // The following elements throw uncatchable exceptions if you
        // attempt to add expando properties to them.
        noData: {
            "applet": true,
            "embed": true,
            // Ban all objects except for Flash (which handle expandos)
            "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
    
        hasData: function( elem ) {
            elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
            return !!elem && !isEmptyDataObject( elem );
        },
    
        data: function( elem, name, data ) {
            return internalData( elem, name, data );
        },
    
        removeData: function( elem, name ) {
            return internalRemoveData( elem, name );
        },
    
        // For internal use only.
        _data: function( elem, name, data ) {
            return internalData( elem, name, data, true );
        },
    
        _removeData: function( elem, name ) {
            return internalRemoveData( elem, name, true );
        },
    
        // A method for determining if a DOM node can handle the data expando
        acceptData: function( elem ) {
            // Do not set data on non-element because it will not be cleared (#8335).
            if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
                return false;
            }
    
            var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];
    
            // nodes accept data unless otherwise specified; rejection can be conditional
            return !noData || noData !== true && elem.getAttribute("classid") === noData;
        }
    });
    
    jQuery.fn.extend({
        data: function( key, value ) {
            var attrs, name,
                data = null,
                i = 0,
                elem = this[0];
    
            // Special expections of .data basically thwart jQuery.access,
            // so implement the relevant behavior ourselves
    
            // Gets all values
            if ( key === undefined ) {
                if ( this.length ) {
                    data = jQuery.data( elem );
    
                    if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
                        attrs = elem.attributes;
                        for ( ; i < attrs.length; i++ ) {
                            name = attrs[i].name;
    
                            if ( name.indexOf("data-") === 0 ) {
                                name = jQuery.camelCase( name.slice(5) );
    
                                dataAttr( elem, name, data[ name ] );
                            }
                        }
                        jQuery._data( elem, "parsedAttrs", true );
                    }
                }
    
                return data;
            }
    
            // Sets multiple values
            if ( typeof key === "object" ) {
                return this.each(function() {
                    jQuery.data( this, key );
                });
            }
    
            return arguments.length > 1 ?
    
                // Sets one value
                this.each(function() {
                    jQuery.data( this, key, value );
                }) :
    
                // Gets one value
                // Try to fetch any internally stored data first
                elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
        },
    
        removeData: function( key ) {
            return this.each(function() {
                jQuery.removeData( this, key );
            });
        }
    });
    
    function dataAttr( elem, key, data ) {
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if ( data === undefined && elem.nodeType === 1 ) {
    
            var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
    
            data = elem.getAttribute( name );
    
            if ( typeof data === "string" ) {
                try {
                    data = data === "true" ? true :
                        data === "false" ? false :
                        data === "null" ? null :
                        // Only convert to a number if it doesn't change the string
                        +data + "" === data ? +data :
                        rbrace.test( data ) ? jQuery.parseJSON( data ) :
                            data;
                } catch( e ) {}
    
                // Make sure we set the data so it isn't changed later
                jQuery.data( elem, key, data );
    
            } else {
                data = undefined;
            }
        }
    
        return data;
    }
    
    // checks a cache object for emptiness
    function isEmptyDataObject( obj ) {
        var name;
        for ( name in obj ) {
    
            // if the public data object is empty, the private is still empty
            if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
                continue;
            }
            if ( name !== "toJSON" ) {
                return false;
            }
        }
    
        return true;
    }
    jQuery.extend({
        queue: function( elem, type, data ) {
            var queue;
    
            if ( elem ) {
                type = ( type || "fx" ) + "queue";
                queue = jQuery._data( elem, type );
    
                // Speed up dequeue by getting out quickly if this is just a lookup
                if ( data ) {
                    if ( !queue || jQuery.isArray(data) ) {
                        queue = jQuery._data( elem, type, jQuery.makeArray(data) );
                    } else {
                        queue.push( data );
                    }
                }
                return queue || [];
            }
        },
    
        dequeue: function( elem, type ) {
            type = type || "fx";
    
            var queue = jQuery.queue( elem, type ),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks( elem, type ),
                next = function() {
                    jQuery.dequeue( elem, type );
                };
    
            // If the fx queue is dequeued, always remove the progress sentinel
            if ( fn === "inprogress" ) {
                fn = queue.shift();
                startLength--;
            }
    
            if ( fn ) {
    
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if ( type === "fx" ) {
                    queue.unshift( "inprogress" );
                }
    
                // clear up the last queue stop function
                delete hooks.stop;
                fn.call( elem, next, hooks );
            }
    
            if ( !startLength && hooks ) {
                hooks.empty.fire();
            }
        },
    
        // not intended for public consumption - generates a queueHooks object, or returns the current one
        _queueHooks: function( elem, type ) {
            var key = type + "queueHooks";
            return jQuery._data( elem, key ) || jQuery._data( elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData( elem, type + "queue" );
                    jQuery._removeData( elem, key );
                })
            });
        }
    });
    
    jQuery.fn.extend({
        queue: function( type, data ) {
            var setter = 2;
    
            if ( typeof type !== "string" ) {
                data = type;
                type = "fx";
                setter--;
            }
    
            if ( arguments.length < setter ) {
                return jQuery.queue( this[0], type );
            }
    
            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue( this, type, data );
    
                    // ensure a hooks for this queue
                    jQuery._queueHooks( this, type );
    
                    if ( type === "fx" && queue[0] !== "inprogress" ) {
                        jQuery.dequeue( this, type );
                    }
                });
        },
        dequeue: function( type ) {
            return this.each(function() {
                jQuery.dequeue( this, type );
            });
        },
        // Based off of the plugin by Clint Helfers, with permission.
        // http://blindsignals.com/index.php/2009/07/jquery-delay/
        delay: function( time, type ) {
            time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
            type = type || "fx";
    
            return this.queue( type, function( next, hooks ) {
                var timeout = setTimeout( next, time );
                hooks.stop = function() {
                    clearTimeout( timeout );
                };
            });
        },
        clearQueue: function( type ) {
            return this.queue( type || "fx", [] );
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function( type, obj ) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if ( !( --count ) ) {
                        defer.resolveWith( elements, [ elements ] );
                    }
                };
    
            if ( typeof type !== "string" ) {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
    
            while( i-- ) {
                tmp = jQuery._data( elements[ i ], type + "queueHooks" );
                if ( tmp && tmp.empty ) {
                    count++;
                    tmp.empty.add( resolve );
                }
            }
            resolve();
            return defer.promise( obj );
        }
    });
    var nodeHook, boolHook,
        rclass = /[\t\r\n\f]/g,
        rreturn = /\r/g,
        rfocusable = /^(?:input|select|textarea|button|object)$/i,
        rclickable = /^(?:a|area)$/i,
        ruseDefault = /^(?:checked|selected)$/i,
        getSetAttribute = jQuery.support.getSetAttribute,
        getSetInput = jQuery.support.input;
    
    jQuery.fn.extend({
        attr: function( name, value ) {
            return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
        },
    
        removeAttr: function( name ) {
            return this.each(function() {
                jQuery.removeAttr( this, name );
            });
        },
    
        prop: function( name, value ) {
            return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
        },
    
        removeProp: function( name ) {
            name = jQuery.propFix[ name ] || name;
            return this.each(function() {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[ name ] = undefined;
                    delete this[ name ];
                } catch( e ) {}
            });
        },
    
        addClass: function( value ) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = typeof value === "string" && value;
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).addClass( value.call( this, j, this.className ) );
                });
            }
    
            if ( proceed ) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = ( value || "" ).match( core_rnotwhite ) || [];
    
                for ( ; i < len; i++ ) {
                    elem = this[ i ];
                    cur = elem.nodeType === 1 && ( elem.className ?
                        ( " " + elem.className + " " ).replace( rclass, " " ) :
                        " "
                    );
    
                    if ( cur ) {
                        j = 0;
                        while ( (clazz = classes[j++]) ) {
                            if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                                cur += clazz + " ";
                            }
                        }
                        elem.className = jQuery.trim( cur );
    
                    }
                }
            }
    
            return this;
        },
    
        removeClass: function( value ) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = arguments.length === 0 || typeof value === "string" && value;
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).removeClass( value.call( this, j, this.className ) );
                });
            }
            if ( proceed ) {
                classes = ( value || "" ).match( core_rnotwhite ) || [];
    
                for ( ; i < len; i++ ) {
                    elem = this[ i ];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && ( elem.className ?
                        ( " " + elem.className + " " ).replace( rclass, " " ) :
                        ""
                    );
    
                    if ( cur ) {
                        j = 0;
                        while ( (clazz = classes[j++]) ) {
                            // Remove *all* instances
                            while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                                cur = cur.replace( " " + clazz + " ", " " );
                            }
                        }
                        elem.className = value ? jQuery.trim( cur ) : "";
                    }
                }
            }
    
            return this;
        },
    
        toggleClass: function( value, stateVal ) {
            var type = typeof value;
    
            if ( typeof stateVal === "boolean" && type === "string" ) {
                return stateVal ? this.addClass( value ) : this.removeClass( value );
            }
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( i ) {
                    jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
                });
            }
    
            return this.each(function() {
                if ( type === "string" ) {
                    // toggle individual class names
                    var className,
                        i = 0,
                        self = jQuery( this ),
                        classNames = value.match( core_rnotwhite ) || [];
    
                    while ( (className = classNames[ i++ ]) ) {
                        // check each className given, space separated list
                        if ( self.hasClass( className ) ) {
                            self.removeClass( className );
                        } else {
                            self.addClass( className );
                        }
                    }
    
                // Toggle whole class name
                } else if ( type === core_strundefined || type === "boolean" ) {
                    if ( this.className ) {
                        // store className if set
                        jQuery._data( this, "__className__", this.className );
                    }
    
                    // If the element has a class name or if we're passed "false",
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
                }
            });
        },
    
        hasClass: function( selector ) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for ( ; i < l; i++ ) {
                if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
                    return true;
                }
            }
    
            return false;
        },
    
        val: function( value ) {
            var ret, hooks, isFunction,
                elem = this[0];
    
            if ( !arguments.length ) {
                if ( elem ) {
                    hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];
    
                    if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                        return ret;
                    }
    
                    ret = elem.value;
    
                    return typeof ret === "string" ?
                        // handle most common string cases
                        ret.replace(rreturn, "") :
                        // handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }
    
                return;
            }
    
            isFunction = jQuery.isFunction( value );
    
            return this.each(function( i ) {
                var val;
    
                if ( this.nodeType !== 1 ) {
                    return;
                }
    
                if ( isFunction ) {
                    val = value.call( this, i, jQuery( this ).val() );
                } else {
                    val = value;
                }
    
                // Treat null/undefined as ""; convert numbers to string
                if ( val == null ) {
                    val = "";
                } else if ( typeof val === "number" ) {
                    val += "";
                } else if ( jQuery.isArray( val ) ) {
                    val = jQuery.map(val, function ( value ) {
                        return value == null ? "" : value + "";
                    });
                }
    
                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
    
                // If set returns undefined, fall back to normal setting
                if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                    this.value = val;
                }
            });
        }
    });
    
    jQuery.extend({
        valHooks: {
            option: {
                get: function( elem ) {
                    // Use proper attribute retrieval(#6932, #12072)
                    var val = jQuery.find.attr( elem, "value" );
                    return val != null ?
                        val :
                        elem.text;
                }
            },
            select: {
                get: function( elem ) {
                    var value, option,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ?
                            max :
                            one ? index : 0;
    
                    // Loop through all the selected options
                    for ( ; i < max; i++ ) {
                        option = options[ i ];
    
                        // oldIE doesn't update selected after form reset (#2551)
                        if ( ( option.selected || i === index ) &&
                                // Don't return options that are disabled or in a disabled optgroup
                                ( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
                                ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
    
                            // Get the specific value for the option
                            value = jQuery( option ).val();
    
                            // We don't need an array for one selects
                            if ( one ) {
                                return value;
                            }
    
                            // Multi-Selects return an array
                            values.push( value );
                        }
                    }
    
                    return values;
                },
    
                set: function( elem, value ) {
                    var optionSet, option,
                        options = elem.options,
                        values = jQuery.makeArray( value ),
                        i = options.length;
    
                    while ( i-- ) {
                        option = options[ i ];
                        if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
                            optionSet = true;
                        }
                    }
    
                    // force browsers to behave consistently when non-matching value is set
                    if ( !optionSet ) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },
    
        attr: function( elem, name, value ) {
            var hooks, ret,
                nType = elem.nodeType;
    
            // don't get/set attributes on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            // Fallback to prop when attributes are not supported
            if ( typeof elem.getAttribute === core_strundefined ) {
                return jQuery.prop( elem, name, value );
            }
    
            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[ name ] ||
                    ( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
            }
    
            if ( value !== undefined ) {
    
                if ( value === null ) {
                    jQuery.removeAttr( elem, name );
    
                } else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                    return ret;
    
                } else {
                    elem.setAttribute( name, value + "" );
                    return value;
                }
    
            } else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
                return ret;
    
            } else {
                ret = jQuery.find.attr( elem, name );
    
                // Non-existent attributes return null, we normalize to undefined
                return ret == null ?
                    undefined :
                    ret;
            }
        },
    
        removeAttr: function( elem, value ) {
            var name, propName,
                i = 0,
                attrNames = value && value.match( core_rnotwhite );
    
            if ( attrNames && elem.nodeType === 1 ) {
                while ( (name = attrNames[i++]) ) {
                    propName = jQuery.propFix[ name ] || name;
    
                    // Boolean attributes get special treatment (#10870)
                    if ( jQuery.expr.match.bool.test( name ) ) {
                        // Set corresponding property to false
                        if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
                            elem[ propName ] = false;
                        // Support: IE<9
                        // Also clear defaultChecked/defaultSelected (if appropriate)
                        } else {
                            elem[ jQuery.camelCase( "default-" + name ) ] =
                                elem[ propName ] = false;
                        }
    
                    // See #9699 for explanation of this approach (setting first, then removal)
                    } else {
                        jQuery.attr( elem, name, "" );
                    }
    
                    elem.removeAttribute( getSetAttribute ? name : propName );
                }
            }
        },
    
        attrHooks: {
            type: {
                set: function( elem, value ) {
                    if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to default in case type is set after value during creation
                        var val = elem.value;
                        elem.setAttribute( "type", value );
                        if ( val ) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
    
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
    
        prop: function( elem, name, value ) {
            var ret, hooks, notxml,
                nType = elem.nodeType;
    
            // don't get/set properties on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
    
            if ( notxml ) {
                // Fix name and attach hooks
                name = jQuery.propFix[ name ] || name;
                hooks = jQuery.propHooks[ name ];
            }
    
            if ( value !== undefined ) {
                return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
                    ret :
                    ( elem[ name ] = value );
    
            } else {
                return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
                    ret :
                    elem[ name ];
            }
        },
    
        propHooks: {
            tabIndex: {
                get: function( elem ) {
                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr( elem, "tabindex" );
    
                    return tabindex ?
                        parseInt( tabindex, 10 ) :
                        rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
                            0 :
                            -1;
                }
            }
        }
    });
    
    // Hooks for boolean attributes
    boolHook = {
        set: function( elem, value, name ) {
            if ( value === false ) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr( elem, name );
            } else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
                // IE<8 needs the *property* name
                elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );
    
            // Use defaultChecked and defaultSelected for oldIE
            } else {
                elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
            }
    
            return name;
        }
    };
    jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
        var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;
    
        jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
            function( elem, name, isXML ) {
                var fn = jQuery.expr.attrHandle[ name ],
                    ret = isXML ?
                        undefined :
                        /* jshint eqeqeq: false */
                        (jQuery.expr.attrHandle[ name ] = undefined) !=
                            getter( elem, name, isXML ) ?
    
                            name.toLowerCase() :
                            null;
                jQuery.expr.attrHandle[ name ] = fn;
                return ret;
            } :
            function( elem, name, isXML ) {
                return isXML ?
                    undefined :
                    elem[ jQuery.camelCase( "default-" + name ) ] ?
                        name.toLowerCase() :
                        null;
            };
    });
    
    // fix oldIE attroperties
    if ( !getSetInput || !getSetAttribute ) {
        jQuery.attrHooks.value = {
            set: function( elem, value, name ) {
                if ( jQuery.nodeName( elem, "input" ) ) {
                    // Does not return so that setAttribute is also used
                    elem.defaultValue = value;
                } else {
                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                    return nodeHook && nodeHook.set( elem, value, name );
                }
            }
        };
    }
    
    // IE6/7 do not support getting/setting some attributes with get/setAttribute
    if ( !getSetAttribute ) {
    
        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = {
            set: function( elem, value, name ) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode( name );
                if ( !ret ) {
                    elem.setAttributeNode(
                        (ret = elem.ownerDocument.createAttribute( name ))
                    );
                }
    
                ret.value = value += "";
    
                // Break association with cloned elements by also using setAttribute (#9646)
                return name === "value" || value === elem.getAttribute( name ) ?
                    value :
                    undefined;
            }
        };
        jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
            // Some attributes are constructed with empty-string values when not defined
            function( elem, name, isXML ) {
                var ret;
                return isXML ?
                    undefined :
                    (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
                        ret.value :
                        null;
            };
        jQuery.valHooks.button = {
            get: function( elem, name ) {
                var ret = elem.getAttributeNode( name );
                return ret && ret.specified ?
                    ret.value :
                    undefined;
            },
            set: nodeHook.set
        };
    
        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            set: function( elem, value, name ) {
                nodeHook.set( elem, value === "" ? false : value, name );
            }
        };
    
        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each([ "width", "height" ], function( i, name ) {
            jQuery.attrHooks[ name ] = {
                set: function( elem, value ) {
                    if ( value === "" ) {
                        elem.setAttribute( name, "auto" );
                        return value;
                    }
                }
            };
        });
    }
    
    
    // Some attributes require a special call on IE
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if ( !jQuery.support.hrefNormalized ) {
        // href/src property should get the full normalized URL (#10299/#12915)
        jQuery.each([ "href", "src" ], function( i, name ) {
            jQuery.propHooks[ name ] = {
                get: function( elem ) {
                    return elem.getAttribute( name, 4 );
                }
            };
        });
    }
    
    if ( !jQuery.support.style ) {
        jQuery.attrHooks.style = {
            get: function( elem ) {
                // Return undefined in the case of empty string
                // Note: IE uppercases css property names, but if we were to .toLowerCase()
                // .cssText, that would destroy case senstitivity in URL's, like in "background"
                return elem.style.cssText || undefined;
            },
            set: function( elem, value ) {
                return ( elem.style.cssText = value + "" );
            }
        };
    }
    
    // Safari mis-reports the default selected property of an option
    // Accessing the parent's selectedIndex property fixes it
    if ( !jQuery.support.optSelected ) {
        jQuery.propHooks.selected = {
            get: function( elem ) {
                var parent = elem.parentNode;
    
                if ( parent ) {
                    parent.selectedIndex;
    
                    // Make sure that it also works with optgroups, see #5701
                    if ( parent.parentNode ) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        };
    }
    
    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[ this.toLowerCase() ] = this;
    });
    
    // IE6/7 call enctype encoding
    if ( !jQuery.support.enctype ) {
        jQuery.propFix.enctype = "encoding";
    }
    
    // Radios and checkboxes getter/setter
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[ this ] = {
            set: function( elem, value ) {
                if ( jQuery.isArray( value ) ) {
                    return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
                }
            }
        };
        if ( !jQuery.support.checkOn ) {
            jQuery.valHooks[ this ].get = function( elem ) {
                // Support: Webkit
                // "" is returned instead of "on" if a value isn't specified
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    var rformElems = /^(?:input|select|textarea)$/i,
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    
    function returnTrue() {
        return true;
    }
    
    function returnFalse() {
        return false;
    }
    
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch ( err ) { }
    }
    
    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {
    
        global: {},
    
        add: function( elem, types, handler, data, selector ) {
            var tmp, events, t, handleObjIn,
                special, eventHandle, handleObj,
                handlers, type, namespaces, origType,
                elemData = jQuery._data( elem );
    
            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if ( !elemData ) {
                return;
            }
    
            // Caller can pass in an object of custom data in lieu of the handler
            if ( handler.handler ) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
    
            // Make sure that the handler has a unique ID, used to find/remove it later
            if ( !handler.guid ) {
                handler.guid = jQuery.guid++;
            }
    
            // Init the element's event structure and main handler, if this is the first
            if ( !(events = elemData.events) ) {
                events = elemData.events = {};
            }
            if ( !(eventHandle = elemData.handle) ) {
                eventHandle = elemData.handle = function( e ) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
                        undefined;
                };
                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                eventHandle.elem = elem;
            }
    
            // Handle multiple events separated by a space
            types = ( types || "" ).match( core_rnotwhite ) || [""];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[t] ) || [];
                type = origType = tmp[1];
                namespaces = ( tmp[2] || "" ).split( "." ).sort();
    
                // There *must* be a type, no attaching namespace-only handlers
                if ( !type ) {
                    continue;
                }
    
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[ type ] || {};
    
                // If selector defined, determine special event api type, otherwise given type
                type = ( selector ? special.delegateType : special.bindType ) || type;
    
                // Update special based on newly reset type
                special = jQuery.event.special[ type ] || {};
    
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                    namespace: namespaces.join(".")
                }, handleObjIn );
    
                // Init the event handler queue if we're the first
                if ( !(handlers = events[ type ]) ) {
                    handlers = events[ type ] = [];
                    handlers.delegateCount = 0;
    
                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                        // Bind the global event handler to the element
                        if ( elem.addEventListener ) {
                            elem.addEventListener( type, eventHandle, false );
    
                        } else if ( elem.attachEvent ) {
                            elem.attachEvent( "on" + type, eventHandle );
                        }
                    }
                }
    
                if ( special.add ) {
                    special.add.call( elem, handleObj );
    
                    if ( !handleObj.handler.guid ) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
    
                // Add to the element's handler list, delegates in front
                if ( selector ) {
                    handlers.splice( handlers.delegateCount++, 0, handleObj );
                } else {
                    handlers.push( handleObj );
                }
    
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[ type ] = true;
            }
    
            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },
    
        // Detach an event or set of events from an element
        remove: function( elem, types, handler, selector, mappedTypes ) {
            var j, handleObj, tmp,
                origCount, t, events,
                special, handlers, type,
                namespaces, origType,
                elemData = jQuery.hasData( elem ) && jQuery._data( elem );
    
            if ( !elemData || !(events = elemData.events) ) {
                return;
            }
    
            // Once for each type.namespace in types; type may be omitted
            types = ( types || "" ).match( core_rnotwhite ) || [""];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[t] ) || [];
                type = origType = tmp[1];
                namespaces = ( tmp[2] || "" ).split( "." ).sort();
    
                // Unbind all events (on this namespace, if provided) for the element
                if ( !type ) {
                    for ( type in events ) {
                        jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                    }
                    continue;
                }
    
                special = jQuery.event.special[ type ] || {};
                type = ( selector ? special.delegateType : special.bindType ) || type;
                handlers = events[ type ] || [];
                tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );
    
                // Remove matching events
                origCount = j = handlers.length;
                while ( j-- ) {
                    handleObj = handlers[ j ];
    
                    if ( ( mappedTypes || origType === handleObj.origType ) &&
                        ( !handler || handler.guid === handleObj.guid ) &&
                        ( !tmp || tmp.test( handleObj.namespace ) ) &&
                        ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                        handlers.splice( j, 1 );
    
                        if ( handleObj.selector ) {
                            handlers.delegateCount--;
                        }
                        if ( special.remove ) {
                            special.remove.call( elem, handleObj );
                        }
                    }
                }
    
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if ( origCount && !handlers.length ) {
                    if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                        jQuery.removeEvent( elem, type, elemData.handle );
                    }
    
                    delete events[ type ];
                }
            }
    
            // Remove the expando if it's no longer used
            if ( jQuery.isEmptyObject( events ) ) {
                delete elemData.handle;
    
                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery._removeData( elem, "events" );
            }
        },
    
        trigger: function( event, data, elem, onlyHandlers ) {
            var handle, ontype, cur,
                bubbleType, special, tmp, i,
                eventPath = [ elem || document ],
                type = core_hasOwn.call( event, "type" ) ? event.type : event,
                namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];
    
            cur = tmp = elem = elem || document;
    
            // Don't do events on text and comment nodes
            if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
                return;
            }
    
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                return;
            }
    
            if ( type.indexOf(".") >= 0 ) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
    
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[ jQuery.expando ] ?
                event :
                new jQuery.Event( type, typeof event === "object" && event );
    
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ?
                new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
                null;
    
            // Clean up the event in case it is being reused
            event.result = undefined;
            if ( !event.target ) {
                event.target = elem;
            }
    
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [ event ] :
                jQuery.makeArray( data, [ event ] );
    
            // Allow special events to draw outside the lines
            special = jQuery.event.special[ type ] || {};
            if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
                return;
            }
    
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
    
                bubbleType = special.delegateType || type;
                if ( !rfocusMorph.test( bubbleType + type ) ) {
                    cur = cur.parentNode;
                }
                for ( ; cur; cur = cur.parentNode ) {
                    eventPath.push( cur );
                    tmp = cur;
                }
    
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if ( tmp === (elem.ownerDocument || document) ) {
                    eventPath.push( tmp.defaultView || tmp.parentWindow || window );
                }
            }
    
            // Fire handlers on the event path
            i = 0;
            while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {
    
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;
    
                // jQuery handler
                handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
                if ( handle ) {
                    handle.apply( cur, data );
                }
    
                // Native handler
                handle = ontype && cur[ ontype ];
                if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
                    event.preventDefault();
                }
            }
            event.type = type;
    
            // If nobody prevented the default action, do it now
            if ( !onlyHandlers && !event.isDefaultPrevented() ) {
    
                if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
                    jQuery.acceptData( elem ) ) {
    
                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {
    
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ ontype ];
    
                        if ( tmp ) {
                            elem[ ontype ] = null;
                        }
    
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        try {
                            elem[ type ]();
                        } catch ( e ) {
                            // IE<9 dies on focus/blur to hidden element (#1486,#12518)
                            // only reproducible on winXP IE8 native, not IE9 in IE8 mode
                        }
                        jQuery.event.triggered = undefined;
    
                        if ( tmp ) {
                            elem[ ontype ] = tmp;
                        }
                    }
                }
            }
    
            return event.result;
        },
    
        dispatch: function( event ) {
    
            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix( event );
    
            var i, ret, handleObj, matched, j,
                handlerQueue = [],
                args = core_slice.call( arguments ),
                handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
                special = jQuery.event.special[ event.type ] || {};
    
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;
    
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                return;
            }
    
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call( this, event, handlers );
    
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
                event.currentTarget = matched.elem;
    
                j = 0;
                while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {
    
                    // Triggered event must either 1) have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {
    
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
    
                        ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                                .apply( matched.elem, args );
    
                        if ( ret !== undefined ) {
                            if ( (event.result = ret) === false ) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
    
            // Call the postDispatch hook for the mapped type
            if ( special.postDispatch ) {
                special.postDispatch.call( this, event );
            }
    
            return event.result;
        },
    
        handlers: function( event, handlers ) {
            var sel, handleObj, matches, i,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;
    
            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {
    
                /* jshint eqeqeq: false */
                for ( ; cur != this; cur = cur.parentNode || this ) {
                    /* jshint eqeqeq: true */
    
                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
                        matches = [];
                        for ( i = 0; i < delegateCount; i++ ) {
                            handleObj = handlers[ i ];
    
                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";
    
                            if ( matches[ sel ] === undefined ) {
                                matches[ sel ] = handleObj.needsContext ?
                                    jQuery( sel, this ).index( cur ) >= 0 :
                                    jQuery.find( sel, this, null, [ cur ] ).length;
                            }
                            if ( matches[ sel ] ) {
                                matches.push( handleObj );
                            }
                        }
                        if ( matches.length ) {
                            handlerQueue.push({ elem: cur, handlers: matches });
                        }
                    }
                }
            }
    
            // Add the remaining (directly-bound) handlers
            if ( delegateCount < handlers.length ) {
                handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
            }
    
            return handlerQueue;
        },
    
        fix: function( event ) {
            if ( event[ jQuery.expando ] ) {
                return event;
            }
    
            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy,
                type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[ type ];
    
            if ( !fixHook ) {
                this.fixHooks[ type ] = fixHook =
                    rmouseEvent.test( type ) ? this.mouseHooks :
                    rkeyEvent.test( type ) ? this.keyHooks :
                    {};
            }
            copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
    
            event = new jQuery.Event( originalEvent );
    
            i = copy.length;
            while ( i-- ) {
                prop = copy[ i ];
                event[ prop ] = originalEvent[ prop ];
            }
    
            // Support: IE<9
            // Fix target property (#1925)
            if ( !event.target ) {
                event.target = originalEvent.srcElement || document;
            }
    
            // Support: Chrome 23+, Safari?
            // Target should not be a text node (#504, #13143)
            if ( event.target.nodeType === 3 ) {
                event.target = event.target.parentNode;
            }
    
            // Support: IE<9
            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
            event.metaKey = !!event.metaKey;
    
            return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
        },
    
        // Includes some event props shared by KeyEvent and MouseEvent
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    
        fixHooks: {},
    
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function( event, original ) {
    
                // Add which for key events
                if ( event.which == null ) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
    
                return event;
            }
        },
    
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function( event, original ) {
                var body, eventDoc, doc,
                    button = original.button,
                    fromElement = original.fromElement;
    
                // Calculate pageX/Y if missing and clientX/Y available
                if ( event.pageX == null && original.clientX != null ) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
    
                    event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                    event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
                }
    
                // Add relatedTarget, if necessary
                if ( !event.relatedTarget && fromElement ) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
    
                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if ( !event.which && button !== undefined ) {
                    event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
                }
    
                return event;
            }
        },
    
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if ( this !== safeActiveElement() && this.focus ) {
                        try {
                            this.focus();
                            return false;
                        } catch ( e ) {
                            // Support: IE<9
                            // If we error on focus to hidden element (#1486, #12518),
                            // let .trigger() run the handlers
                        }
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if ( this === safeActiveElement() && this.blur ) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
                        this.click();
                        return false;
                    }
                },
    
                // For cross-browser consistency, don't fire native .click() on links
                _default: function( event ) {
                    return jQuery.nodeName( event.target, "a" );
                }
            },
    
            beforeunload: {
                postDispatch: function( event ) {
    
                    // Even when returnValue equals to undefined Firefox will still show alert
                    if ( event.result !== undefined ) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
    
        simulate: function( type, elem, event, bubble ) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                }
            );
            if ( bubble ) {
                jQuery.event.trigger( e, null, elem );
            } else {
                jQuery.event.dispatch.call( elem, e );
            }
            if ( e.isDefaultPrevented() ) {
                event.preventDefault();
            }
        }
    };
    
    jQuery.removeEvent = document.removeEventListener ?
        function( elem, type, handle ) {
            if ( elem.removeEventListener ) {
                elem.removeEventListener( type, handle, false );
            }
        } :
        function( elem, type, handle ) {
            var name = "on" + type;
    
            if ( elem.detachEvent ) {
    
                // #8545, #7054, preventing memory leaks for custom events in IE6-8
                // detachEvent needed property on element, by name of that event, to properly expose it to GC
                if ( typeof elem[ name ] === core_strundefined ) {
                    elem[ name ] = null;
                }
    
                elem.detachEvent( name, handle );
            }
        };
    
    jQuery.Event = function( src, props ) {
        // Allow instantiation without the 'new' keyword
        if ( !(this instanceof jQuery.Event) ) {
            return new jQuery.Event( src, props );
        }
    
        // Event object
        if ( src && src.type ) {
            this.originalEvent = src;
            this.type = src.type;
    
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
                src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;
    
        // Event type
        } else {
            this.type = src;
        }
    
        // Put explicitly provided properties onto the event object
        if ( props ) {
            jQuery.extend( this, props );
        }
    
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
    
        // Mark it as fixed
        this[ jQuery.expando ] = true;
    };
    
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
    
        preventDefault: function() {
            var e = this.originalEvent;
    
            this.isDefaultPrevented = returnTrue;
            if ( !e ) {
                return;
            }
    
            // If preventDefault exists, run it on the original event
            if ( e.preventDefault ) {
                e.preventDefault();
    
            // Support: IE
            // Otherwise set the returnValue property of the original event to false
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
    
            this.isPropagationStopped = returnTrue;
            if ( !e ) {
                return;
            }
            // If stopPropagation exists, run it on the original event
            if ( e.stopPropagation ) {
                e.stopPropagation();
            }
    
            // Support: IE
            // Set the cancelBubble property of the original event to true
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };
    
    // Create mouseenter/leave events using mouseover/out and event-time checks
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function( orig, fix ) {
        jQuery.event.special[ orig ] = {
            delegateType: fix,
            bindType: fix,
    
            handle: function( event ) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;
    
                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply( this, arguments );
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    
    // IE submit delegation
    if ( !jQuery.support.submitBubbles ) {
    
        jQuery.event.special.submit = {
            setup: function() {
                // Only need this for delegated form submit events
                if ( jQuery.nodeName( this, "form" ) ) {
                    return false;
                }
    
                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target,
                        form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
                    if ( form && !jQuery._data( form, "submitBubbles" ) ) {
                        jQuery.event.add( form, "submit._submit", function( event ) {
                            event._submit_bubble = true;
                        });
                        jQuery._data( form, "submitBubbles", true );
                    }
                });
                // return undefined since we don't need an event listener
            },
    
            postDispatch: function( event ) {
                // If form was submitted by the user, bubble the event up the tree
                if ( event._submit_bubble ) {
                    delete event._submit_bubble;
                    if ( this.parentNode && !event.isTrigger ) {
                        jQuery.event.simulate( "submit", this.parentNode, event, true );
                    }
                }
            },
    
            teardown: function() {
                // Only need this for delegated form submit events
                if ( jQuery.nodeName( this, "form" ) ) {
                    return false;
                }
    
                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove( this, "._submit" );
            }
        };
    }
    
    // IE change delegation and checkbox/radio fix
    if ( !jQuery.support.changeBubbles ) {
    
        jQuery.event.special.change = {
    
            setup: function() {
    
                if ( rformElems.test( this.nodeName ) ) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if ( this.type === "checkbox" || this.type === "radio" ) {
                        jQuery.event.add( this, "propertychange._change", function( event ) {
                            if ( event.originalEvent.propertyName === "checked" ) {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add( this, "click._change", function( event ) {
                            if ( this._just_changed && !event.isTrigger ) {
                                this._just_changed = false;
                            }
                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate( "change", this, event, true );
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add( this, "beforeactivate._change", function( e ) {
                    var elem = e.target;
    
                    if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
                        jQuery.event.add( elem, "change._change", function( event ) {
                            if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
                                jQuery.event.simulate( "change", this.parentNode, event, true );
                            }
                        });
                        jQuery._data( elem, "changeBubbles", true );
                    }
                });
            },
    
            handle: function( event ) {
                var elem = event.target;
    
                // Swallow native change events from checkbox/radio, we already triggered them above
                if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
                    return event.handleObj.handler.apply( this, arguments );
                }
            },
    
            teardown: function() {
                jQuery.event.remove( this, "._change" );
    
                return !rformElems.test( this.nodeName );
            }
        };
    }
    
    // Create "bubbling" focus and blur events
    if ( !jQuery.support.focusinBubbles ) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
    
            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0,
                handler = function( event ) {
                    jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
                };
    
            jQuery.event.special[ fix ] = {
                setup: function() {
                    if ( attaches++ === 0 ) {
                        document.addEventListener( orig, handler, true );
                    }
                },
                teardown: function() {
                    if ( --attaches === 0 ) {
                        document.removeEventListener( orig, handler, true );
                    }
                }
            };
        });
    }
    
    jQuery.fn.extend({
    
        on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
            var type, origFn;
    
            // Types can be a map of types/handlers
            if ( typeof types === "object" ) {
                // ( types-Object, selector, data )
                if ( typeof selector !== "string" ) {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for ( type in types ) {
                    this.on( type, selector, data, types[ type ], one );
                }
                return this;
            }
    
            if ( data == null && fn == null ) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if ( fn == null ) {
                if ( typeof selector === "string" ) {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if ( fn === false ) {
                fn = returnFalse;
            } else if ( !fn ) {
                return this;
            }
    
            if ( one === 1 ) {
                origFn = fn;
                fn = function( event ) {
                    // Can use an empty set, since event contains the info
                    jQuery().off( event );
                    return origFn.apply( this, arguments );
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
            }
            return this.each( function() {
                jQuery.event.add( this, types, fn, data, selector );
            });
        },
        one: function( types, selector, data, fn ) {
            return this.on( types, selector, data, fn, 1 );
        },
        off: function( types, selector, fn ) {
            var handleObj, type;
            if ( types && types.preventDefault && types.handleObj ) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery( types.delegateTarget ).off(
                    handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if ( typeof types === "object" ) {
                // ( types-object [, selector] )
                for ( type in types ) {
                    this.off( type, selector, types[ type ] );
                }
                return this;
            }
            if ( selector === false || typeof selector === "function" ) {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if ( fn === false ) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove( this, types, fn, selector );
            });
        },
    
        trigger: function( type, data ) {
            return this.each(function() {
                jQuery.event.trigger( type, data, this );
            });
        },
        triggerHandler: function( type, data ) {
            var elem = this[0];
            if ( elem ) {
                return jQuery.event.trigger( type, data, elem, true );
            }
        }
    });
    var isSimple = /^.[^:#\[\.,]*$/,
        rparentsprev = /^(?:parents|prev(?:Until|All))/,
        rneedsContext = jQuery.expr.match.needsContext,
        // methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    
    jQuery.fn.extend({
        find: function( selector ) {
            var i,
                ret = [],
                self = this,
                len = self.length;
    
            if ( typeof selector !== "string" ) {
                return this.pushStack( jQuery( selector ).filter(function() {
                    for ( i = 0; i < len; i++ ) {
                        if ( jQuery.contains( self[ i ], this ) ) {
                            return true;
                        }
                    }
                }) );
            }
    
            for ( i = 0; i < len; i++ ) {
                jQuery.find( selector, self[ i ], ret );
            }
    
            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
    
        has: function( target ) {
            var i,
                targets = jQuery( target, this ),
                len = targets.length;
    
            return this.filter(function() {
                for ( i = 0; i < len; i++ ) {
                    if ( jQuery.contains( this, targets[i] ) ) {
                        return true;
                    }
                }
            });
        },
    
        not: function( selector ) {
            return this.pushStack( winnow(this, selector || [], true) );
        },
    
        filter: function( selector ) {
            return this.pushStack( winnow(this, selector || [], false) );
        },
    
        is: function( selector ) {
            return !!winnow(
                this,
    
                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test( selector ) ?
                    jQuery( selector ) :
                    selector || [],
                false
            ).length;
        },
    
        closest: function( selectors, context ) {
            var cur,
                i = 0,
                l = this.length,
                ret = [],
                pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                    jQuery( selectors, context || this.context ) :
                    0;
    
            for ( ; i < l; i++ ) {
                for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
                    // Always skip document fragments
                    if ( cur.nodeType < 11 && (pos ?
                        pos.index(cur) > -1 :
    
                        // Don't pass non-elements to Sizzle
                        cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors)) ) {
    
                        cur = ret.push( cur );
                        break;
                    }
                }
            }
    
            return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
        },
    
        // Determine the position of an element within
        // the matched set of elements
        index: function( elem ) {
    
            // No argument, return index in parent
            if ( !elem ) {
                return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
            }
    
            // index in selector
            if ( typeof elem === "string" ) {
                return jQuery.inArray( this[0], jQuery( elem ) );
            }
    
            // Locate the position of the desired element
            return jQuery.inArray(
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem, this );
        },
    
        add: function( selector, context ) {
            var set = typeof selector === "string" ?
                    jQuery( selector, context ) :
                    jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
                all = jQuery.merge( this.get(), set );
    
            return this.pushStack( jQuery.unique(all) );
        },
    
        addBack: function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });
    
    function sibling( cur, dir ) {
        do {
            cur = cur[ dir ];
        } while ( cur && cur.nodeType !== 1 );
    
        return cur;
    }
    
    jQuery.each({
        parent: function( elem ) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function( elem ) {
            return jQuery.dir( elem, "parentNode" );
        },
        parentsUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "parentNode", until );
        },
        next: function( elem ) {
            return sibling( elem, "nextSibling" );
        },
        prev: function( elem ) {
            return sibling( elem, "previousSibling" );
        },
        nextAll: function( elem ) {
            return jQuery.dir( elem, "nextSibling" );
        },
        prevAll: function( elem ) {
            return jQuery.dir( elem, "previousSibling" );
        },
        nextUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "nextSibling", until );
        },
        prevUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "previousSibling", until );
        },
        siblings: function( elem ) {
            return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
        },
        children: function( elem ) {
            return jQuery.sibling( elem.firstChild );
        },
        contents: function( elem ) {
            return jQuery.nodeName( elem, "iframe" ) ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.merge( [], elem.childNodes );
        }
    }, function( name, fn ) {
        jQuery.fn[ name ] = function( until, selector ) {
            var ret = jQuery.map( this, fn, until );
    
            if ( name.slice( -5 ) !== "Until" ) {
                selector = until;
            }
    
            if ( selector && typeof selector === "string" ) {
                ret = jQuery.filter( selector, ret );
            }
    
            if ( this.length > 1 ) {
                // Remove duplicates
                if ( !guaranteedUnique[ name ] ) {
                    ret = jQuery.unique( ret );
                }
    
                // Reverse order for parents* and prev-derivatives
                if ( rparentsprev.test( name ) ) {
                    ret = ret.reverse();
                }
            }
    
            return this.pushStack( ret );
        };
    });
    
    jQuery.extend({
        filter: function( expr, elems, not ) {
            var elem = elems[ 0 ];
    
            if ( not ) {
                expr = ":not(" + expr + ")";
            }
    
            return elems.length === 1 && elem.nodeType === 1 ?
                jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
                jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
                    return elem.nodeType === 1;
                }));
        },
    
        dir: function( elem, dir, until ) {
            var matched = [],
                cur = elem[ dir ];
    
            while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
                if ( cur.nodeType === 1 ) {
                    matched.push( cur );
                }
                cur = cur[dir];
            }
            return matched;
        },
    
        sibling: function( n, elem ) {
            var r = [];
    
            for ( ; n; n = n.nextSibling ) {
                if ( n.nodeType === 1 && n !== elem ) {
                    r.push( n );
                }
            }
    
            return r;
        }
    });
    
    // Implement the identical functionality for filter and not
    function winnow( elements, qualifier, not ) {
        if ( jQuery.isFunction( qualifier ) ) {
            return jQuery.grep( elements, function( elem, i ) {
                /* jshint -W018 */
                return !!qualifier.call( elem, i, elem ) !== not;
            });
    
        }
    
        if ( qualifier.nodeType ) {
            return jQuery.grep( elements, function( elem ) {
                return ( elem === qualifier ) !== not;
            });
    
        }
    
        if ( typeof qualifier === "string" ) {
            if ( isSimple.test( qualifier ) ) {
                return jQuery.filter( qualifier, elements, not );
            }
    
            qualifier = jQuery.filter( qualifier, elements );
        }
    
        return jQuery.grep( elements, function( elem ) {
            return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
        });
    }
    function createSafeFragment( document ) {
        var list = nodeNames.split( "|" ),
            safeFrag = document.createDocumentFragment();
    
        if ( safeFrag.createElement ) {
            while ( list.length ) {
                safeFrag.createElement(
                    list.pop()
                );
            }
        }
        return safeFrag;
    }
    
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
            "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
        rleadingWhitespace = /^\s+/,
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rtbody = /<tbody/i,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /^$|\/(?:java|ecma)script/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    
        // We have to close these tags to support XHTML (#13200)
        wrapMap = {
            option: [ 1, "<select multiple='multiple'>", "</select>" ],
            legend: [ 1, "<fieldset>", "</fieldset>" ],
            area: [ 1, "<map>", "</map>" ],
            param: [ 1, "<object>", "</object>" ],
            thead: [ 1, "<table>", "</table>" ],
            tr: [ 2, "<table><tbody>", "</tbody></table>" ],
            col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
            td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
    
            // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
            // unless wrapped in a div with non-breaking characters in front of it.
            _default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
        },
        safeFragment = createSafeFragment( document ),
        fragmentDiv = safeFragment.appendChild( document.createElement("div") );
    
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    
    jQuery.fn.extend({
        text: function( value ) {
            return jQuery.access( this, function( value ) {
                return value === undefined ?
                    jQuery.text( this ) :
                    this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
            }, null, value, arguments.length );
        },
    
        append: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.appendChild( elem );
                }
            });
        },
    
        prepend: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.insertBefore( elem, target.firstChild );
                }
            });
        },
    
        before: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this );
                }
            });
        },
    
        after: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this.nextSibling );
                }
            });
        },
    
        // keepData is for internal use only--do not document
        remove: function( selector, keepData ) {
            var elem,
                elems = selector ? jQuery.filter( selector, this ) : this,
                i = 0;
    
            for ( ; (elem = elems[i]) != null; i++ ) {
    
                if ( !keepData && elem.nodeType === 1 ) {
                    jQuery.cleanData( getAll( elem ) );
                }
    
                if ( elem.parentNode ) {
                    if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
                        setGlobalEval( getAll( elem, "script" ) );
                    }
                    elem.parentNode.removeChild( elem );
                }
            }
    
            return this;
        },
    
        empty: function() {
            var elem,
                i = 0;
    
            for ( ; (elem = this[i]) != null; i++ ) {
                // Remove element nodes and prevent memory leaks
                if ( elem.nodeType === 1 ) {
                    jQuery.cleanData( getAll( elem, false ) );
                }
    
                // Remove any remaining nodes
                while ( elem.firstChild ) {
                    elem.removeChild( elem.firstChild );
                }
    
                // If this is a select, ensure that it displays empty (#12336)
                // Support: IE<9
                if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
                    elem.options.length = 0;
                }
            }
    
            return this;
        },
    
        clone: function( dataAndEvents, deepDataAndEvents ) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
    
            return this.map( function () {
                return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
            });
        },
    
        html: function( value ) {
            return jQuery.access( this, function( value ) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;
    
                if ( value === undefined ) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace( rinlinejQuery, "" ) :
                        undefined;
                }
    
                // See if we can take a shortcut and just use innerHTML
                if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                    ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
                    ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
                    !wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {
    
                    value = value.replace( rxhtmlTag, "<$1></$2>" );
    
                    try {
                        for (; i < l; i++ ) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if ( elem.nodeType === 1 ) {
                                jQuery.cleanData( getAll( elem, false ) );
                                elem.innerHTML = value;
                            }
                        }
    
                        elem = 0;
    
                    // If using innerHTML throws an exception, use the fallback method
                    } catch(e) {}
                }
    
                if ( elem ) {
                    this.empty().append( value );
                }
            }, null, value, arguments.length );
        },
    
        replaceWith: function() {
            var
                // Snapshot the DOM in case .domManip sweeps something relevant into its fragment
                args = jQuery.map( this, function( elem ) {
                    return [ elem.nextSibling, elem.parentNode ];
                }),
                i = 0;
    
            // Make the changes, replacing each context element with the new content
            this.domManip( arguments, function( elem ) {
                var next = args[ i++ ],
                    parent = args[ i++ ];
    
                if ( parent ) {
                    // Don't use the snapshot next if it has moved (#13810)
                    if ( next && next.parentNode !== parent ) {
                        next = this.nextSibling;
                    }
                    jQuery( this ).remove();
                    parent.insertBefore( elem, next );
                }
            // Allow new content to include elements from the context set
            }, true );
    
            // Force removal if there was no new content (e.g., from empty arguments)
            return i ? this : this.remove();
        },
    
        detach: function( selector ) {
            return this.remove( selector, true );
        },
    
        domManip: function( args, callback, allowIntersection ) {
    
            // Flatten any nested arrays
            args = core_concat.apply( [], args );
    
            var first, node, hasScripts,
                scripts, doc, fragment,
                i = 0,
                l = this.length,
                set = this,
                iNoClone = l - 1,
                value = args[0],
                isFunction = jQuery.isFunction( value );
    
            // We can't cloneNode fragments that contain checked, in WebKit
            if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
                return this.each(function( index ) {
                    var self = set.eq( index );
                    if ( isFunction ) {
                        args[0] = value.call( this, index, self.html() );
                    }
                    self.domManip( args, callback, allowIntersection );
                });
            }
    
            if ( l ) {
                fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
                first = fragment.firstChild;
    
                if ( fragment.childNodes.length === 1 ) {
                    fragment = first;
                }
    
                if ( first ) {
                    scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                    hasScripts = scripts.length;
    
                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for ( ; i < l; i++ ) {
                        node = fragment;
    
                        if ( i !== iNoClone ) {
                            node = jQuery.clone( node, true, true );
    
                            // Keep references to cloned scripts for later restoration
                            if ( hasScripts ) {
                                jQuery.merge( scripts, getAll( node, "script" ) );
                            }
                        }
    
                        callback.call( this[i], node, i );
                    }
    
                    if ( hasScripts ) {
                        doc = scripts[ scripts.length - 1 ].ownerDocument;
    
                        // Reenable scripts
                        jQuery.map( scripts, restoreScript );
    
                        // Evaluate executable scripts on first document insertion
                        for ( i = 0; i < hasScripts; i++ ) {
                            node = scripts[ i ];
                            if ( rscriptType.test( node.type || "" ) &&
                                !jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {
    
                                if ( node.src ) {
                                    // Hope ajax is available...
                                    jQuery._evalUrl( node.src );
                                } else {
                                    jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
                                }
                            }
                        }
                    }
    
                    // Fix #11809: Avoid leaking memory
                    fragment = first = null;
                }
            }
    
            return this;
        }
    });
    
    // Support: IE<8
    // Manipulating tables requires a tbody
    function manipulationTarget( elem, content ) {
        return jQuery.nodeName( elem, "table" ) &&
            jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?
    
            elem.getElementsByTagName("tbody")[0] ||
                elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
            elem;
    }
    
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript( elem ) {
        elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript( elem ) {
        var match = rscriptTypeMasked.exec( elem.type );
        if ( match ) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    
    // Mark scripts as having already been evaluated
    function setGlobalEval( elems, refElements ) {
        var elem,
            i = 0;
        for ( ; (elem = elems[i]) != null; i++ ) {
            jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
        }
    }
    
    function cloneCopyEvent( src, dest ) {
    
        if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
            return;
        }
    
        var type, i, l,
            oldData = jQuery._data( src ),
            curData = jQuery._data( dest, oldData ),
            events = oldData.events;
    
        if ( events ) {
            delete curData.handle;
            curData.events = {};
    
            for ( type in events ) {
                for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                    jQuery.event.add( dest, type, events[ type ][ i ] );
                }
            }
        }
    
        // make the cloned public data object a copy from the original
        if ( curData.data ) {
            curData.data = jQuery.extend( {}, curData.data );
        }
    }
    
    function fixCloneNodeIssues( src, dest ) {
        var nodeName, e, data;
    
        // We do not need to do anything for non-Elements
        if ( dest.nodeType !== 1 ) {
            return;
        }
    
        nodeName = dest.nodeName.toLowerCase();
    
        // IE6-8 copies events bound via attachEvent when using cloneNode.
        if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
            data = jQuery._data( dest );
    
            for ( e in data.events ) {
                jQuery.removeEvent( dest, e, data.handle );
            }
    
            // Event data gets referenced instead of copied if the expando gets copied too
            dest.removeAttribute( jQuery.expando );
        }
    
        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
        if ( nodeName === "script" && dest.text !== src.text ) {
            disableScript( dest ).text = src.text;
            restoreScript( dest );
    
        // IE6-10 improperly clones children of object elements using classid.
        // IE10 throws NoModificationAllowedError if parent is null, #12132.
        } else if ( nodeName === "object" ) {
            if ( dest.parentNode ) {
                dest.outerHTML = src.outerHTML;
            }
    
            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
                dest.innerHTML = src.innerHTML;
            }
    
        } else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set
    
            dest.defaultChecked = dest.checked = src.checked;
    
            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if ( dest.value !== src.value ) {
                dest.value = src.value;
            }
    
        // IE6-8 fails to return the selected option to the default selected
        // state when cloning options
        } else if ( nodeName === "option" ) {
            dest.defaultSelected = dest.selected = src.defaultSelected;
    
        // IE6-8 fails to set the defaultValue to the correct value when
        // cloning other types of input fields
        } else if ( nodeName === "input" || nodeName === "textarea" ) {
            dest.defaultValue = src.defaultValue;
        }
    }
    
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function( name, original ) {
        jQuery.fn[ name ] = function( selector ) {
            var elems,
                i = 0,
                ret = [],
                insert = jQuery( selector ),
                last = insert.length - 1;
    
            for ( ; i <= last; i++ ) {
                elems = i === last ? this : this.clone(true);
                jQuery( insert[i] )[ original ]( elems );
    
                // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
                core_push.apply( ret, elems.get() );
            }
    
            return this.pushStack( ret );
        };
    });
    
    function getAll( context, tag ) {
        var elems, elem,
            i = 0,
            found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
                typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
                undefined;
    
        if ( !found ) {
            for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
                if ( !tag || jQuery.nodeName( elem, tag ) ) {
                    found.push( elem );
                } else {
                    jQuery.merge( found, getAll( elem, tag ) );
                }
            }
        }
    
        return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
            jQuery.merge( [ context ], found ) :
            found;
    }
    
    // Used in buildFragment, fixes the defaultChecked property
    function fixDefaultChecked( elem ) {
        if ( manipulation_rcheckableType.test( elem.type ) ) {
            elem.defaultChecked = elem.checked;
        }
    }
    
    jQuery.extend({
        clone: function( elem, dataAndEvents, deepDataAndEvents ) {
            var destElements, node, clone, i, srcElements,
                inPage = jQuery.contains( elem.ownerDocument, elem );
    
            if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
                clone = elem.cloneNode( true );
    
            // IE<=8 does not properly clone detached, unknown element nodes
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
            }
    
            if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                    (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
    
                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll( clone );
                srcElements = getAll( elem );
    
                // Fix all IE cloning issues
                for ( i = 0; (node = srcElements[i]) != null; ++i ) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if ( destElements[i] ) {
                        fixCloneNodeIssues( node, destElements[i] );
                    }
                }
            }
    
            // Copy the events from the original to the clone
            if ( dataAndEvents ) {
                if ( deepDataAndEvents ) {
                    srcElements = srcElements || getAll( elem );
                    destElements = destElements || getAll( clone );
    
                    for ( i = 0; (node = srcElements[i]) != null; i++ ) {
                        cloneCopyEvent( node, destElements[i] );
                    }
                } else {
                    cloneCopyEvent( elem, clone );
                }
            }
    
            // Preserve script evaluation history
            destElements = getAll( clone, "script" );
            if ( destElements.length > 0 ) {
                setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
            }
    
            destElements = srcElements = node = null;
    
            // Return the cloned set
            return clone;
        },
    
        buildFragment: function( elems, context, scripts, selection ) {
            var j, elem, contains,
                tmp, tag, tbody, wrap,
                l = elems.length,
    
                // Ensure a safe fragment
                safe = createSafeFragment( context ),
    
                nodes = [],
                i = 0;
    
            for ( ; i < l; i++ ) {
                elem = elems[ i ];
    
                if ( elem || elem === 0 ) {
    
                    // Add nodes directly
                    if ( jQuery.type( elem ) === "object" ) {
                        jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
    
                    // Convert non-html into a text node
                    } else if ( !rhtml.test( elem ) ) {
                        nodes.push( context.createTextNode( elem ) );
    
                    // Convert html into DOM nodes
                    } else {
                        tmp = tmp || safe.appendChild( context.createElement("div") );
    
                        // Deserialize a standard representation
                        tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
                        wrap = wrapMap[ tag ] || wrapMap._default;
    
                        tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];
    
                        // Descend through wrappers to the right content
                        j = wrap[0];
                        while ( j-- ) {
                            tmp = tmp.lastChild;
                        }
    
                        // Manually add leading whitespace removed by IE
                        if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
                            nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
                        }
    
                        // Remove IE's autoinserted <tbody> from table fragments
                        if ( !jQuery.support.tbody ) {
    
                            // String was a <table>, *may* have spurious <tbody>
                            elem = tag === "table" && !rtbody.test( elem ) ?
                                tmp.firstChild :
    
                                // String was a bare <thead> or <tfoot>
                                wrap[1] === "<table>" && !rtbody.test( elem ) ?
                                    tmp :
                                    0;
    
                            j = elem && elem.childNodes.length;
                            while ( j-- ) {
                                if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
                                    elem.removeChild( tbody );
                                }
                            }
                        }
    
                        jQuery.merge( nodes, tmp.childNodes );
    
                        // Fix #12392 for WebKit and IE > 9
                        tmp.textContent = "";
    
                        // Fix #12392 for oldIE
                        while ( tmp.firstChild ) {
                            tmp.removeChild( tmp.firstChild );
                        }
    
                        // Remember the top-level container for proper cleanup
                        tmp = safe.lastChild;
                    }
                }
            }
    
            // Fix #11356: Clear elements from fragment
            if ( tmp ) {
                safe.removeChild( tmp );
            }
    
            // Reset defaultChecked for any radios and checkboxes
            // about to be appended to the DOM in IE 6/7 (#8060)
            if ( !jQuery.support.appendChecked ) {
                jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
            }
    
            i = 0;
            while ( (elem = nodes[ i++ ]) ) {
    
                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
                    continue;
                }
    
                contains = jQuery.contains( elem.ownerDocument, elem );
    
                // Append to fragment
                tmp = getAll( safe.appendChild( elem ), "script" );
    
                // Preserve script evaluation history
                if ( contains ) {
                    setGlobalEval( tmp );
                }
    
                // Capture executables
                if ( scripts ) {
                    j = 0;
                    while ( (elem = tmp[ j++ ]) ) {
                        if ( rscriptType.test( elem.type || "" ) ) {
                            scripts.push( elem );
                        }
                    }
                }
            }
    
            tmp = null;
    
            return safe;
        },
    
        cleanData: function( elems, /* internal */ acceptData ) {
            var elem, type, id, data,
                i = 0,
                internalKey = jQuery.expando,
                cache = jQuery.cache,
                deleteExpando = jQuery.support.deleteExpando,
                special = jQuery.event.special;
    
            for ( ; (elem = elems[i]) != null; i++ ) {
    
                if ( acceptData || jQuery.acceptData( elem ) ) {
    
                    id = elem[ internalKey ];
                    data = id && cache[ id ];
    
                    if ( data ) {
                        if ( data.events ) {
                            for ( type in data.events ) {
                                if ( special[ type ] ) {
                                    jQuery.event.remove( elem, type );
    
                                // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent( elem, type, data.handle );
                                }
                            }
                        }
    
                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if ( cache[ id ] ) {
    
                            delete cache[ id ];
    
                            // IE does not allow us to delete expando properties from nodes,
                            // nor does it have a removeAttribute function on Document nodes;
                            // we must handle all of these cases
                            if ( deleteExpando ) {
                                delete elem[ internalKey ];
    
                            } else if ( typeof elem.removeAttribute !== core_strundefined ) {
                                elem.removeAttribute( internalKey );
    
                            } else {
                                elem[ internalKey ] = null;
                            }
    
                            core_deletedIds.push( id );
                        }
                    }
                }
            }
        },
    
        _evalUrl: function( url ) {
            return jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "script",
                async: false,
                global: false,
                "throws": true
            });
        }
    });
    jQuery.fn.extend({
        wrapAll: function( html ) {
            if ( jQuery.isFunction( html ) ) {
                return this.each(function(i) {
                    jQuery(this).wrapAll( html.call(this, i) );
                });
            }
    
            if ( this[0] ) {
                // The elements to wrap the target around
                var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);
    
                if ( this[0].parentNode ) {
                    wrap.insertBefore( this[0] );
                }
    
                wrap.map(function() {
                    var elem = this;
    
                    while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
                        elem = elem.firstChild;
                    }
    
                    return elem;
                }).append( this );
            }
    
            return this;
        },
    
        wrapInner: function( html ) {
            if ( jQuery.isFunction( html ) ) {
                return this.each(function(i) {
                    jQuery(this).wrapInner( html.call(this, i) );
                });
            }
    
            return this.each(function() {
                var self = jQuery( this ),
                    contents = self.contents();
    
                if ( contents.length ) {
                    contents.wrapAll( html );
    
                } else {
                    self.append( html );
                }
            });
        },
    
        wrap: function( html ) {
            var isFunction = jQuery.isFunction( html );
    
            return this.each(function(i) {
                jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
            });
        },
    
        unwrap: function() {
            return this.parent().each(function() {
                if ( !jQuery.nodeName( this, "body" ) ) {
                    jQuery( this ).replaceWith( this.childNodes );
                }
            }).end();
        }
    });
    var iframe, getStyles, curCSS,
        ralpha = /alpha\([^)]*\)/i,
        ropacity = /opacity\s*=\s*([^)]*)/,
        rposition = /^(top|right|bottom|left)$/,
        // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
        // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rmargin = /^margin/,
        rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
        rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
        rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
        elemdisplay = { BODY: "block" },
    
        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        },
    
        cssExpand = [ "Top", "Right", "Bottom", "Left" ],
        cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    
    // return a css property mapped to a potentially vendor prefixed property
    function vendorPropName( style, name ) {
    
        // shortcut for names that are not vendor prefixed
        if ( name in style ) {
            return name;
        }
    
        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;
    
        while ( i-- ) {
            name = cssPrefixes[ i ] + capName;
            if ( name in style ) {
                return name;
            }
        }
    
        return origName;
    }
    
    function isHidden( elem, el ) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
    }
    
    function showHide( elements, show ) {
        var display, elem, hidden,
            values = [],
            index = 0,
            length = elements.length;
    
        for ( ; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
    
            values[ index ] = jQuery._data( elem, "olddisplay" );
            display = elem.style.display;
            if ( show ) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if ( !values[ index ] && display === "none" ) {
                    elem.style.display = "";
                }
    
                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if ( elem.style.display === "" && isHidden( elem ) ) {
                    values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
                }
            } else {
    
                if ( !values[ index ] ) {
                    hidden = isHidden( elem );
    
                    if ( display && display !== "none" || !hidden ) {
                        jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
                    }
                }
            }
        }
    
        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for ( index = 0; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
            if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
                elem.style.display = show ? values[ index ] || "" : "none";
            }
        }
    
        return elements;
    }
    
    jQuery.fn.extend({
        css: function( name, value ) {
            return jQuery.access( this, function( elem, name, value ) {
                var len, styles,
                    map = {},
                    i = 0;
    
                if ( jQuery.isArray( name ) ) {
                    styles = getStyles( elem );
                    len = name.length;
    
                    for ( ; i < len; i++ ) {
                        map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                    }
    
                    return map;
                }
    
                return value !== undefined ?
                    jQuery.style( elem, name, value ) :
                    jQuery.css( elem, name );
            }, name, value, arguments.length > 1 );
        },
        show: function() {
            return showHide( this, true );
        },
        hide: function() {
            return showHide( this );
        },
        toggle: function( state ) {
            if ( typeof state === "boolean" ) {
                return state ? this.show() : this.hide();
            }
    
            return this.each(function() {
                if ( isHidden( this ) ) {
                    jQuery( this ).show();
                } else {
                    jQuery( this ).hide();
                }
            });
        }
    });
    
    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function( elem, computed ) {
                    if ( computed ) {
                        // We should always get a number back from opacity
                        var ret = curCSS( elem, "opacity" );
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
    
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
    
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            // normalize float css property
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },
    
        // Get and set the style property on a DOM Node
        style: function( elem, name, value, extra ) {
            // Don't set styles on text and comment nodes
            if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                return;
            }
    
            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = jQuery.camelCase( name ),
                style = elem.style;
    
            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );
    
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // Check if we're setting a value
            if ( value !== undefined ) {
                type = typeof value;
    
                // convert relative number strings (+= or -=) to relative numbers. #7345
                if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                    value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                    // Fixes bug #9237
                    type = "number";
                }
    
                // Make sure that NaN and null values aren't set. See: #7116
                if ( value == null || type === "number" && isNaN( value ) ) {
                    return;
                }
    
                // If a number was passed in, add 'px' to the (except for certain CSS properties)
                if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                    value += "px";
                }
    
                // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
                // but it would mean to define eight (for every problematic property) identical functions
                if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
                    style[ name ] = "inherit";
                }
    
                // If a hook was provided, use that value, otherwise just set the specified value
                if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
    
                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                    // Fixes bug #5509
                    try {
                        style[ name ] = value;
                    } catch(e) {}
                }
    
            } else {
                // If a hook was provided get the non-computed value from there
                if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                    return ret;
                }
    
                // Otherwise just get the value from the style object
                return style[ name ];
            }
        },
    
        css: function( elem, name, extra, styles ) {
            var num, val, hooks,
                origName = jQuery.camelCase( name );
    
            // Make sure that we're working with the right name
            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );
    
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // If a hook was provided get the computed value from there
            if ( hooks && "get" in hooks ) {
                val = hooks.get( elem, true, extra );
            }
    
            // Otherwise, if a way to get the computed value exists, use that
            if ( val === undefined ) {
                val = curCSS( elem, name, styles );
            }
    
            //convert "normal" to computed value
            if ( val === "normal" && name in cssNormalTransform ) {
                val = cssNormalTransform[ name ];
            }
    
            // Return, converting to number if forced or a qualifier was provided and val looks numeric
            if ( extra === "" || extra ) {
                num = parseFloat( val );
                return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
            }
            return val;
        }
    });
    
    // NOTE: we've included the "window" in window.getComputedStyle
    // because jsdom on node.js will break without it.
    if ( window.getComputedStyle ) {
        getStyles = function( elem ) {
            return window.getComputedStyle( elem, null );
        };
    
        curCSS = function( elem, name, _computed ) {
            var width, minWidth, maxWidth,
                computed = _computed || getStyles( elem ),
    
                // getPropertyValue is only needed for .css('filter') in IE9, see #12537
                ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
                style = elem.style;
    
            if ( computed ) {
    
                if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
                    ret = jQuery.style( elem, name );
                }
    
                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
    
                    // Remember the original values
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
    
                    // Put in the new values to get a computed value out
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
    
                    // Revert the changed values
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
    
            return ret;
        };
    } else if ( document.documentElement.currentStyle ) {
        getStyles = function( elem ) {
            return elem.currentStyle;
        };
    
        curCSS = function( elem, name, _computed ) {
            var left, rs, rsLeft,
                computed = _computed || getStyles( elem ),
                ret = computed ? computed[ name ] : undefined,
                style = elem.style;
    
            // Avoid setting ret to empty string here
            // so we don't default to auto
            if ( ret == null && style && style[ name ] ) {
                ret = style[ name ];
            }
    
            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
    
            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are proportional to the parent element instead
            // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
            if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {
    
                // Remember the original values
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
    
                // Put in the new values to get a computed value out
                if ( rsLeft ) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";
    
                // Revert the changed values
                style.left = left;
                if ( rsLeft ) {
                    rs.left = rsLeft;
                }
            }
    
            return ret === "" ? "auto" : ret;
        };
    }
    
    function setPositiveNumber( elem, value, subtract ) {
        var matches = rnumsplit.exec( value );
        return matches ?
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
            value;
    }
    
    function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
        var i = extra === ( isBorderBox ? "border" : "content" ) ?
            // If we already have the right measurement, avoid augmentation
            4 :
            // Otherwise initialize for horizontal or vertical properties
            name === "width" ? 1 : 0,
    
            val = 0;
    
        for ( ; i < 4; i += 2 ) {
            // both box models exclude margin, so add it if we want it
            if ( extra === "margin" ) {
                val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
            }
    
            if ( isBorderBox ) {
                // border-box includes padding, so remove it if we want content
                if ( extra === "content" ) {
                    val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
                }
    
                // at this point, extra isn't border nor margin, so remove border
                if ( extra !== "margin" ) {
                    val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            } else {
                // at this point, extra isn't content, so add padding
                val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
    
                // at this point, extra isn't content nor padding, so add border
                if ( extra !== "padding" ) {
                    val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            }
        }
    
        return val;
    }
    
    function getWidthOrHeight( elem, name, extra ) {
    
        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles( elem ),
            isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
    
        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if ( val <= 0 || val == null ) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS( elem, name, styles );
            if ( val < 0 || val == null ) {
                val = elem.style[ name ];
            }
    
            // Computed unit is not pixels. Stop here and return.
            if ( rnumnonpx.test(val) ) {
                return val;
            }
    
            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );
    
            // Normalize "", auto, and prepare for extra
            val = parseFloat( val ) || 0;
        }
    
        // use the active box-sizing model to add/subtract irrelevant styles
        return ( val +
            augmentWidthOrHeight(
                elem,
                name,
                extra || ( isBorderBox ? "border" : "content" ),
                valueIsBorderBox,
                styles
            )
        ) + "px";
    }
    
    // Try to determine the default display value of an element
    function css_defaultDisplay( nodeName ) {
        var doc = document,
            display = elemdisplay[ nodeName ];
    
        if ( !display ) {
            display = actualDisplay( nodeName, doc );
    
            // If the simple way fails, read from inside an iframe
            if ( display === "none" || !display ) {
                // Use the already-created iframe if possible
                iframe = ( iframe ||
                    jQuery("<iframe frameborder='0' width='0' height='0'/>")
                    .css( "cssText", "display:block !important" )
                ).appendTo( doc.documentElement );
    
                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
                doc.write("<!doctype html><html><body>");
                doc.close();
    
                display = actualDisplay( nodeName, doc );
                iframe.detach();
            }
    
            // Store the correct default display
            elemdisplay[ nodeName ] = display;
        }
    
        return display;
    }
    
    // Called ONLY from within css_defaultDisplay
    function actualDisplay( name, doc ) {
        var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
            display = jQuery.css( elem[0], "display" );
        elem.remove();
        return display;
    }
    
    jQuery.each([ "height", "width" ], function( i, name ) {
        jQuery.cssHooks[ name ] = {
            get: function( elem, computed, extra ) {
                if ( computed ) {
                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
                        jQuery.swap( elem, cssShow, function() {
                            return getWidthOrHeight( elem, name, extra );
                        }) :
                        getWidthOrHeight( elem, name, extra );
                }
            },
    
            set: function( elem, value, extra ) {
                var styles = extra && getStyles( elem );
                return setPositiveNumber( elem, value, extra ?
                    augmentWidthOrHeight(
                        elem,
                        name,
                        extra,
                        jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                        styles
                    ) : 0
                );
            }
        };
    });
    
    if ( !jQuery.support.opacity ) {
        jQuery.cssHooks.opacity = {
            get: function( elem, computed ) {
                // IE uses filters for opacity
                return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
                    ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
                    computed ? "1" : "";
            },
    
            set: function( elem, value ) {
                var style = elem.style,
                    currentStyle = elem.currentStyle,
                    opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
                    filter = currentStyle && currentStyle.filter || style.filter || "";
    
                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;
    
                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                // if value === "", then remove inline opacity #12685
                if ( ( value >= 1 || value === "" ) &&
                        jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
                        style.removeAttribute ) {
    
                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute( "filter" );
    
                    // if there is no filter style applied in a css rule or unset inline opacity, we are done
                    if ( value === "" || currentStyle && !currentStyle.filter ) {
                        return;
                    }
                }
    
                // otherwise, set new filter values
                style.filter = ralpha.test( filter ) ?
                    filter.replace( ralpha, opacity ) :
                    filter + " " + opacity;
            }
        };
    }
    
    // These hooks cannot be added until DOM ready because the support test
    // for it is not run until after DOM ready
    jQuery(function() {
        if ( !jQuery.support.reliableMarginRight ) {
            jQuery.cssHooks.marginRight = {
                get: function( elem, computed ) {
                    if ( computed ) {
                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                        // Work around by temporarily setting element display to inline-block
                        return jQuery.swap( elem, { "display": "inline-block" },
                            curCSS, [ elem, "marginRight" ] );
                    }
                }
            };
        }
    
        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // getComputedStyle returns percent when specified for top/left/bottom/right
        // rather than make the css module depend on the offset module, we just check for it here
        if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
            jQuery.each( [ "top", "left" ], function( i, prop ) {
                jQuery.cssHooks[ prop ] = {
                    get: function( elem, computed ) {
                        if ( computed ) {
                            computed = curCSS( elem, prop );
                            // if curCSS returns percentage, fallback to offset
                            return rnumnonpx.test( computed ) ?
                                jQuery( elem ).position()[ prop ] + "px" :
                                computed;
                        }
                    }
                };
            });
        }
    
    });
    
    if ( jQuery.expr && jQuery.expr.filters ) {
        jQuery.expr.filters.hidden = function( elem ) {
            // Support: Opera <= 12.12
            // Opera reports offsetWidths and offsetHeights less than zero on some elements
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
                (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
        };
    
        jQuery.expr.filters.visible = function( elem ) {
            return !jQuery.expr.filters.hidden( elem );
        };
    }
    
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function( prefix, suffix ) {
        jQuery.cssHooks[ prefix + suffix ] = {
            expand: function( value ) {
                var i = 0,
                    expanded = {},
    
                    // assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [ value ];
    
                for ( ; i < 4; i++ ) {
                    expanded[ prefix + cssExpand[ i ] + suffix ] =
                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                }
    
                return expanded;
            }
        };
    
        if ( !rmargin.test( prefix ) ) {
            jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
        }
    });
    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;
    
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param( this.serializeArray() );
        },
        serializeArray: function() {
            return this.map(function(){
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop( this, "elements" );
                return elements ? jQuery.makeArray( elements ) : this;
            })
            .filter(function(){
                var type = this.type;
                // Use .is(":disabled") so that fieldset[disabled] works
                return this.name && !jQuery( this ).is( ":disabled" ) &&
                    rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                    ( this.checked || !manipulation_rcheckableType.test( type ) );
            })
            .map(function( i, elem ){
                var val = jQuery( this ).val();
    
                return val == null ?
                    null :
                    jQuery.isArray( val ) ?
                        jQuery.map( val, function( val ){
                            return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                        }) :
                        { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
            }).get();
        }
    });
    
    //Serialize an array of form elements or a set of
    //key/values into a query string
    jQuery.param = function( a, traditional ) {
        var prefix,
            s = [],
            add = function( key, value ) {
                // If value is a function, invoke it and return its value
                value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
                s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
            };
    
        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if ( traditional === undefined ) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
    
        // If an array was passed in, assume that it is an array of form elements.
        if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
            // Serialize the form elements
            jQuery.each( a, function() {
                add( this.name, this.value );
            });
    
        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for ( prefix in a ) {
                buildParams( prefix, a[ prefix ], traditional, add );
            }
        }
    
        // Return the resulting serialization
        return s.join( "&" ).replace( r20, "+" );
    };
    
    function buildParams( prefix, obj, traditional, add ) {
        var name;
    
        if ( jQuery.isArray( obj ) ) {
            // Serialize array item.
            jQuery.each( obj, function( i, v ) {
                if ( traditional || rbracket.test( prefix ) ) {
                    // Treat each array item as a scalar.
                    add( prefix, v );
    
                } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
                }
            });
    
        } else if ( !traditional && jQuery.type( obj ) === "object" ) {
            // Serialize object item.
            for ( name in obj ) {
                buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
            }
    
        } else {
            // Serialize scalar item.
            add( prefix, obj );
        }
    }
    jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {
    
        // Handle event binding
        jQuery.fn[ name ] = function( data, fn ) {
            return arguments.length > 0 ?
                this.on( name, null, data, fn ) :
                this.trigger( name );
        };
    });
    
    jQuery.fn.extend({
        hover: function( fnOver, fnOut ) {
            return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
        },
    
        bind: function( types, data, fn ) {
            return this.on( types, null, data, fn );
        },
        unbind: function( types, fn ) {
            return this.off( types, null, fn );
        },
    
        delegate: function( selector, types, data, fn ) {
            return this.on( types, selector, data, fn );
        },
        undelegate: function( selector, types, fn ) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
        }
    });
    var
        // Document location
        ajaxLocParts,
        ajaxLocation,
        ajax_nonce = jQuery.now(),
    
        ajax_rquery = /\?/,
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
    
        // Keep a copy of the old load method
        _load = jQuery.fn.load,
    
        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},
    
        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},
    
        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat("*");
    
    // #8138, IE may throw an exception when accessing
    // a field from window.location if document.domain has been set
    try {
        ajaxLocation = location.href;
    } catch( e ) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        ajaxLocation = document.createElement( "a" );
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    
    // Segment location into parts
    ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
    
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports( structure ) {
    
        // dataTypeExpression is optional and defaults to "*"
        return function( dataTypeExpression, func ) {
    
            if ( typeof dataTypeExpression !== "string" ) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
    
            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];
    
            if ( jQuery.isFunction( func ) ) {
                // For each dataType in the dataTypeExpression
                while ( (dataType = dataTypes[i++]) ) {
                    // Prepend if requested
                    if ( dataType[0] === "+" ) {
                        dataType = dataType.slice( 1 ) || "*";
                        (structure[ dataType ] = structure[ dataType ] || []).unshift( func );
    
                    // Otherwise append
                    } else {
                        (structure[ dataType ] = structure[ dataType ] || []).push( func );
                    }
                }
            }
        };
    }
    
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
    
        var inspected = {},
            seekingTransport = ( structure === transports );
    
        function inspect( dataType ) {
            var selected;
            inspected[ dataType ] = true;
            jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
                var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
                if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
                    options.dataTypes.unshift( dataTypeOrTransport );
                    inspect( dataTypeOrTransport );
                    return false;
                } else if ( seekingTransport ) {
                    return !( selected = dataTypeOrTransport );
                }
            });
            return selected;
        }
    
        return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
    }
    
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend( target, src ) {
        var deep, key,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};
    
        for ( key in src ) {
            if ( src[ key ] !== undefined ) {
                ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
            }
        }
        if ( deep ) {
            jQuery.extend( true, target, deep );
        }
    
        return target;
    }
    
    jQuery.fn.load = function( url, params, callback ) {
        if ( typeof url !== "string" && _load ) {
            return _load.apply( this, arguments );
        }
    
        var selector, response, type,
            self = this,
            off = url.indexOf(" ");
    
        if ( off >= 0 ) {
            selector = url.slice( off, url.length );
            url = url.slice( 0, off );
        }
    
        // If it's a function
        if ( jQuery.isFunction( params ) ) {
    
            // We assume that it's the callback
            callback = params;
            params = undefined;
    
        // Otherwise, build a param string
        } else if ( params && typeof params === "object" ) {
            type = "POST";
        }
    
        // If we have elements to modify, make the request
        if ( self.length > 0 ) {
            jQuery.ajax({
                url: url,
    
                // if "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: "html",
                data: params
            }).done(function( responseText ) {
    
                // Save response for use in complete callback
                response = arguments;
    
                self.html( selector ?
    
                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :
    
                    // Otherwise use the full result
                    responseText );
    
            }).complete( callback && function( jqXHR, status ) {
                self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
            });
        }
    
        return this;
    };
    
    // Attach a bunch of functions for handling common AJAX events
    jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
        jQuery.fn[ type ] = function( fn ){
            return this.on( type, fn );
        };
    });
    
    jQuery.extend({
    
        // Counter for holding the number of active queries
        active: 0,
    
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
    
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
    
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
    
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
    
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
    
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
    
                // Convert anything to text
                "* text": String,
    
                // Text to html (true = no transformation)
                "text html": true,
    
                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,
    
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
    
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
    
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function( target, settings ) {
            return settings ?
    
                // Building a settings object
                ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
    
                // Extending ajaxSettings
                ajaxExtend( jQuery.ajaxSettings, target );
        },
    
        ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
        ajaxTransport: addToPrefiltersOrTransports( transports ),
    
        // Main method
        ajax: function( url, options ) {
    
            // If url is an object, simulate pre-1.5 signature
            if ( typeof url === "object" ) {
                options = url;
                url = undefined;
            }
    
            // Force options to be an object
            options = options || {};
    
            var // Cross-domain detection vars
                parts,
                // Loop variable
                i,
                // URL without anti-cache param
                cacheURL,
                // Response headers as string
                responseHeadersString,
                // timeout handle
                timeoutTimer,
    
                // To know if global events are to be dispatched
                fireGlobals,
    
                transport,
                // Response headers
                responseHeaders,
                // Create the final options object
                s = jQuery.ajaxSetup( {}, options ),
                // Callbacks context
                callbackContext = s.context || s,
                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
                    jQuery( callbackContext ) :
                    jQuery.event,
                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                // Status-dependent callbacks
                statusCode = s.statusCode || {},
                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
                // The jqXHR state
                state = 0,
                // Default abort message
                strAbort = "canceled",
                // Fake xhr
                jqXHR = {
                    readyState: 0,
    
                    // Builds headers hashtable if needed
                    getResponseHeader: function( key ) {
                        var match;
                        if ( state === 2 ) {
                            if ( !responseHeaders ) {
                                responseHeaders = {};
                                while ( (match = rheaders.exec( responseHeadersString )) ) {
                                    responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                                }
                            }
                            match = responseHeaders[ key.toLowerCase() ];
                        }
                        return match == null ? null : match;
                    },
    
                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },
    
                    // Caches the header
                    setRequestHeader: function( name, value ) {
                        var lname = name.toLowerCase();
                        if ( !state ) {
                            name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                            requestHeaders[ name ] = value;
                        }
                        return this;
                    },
    
                    // Overrides response content-type header
                    overrideMimeType: function( type ) {
                        if ( !state ) {
                            s.mimeType = type;
                        }
                        return this;
                    },
    
                    // Status-dependent callbacks
                    statusCode: function( map ) {
                        var code;
                        if ( map ) {
                            if ( state < 2 ) {
                                for ( code in map ) {
                                    // Lazy-add the new callback in a way that preserves old ones
                                    statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                                }
                            } else {
                                // Execute the appropriate callbacks
                                jqXHR.always( map[ jqXHR.status ] );
                            }
                        }
                        return this;
                    },
    
                    // Cancel the request
                    abort: function( statusText ) {
                        var finalText = statusText || strAbort;
                        if ( transport ) {
                            transport.abort( finalText );
                        }
                        done( 0, finalText );
                        return this;
                    }
                };
    
            // Attach deferreds
            deferred.promise( jqXHR ).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
    
            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
    
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
    
            // Extract dataTypes list
            s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];
    
            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if ( s.crossDomain == null ) {
                parts = rurl.exec( s.url.toLowerCase() );
                s.crossDomain = !!( parts &&
                    ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
                        ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
                            ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
                );
            }
    
            // Convert data if not already a string
            if ( s.data && s.processData && typeof s.data !== "string" ) {
                s.data = jQuery.param( s.data, s.traditional );
            }
    
            // Apply prefilters
            inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
    
            // If request was aborted inside a prefilter, stop there
            if ( state === 2 ) {
                return jqXHR;
            }
    
            // We can fire global events as of now if asked to
            fireGlobals = s.global;
    
            // Watch for a new set of requests
            if ( fireGlobals && jQuery.active++ === 0 ) {
                jQuery.event.trigger("ajaxStart");
            }
    
            // Uppercase the type
            s.type = s.type.toUpperCase();
    
            // Determine if request has content
            s.hasContent = !rnoContent.test( s.type );
    
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;
    
            // More options handling for requests with no content
            if ( !s.hasContent ) {
    
                // If data is available, append data to url
                if ( s.data ) {
                    cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
    
                // Add anti-cache in url if needed
                if ( s.cache === false ) {
                    s.url = rts.test( cacheURL ) ?
    
                        // If there is already a '_' parameter, set its value
                        cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :
    
                        // Otherwise add one to the end
                        cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
                }
            }
    
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if ( s.ifModified ) {
                if ( jQuery.lastModified[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
                }
                if ( jQuery.etag[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
                }
            }
    
            // Set the correct header, if data is being sent
            if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                jqXHR.setRequestHeader( "Content-Type", s.contentType );
            }
    
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                    s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                    s.accepts[ "*" ]
            );
    
            // Check for headers option
            for ( i in s.headers ) {
                jqXHR.setRequestHeader( i, s.headers[ i ] );
            }
    
            // Allow custom headers/mimetypes and early abort
            if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
                // Abort if not done already and return
                return jqXHR.abort();
            }
    
            // aborting is no longer a cancellation
            strAbort = "abort";
    
            // Install callbacks on deferreds
            for ( i in { success: 1, error: 1, complete: 1 } ) {
                jqXHR[ i ]( s[ i ] );
            }
    
            // Get transport
            transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
    
            // If no transport, we auto-abort
            if ( !transport ) {
                done( -1, "No Transport" );
            } else {
                jqXHR.readyState = 1;
    
                // Send global event
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                }
                // Timeout
                if ( s.async && s.timeout > 0 ) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout );
                }
    
                try {
                    state = 1;
                    transport.send( requestHeaders, done );
                } catch ( e ) {
                    // Propagate exception as error if not done
                    if ( state < 2 ) {
                        done( -1, e );
                    // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }
    
            // Callback for when everything is done
            function done( status, nativeStatusText, responses, headers ) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;
    
                // Called once
                if ( state === 2 ) {
                    return;
                }
    
                // State is "done" now
                state = 2;
    
                // Clear timeout if it exists
                if ( timeoutTimer ) {
                    clearTimeout( timeoutTimer );
                }
    
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
    
                // Cache response headers
                responseHeadersString = headers || "";
    
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
    
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
    
                // Get response data
                if ( responses ) {
                    response = ajaxHandleResponses( s, jqXHR, responses );
                }
    
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert( s, response, jqXHR, isSuccess );
    
                // If successful, handle type chaining
                if ( isSuccess ) {
    
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if ( s.ifModified ) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if ( modified ) {
                            jQuery.lastModified[ cacheURL ] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if ( modified ) {
                            jQuery.etag[ cacheURL ] = modified;
                        }
                    }
    
                    // if no content
                    if ( status === 204 || s.type === "HEAD" ) {
                        statusText = "nocontent";
    
                    // if not modified
                    } else if ( status === 304 ) {
                        statusText = "notmodified";
    
                    // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if ( status || !statusText ) {
                        statusText = "error";
                        if ( status < 0 ) {
                            status = 0;
                        }
                    }
                }
    
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = ( nativeStatusText || statusText ) + "";
    
                // Success/Error
                if ( isSuccess ) {
                    deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                } else {
                    deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                }
    
                // Status-dependent callbacks
                jqXHR.statusCode( statusCode );
                statusCode = undefined;
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                        [ jqXHR, s, isSuccess ? success : error ] );
                }
    
                // Complete
                completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                    // Handle the global AJAX counter
                    if ( !( --jQuery.active ) ) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
    
            return jqXHR;
        },
    
        getJSON: function( url, data, callback ) {
            return jQuery.get( url, data, callback, "json" );
        },
    
        getScript: function( url, callback ) {
            return jQuery.get( url, undefined, callback, "script" );
        }
    });
    
    jQuery.each( [ "get", "post" ], function( i, method ) {
        jQuery[ method ] = function( url, data, callback, type ) {
            // shift arguments if data argument was omitted
            if ( jQuery.isFunction( data ) ) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
    
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    
    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses( s, jqXHR, responses ) {
        var firstDataType, ct, finalDataType, type,
            contents = s.contents,
            dataTypes = s.dataTypes;
    
        // Remove auto dataType and get content-type in the process
        while( dataTypes[ 0 ] === "*" ) {
            dataTypes.shift();
            if ( ct === undefined ) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
    
        // Check if we're dealing with a known content-type
        if ( ct ) {
            for ( type in contents ) {
                if ( contents[ type ] && contents[ type ].test( ct ) ) {
                    dataTypes.unshift( type );
                    break;
                }
            }
        }
    
        // Check to see if we have a response for the expected dataType
        if ( dataTypes[ 0 ] in responses ) {
            finalDataType = dataTypes[ 0 ];
        } else {
            // Try convertible dataTypes
            for ( type in responses ) {
                if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                    finalDataType = type;
                    break;
                }
                if ( !firstDataType ) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
    
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if ( finalDataType ) {
            if ( finalDataType !== dataTypes[ 0 ] ) {
                dataTypes.unshift( finalDataType );
            }
            return responses[ finalDataType ];
        }
    }
    
    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert( s, response, jqXHR, isSuccess ) {
        var conv2, current, conv, tmp, prev,
            converters = {},
            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();
    
        // Create converters map with lowercased keys
        if ( dataTypes[ 1 ] ) {
            for ( conv in s.converters ) {
                converters[ conv.toLowerCase() ] = s.converters[ conv ];
            }
        }
    
        current = dataTypes.shift();
    
        // Convert to each sequential dataType
        while ( current ) {
    
            if ( s.responseFields[ current ] ) {
                jqXHR[ s.responseFields[ current ] ] = response;
            }
    
            // Apply the dataFilter if provided
            if ( !prev && isSuccess && s.dataFilter ) {
                response = s.dataFilter( response, s.dataType );
            }
    
            prev = current;
            current = dataTypes.shift();
    
            if ( current ) {
    
                // There's only work to do if current dataType is non-auto
                if ( current === "*" ) {
    
                    current = prev;
    
                // Convert response if prev dataType is non-auto and differs from current
                } else if ( prev !== "*" && prev !== current ) {
    
                    // Seek a direct converter
                    conv = converters[ prev + " " + current ] || converters[ "* " + current ];
    
                    // If none found, seek a pair
                    if ( !conv ) {
                        for ( conv2 in converters ) {
    
                            // If conv2 outputs current
                            tmp = conv2.split( " " );
                            if ( tmp[ 1 ] === current ) {
    
                                // If prev can be converted to accepted input
                                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                    converters[ "* " + tmp[ 0 ] ];
                                if ( conv ) {
                                    // Condense equivalence converters
                                    if ( conv === true ) {
                                        conv = converters[ conv2 ];
    
                                    // Otherwise, insert the intermediate dataType
                                    } else if ( converters[ conv2 ] !== true ) {
                                        current = tmp[ 0 ];
                                        dataTypes.unshift( tmp[ 1 ] );
                                    }
                                    break;
                                }
                            }
                        }
                    }
    
                    // Apply converter (if not an equivalence)
                    if ( conv !== true ) {
    
                        // Unless errors are allowed to bubble, catch and return them
                        if ( conv && s[ "throws" ] ) {
                            response = conv( response );
                        } else {
                            try {
                                response = conv( response );
                            } catch ( e ) {
                                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                            }
                        }
                    }
                }
            }
        }
    
        return { state: "success", data: response };
    }
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function( text ) {
                jQuery.globalEval( text );
                return text;
            }
        }
    });
    
    // Handle cache's special case and global
    jQuery.ajaxPrefilter( "script", function( s ) {
        if ( s.cache === undefined ) {
            s.cache = false;
        }
        if ( s.crossDomain ) {
            s.type = "GET";
            s.global = false;
        }
    });
    
    // Bind script tag hack transport
    jQuery.ajaxTransport( "script", function(s) {
    
        // This transport only deals with cross domain requests
        if ( s.crossDomain ) {
    
            var script,
                head = document.head || jQuery("head")[0] || document.documentElement;
    
            return {
    
                send: function( _, callback ) {
    
                    script = document.createElement("script");
    
                    script.async = true;
    
                    if ( s.scriptCharset ) {
                        script.charset = s.scriptCharset;
                    }
    
                    script.src = s.url;
    
                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function( _, isAbort ) {
    
                        if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
    
                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;
    
                            // Remove the script
                            if ( script.parentNode ) {
                                script.parentNode.removeChild( script );
                            }
    
                            // Dereference the script
                            script = null;
    
                            // Callback if not abort
                            if ( !isAbort ) {
                                callback( 200, "success" );
                            }
                        }
                    };
    
                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    head.insertBefore( script, head.firstChild );
                },
    
                abort: function() {
                    if ( script ) {
                        script.onload( undefined, true );
                    }
                }
            };
        }
    });
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;
    
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
            this[ callback ] = true;
            return callback;
        }
    });
    
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
    
        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
                "url" :
                typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
            );
    
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
    
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
                s.jsonpCallback() :
                s.jsonpCallback;
    
            // Insert callback into url or form data
            if ( jsonProp ) {
                s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
            } else if ( s.jsonp !== false ) {
                s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
            }
    
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if ( !responseContainer ) {
                    jQuery.error( callbackName + " was not called" );
                }
                return responseContainer[ 0 ];
            };
    
            // force json dataType
            s.dataTypes[ 0 ] = "json";
    
            // Install callback
            overwritten = window[ callbackName ];
            window[ callbackName ] = function() {
                responseContainer = arguments;
            };
    
            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[ callbackName ] = overwritten;
    
                // Save back as free
                if ( s[ callbackName ] ) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
    
                    // save the callback name for future use
                    oldCallbacks.push( callbackName );
                }
    
                // Call if it was a function and we have a response
                if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                    overwritten( responseContainer[ 0 ] );
                }
    
                responseContainer = overwritten = undefined;
            });
    
            // Delegate to script
            return "script";
        }
    });
    var xhrCallbacks, xhrSupported,
        xhrId = 0,
        // #5280: Internet Explorer will keep connections alive if we don't abort on unload
        xhrOnUnloadAbort = window.ActiveXObject && function() {
            // Abort all pending requests
            var key;
            for ( key in xhrCallbacks ) {
                xhrCallbacks[ key ]( undefined, true );
            }
        };
    
    // Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch( e ) {}
    }
    
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch( e ) {}
    }
    
    // Create the request object
    // (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
        /* Microsoft failed to properly
         * implement the XMLHttpRequest in IE7 (can't request local files),
         * so we use the ActiveXObject when it is available
         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
         * we need a fallback.
         */
        function() {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } :
        // For all other browsers, use the standard XMLHttpRequest object
        createStandardXHR;
    
    // Determine support properties
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
    xhrSupported = jQuery.support.ajax = !!xhrSupported;
    
    // Create transport if the browser can provide an xhr
    if ( xhrSupported ) {
    
        jQuery.ajaxTransport(function( s ) {
            // Cross domain only allowed if supported through XMLHttpRequest
            if ( !s.crossDomain || jQuery.support.cors ) {
    
                var callback;
    
                return {
                    send: function( headers, complete ) {
    
                        // Get a new xhr
                        var handle, i,
                            xhr = s.xhr();
    
                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        if ( s.username ) {
                            xhr.open( s.type, s.url, s.async, s.username, s.password );
                        } else {
                            xhr.open( s.type, s.url, s.async );
                        }
    
                        // Apply custom fields if provided
                        if ( s.xhrFields ) {
                            for ( i in s.xhrFields ) {
                                xhr[ i ] = s.xhrFields[ i ];
                            }
                        }
    
                        // Override mime type if needed
                        if ( s.mimeType && xhr.overrideMimeType ) {
                            xhr.overrideMimeType( s.mimeType );
                        }
    
                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if ( !s.crossDomain && !headers["X-Requested-With"] ) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }
    
                        // Need an extra try/catch for cross domain requests in Firefox 3
                        try {
                            for ( i in headers ) {
                                xhr.setRequestHeader( i, headers[ i ] );
                            }
                        } catch( err ) {}
    
                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send( ( s.hasContent && s.data ) || null );
    
                        // Listener
                        callback = function( _, isAbort ) {
                            var status, responseHeaders, statusText, responses;
    
                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occurred
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            try {
    
                                // Was never called and is aborted or complete
                                if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
    
                                    // Only called once
                                    callback = undefined;
    
                                    // Do not keep as active anymore
                                    if ( handle ) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if ( xhrOnUnloadAbort ) {
                                            delete xhrCallbacks[ handle ];
                                        }
                                    }
    
                                    // If it's an abort
                                    if ( isAbort ) {
                                        // Abort it manually if needed
                                        if ( xhr.readyState !== 4 ) {
                                            xhr.abort();
                                        }
                                    } else {
                                        responses = {};
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
    
                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        if ( typeof xhr.responseText === "string" ) {
                                            responses.text = xhr.responseText;
                                        }
    
                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        } catch( e ) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }
    
                                        // Filter status for non standard behaviors
    
                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if ( !status && s.isLocal && !s.crossDomain ) {
                                            status = responses.text ? 200 : 404;
                                        // IE - #1450: sometimes returns 1223 when it should be 204
                                        } else if ( status === 1223 ) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch( firefoxAccessException ) {
                                if ( !isAbort ) {
                                    complete( -1, firefoxAccessException );
                                }
                            }
    
                            // Call complete if needed
                            if ( responses ) {
                                complete( status, statusText, responses, responseHeaders );
                            }
                        };
    
                        if ( !s.async ) {
                            // if we're in sync mode we fire the callback
                            callback();
                        } else if ( xhr.readyState === 4 ) {
                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            setTimeout( callback );
                        } else {
                            handle = ++xhrId;
                            if ( xhrOnUnloadAbort ) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if ( !xhrCallbacks ) {
                                    xhrCallbacks = {};
                                    jQuery( window ).unload( xhrOnUnloadAbort );
                                }
                                // Add to list of active xhrs callbacks
                                xhrCallbacks[ handle ] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },
    
                    abort: function() {
                        if ( callback ) {
                            callback( undefined, true );
                        }
                    }
                };
            }
        });
    }
    var fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
        rrun = /queueHooks$/,
        animationPrefilters = [ defaultPrefilter ],
        tweeners = {
            "*": [function( prop, value ) {
                var tween = this.createTween( prop, value ),
                    target = tween.cur(),
                    parts = rfxnum.exec( value ),
                    unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
    
                    // Starting value computation is required for potential unit mismatches
                    start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
                        rfxnum.exec( jQuery.css( tween.elem, prop ) ),
                    scale = 1,
                    maxIterations = 20;
    
                if ( start && start[ 3 ] !== unit ) {
                    // Trust units reported by jQuery.css
                    unit = unit || start[ 3 ];
    
                    // Make sure we update the tween properties later on
                    parts = parts || [];
    
                    // Iteratively approximate from a nonzero starting point
                    start = +target || 1;
    
                    do {
                        // If previous iteration zeroed out, double until we get *something*
                        // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                        scale = scale || ".5";
    
                        // Adjust and apply
                        start = start / scale;
                        jQuery.style( tween.elem, prop, start + unit );
    
                    // Update scale, tolerating zero or NaN from tween.cur()
                    // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
                    } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
                }
    
                // Update tween properties
                if ( parts ) {
                    start = tween.start = +start || +target || 0;
                    tween.unit = unit;
                    // If a +=/-= token was provided, we're doing a relative animation
                    tween.end = parts[ 1 ] ?
                        start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
                        +parts[ 2 ];
                }
    
                return tween;
            }]
        };
    
    // Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return ( fxNow = jQuery.now() );
    }
    
    function createTween( value, prop, animation ) {
        var tween,
            collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
            index = 0,
            length = collection.length;
        for ( ; index < length; index++ ) {
            if ( (tween = collection[ index ].call( animation, prop, value )) ) {
    
                // we're done with this property
                return tween;
            }
        }
    }
    
    function Animation( elem, properties, options ) {
        var result,
            stopped,
            index = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always( function() {
                // don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function() {
                if ( stopped ) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                    // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;
    
                for ( ; index < length ; index++ ) {
                    animation.tweens[ index ].run( percent );
                }
    
                deferred.notifyWith( elem, [ animation, percent, remaining ]);
    
                if ( percent < 1 && length ) {
                    return remaining;
                } else {
                    deferred.resolveWith( elem, [ animation ] );
                    return false;
                }
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend( {}, properties ),
                opts: jQuery.extend( true, { specialEasing: {} }, options ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function( prop, end ) {
                    var tween = jQuery.Tween( elem, animation.opts, prop, end,
                            animation.opts.specialEasing[ prop ] || animation.opts.easing );
                    animation.tweens.push( tween );
                    return tween;
                },
                stop: function( gotoEnd ) {
                    var index = 0,
                        // if we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if ( stopped ) {
                        return this;
                    }
                    stopped = true;
                    for ( ; index < length ; index++ ) {
                        animation.tweens[ index ].run( 1 );
                    }
    
                    // resolve when we played the last frame
                    // otherwise, reject
                    if ( gotoEnd ) {
                        deferred.resolveWith( elem, [ animation, gotoEnd ] );
                    } else {
                        deferred.rejectWith( elem, [ animation, gotoEnd ] );
                    }
                    return this;
                }
            }),
            props = animation.props;
    
        propFilter( props, animation.opts.specialEasing );
    
        for ( ; index < length ; index++ ) {
            result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
            if ( result ) {
                return result;
            }
        }
    
        jQuery.map( props, createTween, animation );
    
        if ( jQuery.isFunction( animation.opts.start ) ) {
            animation.opts.start.call( elem, animation );
        }
    
        jQuery.fx.timer(
            jQuery.extend( tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            })
        );
    
        // attach callbacks from options
        return animation.progress( animation.opts.progress )
            .done( animation.opts.done, animation.opts.complete )
            .fail( animation.opts.fail )
            .always( animation.opts.always );
    }
    
    function propFilter( props, specialEasing ) {
        var index, name, easing, value, hooks;
    
        // camelCase, specialEasing and expand cssHook pass
        for ( index in props ) {
            name = jQuery.camelCase( index );
            easing = specialEasing[ name ];
            value = props[ index ];
            if ( jQuery.isArray( value ) ) {
                easing = value[ 1 ];
                value = props[ index ] = value[ 0 ];
            }
    
            if ( index !== name ) {
                props[ name ] = value;
                delete props[ index ];
            }
    
            hooks = jQuery.cssHooks[ name ];
            if ( hooks && "expand" in hooks ) {
                value = hooks.expand( value );
                delete props[ name ];
    
                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for ( index in value ) {
                    if ( !( index in props ) ) {
                        props[ index ] = value[ index ];
                        specialEasing[ index ] = easing;
                    }
                }
            } else {
                specialEasing[ name ] = easing;
            }
        }
    }
    
    jQuery.Animation = jQuery.extend( Animation, {
    
        tweener: function( props, callback ) {
            if ( jQuery.isFunction( props ) ) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }
    
            var prop,
                index = 0,
                length = props.length;
    
            for ( ; index < length ; index++ ) {
                prop = props[ index ];
                tweeners[ prop ] = tweeners[ prop ] || [];
                tweeners[ prop ].unshift( callback );
            }
        },
    
        prefilter: function( callback, prepend ) {
            if ( prepend ) {
                animationPrefilters.unshift( callback );
            } else {
                animationPrefilters.push( callback );
            }
        }
    });
    
    function defaultPrefilter( elem, props, opts ) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHidden( elem ),
            dataShow = jQuery._data( elem, "fxshow" );
    
        // handle queue: false promises
        if ( !opts.queue ) {
            hooks = jQuery._queueHooks( elem, "fx" );
            if ( hooks.unqueued == null ) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if ( !hooks.unqueued ) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
    
            anim.always(function() {
                // doing this makes sure that the complete handler will be called
                // before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if ( !jQuery.queue( elem, "fx" ).length ) {
                        hooks.empty.fire();
                    }
                });
            });
        }
    
        // height/width overflow pass
        if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
    
            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            if ( jQuery.css( elem, "display" ) === "inline" &&
                    jQuery.css( elem, "float" ) === "none" ) {
    
                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
                    style.display = "inline-block";
    
                } else {
                    style.zoom = 1;
                }
            }
        }
    
        if ( opts.overflow ) {
            style.overflow = "hidden";
            if ( !jQuery.support.shrinkWrapBlocks ) {
                anim.always(function() {
                    style.overflow = opts.overflow[ 0 ];
                    style.overflowX = opts.overflow[ 1 ];
                    style.overflowY = opts.overflow[ 2 ];
                });
            }
        }
    
    
        // show/hide pass
        for ( prop in props ) {
            value = props[ prop ];
            if ( rfxtypes.exec( value ) ) {
                delete props[ prop ];
                toggle = toggle || value === "toggle";
                if ( value === ( hidden ? "hide" : "show" ) ) {
                    continue;
                }
                orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
            }
        }
    
        if ( !jQuery.isEmptyObject( orig ) ) {
            if ( dataShow ) {
                if ( "hidden" in dataShow ) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = jQuery._data( elem, "fxshow", {} );
            }
    
            // store state if its toggle - enables .stop().toggle() to "reverse"
            if ( toggle ) {
                dataShow.hidden = !hidden;
            }
            if ( hidden ) {
                jQuery( elem ).show();
            } else {
                anim.done(function() {
                    jQuery( elem ).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery._removeData( elem, "fxshow" );
                for ( prop in orig ) {
                    jQuery.style( elem, prop, orig[ prop ] );
                }
            });
            for ( prop in orig ) {
                tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
    
                if ( !( prop in dataShow ) ) {
                    dataShow[ prop ] = tween.start;
                    if ( hidden ) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }
    
    function Tween( elem, options, prop, end, easing ) {
        return new Tween.prototype.init( elem, options, prop, end, easing );
    }
    jQuery.Tween = Tween;
    
    Tween.prototype = {
        constructor: Tween,
        init: function( elem, options, prop, end, easing, unit ) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
        },
        cur: function() {
            var hooks = Tween.propHooks[ this.prop ];
    
            return hooks && hooks.get ?
                hooks.get( this ) :
                Tween.propHooks._default.get( this );
        },
        run: function( percent ) {
            var eased,
                hooks = Tween.propHooks[ this.prop ];
    
            if ( this.options.duration ) {
                this.pos = eased = jQuery.easing[ this.easing ](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = ( this.end - this.start ) * eased + this.start;
    
            if ( this.options.step ) {
                this.options.step.call( this.elem, this.now, this );
            }
    
            if ( hooks && hooks.set ) {
                hooks.set( this );
            } else {
                Tween.propHooks._default.set( this );
            }
            return this;
        }
    };
    
    Tween.prototype.init.prototype = Tween.prototype;
    
    Tween.propHooks = {
        _default: {
            get: function( tween ) {
                var result;
    
                if ( tween.elem[ tween.prop ] != null &&
                    (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                    return tween.elem[ tween.prop ];
                }
    
                // passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css( tween.elem, tween.prop, "" );
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function( tween ) {
                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if ( jQuery.fx.step[ tween.prop ] ) {
                    jQuery.fx.step[ tween.prop ]( tween );
                } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                    jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                } else {
                    tween.elem[ tween.prop ] = tween.now;
                }
            }
        }
    };
    
    // Support: IE <=9
    // Panic based approach to setting things on disconnected nodes
    
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function( tween ) {
            if ( tween.elem.nodeType && tween.elem.parentNode ) {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    };
    
    jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
        var cssFn = jQuery.fn[ name ];
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply( this, arguments ) :
                this.animate( genFx( name, true ), speed, easing, callback );
        };
    });
    
    jQuery.fn.extend({
        fadeTo: function( speed, to, easing, callback ) {
    
            // show any hidden elements after setting opacity to 0
            return this.filter( isHidden ).css( "opacity", 0 ).show()
    
                // animate to the value specified
                .end().animate({ opacity: to }, speed, easing, callback );
        },
        animate: function( prop, speed, easing, callback ) {
            var empty = jQuery.isEmptyObject( prop ),
                optall = jQuery.speed( speed, easing, callback ),
                doAnimation = function() {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation( this, jQuery.extend( {}, prop ), optall );
    
                    // Empty animations, or finishing resolves immediately
                    if ( empty || jQuery._data( this, "finish" ) ) {
                        anim.stop( true );
                    }
                };
                doAnimation.finish = doAnimation;
    
            return empty || optall.queue === false ?
                this.each( doAnimation ) :
                this.queue( optall.queue, doAnimation );
        },
        stop: function( type, clearQueue, gotoEnd ) {
            var stopQueue = function( hooks ) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop( gotoEnd );
            };
    
            if ( typeof type !== "string" ) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if ( clearQueue && type !== false ) {
                this.queue( type || "fx", [] );
            }
    
            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = jQuery._data( this );
    
                if ( index ) {
                    if ( data[ index ] && data[ index ].stop ) {
                        stopQueue( data[ index ] );
                    }
                } else {
                    for ( index in data ) {
                        if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                            stopQueue( data[ index ] );
                        }
                    }
                }
    
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                        timers[ index ].anim.stop( gotoEnd );
                        dequeue = false;
                        timers.splice( index, 1 );
                    }
                }
    
                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if ( dequeue || !gotoEnd ) {
                    jQuery.dequeue( this, type );
                }
            });
        },
        finish: function( type ) {
            if ( type !== false ) {
                type = type || "fx";
            }
            return this.each(function() {
                var index,
                    data = jQuery._data( this ),
                    queue = data[ type + "queue" ],
                    hooks = data[ type + "queueHooks" ],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;
    
                // enable finishing flag on private data
                data.finish = true;
    
                // empty the queue first
                jQuery.queue( this, type, [] );
    
                if ( hooks && hooks.stop ) {
                    hooks.stop.call( this, true );
                }
    
                // look for any active animations, and finish them
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                        timers[ index ].anim.stop( true );
                        timers.splice( index, 1 );
                    }
                }
    
                // look for any animations in the old queue and finish them
                for ( index = 0; index < length; index++ ) {
                    if ( queue[ index ] && queue[ index ].finish ) {
                        queue[ index ].finish.call( this );
                    }
                }
    
                // turn off finishing flag
                delete data.finish;
            });
        }
    });
    
    // Generate parameters to create a standard animation
    function genFx( type, includeWidth ) {
        var which,
            attrs = { height: type },
            i = 0;
    
        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth? 1 : 0;
        for( ; i < 4 ; i += 2 - includeWidth ) {
            which = cssExpand[ i ];
            attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
        }
    
        if ( includeWidth ) {
            attrs.opacity = attrs.width = type;
        }
    
        return attrs;
    }
    
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function( name, props ) {
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return this.animate( props, speed, easing, callback );
        };
    });
    
    jQuery.speed = function( speed, easing, fn ) {
        var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction( speed ) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
        };
    
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
            opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
    
        // normalize opt.queue - true/undefined/null -> "fx"
        if ( opt.queue == null || opt.queue === true ) {
            opt.queue = "fx";
        }
    
        // Queueing
        opt.old = opt.complete;
    
        opt.complete = function() {
            if ( jQuery.isFunction( opt.old ) ) {
                opt.old.call( this );
            }
    
            if ( opt.queue ) {
                jQuery.dequeue( this, opt.queue );
            }
        };
    
        return opt;
    };
    
    jQuery.easing = {
        linear: function( p ) {
            return p;
        },
        swing: function( p ) {
            return 0.5 - Math.cos( p*Math.PI ) / 2;
        }
    };
    
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function() {
        var timer,
            timers = jQuery.timers,
            i = 0;
    
        fxNow = jQuery.now();
    
        for ( ; i < timers.length; i++ ) {
            timer = timers[ i ];
            // Checks the timer has not already been removed
            if ( !timer() && timers[ i ] === timer ) {
                timers.splice( i--, 1 );
            }
        }
    
        if ( !timers.length ) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    
    jQuery.fx.timer = function( timer ) {
        if ( timer() && jQuery.timers.push( timer ) ) {
            jQuery.fx.start();
        }
    };
    
    jQuery.fx.interval = 13;
    
    jQuery.fx.start = function() {
        if ( !timerId ) {
            timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
        }
    };
    
    jQuery.fx.stop = function() {
        clearInterval( timerId );
        timerId = null;
    };
    
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    
    // Back Compat <1.8 extension point
    jQuery.fx.step = {};
    
    if ( jQuery.expr && jQuery.expr.filters ) {
        jQuery.expr.filters.animated = function( elem ) {
            return jQuery.grep(jQuery.timers, function( fn ) {
                return elem === fn.elem;
            }).length;
        };
    }
    jQuery.fn.offset = function( options ) {
        if ( arguments.length ) {
            return options === undefined ?
                this :
                this.each(function( i ) {
                    jQuery.offset.setOffset( this, options, i );
                });
        }
    
        var docElem, win,
            box = { top: 0, left: 0 },
            elem = this[ 0 ],
            doc = elem && elem.ownerDocument;
    
        if ( !doc ) {
            return;
        }
    
        docElem = doc.documentElement;
    
        // Make sure it's not a disconnected DOM node
        if ( !jQuery.contains( docElem, elem ) ) {
            return box;
        }
    
        // If we don't have gBCR, just use 0,0 rather than error
        // BlackBerry 5, iOS 3 (original iPhone)
        if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow( doc );
        return {
            top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
            left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
        };
    };
    
    jQuery.offset = {
    
        setOffset: function( elem, options, i ) {
            var position = jQuery.css( elem, "position" );
    
            // set position first, in-case top/left are set even on static elem
            if ( position === "static" ) {
                elem.style.position = "relative";
            }
    
            var curElem = jQuery( elem ),
                curOffset = curElem.offset(),
                curCSSTop = jQuery.css( elem, "top" ),
                curCSSLeft = jQuery.css( elem, "left" ),
                calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
                props = {}, curPosition = {}, curTop, curLeft;
    
            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if ( calculatePosition ) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat( curCSSTop ) || 0;
                curLeft = parseFloat( curCSSLeft ) || 0;
            }
    
            if ( jQuery.isFunction( options ) ) {
                options = options.call( elem, i, curOffset );
            }
    
            if ( options.top != null ) {
                props.top = ( options.top - curOffset.top ) + curTop;
            }
            if ( options.left != null ) {
                props.left = ( options.left - curOffset.left ) + curLeft;
            }
    
            if ( "using" in options ) {
                options.using.call( elem, props );
            } else {
                curElem.css( props );
            }
        }
    };
    
    
    jQuery.fn.extend({
    
        position: function() {
            if ( !this[ 0 ] ) {
                return;
            }
    
            var offsetParent, offset,
                parentOffset = { top: 0, left: 0 },
                elem = this[ 0 ];
    
            // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
            if ( jQuery.css( elem, "position" ) === "fixed" ) {
                // we assume that getBoundingClientRect is available when computed position is fixed
                offset = elem.getBoundingClientRect();
            } else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();
    
                // Get correct offsets
                offset = this.offset();
                if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
                    parentOffset = offsetParent.offset();
                }
    
                // Add offsetParent borders
                parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
                parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
            }
    
            // Subtract parent offsets and element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            return {
                top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
                left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
            };
        },
    
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
                while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    
    
    // Create scrollLeft and scrollTop methods
    jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
        var top = /Y/.test( prop );
    
        jQuery.fn[ method ] = function( val ) {
            return jQuery.access( this, function( elem, method, val ) {
                var win = getWindow( elem );
    
                if ( val === undefined ) {
                    return win ? (prop in win) ? win[ prop ] :
                        win.document.documentElement[ method ] :
                        elem[ method ];
                }
    
                if ( win ) {
                    win.scrollTo(
                        !top ? val : jQuery( win ).scrollLeft(),
                        top ? val : jQuery( win ).scrollTop()
                    );
    
                } else {
                    elem[ method ] = val;
                }
            }, method, val, arguments.length, null );
        };
    });
    
    function getWindow( elem ) {
        return jQuery.isWindow( elem ) ?
            elem :
            elem.nodeType === 9 ?
                elem.defaultView || elem.parentWindow :
                false;
    }
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
        jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
            // margin is only for outerHeight, outerWidth
            jQuery.fn[ funcName ] = function( margin, value ) {
                var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                    extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
    
                return jQuery.access( this, function( elem, type, value ) {
                    var doc;
    
                    if ( jQuery.isWindow( elem ) ) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement[ "client" + name ];
                    }
    
                    // Get document width or height
                    if ( elem.nodeType === 9 ) {
                        doc = elem.documentElement;
    
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                        return Math.max(
                            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                            elem.body[ "offset" + name ], doc[ "offset" + name ],
                            doc[ "client" + name ]
                        );
                    }
    
                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css( elem, type, extra ) :
    
                        // Set width or height on the element
                        jQuery.style( elem, type, value, extra );
                }, type, chainable ? margin : undefined, chainable, null );
            };
        });
    });
    // Limit scope pollution from any deprecated API
    // (function() {
    
    // The number of elements contained in the matched element set
    jQuery.fn.size = function() {
        return this.length;
    };
    
    jQuery.fn.andSelf = jQuery.fn.addBack;
    
    // })();
    if ( typeof module === "object" && module && typeof module.exports === "object" ) {
        // Expose jQuery as module.exports in loaders that implement the Node
        // module pattern (including browserify). Do not create the global, since
        // the user will be storing it themselves locally, and globals are frowned
        // upon in the Node module world.
        module.exports = jQuery;
    } else {
        // Otherwise expose jQuery to the global object as usual
        window.jQuery = window.$ = jQuery;
    
        // Register as a named AMD module, since jQuery can be concatenated with other
        // files that may use define, but not via a proper concatenation script that
        // understands anonymous AMD modules. A named AMD is safest and most robust
        // way to register. Lowercase jquery is used because AMD module names are
        // derived from file names, and jQuery is normally delivered in a lowercase
        // file name. Do this after creating the global so that if an AMD module wants
        // to call noConflict to hide this version of jQuery, it will work.
        if ( typeof define === "function" && define.amd ) {
            define( "jquery", [], function () { return jQuery; } );
        }
    }
    
    })( window );
    (function($, undefined) {
    
    /**
     * Unobtrusive scripting adapter for jQuery
     * https://github.com/rails/jquery-ujs
     *
     * Requires jQuery 1.7.0 or later.
     *
     * Released under the MIT license
     *
     */
    
      // Cut down on the number of issues from people inadvertently including jquery_ujs twice
      // by detecting and raising an error when it happens.
      if ( $.rails !== undefined ) {
        $.error('jquery-ujs has already been loaded!');
      }
    
      // Shorthand to make it a little easier to call public rails functions from within rails.js
      var rails;
      var $document = $(document);
    
      $.rails = rails = {
        // Link elements bound by jquery-ujs
        linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]',
    
        // Button elements boud jquery-ujs
        buttonClickSelector: 'button[data-remote]',
    
        // Select elements bound by jquery-ujs
        inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',
    
        // Form elements bound by jquery-ujs
        formSubmitSelector: 'form',
    
        // Form input elements bound by jquery-ujs
        formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type])',
    
        // Form input elements disabled during form submission
        disableSelector: 'input[data-disable-with], button[data-disable-with], textarea[data-disable-with]',
    
        // Form input elements re-enabled after form submission
        enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled',
    
        // Form required input elements
        requiredInputSelector: 'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',
    
        // Form file input elements
        fileInputSelector: 'input[type=file]',
    
        // Link onClick disable selector with possible reenable after remote submission
        linkDisableSelector: 'a[data-disable-with]',
    
        // Make sure that every Ajax request sends the CSRF token
        CSRFProtection: function(xhr) {
          var token = $('meta[name="csrf-token"]').attr('content');
          if (token) xhr.setRequestHeader('X-CSRF-Token', token);
        },
    
        // Triggers an event on an element and returns false if the event result is false
        fire: function(obj, name, data) {
          var event = $.Event(name);
          obj.trigger(event, data);
          return event.result !== false;
        },
    
        // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
        confirm: function(message) {
          return confirm(message);
        },
    
        // Default ajax function, may be overridden with custom function in $.rails.ajax
        ajax: function(options) {
          return $.ajax(options);
        },
    
        // Default way to get an element's href. May be overridden at $.rails.href.
        href: function(element) {
          return element.attr('href');
        },
    
        // Submits "remote" forms and links with ajax
        handleRemote: function(element) {
          var method, url, data, elCrossDomain, crossDomain, withCredentials, dataType, options;
    
          if (rails.fire(element, 'ajax:before')) {
            elCrossDomain = element.data('cross-domain');
            crossDomain = elCrossDomain === undefined ? null : elCrossDomain;
            withCredentials = element.data('with-credentials') || null;
            dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);
    
            if (element.is('form')) {
              method = element.attr('method');
              url = element.attr('action');
              data = element.serializeArray();
              // memoized value from clicked submit button
              var button = element.data('ujs:submit-button');
              if (button) {
                data.push(button);
                element.data('ujs:submit-button', null);
              }
            } else if (element.is(rails.inputChangeSelector)) {
              method = element.data('method');
              url = element.data('url');
              data = element.serialize();
              if (element.data('params')) data = data + "&" + element.data('params');
            } else if (element.is(rails.buttonClickSelector)) {
              method = element.data('method') || 'get';
              url = element.data('url');
              data = element.serialize();
              if (element.data('params')) data = data + "&" + element.data('params');
            } else {
              method = element.data('method');
              url = rails.href(element);
              data = element.data('params') || null;
            }
    
            options = {
              type: method || 'GET', data: data, dataType: dataType,
              // stopping the "ajax:beforeSend" event will cancel the ajax request
              beforeSend: function(xhr, settings) {
                if (settings.dataType === undefined) {
                  xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
                }
                return rails.fire(element, 'ajax:beforeSend', [xhr, settings]);
              },
              success: function(data, status, xhr) {
                element.trigger('ajax:success', [data, status, xhr]);
              },
              complete: function(xhr, status) {
                element.trigger('ajax:complete', [xhr, status]);
              },
              error: function(xhr, status, error) {
                element.trigger('ajax:error', [xhr, status, error]);
              },
              crossDomain: crossDomain
            };
    
            // There is no withCredentials for IE6-8 when
            // "Enable native XMLHTTP support" is disabled
            if (withCredentials) {
              options.xhrFields = {
                withCredentials: withCredentials
              };
            }
    
            // Only pass url to `ajax` options if not blank
            if (url) { options.url = url; }
    
            var jqxhr = rails.ajax(options);
            element.trigger('ajax:send', jqxhr);
            return jqxhr;
          } else {
            return false;
          }
        },
    
        // Handles "data-method" on links such as:
        // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
        handleMethod: function(link) {
          var href = rails.href(link),
            method = link.data('method'),
            target = link.attr('target'),
            csrf_token = $('meta[name=csrf-token]').attr('content'),
            csrf_param = $('meta[name=csrf-param]').attr('content'),
            form = $('<form method="post" action="' + href + '"></form>'),
            metadata_input = '<input name="_method" value="' + method + '" type="hidden" />';
    
          if (csrf_param !== undefined && csrf_token !== undefined) {
            metadata_input += '<input name="' + csrf_param + '" value="' + csrf_token + '" type="hidden" />';
          }
    
          if (target) { form.attr('target', target); }
    
          form.hide().append(metadata_input).appendTo('body');
          form.submit();
        },
    
        /* Disables form elements:
          - Caches element value in 'ujs:enable-with' data store
          - Replaces element text with value of 'data-disable-with' attribute
          - Sets disabled property to true
        */
        disableFormElements: function(form) {
          form.find(rails.disableSelector).each(function() {
            var element = $(this), method = element.is('button') ? 'html' : 'val';
            element.data('ujs:enable-with', element[method]());
            element[method](element.data('disable-with'));
            element.prop('disabled', true);
          });
        },
    
        /* Re-enables disabled form elements:
          - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
          - Sets disabled property to false
        */
        enableFormElements: function(form) {
          form.find(rails.enableSelector).each(function() {
            var element = $(this), method = element.is('button') ? 'html' : 'val';
            if (element.data('ujs:enable-with')) element[method](element.data('ujs:enable-with'));
            element.prop('disabled', false);
          });
        },
    
       /* For 'data-confirm' attribute:
          - Fires `confirm` event
          - Shows the confirmation dialog
          - Fires the `confirm:complete` event
    
          Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
          Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
          Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
          return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
       */
        allowAction: function(element) {
          var message = element.data('confirm'),
              answer = false, callback;
          if (!message) { return true; }
    
          if (rails.fire(element, 'confirm')) {
            answer = rails.confirm(message);
            callback = rails.fire(element, 'confirm:complete', [answer]);
          }
          return answer && callback;
        },
    
        // Helper function which checks for blank inputs in a form that match the specified CSS selector
        blankInputs: function(form, specifiedSelector, nonBlank) {
          var inputs = $(), input, valueToCheck,
              selector = specifiedSelector || 'input,textarea',
              allInputs = form.find(selector);
    
          allInputs.each(function() {
            input = $(this);
            valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : input.val();
            // If nonBlank and valueToCheck are both truthy, or nonBlank and valueToCheck are both falsey
            if (!valueToCheck === !nonBlank) {
    
              // Don't count unchecked required radio if other radio with same name is checked
              if (input.is('input[type=radio]') && allInputs.filter('input[type=radio]:checked[name="' + input.attr('name') + '"]').length) {
                return true; // Skip to next input
              }
    
              inputs = inputs.add(input);
            }
          });
          return inputs.length ? inputs : false;
        },
    
        // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
        nonBlankInputs: function(form, specifiedSelector) {
          return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
        },
    
        // Helper function, needed to provide consistent behavior in IE
        stopEverything: function(e) {
          $(e.target).trigger('ujs:everythingStopped');
          e.stopImmediatePropagation();
          return false;
        },
    
        //  replace element's html with the 'data-disable-with' after storing original html
        //  and prevent clicking on it
        disableElement: function(element) {
          element.data('ujs:enable-with', element.html()); // store enabled state
          element.html(element.data('disable-with')); // set to disabled state
          element.bind('click.railsDisable', function(e) { // prevent further clicking
            return rails.stopEverything(e);
          });
        },
    
        // restore element to its original state which was disabled by 'disableElement' above
        enableElement: function(element) {
          if (element.data('ujs:enable-with') !== undefined) {
            element.html(element.data('ujs:enable-with')); // set to old enabled state
            element.removeData('ujs:enable-with'); // clean up cache
          }
          element.unbind('click.railsDisable'); // enable element
        }
    
      };
    
      if (rails.fire($document, 'rails:attachBindings')) {
    
        $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});
    
        $document.delegate(rails.linkDisableSelector, 'ajax:complete', function() {
            rails.enableElement($(this));
        });
    
        $document.delegate(rails.linkClickSelector, 'click.rails', function(e) {
          var link = $(this), method = link.data('method'), data = link.data('params');
          if (!rails.allowAction(link)) return rails.stopEverything(e);
    
          if (link.is(rails.linkDisableSelector)) rails.disableElement(link);
    
          if (link.data('remote') !== undefined) {
            if ( (e.metaKey || e.ctrlKey) && (!method || method === 'GET') && !data ) { return true; }
    
            var handleRemote = rails.handleRemote(link);
            // response from rails.handleRemote() will either be false or a deferred object promise.
            if (handleRemote === false) {
              rails.enableElement(link);
            } else {
              handleRemote.error( function() { rails.enableElement(link); } );
            }
            return false;
    
          } else if (link.data('method')) {
            rails.handleMethod(link);
            return false;
          }
        });
    
        $document.delegate(rails.buttonClickSelector, 'click.rails', function(e) {
          var button = $(this);
          if (!rails.allowAction(button)) return rails.stopEverything(e);
    
          rails.handleRemote(button);
          return false;
        });
    
        $document.delegate(rails.inputChangeSelector, 'change.rails', function(e) {
          var link = $(this);
          if (!rails.allowAction(link)) return rails.stopEverything(e);
    
          rails.handleRemote(link);
          return false;
        });
    
        $document.delegate(rails.formSubmitSelector, 'submit.rails', function(e) {
          var form = $(this),
            remote = form.data('remote') !== undefined,
            blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector),
            nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);
    
          if (!rails.allowAction(form)) return rails.stopEverything(e);
    
          // skip other logic when required values are missing or file upload is present
          if (blankRequiredInputs && form.attr("novalidate") == undefined && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
            return rails.stopEverything(e);
          }
    
          if (remote) {
            if (nonBlankFileInputs) {
              // slight timeout so that the submit button gets properly serialized
              // (make it easy for event handler to serialize form without disabled values)
              setTimeout(function(){ rails.disableFormElements(form); }, 13);
              var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);
    
              // re-enable form elements if event bindings return false (canceling normal form submission)
              if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }
    
              return aborted;
            }
    
            rails.handleRemote(form);
            return false;
    
          } else {
            // slight timeout so that the submit button gets properly serialized
            setTimeout(function(){ rails.disableFormElements(form); }, 13);
          }
        });
    
        $document.delegate(rails.formInputClickSelector, 'click.rails', function(event) {
          var button = $(this);
    
          if (!rails.allowAction(button)) return rails.stopEverything(event);
    
          // register the pressed submit button
          var name = button.attr('name'),
            data = name ? {name:name, value:button.val()} : null;
    
          button.closest('form').data('ujs:submit-button', data);
        });
    
        $document.delegate(rails.formSubmitSelector, 'ajax:beforeSend.rails', function(event) {
          if (this == event.target) rails.disableFormElements($(this));
        });
    
        $document.delegate(rails.formSubmitSelector, 'ajax:complete.rails', function(event) {
          if (this == event.target) rails.enableFormElements($(this));
        });
    
        $(function(){
          // making sure that all forms have actual up-to-date token(cached forms contain old one)
          var csrf_token = $('meta[name=csrf-token]').attr('content');
          var csrf_param = $('meta[name=csrf-param]').attr('content');
          $('form input[name="' + csrf_param + '"]').val(csrf_token);
        });
      }
    
    })( jQuery );
    /*! adriver.core.2 v2.3.10 */
    
    function adriver(ph, prm, defer){
        var my = this, p = ph;
        if(this instanceof adriver){
            if(typeof(p)=='string'){
                p=document.getElementById(ph);
            }else{
                ph=p.id;
            }
    
            if(!p){
                if(!adriver.isDomReady){adriver.onDomReady(function(){new adriver(ph, prm, defer);});}
                return {};
            }
            if(adriver(ph)){return adriver(ph);}
    
            my.p = p;
            my.defer = defer;
            my.prm = adriver.extend(prm, {ph: ph});
    
            my.loadCompleteQueue = new adriver.queue();
            my.domReadyQueue = new adriver.queue(adriver.isDomReady);
    
            adriver.initQueue.push(function(){my.init();});
            adriver.items[ph] = my;
            return my;
        }else{
            return ph ? adriver.items[ph] : adriver.items;
        }
    }
    
    adriver.prototype = {
        isLoading: 0,
    
        init: function(){},
        load: function(){},
        reload: function(){},
        loadComplete: function(){},
        domReady: function(){},
    
        onLoadComplete: function(f){var my = this; my.loadCompleteQueue.push(function(){f.call(my);}); return my;},
        onDomReady: function(f){this.domReadyQueue.push(f); return this;},
        reset: function(){this.loadCompleteQueue.flush(); this.domReadyQueue.flush(adriver.isDomReady); return this;}
    };
    
    adriver.extend = function(){
        for(var l = arguments[0], i = 1, len = arguments.length, r, j; i<len; i++){
            r = arguments[i];
            for(j in r){
                if(r.hasOwnProperty(j)){
                    if(r[j] instanceof Function){l[j] = r[j];}
                    else if(r[j] instanceof Object){if(l[j]){adriver.extend(l[j], r[j]);}else{l[j] = adriver.extend(r[j] instanceof Array ? [] : {}, r[j]);}}
                    else{l[j] = r[j];}
                }
            }
        }
        return l;
    };
    
    adriver.extend(adriver, {
        version: '2.3.10',
    
        defaults: {tail256: escape(document.referrer || 'unknown')},
        items: {},
        options: {},
        plugins: {},
        pluginPath: {},
    
        redirectHost: '//ad.adriver.ru',
        defaultMirror: '//content.adriver.ru',
    
        loadScript: function(req){
            try {
                var head = document.getElementsByTagName('head')[0],
                    s = document.createElement('script');
                s.setAttribute('type', 'text/javascript');
                s.setAttribute('charset', 'windows-1251');
                s.setAttribute('src', req.split('![rnd]').join(Math.round(Math.random()*9999999)));
                s.onreadystatechange = function(){if(/loaded|complete/.test(this.readyState)){head.removeChild(s);s.onload = null;}};
                s.onload = function(){head.removeChild(s);};
                head.insertBefore(s, head.firstChild);
            }catch(e){}
        },
    
        isDomReady: false,
        onDomReady: function(f){adriver.domReadyQueue.push(f);},
        onBeforeDomReady: function(f){adriver.domReadyQueue.unshift(f);},
        domReady: function(){adriver.isDomReady = true;adriver.domReadyQueue.execute();},
    
        checkDomReady: function(f){
            var w = window, d = w.document, ready = function(){if(adriver.isDomReady){return;}f();}, topLevel = false, readyStateChange;
            if (d.readyState === 'complete') {
                ready();
            } else if (d.addEventListener) {
                d.addEventListener('DOMContentLoaded', ready, false);
                w.addEventListener('load', ready, false);
            } else {
                readyStateChange = function(){if(d.readyState==='complete'){d.detachEvent('onreadystatechange', readyStateChange);ready();}};
                d.attachEvent('onreadystatechange', readyStateChange);
                w.attachEvent('onload', ready);
                try{topLevel = w.frameElement === null && d.documentElement;}catch(e){}
                if (topLevel && topLevel.doScroll) {
                    (function doScrollCheck() {
                        if (!adriver.isDomReady) {
                            try {topLevel.doScroll('left');} catch(e) {return setTimeout(doScrollCheck, 50);}
                            ready();
                        }
                    })();
                }
            }
        },
    
        onLoadComplete: function(f){adriver.loadCompleteQueue.push(f); return adriver;},
        checkLoadComplete: function(){
            var i, a;
    
            for (i in adriver.items) {
                if (adriver.items.hasOwnProperty(i)) {
                    a = adriver.items[i];
                    if (!a.prm.onScroll && typeof a.reply === 'undefined') { return false; }
                }
            }
    
            return true;
        },
        loadComplete: function(){
            if (adriver.checkLoadComplete()) { adriver.loadCompleteQueue.execute(false); }
            return adriver;
        },
    
        setDefaults: function(o){adriver.extend(adriver.defaults, o);},
        setOptions: function(o){adriver.extend(adriver.options, o);},
        setPluginPath: function(o){adriver.extend(adriver.pluginPath, o);},
    
        queue: function(flag){this.q = []; this.flag = flag ? true: false;},
        Plugin: function(id){
            if(this instanceof adriver.Plugin){
                if(id && !adriver.plugins[id]){
                    this.id = id;
                    this.q = new adriver.queue();
                    adriver.plugins[id] = this;
                }
            }
            return adriver.plugins[id];
        }
    });
    
    adriver.sync = function(pair, N){
        if(!adriver.syncFlag){
            adriver.syncFlag = 1;
            var ar_duo=[];while(N--){ar_duo[N]=N+1;}ar_duo.sort(function(){return 0.5-Math.random();});
            adriver.synchArray = ar_duo;
        }
        return adriver.synchArray[(!pair||pair<=0?1:pair)-1];
    };
    
    adriver.queue.prototype = {
        push: function(f){this.flag ? f(): this.q.push(f);},
        unshift: function(f){this.flag ? f(): this.q.unshift(f);},
        execute: function(flag){var f, und; while((f=this.q.shift())){f();} if(flag == und){flag=true;} this.flag = flag ? true : false;},
        flush: function(flag){this.q.length = 0; this.flag = flag ? true: false;}
    };
    
    adriver.Plugin.prototype = {
        loadingStatus: 0,
        load: function(){this.loadingStatus = 1; adriver.loadScript((adriver.pluginPath[this.id.split('.').pop()] || (adriver.defaultMirror + '/plugins/')) + this.id + '.js');},
        loadComplete: function(){this.loadingStatus = 2; this.q.execute(); return this;},
        onLoadComplete: function(f){this.q.push(f); return this;}
    };
    adriver.Plugin.require = function(){
        var my = this, counter = 0;
        my.q = new adriver.queue();
    
        for(var i = 0, len = arguments.length, p; i < len; i ++){
            p = new adriver.Plugin(arguments[i]);
            if(p.loadingStatus != 2){
                counter++;
                p.onLoadComplete(function(){if(counter-- == 1){my.q.execute();}});
                if(!p.loadingStatus){p.load();}
            }
        }
        if(!counter){my.q.execute();}
    };
    adriver.Plugin.require.prototype.onLoadComplete = function(f){this.q.push(f); return this;};
    
    adriver.domReadyQueue = new adriver.queue();
    adriver.loadCompleteQueue = new adriver.queue();
    adriver.initQueue = new adriver.queue();
    
    adriver.checkDomReady(adriver.domReady);
    
    new adriver.Plugin.require('autoUpdate.adriver').onLoadComplete(function(){adriver.initQueue.execute();});
    /*!
     * imagesLoaded PACKAGED v4.1.1
     * JavaScript is all like "You images are done yet or what?"
     * MIT License
     */
    
    
    !function(t,e){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",e):"object"==typeof module&&module.exports?module.exports=e():t.EvEmitter=e()}("undefined"!=typeof window?window:this,function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{},n=i[t]=i[t]||{};return n[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=0,o=i[n];e=e||[];for(var r=this._onceEvents&&this._onceEvents[t];o;){var s=r&&r[o];s&&(this.off(t,o),delete r[o]),o.apply(this,e),n+=s?0:1,o=i[n]}return this}},t}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["ev-emitter/ev-emitter"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("ev-emitter")):t.imagesLoaded=e(t,t.EvEmitter)}(window,function(t,e){function i(t,e){for(var i in e)t[i]=e[i];return t}function n(t){var e=[];if(Array.isArray(t))e=t;else if("number"==typeof t.length)for(var i=0;i<t.length;i++)e.push(t[i]);else e.push(t);return e}function o(t,e,r){return this instanceof o?("string"==typeof t&&(t=document.querySelectorAll(t)),this.elements=n(t),this.options=i({},this.options),"function"==typeof e?r=e:i(this.options,e),r&&this.on("always",r),this.getImages(),h&&(this.jqDeferred=new h.Deferred),void setTimeout(function(){this.check()}.bind(this))):new o(t,e,r)}function r(t){this.img=t}function s(t,e){this.url=t,this.element=e,this.img=new Image}var h=t.jQuery,a=t.console;o.prototype=Object.create(e.prototype),o.prototype.options={},o.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},o.prototype.addElementImages=function(t){"IMG"==t.nodeName&&this.addImage(t),this.options.background===!0&&this.addElementBackgroundImages(t);var e=t.nodeType;if(e&&d[e]){for(var i=t.querySelectorAll("img"),n=0;n<i.length;n++){var o=i[n];this.addImage(o)}if("string"==typeof this.options.background){var r=t.querySelectorAll(this.options.background);for(n=0;n<r.length;n++){var s=r[n];this.addElementBackgroundImages(s)}}}};var d={1:!0,9:!0,11:!0};return o.prototype.addElementBackgroundImages=function(t){var e=getComputedStyle(t);if(e)for(var i=/url\((['"])?(.*?)\1\)/gi,n=i.exec(e.backgroundImage);null!==n;){var o=n&&n[2];o&&this.addBackground(o,t),n=i.exec(e.backgroundImage)}},o.prototype.addImage=function(t){var e=new r(t);this.images.push(e)},o.prototype.addBackground=function(t,e){var i=new s(t,e);this.images.push(i)},o.prototype.check=function(){function t(t,i,n){setTimeout(function(){e.progress(t,i,n)})}var e=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(e){e.once("progress",t),e.check()}):void this.complete()},o.prototype.progress=function(t,e,i){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded,this.emitEvent("progress",[this,t,e]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,t),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&a&&a.log("progress: "+i,t,e)},o.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(t,[this]),this.emitEvent("always",[this]),this.jqDeferred){var e=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[e](this)}},r.prototype=Object.create(e.prototype),r.prototype.check=function(){var t=this.getIsImageComplete();return t?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},r.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},r.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.img,e])},r.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},r.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},r.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},r.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype=Object.create(r.prototype),s.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var t=this.getIsImageComplete();t&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},s.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.element,e])},o.makeJQueryPlugin=function(e){e=e||t.jQuery,e&&(h=e,h.fn.imagesLoaded=function(t,e){var i=new o(this,t,e);return i.jqDeferred.promise(h(this))})},o.makeJQueryPlugin(),o});
    /*!
     * jQuery UI Core 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/category/ui-core/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    // $.ui might exist from components with no dependencies, e.g., $.ui.position
    $.ui = $.ui || {};
    
    $.extend( $.ui, {
        version: "1.11.4",
    
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });
    
    // plugins
    $.fn.extend({
        scrollParent: function( includeHidden ) {
            var position = this.css( "position" ),
                excludeStaticParent = position === "absolute",
                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                scrollParent = this.parents().filter( function() {
                    var parent = $( this );
                    if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
                        return false;
                    }
                    return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );
                }).eq( 0 );
    
            return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;
        },
    
        uniqueId: (function() {
            var uuid = 0;
    
            return function() {
                return this.each(function() {
                    if ( !this.id ) {
                        this.id = "ui-id-" + ( ++uuid );
                    }
                });
            };
        })(),
    
        removeUniqueId: function() {
            return this.each(function() {
                if ( /^ui-id-\d+$/.test( this.id ) ) {
                    $( this ).removeAttr( "id" );
                }
            });
        }
    });
    
    // selectors
    function focusable( element, isTabIndexNotNaN ) {
        var map, mapName, img,
            nodeName = element.nodeName.toLowerCase();
        if ( "area" === nodeName ) {
            map = element.parentNode;
            mapName = map.name;
            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
                return false;
            }
            img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
            return !!img && visible( img );
        }
        return ( /^(input|select|textarea|button|object)$/.test( nodeName ) ?
            !element.disabled :
            "a" === nodeName ?
                element.href || isTabIndexNotNaN :
                isTabIndexNotNaN) &&
            // the element and all of its ancestors must be visible
            visible( element );
    }
    
    function visible( element ) {
        return $.expr.filters.visible( element ) &&
            !$( element ).parents().addBack().filter(function() {
                return $.css( this, "visibility" ) === "hidden";
            }).length;
    }
    
    $.extend( $.expr[ ":" ], {
        data: $.expr.createPseudo ?
            $.expr.createPseudo(function( dataName ) {
                return function( elem ) {
                    return !!$.data( elem, dataName );
                };
            }) :
            // support: jQuery <1.8
            function( elem, i, match ) {
                return !!$.data( elem, match[ 3 ] );
            },
    
        focusable: function( element ) {
            return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
        },
    
        tabbable: function( element ) {
            var tabIndex = $.attr( element, "tabindex" ),
                isTabIndexNaN = isNaN( tabIndex );
            return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
        }
    });
    
    // support: jQuery <1.8
    if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
        $.each( [ "Width", "Height" ], function( i, name ) {
            var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
                type = name.toLowerCase(),
                orig = {
                    innerWidth: $.fn.innerWidth,
                    innerHeight: $.fn.innerHeight,
                    outerWidth: $.fn.outerWidth,
                    outerHeight: $.fn.outerHeight
                };
    
            function reduce( elem, size, border, margin ) {
                $.each( side, function() {
                    size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
                    if ( border ) {
                        size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
                    }
                    if ( margin ) {
                        size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
                    }
                });
                return size;
            }
    
            $.fn[ "inner" + name ] = function( size ) {
                if ( size === undefined ) {
                    return orig[ "inner" + name ].call( this );
                }
    
                return this.each(function() {
                    $( this ).css( type, reduce( this, size ) + "px" );
                });
            };
    
            $.fn[ "outer" + name] = function( size, margin ) {
                if ( typeof size !== "number" ) {
                    return orig[ "outer" + name ].call( this, size );
                }
    
                return this.each(function() {
                    $( this).css( type, reduce( this, size, true, margin ) + "px" );
                });
            };
        });
    }
    
    // support: jQuery <1.8
    if ( !$.fn.addBack ) {
        $.fn.addBack = function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter( selector )
            );
        };
    }
    
    // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
    if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
        $.fn.removeData = (function( removeData ) {
            return function( key ) {
                if ( arguments.length ) {
                    return removeData.call( this, $.camelCase( key ) );
                } else {
                    return removeData.call( this );
                }
            };
        })( $.fn.removeData );
    }
    
    // deprecated
    $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );
    
    $.fn.extend({
        focus: (function( orig ) {
            return function( delay, fn ) {
                return typeof delay === "number" ?
                    this.each(function() {
                        var elem = this;
                        setTimeout(function() {
                            $( elem ).focus();
                            if ( fn ) {
                                fn.call( elem );
                            }
                        }, delay );
                    }) :
                    orig.apply( this, arguments );
            };
        })( $.fn.focus ),
    
        disableSelection: (function() {
            var eventType = "onselectstart" in document.createElement( "div" ) ?
                "selectstart" :
                "mousedown";
    
            return function() {
                return this.bind( eventType + ".ui-disableSelection", function( event ) {
                    event.preventDefault();
                });
            };
        })(),
    
        enableSelection: function() {
            return this.unbind( ".ui-disableSelection" );
        },
    
        zIndex: function( zIndex ) {
            if ( zIndex !== undefined ) {
                return this.css( "zIndex", zIndex );
            }
    
            if ( this.length ) {
                var elem = $( this[ 0 ] ), position, value;
                while ( elem.length && elem[ 0 ] !== document ) {
                    // Ignore z-index if position is set to a value where z-index is ignored by the browser
                    // This makes behavior of this function consistent across browsers
                    // WebKit always returns auto if the element is positioned
                    position = elem.css( "position" );
                    if ( position === "absolute" || position === "relative" || position === "fixed" ) {
                        // IE returns 0 when zIndex is not specified
                        // other browsers return a string
                        // we ignore the case of nested elements with an explicit value of 0
                        // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                        value = parseInt( elem.css( "zIndex" ), 10 );
                        if ( !isNaN( value ) && value !== 0 ) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }
    
            return 0;
        }
    });
    
    // $.ui.plugin is deprecated. Use $.widget() extensions instead.
    $.ui.plugin = {
        add: function( module, option, set ) {
            var i,
                proto = $.ui[ module ].prototype;
            for ( i in set ) {
                proto.plugins[ i ] = proto.plugins[ i ] || [];
                proto.plugins[ i ].push( [ option, set[ i ] ] );
            }
        },
        call: function( instance, name, args, allowDisconnected ) {
            var i,
                set = instance.plugins[ name ];
    
            if ( !set ) {
                return;
            }
    
            if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
                return;
            }
    
            for ( i = 0; i < set.length; i++ ) {
                if ( instance.options[ set[ i ][ 0 ] ] ) {
                    set[ i ][ 1 ].apply( instance.element, args );
                }
            }
        }
    };
    
    }));
    /*!
     * jQuery UI Widget 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/jQuery.widget/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    var widget_uuid = 0,
        widget_slice = Array.prototype.slice;
    
    $.cleanData = (function( orig ) {
        return function( elems ) {
            var events, elem, i;
            for ( i = 0; (elem = elems[i]) != null; i++ ) {
                try {
    
                    // Only trigger remove when necessary to save time
                    events = $._data( elem, "events" );
                    if ( events && events.remove ) {
                        $( elem ).triggerHandler( "remove" );
                    }
    
                // http://bugs.jquery.com/ticket/8235
                } catch ( e ) {}
            }
            orig( elems );
        };
    })( $.cleanData );
    
    $.widget = function( name, base, prototype ) {
        var fullName, existingConstructor, constructor, basePrototype,
            // proxiedPrototype allows the provided prototype to remain unmodified
            // so that it can be used as a mixin for multiple widgets (#8876)
            proxiedPrototype = {},
            namespace = name.split( "." )[ 0 ];
    
        name = name.split( "." )[ 1 ];
        fullName = namespace + "-" + name;
    
        if ( !prototype ) {
            prototype = base;
            base = $.Widget;
        }
    
        // create selector for plugin
        $.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
            return !!$.data( elem, fullName );
        };
    
        $[ namespace ] = $[ namespace ] || {};
        existingConstructor = $[ namespace ][ name ];
        constructor = $[ namespace ][ name ] = function( options, element ) {
            // allow instantiation without "new" keyword
            if ( !this._createWidget ) {
                return new constructor( options, element );
            }
    
            // allow instantiation without initializing for simple inheritance
            // must use "new" keyword (the code above always passes args)
            if ( arguments.length ) {
                this._createWidget( options, element );
            }
        };
        // extend with the existing constructor to carry over any static properties
        $.extend( constructor, existingConstructor, {
            version: prototype.version,
            // copy the object used to create the prototype in case we need to
            // redefine the widget later
            _proto: $.extend( {}, prototype ),
            // track widgets that inherit from this widget in case this widget is
            // redefined after a widget inherits from it
            _childConstructors: []
        });
    
        basePrototype = new base();
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
        basePrototype.options = $.widget.extend( {}, basePrototype.options );
        $.each( prototype, function( prop, value ) {
            if ( !$.isFunction( value ) ) {
                proxiedPrototype[ prop ] = value;
                return;
            }
            proxiedPrototype[ prop ] = (function() {
                var _super = function() {
                        return base.prototype[ prop ].apply( this, arguments );
                    },
                    _superApply = function( args ) {
                        return base.prototype[ prop ].apply( this, args );
                    };
                return function() {
                    var __super = this._super,
                        __superApply = this._superApply,
                        returnValue;
    
                    this._super = _super;
                    this._superApply = _superApply;
    
                    returnValue = value.apply( this, arguments );
    
                    this._super = __super;
                    this._superApply = __superApply;
    
                    return returnValue;
                };
            })();
        });
        constructor.prototype = $.widget.extend( basePrototype, {
            // TODO: remove support for widgetEventPrefix
            // always use the name + a colon as the prefix, e.g., draggable:start
            // don't prefix for widgets that aren't DOM-based
            widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
    
        // If this widget is being redefined then we need to find all widgets that
        // are inheriting from it and redefine all of them so that they inherit from
        // the new version of this widget. We're essentially trying to replace one
        // level in the prototype chain.
        if ( existingConstructor ) {
            $.each( existingConstructor._childConstructors, function( i, child ) {
                var childPrototype = child.prototype;
    
                // redefine the child widget using the same prototype that was
                // originally used, but inherit from the new version of the base
                $.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
            });
            // remove the list of existing child constructors from the old constructor
            // so the old child constructors can be garbage collected
            delete existingConstructor._childConstructors;
        } else {
            base._childConstructors.push( constructor );
        }
    
        $.widget.bridge( name, constructor );
    
        return constructor;
    };
    
    $.widget.extend = function( target ) {
        var input = widget_slice.call( arguments, 1 ),
            inputIndex = 0,
            inputLength = input.length,
            key,
            value;
        for ( ; inputIndex < inputLength; inputIndex++ ) {
            for ( key in input[ inputIndex ] ) {
                value = input[ inputIndex ][ key ];
                if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
                    // Clone objects
                    if ( $.isPlainObject( value ) ) {
                        target[ key ] = $.isPlainObject( target[ key ] ) ?
                            $.widget.extend( {}, target[ key ], value ) :
                            // Don't extend strings, arrays, etc. with objects
                            $.widget.extend( {}, value );
                    // Copy everything else by reference
                    } else {
                        target[ key ] = value;
                    }
                }
            }
        }
        return target;
    };
    
    $.widget.bridge = function( name, object ) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[ name ] = function( options ) {
            var isMethodCall = typeof options === "string",
                args = widget_slice.call( arguments, 1 ),
                returnValue = this;
    
            if ( isMethodCall ) {
                this.each(function() {
                    var methodValue,
                        instance = $.data( this, fullName );
                    if ( options === "instance" ) {
                        returnValue = instance;
                        return false;
                    }
                    if ( !instance ) {
                        return $.error( "cannot call methods on " + name + " prior to initialization; " +
                            "attempted to call method '" + options + "'" );
                    }
                    if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
                        return $.error( "no such method '" + options + "' for " + name + " widget instance" );
                    }
                    methodValue = instance[ options ].apply( instance, args );
                    if ( methodValue !== instance && methodValue !== undefined ) {
                        returnValue = methodValue && methodValue.jquery ?
                            returnValue.pushStack( methodValue.get() ) :
                            methodValue;
                        return false;
                    }
                });
            } else {
    
                // Allow multiple hashes to be passed on init
                if ( args.length ) {
                    options = $.widget.extend.apply( null, [ options ].concat(args) );
                }
    
                this.each(function() {
                    var instance = $.data( this, fullName );
                    if ( instance ) {
                        instance.option( options || {} );
                        if ( instance._init ) {
                            instance._init();
                        }
                    } else {
                        $.data( this, fullName, new object( options, this ) );
                    }
                });
            }
    
            return returnValue;
        };
    };
    
    $.Widget = function( /* options, element */ ) {};
    $.Widget._childConstructors = [];
    
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: false,
    
            // callbacks
            create: null
        },
        _createWidget: function( options, element ) {
            element = $( element || this.defaultElement || this )[ 0 ];
            this.element = $( element );
            this.uuid = widget_uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
    
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
    
            if ( element !== this ) {
                $.data( element, this.widgetFullName, this );
                this._on( true, this.element, {
                    remove: function( event ) {
                        if ( event.target === element ) {
                            this.destroy();
                        }
                    }
                });
                this.document = $( element.style ?
                    // element within the document
                    element.ownerDocument :
                    // element is window or document
                    element.document || element );
                this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
            }
    
            this.options = $.widget.extend( {},
                this.options,
                this._getCreateOptions(),
                options );
    
            this._create();
            this._trigger( "create", null, this._getCreateEventData() );
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
    
        destroy: function() {
            this._destroy();
            // we can probably remove the unbind calls in 2.0
            // all event bindings should go through this._on()
            this.element
                .unbind( this.eventNamespace )
                .removeData( this.widgetFullName )
                // support: jquery <1.6.3
                // http://bugs.jquery.com/ticket/9413
                .removeData( $.camelCase( this.widgetFullName ) );
            this.widget()
                .unbind( this.eventNamespace )
                .removeAttr( "aria-disabled" )
                .removeClass(
                    this.widgetFullName + "-disabled " +
                    "ui-state-disabled" );
    
            // clean up events and states
            this.bindings.unbind( this.eventNamespace );
            this.hoverable.removeClass( "ui-state-hover" );
            this.focusable.removeClass( "ui-state-focus" );
        },
        _destroy: $.noop,
    
        widget: function() {
            return this.element;
        },
    
        option: function( key, value ) {
            var options = key,
                parts,
                curOption,
                i;
    
            if ( arguments.length === 0 ) {
                // don't return a reference to the internal hash
                return $.widget.extend( {}, this.options );
            }
    
            if ( typeof key === "string" ) {
                // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                options = {};
                parts = key.split( "." );
                key = parts.shift();
                if ( parts.length ) {
                    curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
                    for ( i = 0; i < parts.length - 1; i++ ) {
                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
                        curOption = curOption[ parts[ i ] ];
                    }
                    key = parts.pop();
                    if ( arguments.length === 1 ) {
                        return curOption[ key ] === undefined ? null : curOption[ key ];
                    }
                    curOption[ key ] = value;
                } else {
                    if ( arguments.length === 1 ) {
                        return this.options[ key ] === undefined ? null : this.options[ key ];
                    }
                    options[ key ] = value;
                }
            }
    
            this._setOptions( options );
    
            return this;
        },
        _setOptions: function( options ) {
            var key;
    
            for ( key in options ) {
                this._setOption( key, options[ key ] );
            }
    
            return this;
        },
        _setOption: function( key, value ) {
            this.options[ key ] = value;
    
            if ( key === "disabled" ) {
                this.widget()
                    .toggleClass( this.widgetFullName + "-disabled", !!value );
    
                // If the widget is becoming disabled, then nothing is interactive
                if ( value ) {
                    this.hoverable.removeClass( "ui-state-hover" );
                    this.focusable.removeClass( "ui-state-focus" );
                }
            }
    
            return this;
        },
    
        enable: function() {
            return this._setOptions({ disabled: false });
        },
        disable: function() {
            return this._setOptions({ disabled: true });
        },
    
        _on: function( suppressDisabledCheck, element, handlers ) {
            var delegateElement,
                instance = this;
    
            // no suppressDisabledCheck flag, shuffle arguments
            if ( typeof suppressDisabledCheck !== "boolean" ) {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
    
            // no element argument, shuffle and use this.element
            if ( !handlers ) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $( element );
                this.bindings = this.bindings.add( element );
            }
    
            $.each( handlers, function( event, handler ) {
                function handlerProxy() {
                    // allow widgets to customize the disabled handling
                    // - disabled as an array instead of boolean
                    // - disabled class as method for disabling individual parts
                    if ( !suppressDisabledCheck &&
                            ( instance.options.disabled === true ||
                                $( this ).hasClass( "ui-state-disabled" ) ) ) {
                        return;
                    }
                    return ( typeof handler === "string" ? instance[ handler ] : handler )
                        .apply( instance, arguments );
                }
    
                // copy the guid so direct unbinding works
                if ( typeof handler !== "string" ) {
                    handlerProxy.guid = handler.guid =
                        handler.guid || handlerProxy.guid || $.guid++;
                }
    
                var match = event.match( /^([\w:-]*)\s*(.*)$/ ),
                    eventName = match[1] + instance.eventNamespace,
                    selector = match[2];
                if ( selector ) {
                    delegateElement.delegate( selector, eventName, handlerProxy );
                } else {
                    element.bind( eventName, handlerProxy );
                }
            });
        },
    
        _off: function( element, eventName ) {
            eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) +
                this.eventNamespace;
            element.unbind( eventName ).undelegate( eventName );
    
            // Clear the stack to avoid memory leaks (#10056)
            this.bindings = $( this.bindings.not( element ).get() );
            this.focusable = $( this.focusable.not( element ).get() );
            this.hoverable = $( this.hoverable.not( element ).get() );
        },
    
        _delay: function( handler, delay ) {
            function handlerProxy() {
                return ( typeof handler === "string" ? instance[ handler ] : handler )
                    .apply( instance, arguments );
            }
            var instance = this;
            return setTimeout( handlerProxy, delay || 0 );
        },
    
        _hoverable: function( element ) {
            this.hoverable = this.hoverable.add( element );
            this._on( element, {
                mouseenter: function( event ) {
                    $( event.currentTarget ).addClass( "ui-state-hover" );
                },
                mouseleave: function( event ) {
                    $( event.currentTarget ).removeClass( "ui-state-hover" );
                }
            });
        },
    
        _focusable: function( element ) {
            this.focusable = this.focusable.add( element );
            this._on( element, {
                focusin: function( event ) {
                    $( event.currentTarget ).addClass( "ui-state-focus" );
                },
                focusout: function( event ) {
                    $( event.currentTarget ).removeClass( "ui-state-focus" );
                }
            });
        },
    
        _trigger: function( type, event, data ) {
            var prop, orig,
                callback = this.options[ type ];
    
            data = data || {};
            event = $.Event( event );
            event.type = ( type === this.widgetEventPrefix ?
                type :
                this.widgetEventPrefix + type ).toLowerCase();
            // the original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[ 0 ];
    
            // copy original event properties over to the new event
            orig = event.originalEvent;
            if ( orig ) {
                for ( prop in orig ) {
                    if ( !( prop in event ) ) {
                        event[ prop ] = orig[ prop ];
                    }
                }
            }
    
            this.element.trigger( event, data );
            return !( $.isFunction( callback ) &&
                callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
                event.isDefaultPrevented() );
        }
    };
    
    $.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
        $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
            if ( typeof options === "string" ) {
                options = { effect: options };
            }
            var hasOptions,
                effectName = !options ?
                    method :
                    options === true || typeof options === "number" ?
                        defaultEffect :
                        options.effect || defaultEffect;
            options = options || {};
            if ( typeof options === "number" ) {
                options = { duration: options };
            }
            hasOptions = !$.isEmptyObject( options );
            options.complete = callback;
            if ( options.delay ) {
                element.delay( options.delay );
            }
            if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
                element[ method ]( options );
            } else if ( effectName !== method && element[ effectName ] ) {
                element[ effectName ]( options.duration, options.easing, callback );
            } else {
                element.queue(function( next ) {
                    $( this )[ method ]();
                    if ( callback ) {
                        callback.call( element[ 0 ] );
                    }
                    next();
                });
            }
        };
    });
    
    return $.widget;
    
    }));
    /*!
     * jQuery UI Position 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/position/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    (function() {
    
    $.ui = $.ui || {};
    
    var cachedScrollbarWidth, supportsOffsetFractions,
        max = Math.max,
        abs = Math.abs,
        round = Math.round,
        rhorizontal = /left|center|right/,
        rvertical = /top|center|bottom/,
        roffset = /[\+\-]\d+(\.[\d]+)?%?/,
        rposition = /^\w+/,
        rpercent = /%$/,
        _position = $.fn.position;
    
    function getOffsets( offsets, width, height ) {
        return [
            parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
            parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
        ];
    }
    
    function parseCss( element, property ) {
        return parseInt( $.css( element, property ), 10 ) || 0;
    }
    
    function getDimensions( elem ) {
        var raw = elem[0];
        if ( raw.nodeType === 9 ) {
            return {
                width: elem.width(),
                height: elem.height(),
                offset: { top: 0, left: 0 }
            };
        }
        if ( $.isWindow( raw ) ) {
            return {
                width: elem.width(),
                height: elem.height(),
                offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
            };
        }
        if ( raw.preventDefault ) {
            return {
                width: 0,
                height: 0,
                offset: { top: raw.pageY, left: raw.pageX }
            };
        }
        return {
            width: elem.outerWidth(),
            height: elem.outerHeight(),
            offset: elem.offset()
        };
    }
    
    $.position = {
        scrollbarWidth: function() {
            if ( cachedScrollbarWidth !== undefined ) {
                return cachedScrollbarWidth;
            }
            var w1, w2,
                div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
                innerDiv = div.children()[0];
    
            $( "body" ).append( div );
            w1 = innerDiv.offsetWidth;
            div.css( "overflow", "scroll" );
    
            w2 = innerDiv.offsetWidth;
    
            if ( w1 === w2 ) {
                w2 = div[0].clientWidth;
            }
    
            div.remove();
    
            return (cachedScrollbarWidth = w1 - w2);
        },
        getScrollInfo: function( within ) {
            var overflowX = within.isWindow || within.isDocument ? "" :
                    within.element.css( "overflow-x" ),
                overflowY = within.isWindow || within.isDocument ? "" :
                    within.element.css( "overflow-y" ),
                hasOverflowX = overflowX === "scroll" ||
                    ( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
                hasOverflowY = overflowY === "scroll" ||
                    ( overflowY === "auto" && within.height < within.element[0].scrollHeight );
            return {
                width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                height: hasOverflowX ? $.position.scrollbarWidth() : 0
            };
        },
        getWithinInfo: function( element ) {
            var withinElement = $( element || window ),
                isWindow = $.isWindow( withinElement[0] ),
                isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
            return {
                element: withinElement,
                isWindow: isWindow,
                isDocument: isDocument,
                offset: withinElement.offset() || { left: 0, top: 0 },
                scrollLeft: withinElement.scrollLeft(),
                scrollTop: withinElement.scrollTop(),
    
                // support: jQuery 1.6.x
                // jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
                width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
            };
        }
    };
    
    $.fn.position = function( options ) {
        if ( !options || !options.of ) {
            return _position.apply( this, arguments );
        }
    
        // make a copy, we don't want to modify arguments
        options = $.extend( {}, options );
    
        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
            target = $( options.of ),
            within = $.position.getWithinInfo( options.within ),
            scrollInfo = $.position.getScrollInfo( within ),
            collision = ( options.collision || "flip" ).split( " " ),
            offsets = {};
    
        dimensions = getDimensions( target );
        if ( target[0].preventDefault ) {
            // force left top to allow flipping
            options.at = "left top";
        }
        targetWidth = dimensions.width;
        targetHeight = dimensions.height;
        targetOffset = dimensions.offset;
        // clone to reuse original targetOffset later
        basePosition = $.extend( {}, targetOffset );
    
        // force my and at to have valid horizontal and vertical positions
        // if a value is missing or invalid, it will be converted to center
        $.each( [ "my", "at" ], function() {
            var pos = ( options[ this ] || "" ).split( " " ),
                horizontalOffset,
                verticalOffset;
    
            if ( pos.length === 1) {
                pos = rhorizontal.test( pos[ 0 ] ) ?
                    pos.concat( [ "center" ] ) :
                    rvertical.test( pos[ 0 ] ) ?
                        [ "center" ].concat( pos ) :
                        [ "center", "center" ];
            }
            pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
            pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";
    
            // calculate offsets
            horizontalOffset = roffset.exec( pos[ 0 ] );
            verticalOffset = roffset.exec( pos[ 1 ] );
            offsets[ this ] = [
                horizontalOffset ? horizontalOffset[ 0 ] : 0,
                verticalOffset ? verticalOffset[ 0 ] : 0
            ];
    
            // reduce to just the positions without the offsets
            options[ this ] = [
                rposition.exec( pos[ 0 ] )[ 0 ],
                rposition.exec( pos[ 1 ] )[ 0 ]
            ];
        });
    
        // normalize collision option
        if ( collision.length === 1 ) {
            collision[ 1 ] = collision[ 0 ];
        }
    
        if ( options.at[ 0 ] === "right" ) {
            basePosition.left += targetWidth;
        } else if ( options.at[ 0 ] === "center" ) {
            basePosition.left += targetWidth / 2;
        }
    
        if ( options.at[ 1 ] === "bottom" ) {
            basePosition.top += targetHeight;
        } else if ( options.at[ 1 ] === "center" ) {
            basePosition.top += targetHeight / 2;
        }
    
        atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
        basePosition.left += atOffset[ 0 ];
        basePosition.top += atOffset[ 1 ];
    
        return this.each(function() {
            var collisionPosition, using,
                elem = $( this ),
                elemWidth = elem.outerWidth(),
                elemHeight = elem.outerHeight(),
                marginLeft = parseCss( this, "marginLeft" ),
                marginTop = parseCss( this, "marginTop" ),
                collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
                collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
                position = $.extend( {}, basePosition ),
                myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );
    
            if ( options.my[ 0 ] === "right" ) {
                position.left -= elemWidth;
            } else if ( options.my[ 0 ] === "center" ) {
                position.left -= elemWidth / 2;
            }
    
            if ( options.my[ 1 ] === "bottom" ) {
                position.top -= elemHeight;
            } else if ( options.my[ 1 ] === "center" ) {
                position.top -= elemHeight / 2;
            }
    
            position.left += myOffset[ 0 ];
            position.top += myOffset[ 1 ];
    
            // if the browser doesn't support fractions, then round for consistent results
            if ( !supportsOffsetFractions ) {
                position.left = round( position.left );
                position.top = round( position.top );
            }
    
            collisionPosition = {
                marginLeft: marginLeft,
                marginTop: marginTop
            };
    
            $.each( [ "left", "top" ], function( i, dir ) {
                if ( $.ui.position[ collision[ i ] ] ) {
                    $.ui.position[ collision[ i ] ][ dir ]( position, {
                        targetWidth: targetWidth,
                        targetHeight: targetHeight,
                        elemWidth: elemWidth,
                        elemHeight: elemHeight,
                        collisionPosition: collisionPosition,
                        collisionWidth: collisionWidth,
                        collisionHeight: collisionHeight,
                        offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
                        my: options.my,
                        at: options.at,
                        within: within,
                        elem: elem
                    });
                }
            });
    
            if ( options.using ) {
                // adds feedback as second argument to using callback, if present
                using = function( props ) {
                    var left = targetOffset.left - position.left,
                        right = left + targetWidth - elemWidth,
                        top = targetOffset.top - position.top,
                        bottom = top + targetHeight - elemHeight,
                        feedback = {
                            target: {
                                element: target,
                                left: targetOffset.left,
                                top: targetOffset.top,
                                width: targetWidth,
                                height: targetHeight
                            },
                            element: {
                                element: elem,
                                left: position.left,
                                top: position.top,
                                width: elemWidth,
                                height: elemHeight
                            },
                            horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                            vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                        };
                    if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
                        feedback.horizontal = "center";
                    }
                    if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
                        feedback.vertical = "middle";
                    }
                    if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
                        feedback.important = "horizontal";
                    } else {
                        feedback.important = "vertical";
                    }
                    options.using.call( this, props, feedback );
                };
            }
    
            elem.offset( $.extend( position, { using: using } ) );
        });
    };
    
    $.ui.position = {
        fit: {
            left: function( position, data ) {
                var within = data.within,
                    withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                    outerWidth = within.width,
                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                    overLeft = withinOffset - collisionPosLeft,
                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                    newOverRight;
    
                // element is wider than within
                if ( data.collisionWidth > outerWidth ) {
                    // element is initially over the left side of within
                    if ( overLeft > 0 && overRight <= 0 ) {
                        newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                        position.left += overLeft - newOverRight;
                    // element is initially over right side of within
                    } else if ( overRight > 0 && overLeft <= 0 ) {
                        position.left = withinOffset;
                    // element is initially over both left and right sides of within
                    } else {
                        if ( overLeft > overRight ) {
                            position.left = withinOffset + outerWidth - data.collisionWidth;
                        } else {
                            position.left = withinOffset;
                        }
                    }
                // too far left -> align with left edge
                } else if ( overLeft > 0 ) {
                    position.left += overLeft;
                // too far right -> align with right edge
                } else if ( overRight > 0 ) {
                    position.left -= overRight;
                // adjust based on position and margin
                } else {
                    position.left = max( position.left - collisionPosLeft, position.left );
                }
            },
            top: function( position, data ) {
                var within = data.within,
                    withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                    outerHeight = data.within.height,
                    collisionPosTop = position.top - data.collisionPosition.marginTop,
                    overTop = withinOffset - collisionPosTop,
                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                    newOverBottom;
    
                // element is taller than within
                if ( data.collisionHeight > outerHeight ) {
                    // element is initially over the top of within
                    if ( overTop > 0 && overBottom <= 0 ) {
                        newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                        position.top += overTop - newOverBottom;
                    // element is initially over bottom of within
                    } else if ( overBottom > 0 && overTop <= 0 ) {
                        position.top = withinOffset;
                    // element is initially over both top and bottom of within
                    } else {
                        if ( overTop > overBottom ) {
                            position.top = withinOffset + outerHeight - data.collisionHeight;
                        } else {
                            position.top = withinOffset;
                        }
                    }
                // too far up -> align with top
                } else if ( overTop > 0 ) {
                    position.top += overTop;
                // too far down -> align with bottom edge
                } else if ( overBottom > 0 ) {
                    position.top -= overBottom;
                // adjust based on position and margin
                } else {
                    position.top = max( position.top - collisionPosTop, position.top );
                }
            }
        },
        flip: {
            left: function( position, data ) {
                var within = data.within,
                    withinOffset = within.offset.left + within.scrollLeft,
                    outerWidth = within.width,
                    offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                    overLeft = collisionPosLeft - offsetLeft,
                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                    myOffset = data.my[ 0 ] === "left" ?
                        -data.elemWidth :
                        data.my[ 0 ] === "right" ?
                            data.elemWidth :
                            0,
                    atOffset = data.at[ 0 ] === "left" ?
                        data.targetWidth :
                        data.at[ 0 ] === "right" ?
                            -data.targetWidth :
                            0,
                    offset = -2 * data.offset[ 0 ],
                    newOverRight,
                    newOverLeft;
    
                if ( overLeft < 0 ) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
                        position.left += myOffset + atOffset + offset;
                    }
                } else if ( overRight > 0 ) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
                        position.left += myOffset + atOffset + offset;
                    }
                }
            },
            top: function( position, data ) {
                var within = data.within,
                    withinOffset = within.offset.top + within.scrollTop,
                    outerHeight = within.height,
                    offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                    collisionPosTop = position.top - data.collisionPosition.marginTop,
                    overTop = collisionPosTop - offsetTop,
                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                    top = data.my[ 1 ] === "top",
                    myOffset = top ?
                        -data.elemHeight :
                        data.my[ 1 ] === "bottom" ?
                            data.elemHeight :
                            0,
                    atOffset = data.at[ 1 ] === "top" ?
                        data.targetHeight :
                        data.at[ 1 ] === "bottom" ?
                            -data.targetHeight :
                            0,
                    offset = -2 * data.offset[ 1 ],
                    newOverTop,
                    newOverBottom;
                if ( overTop < 0 ) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
                        position.top += myOffset + atOffset + offset;
                    }
                } else if ( overBottom > 0 ) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
                        position.top += myOffset + atOffset + offset;
                    }
                }
            }
        },
        flipfit: {
            left: function() {
                $.ui.position.flip.left.apply( this, arguments );
                $.ui.position.fit.left.apply( this, arguments );
            },
            top: function() {
                $.ui.position.flip.top.apply( this, arguments );
                $.ui.position.fit.top.apply( this, arguments );
            }
        }
    };
    
    // fraction support test
    (function() {
        var testElement, testElementParent, testElementStyle, offsetLeft, i,
            body = document.getElementsByTagName( "body" )[ 0 ],
            div = document.createElement( "div" );
    
        //Create a "fake body" for testing based on method used in jQuery.support
        testElement = document.createElement( body ? "div" : "body" );
        testElementStyle = {
            visibility: "hidden",
            width: 0,
            height: 0,
            border: 0,
            margin: 0,
            background: "none"
        };
        if ( body ) {
            $.extend( testElementStyle, {
                position: "absolute",
                left: "-1000px",
                top: "-1000px"
            });
        }
        for ( i in testElementStyle ) {
            testElement.style[ i ] = testElementStyle[ i ];
        }
        testElement.appendChild( div );
        testElementParent = body || document.documentElement;
        testElementParent.insertBefore( testElement, testElementParent.firstChild );
    
        div.style.cssText = "position: absolute; left: 10.7432222px;";
    
        offsetLeft = $( div ).offset().left;
        supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;
    
        testElement.innerHTML = "";
        testElementParent.removeChild( testElement );
    })();
    
    })();
    
    return $.ui.position;
    
    }));
    
    
    
    
    /*!
     * jQuery UI Menu 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/menu/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define([
                "jquery",
                "./core",
                "./widget",
                "./position"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    return $.widget( "ui.menu", {
        version: "1.11.4",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-carat-1-e"
            },
            items: "> *",
            menus: "ul",
            position: {
                my: "left-1 top",
                at: "right top"
            },
            role: "menu",
    
            // callbacks
            blur: null,
            focus: null,
            select: null
        },
    
        _create: function() {
            this.activeMenu = this.element;
    
            // Flag used to prevent firing of the click handler
            // as the event bubbles up through nested menus
            this.mouseHandled = false;
            this.element
                .uniqueId()
                .addClass( "ui-menu ui-widget ui-widget-content" )
                .toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
                .attr({
                    role: this.options.role,
                    tabIndex: 0
                });
    
            if ( this.options.disabled ) {
                this.element
                    .addClass( "ui-state-disabled" )
                    .attr( "aria-disabled", "true" );
            }
    
            this._on({
                // Prevent focus from sticking to links inside menu after clicking
                // them (focus should always stay on UL during navigation).
                "mousedown .ui-menu-item": function( event ) {
                    event.preventDefault();
                },
                "click .ui-menu-item": function( event ) {
                    var target = $( event.target );
                    if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
                        this.select( event );
    
                        // Only set the mouseHandled flag if the event will bubble, see #9469.
                        if ( !event.isPropagationStopped() ) {
                            this.mouseHandled = true;
                        }
    
                        // Open submenu on click
                        if ( target.has( ".ui-menu" ).length ) {
                            this.expand( event );
                        } else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".ui-menu" ).length ) {
    
                            // Redirect focus to the menu
                            this.element.trigger( "focus", [ true ] );
    
                            // If the active item is on the top level, let it stay active.
                            // Otherwise, blur the active item since it is no longer visible.
                            if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
                                clearTimeout( this.timer );
                            }
                        }
                    }
                },
                "mouseenter .ui-menu-item": function( event ) {
                    // Ignore mouse events while typeahead is active, see #10458.
                    // Prevents focusing the wrong item when typeahead causes a scroll while the mouse
                    // is over an item in the menu
                    if ( this.previousFilter ) {
                        return;
                    }
                    var target = $( event.currentTarget );
                    // Remove ui-state-active class from siblings of the newly focused menu item
                    // to avoid a jump caused by adjacent elements both having a class with a border
                    target.siblings( ".ui-state-active" ).removeClass( "ui-state-active" );
                    this.focus( event, target );
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function( event, keepActiveItem ) {
                    // If there's already an active item, keep it active
                    // If not, activate the first item
                    var item = this.active || this.element.find( this.options.items ).eq( 0 );
    
                    if ( !keepActiveItem ) {
                        this.focus( event, item );
                    }
                },
                blur: function( event ) {
                    this._delay(function() {
                        if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
                            this.collapseAll( event );
                        }
                    });
                },
                keydown: "_keydown"
            });
    
            this.refresh();
    
            // Clicks outside of a menu collapse any open menus
            this._on( this.document, {
                click: function( event ) {
                    if ( this._closeOnDocumentClick( event ) ) {
                        this.collapseAll( event );
                    }
    
                    // Reset the mouseHandled flag
                    this.mouseHandled = false;
                }
            });
        },
    
        _destroy: function() {
            // Destroy (sub)menus
            this.element
                .removeAttr( "aria-activedescendant" )
                .find( ".ui-menu" ).addBack()
                    .removeClass( "ui-menu ui-widget ui-widget-content ui-menu-icons ui-front" )
                    .removeAttr( "role" )
                    .removeAttr( "tabIndex" )
                    .removeAttr( "aria-labelledby" )
                    .removeAttr( "aria-expanded" )
                    .removeAttr( "aria-hidden" )
                    .removeAttr( "aria-disabled" )
                    .removeUniqueId()
                    .show();
    
            // Destroy menu items
            this.element.find( ".ui-menu-item" )
                .removeClass( "ui-menu-item" )
                .removeAttr( "role" )
                .removeAttr( "aria-disabled" )
                .removeUniqueId()
                .removeClass( "ui-state-hover" )
                .removeAttr( "tabIndex" )
                .removeAttr( "role" )
                .removeAttr( "aria-haspopup" )
                .children().each( function() {
                    var elem = $( this );
                    if ( elem.data( "ui-menu-submenu-carat" ) ) {
                        elem.remove();
                    }
                });
    
            // Destroy menu dividers
            this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
        },
    
        _keydown: function( event ) {
            var match, prev, character, skip,
                preventDefault = true;
    
            switch ( event.keyCode ) {
            case $.ui.keyCode.PAGE_UP:
                this.previousPage( event );
                break;
            case $.ui.keyCode.PAGE_DOWN:
                this.nextPage( event );
                break;
            case $.ui.keyCode.HOME:
                this._move( "first", "first", event );
                break;
            case $.ui.keyCode.END:
                this._move( "last", "last", event );
                break;
            case $.ui.keyCode.UP:
                this.previous( event );
                break;
            case $.ui.keyCode.DOWN:
                this.next( event );
                break;
            case $.ui.keyCode.LEFT:
                this.collapse( event );
                break;
            case $.ui.keyCode.RIGHT:
                if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
                    this.expand( event );
                }
                break;
            case $.ui.keyCode.ENTER:
            case $.ui.keyCode.SPACE:
                this._activate( event );
                break;
            case $.ui.keyCode.ESCAPE:
                this.collapse( event );
                break;
            default:
                preventDefault = false;
                prev = this.previousFilter || "";
                character = String.fromCharCode( event.keyCode );
                skip = false;
    
                clearTimeout( this.filterTimer );
    
                if ( character === prev ) {
                    skip = true;
                } else {
                    character = prev + character;
                }
    
                match = this._filterMenuItems( character );
                match = skip && match.index( this.active.next() ) !== -1 ?
                    this.active.nextAll( ".ui-menu-item" ) :
                    match;
    
                // If no matches on the current filter, reset to the last character pressed
                // to move down the menu to the first item that starts with that character
                if ( !match.length ) {
                    character = String.fromCharCode( event.keyCode );
                    match = this._filterMenuItems( character );
                }
    
                if ( match.length ) {
                    this.focus( event, match );
                    this.previousFilter = character;
                    this.filterTimer = this._delay(function() {
                        delete this.previousFilter;
                    }, 1000 );
                } else {
                    delete this.previousFilter;
                }
            }
    
            if ( preventDefault ) {
                event.preventDefault();
            }
        },
    
        _activate: function( event ) {
            if ( !this.active.is( ".ui-state-disabled" ) ) {
                if ( this.active.is( "[aria-haspopup='true']" ) ) {
                    this.expand( event );
                } else {
                    this.select( event );
                }
            }
        },
    
        refresh: function() {
            var menus, items,
                that = this,
                icon = this.options.icons.submenu,
                submenus = this.element.find( this.options.menus );
    
            this.element.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length );
    
            // Initialize nested menus
            submenus.filter( ":not(.ui-menu)" )
                .addClass( "ui-menu ui-widget ui-widget-content ui-front" )
                .hide()
                .attr({
                    role: this.options.role,
                    "aria-hidden": "true",
                    "aria-expanded": "false"
                })
                .each(function() {
                    var menu = $( this ),
                        item = menu.parent(),
                        submenuCarat = $( "<span>" )
                            .addClass( "ui-menu-icon ui-icon " + icon )
                            .data( "ui-menu-submenu-carat", true );
    
                    item
                        .attr( "aria-haspopup", "true" )
                        .prepend( submenuCarat );
                    menu.attr( "aria-labelledby", item.attr( "id" ) );
                });
    
            menus = submenus.add( this.element );
            items = menus.find( this.options.items );
    
            // Initialize menu-items containing spaces and/or dashes only as dividers
            items.not( ".ui-menu-item" ).each(function() {
                var item = $( this );
                if ( that._isDivider( item ) ) {
                    item.addClass( "ui-widget-content ui-menu-divider" );
                }
            });
    
            // Don't refresh list items that are already adapted
            items.not( ".ui-menu-item, .ui-menu-divider" )
                .addClass( "ui-menu-item" )
                .uniqueId()
                .attr({
                    tabIndex: -1,
                    role: this._itemRole()
                });
    
            // Add aria-disabled attribute to any disabled menu item
            items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );
    
            // If the active item has been removed, blur the menu
            if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
                this.blur();
            }
        },
    
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[ this.options.role ];
        },
    
        _setOption: function( key, value ) {
            if ( key === "icons" ) {
                this.element.find( ".ui-menu-icon" )
                    .removeClass( this.options.icons.submenu )
                    .addClass( value.submenu );
            }
            if ( key === "disabled" ) {
                this.element
                    .toggleClass( "ui-state-disabled", !!value )
                    .attr( "aria-disabled", value );
            }
            this._super( key, value );
        },
    
        focus: function( event, item ) {
            var nested, focused;
            this.blur( event, event && event.type === "focus" );
    
            this._scrollIntoView( item );
    
            this.active = item.first();
            focused = this.active.addClass( "ui-state-focus" ).removeClass( "ui-state-active" );
            // Only update aria-activedescendant if there's a role
            // otherwise we assume focus is managed elsewhere
            if ( this.options.role ) {
                this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
            }
    
            // Highlight active parent menu item, if any
            this.active
                .parent()
                .closest( ".ui-menu-item" )
                .addClass( "ui-state-active" );
    
            if ( event && event.type === "keydown" ) {
                this._close();
            } else {
                this.timer = this._delay(function() {
                    this._close();
                }, this.delay );
            }
    
            nested = item.children( ".ui-menu" );
            if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
                this._startOpening(nested);
            }
            this.activeMenu = item.parent();
    
            this._trigger( "focus", event, { item: item } );
        },
    
        _scrollIntoView: function( item ) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if ( this._hasScroll() ) {
                borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
                paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.outerHeight();
    
                if ( offset < 0 ) {
                    this.activeMenu.scrollTop( scroll + offset );
                } else if ( offset + itemHeight > elementHeight ) {
                    this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
                }
            }
        },
    
        blur: function( event, fromFocus ) {
            if ( !fromFocus ) {
                clearTimeout( this.timer );
            }
    
            if ( !this.active ) {
                return;
            }
    
            this.active.removeClass( "ui-state-focus" );
            this.active = null;
    
            this._trigger( "blur", event, { item: this.active } );
        },
    
        _startOpening: function( submenu ) {
            clearTimeout( this.timer );
    
            // Don't open if already open fixes a Firefox bug that caused a .5 pixel
            // shift in the submenu position when mousing over the carat icon
            if ( submenu.attr( "aria-hidden" ) !== "true" ) {
                return;
            }
    
            this.timer = this._delay(function() {
                this._close();
                this._open( submenu );
            }, this.delay );
        },
    
        _open: function( submenu ) {
            var position = $.extend({
                of: this.active
            }, this.options.position );
    
            clearTimeout( this.timer );
            this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
                .hide()
                .attr( "aria-hidden", "true" );
    
            submenu
                .show()
                .removeAttr( "aria-hidden" )
                .attr( "aria-expanded", "true" )
                .position( position );
        },
    
        collapseAll: function( event, all ) {
            clearTimeout( this.timer );
            this.timer = this._delay(function() {
                // If we were passed an event, look for the submenu that contains the event
                var currentMenu = all ? this.element :
                    $( event && event.target ).closest( this.element.find( ".ui-menu" ) );
    
                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
                if ( !currentMenu.length ) {
                    currentMenu = this.element;
                }
    
                this._close( currentMenu );
    
                this.blur( event );
                this.activeMenu = currentMenu;
            }, this.delay );
        },
    
        // With no arguments, closes the currently active menu - if nothing is active
        // it closes all menus.  If passed an argument, it will search for menus BELOW
        _close: function( startMenu ) {
            if ( !startMenu ) {
                startMenu = this.active ? this.active.parent() : this.element;
            }
    
            startMenu
                .find( ".ui-menu" )
                    .hide()
                    .attr( "aria-hidden", "true" )
                    .attr( "aria-expanded", "false" )
                .end()
                .find( ".ui-state-active" ).not( ".ui-state-focus" )
                    .removeClass( "ui-state-active" );
        },
    
        _closeOnDocumentClick: function( event ) {
            return !$( event.target ).closest( ".ui-menu" ).length;
        },
    
        _isDivider: function( item ) {
    
            // Match hyphen, em dash, en dash
            return !/[^\-\u2014\u2013\s]/.test( item.text() );
        },
    
        collapse: function( event ) {
            var newItem = this.active &&
                this.active.parent().closest( ".ui-menu-item", this.element );
            if ( newItem && newItem.length ) {
                this._close();
                this.focus( event, newItem );
            }
        },
    
        expand: function( event ) {
            var newItem = this.active &&
                this.active
                    .children( ".ui-menu " )
                    .find( this.options.items )
                    .first();
    
            if ( newItem && newItem.length ) {
                this._open( newItem.parent() );
    
                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
                this._delay(function() {
                    this.focus( event, newItem );
                });
            }
        },
    
        next: function( event ) {
            this._move( "next", "first", event );
        },
    
        previous: function( event ) {
            this._move( "prev", "last", event );
        },
    
        isFirstItem: function() {
            return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
        },
    
        isLastItem: function() {
            return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
        },
    
        _move: function( direction, filter, event ) {
            var next;
            if ( this.active ) {
                if ( direction === "first" || direction === "last" ) {
                    next = this.active
                        [ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
                        .eq( -1 );
                } else {
                    next = this.active
                        [ direction + "All" ]( ".ui-menu-item" )
                        .eq( 0 );
                }
            }
            if ( !next || !next.length || !this.active ) {
                next = this.activeMenu.find( this.options.items )[ filter ]();
            }
    
            this.focus( event, next );
        },
    
        nextPage: function( event ) {
            var item, base, height;
    
            if ( !this.active ) {
                this.next( event );
                return;
            }
            if ( this.isLastItem() ) {
                return;
            }
            if ( this._hasScroll() ) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll( ".ui-menu-item" ).each(function() {
                    item = $( this );
                    return item.offset().top - base - height < 0;
                });
    
                this.focus( event, item );
            } else {
                this.focus( event, this.activeMenu.find( this.options.items )
                    [ !this.active ? "first" : "last" ]() );
            }
        },
    
        previousPage: function( event ) {
            var item, base, height;
            if ( !this.active ) {
                this.next( event );
                return;
            }
            if ( this.isFirstItem() ) {
                return;
            }
            if ( this._hasScroll() ) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll( ".ui-menu-item" ).each(function() {
                    item = $( this );
                    return item.offset().top - base + height > 0;
                });
    
                this.focus( event, item );
            } else {
                this.focus( event, this.activeMenu.find( this.options.items ).first() );
            }
        },
    
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop( "scrollHeight" );
        },
    
        select: function( event ) {
            // TODO: It should never be possible to not have an active item at this
            // point, but the tests don't trigger mouseenter before click.
            this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
            var ui = { item: this.active };
            if ( !this.active.has( ".ui-menu" ).length ) {
                this.collapseAll( event, true );
            }
            this._trigger( "select", event, ui );
        },
    
        _filterMenuItems: function(character) {
            var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
                regex = new RegExp( "^" + escapedCharacter, "i" );
    
            return this.activeMenu
                .find( this.options.items )
    
                // Only match on items, not dividers or other content (#10571)
                .filter( ".ui-menu-item" )
                .filter(function() {
                    return regex.test( $.trim( $( this ).text() ) );
                });
        }
    });
    
    }));
    
    
    
    
    
    /*!
     * jQuery UI Autocomplete 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/autocomplete/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define([
                "jquery",
                "./core",
                "./widget",
                "./position",
                "./menu"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    $.widget( "ui.autocomplete", {
        version: "1.11.4",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: false,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
    
            // callbacks
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
    
        requestIndex: 0,
        pending: 0,
    
        _create: function() {
            // Some browsers only repeat keydown events, not keypress events,
            // so we use the suppressKeyPress flag to determine if we've already
            // handled the keydown event. #7269
            // Unfortunately the code for & in keypress is the same as the up arrow,
            // so we use the suppressKeyPressRepeat flag to avoid handling keypress
            // events when we know the keydown event was used to modify the
            // search term. #7799
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
                nodeName = this.element[ 0 ].nodeName.toLowerCase(),
                isTextarea = nodeName === "textarea",
                isInput = nodeName === "input";
    
            this.isMultiLine =
                // Textareas are always multi-line
                isTextarea ? true :
                // Inputs are always single-line, even if inside a contentEditable element
                // IE also treats inputs as contentEditable
                isInput ? false :
                // All other element types are determined by whether or not they're contentEditable
                this.element.prop( "isContentEditable" );
    
            this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
            this.isNewMenu = true;
    
            this.element
                .addClass( "ui-autocomplete-input" )
                .attr( "autocomplete", "off" );
    
            this._on( this.element, {
                keydown: function( event ) {
                    if ( this.element.prop( "readOnly" ) ) {
                        suppressKeyPress = true;
                        suppressInput = true;
                        suppressKeyPressRepeat = true;
                        return;
                    }
    
                    suppressKeyPress = false;
                    suppressInput = false;
                    suppressKeyPressRepeat = false;
                    var keyCode = $.ui.keyCode;
                    switch ( event.keyCode ) {
                    case keyCode.PAGE_UP:
                        suppressKeyPress = true;
                        this._move( "previousPage", event );
                        break;
                    case keyCode.PAGE_DOWN:
                        suppressKeyPress = true;
                        this._move( "nextPage", event );
                        break;
                    case keyCode.UP:
                        suppressKeyPress = true;
                        this._keyEvent( "previous", event );
                        break;
                    case keyCode.DOWN:
                        suppressKeyPress = true;
                        this._keyEvent( "next", event );
                        break;
                    case keyCode.ENTER:
                        // when menu is open and has focus
                        if ( this.menu.active ) {
                            // #6055 - Opera still allows the keypress to occur
                            // which causes forms to submit
                            suppressKeyPress = true;
                            event.preventDefault();
                            this.menu.select( event );
                        }
                        break;
                    case keyCode.TAB:
                        if ( this.menu.active ) {
                            this.menu.select( event );
                        }
                        break;
                    case keyCode.ESCAPE:
                        if ( this.menu.element.is( ":visible" ) ) {
                            if ( !this.isMultiLine ) {
                                this._value( this.term );
                            }
                            this.close( event );
                            // Different browsers have different default behavior for escape
                            // Single press can mean undo or clear
                            // Double press in IE means clear the whole form
                            event.preventDefault();
                        }
                        break;
                    default:
                        suppressKeyPressRepeat = true;
                        // search timeout should be triggered before the input value is changed
                        this._searchTimeout( event );
                        break;
                    }
                },
                keypress: function( event ) {
                    if ( suppressKeyPress ) {
                        suppressKeyPress = false;
                        if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
                            event.preventDefault();
                        }
                        return;
                    }
                    if ( suppressKeyPressRepeat ) {
                        return;
                    }
    
                    // replicate some key handlers to allow them to repeat in Firefox and Opera
                    var keyCode = $.ui.keyCode;
                    switch ( event.keyCode ) {
                    case keyCode.PAGE_UP:
                        this._move( "previousPage", event );
                        break;
                    case keyCode.PAGE_DOWN:
                        this._move( "nextPage", event );
                        break;
                    case keyCode.UP:
                        this._keyEvent( "previous", event );
                        break;
                    case keyCode.DOWN:
                        this._keyEvent( "next", event );
                        break;
                    }
                },
                input: function( event ) {
                    if ( suppressInput ) {
                        suppressInput = false;
                        event.preventDefault();
                        return;
                    }
                    this._searchTimeout( event );
                },
                focus: function() {
                    this.selectedItem = null;
                    this.previous = this._value();
                },
                blur: function( event ) {
                    if ( this.cancelBlur ) {
                        delete this.cancelBlur;
                        return;
                    }
    
                    clearTimeout( this.searching );
                    this.close( event );
                    this._change( event );
                }
            });
    
            this._initSource();
            this.menu = $( "<ul>" )
                .addClass( "ui-autocomplete ui-front" )
                .appendTo( this._appendTo() )
                .menu({
                    // disable ARIA support, the live region takes care of that
                    role: null
                })
                .hide()
                .menu( "instance" );
    
            this._on( this.menu.element, {
                mousedown: function( event ) {
                    // prevent moving focus out of the text field
                    event.preventDefault();
    
                    // IE doesn't prevent moving focus even with event.preventDefault()
                    // so we set a flag to know when we should ignore the blur event
                    this.cancelBlur = true;
                    this._delay(function() {
                        delete this.cancelBlur;
                    });
    
                    // clicking on the scrollbar causes focus to shift to the body
                    // but we can't detect a mouseup or a click immediately afterward
                    // so we have to track the next mousedown and close the menu if
                    // the user clicks somewhere outside of the autocomplete
                    var menuElement = this.menu.element[ 0 ];
                    if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
                        this._delay(function() {
                            var that = this;
                            this.document.one( "mousedown", function( event ) {
                                if ( event.target !== that.element[ 0 ] &&
                                        event.target !== menuElement &&
                                        !$.contains( menuElement, event.target ) ) {
                                    that.close();
                                }
                            });
                        });
                    }
                },
                menufocus: function( event, ui ) {
                    var label, item;
                    // support: Firefox
                    // Prevent accidental activation of menu items in Firefox (#7024 #9118)
                    if ( this.isNewMenu ) {
                        this.isNewMenu = false;
                        if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
                            this.menu.blur();
    
                            this.document.one( "mousemove", function() {
                                $( event.target ).trigger( event.originalEvent );
                            });
    
                            return;
                        }
                    }
    
                    item = ui.item.data( "ui-autocomplete-item" );
                    if ( false !== this._trigger( "focus", event, { item: item } ) ) {
                        // use value to match what will end up in the input, if it was a key event
                        if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
                            this._value( item.value );
                        }
                    }
    
                    // Announce the value in the liveRegion
                    label = ui.item.attr( "aria-label" ) || item.value;
                    if ( label && $.trim( label ).length ) {
                        this.liveRegion.children().hide();
                        $( "<div>" ).text( label ).appendTo( this.liveRegion );
                    }
                },
                menuselect: function( event, ui ) {
                    var item = ui.item.data( "ui-autocomplete-item" ),
                        previous = this.previous;
    
                    // only trigger when focus was lost (click on menu)
                    if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {
                        this.element.focus();
                        this.previous = previous;
                        // #6109 - IE triggers two focus events and the second
                        // is asynchronous, so we need to reset the previous
                        // term synchronously and asynchronously :-(
                        this._delay(function() {
                            this.previous = previous;
                            this.selectedItem = item;
                        });
                    }
    
                    if ( false !== this._trigger( "select", event, { item: item } ) ) {
                        this._value( item.value );
                    }
                    // reset the term after the select event
                    // this allows custom select handling to work properly
                    this.term = this._value();
    
                    this.close( event );
                    this.selectedItem = item;
                }
            });
    
            this.liveRegion = $( "<span>", {
                    role: "status",
                    "aria-live": "assertive",
                    "aria-relevant": "additions"
                })
                .addClass( "ui-helper-hidden-accessible" )
                .appendTo( this.document[ 0 ].body );
    
            // turning off autocomplete prevents the browser from remembering the
            // value when navigating through history, so we re-enable autocomplete
            // if the page is unloaded before the widget is destroyed. #7790
            this._on( this.window, {
                beforeunload: function() {
                    this.element.removeAttr( "autocomplete" );
                }
            });
        },
    
        _destroy: function() {
            clearTimeout( this.searching );
            this.element
                .removeClass( "ui-autocomplete-input" )
                .removeAttr( "autocomplete" );
            this.menu.element.remove();
            this.liveRegion.remove();
        },
    
        _setOption: function( key, value ) {
            this._super( key, value );
            if ( key === "source" ) {
                this._initSource();
            }
            if ( key === "appendTo" ) {
                this.menu.element.appendTo( this._appendTo() );
            }
            if ( key === "disabled" && value && this.xhr ) {
                this.xhr.abort();
            }
        },
    
        _appendTo: function() {
            var element = this.options.appendTo;
    
            if ( element ) {
                element = element.jquery || element.nodeType ?
                    $( element ) :
                    this.document.find( element ).eq( 0 );
            }
    
            if ( !element || !element[ 0 ] ) {
                element = this.element.closest( ".ui-front" );
            }
    
            if ( !element.length ) {
                element = this.document[ 0 ].body;
            }
    
            return element;
        },
    
        _initSource: function() {
            var array, url,
                that = this;
            if ( $.isArray( this.options.source ) ) {
                array = this.options.source;
                this.source = function( request, response ) {
                    response( $.ui.autocomplete.filter( array, request.term ) );
                };
            } else if ( typeof this.options.source === "string" ) {
                url = this.options.source;
                this.source = function( request, response ) {
                    if ( that.xhr ) {
                        that.xhr.abort();
                    }
                    that.xhr = $.ajax({
                        url: url,
                        data: request,
                        dataType: "json",
                        success: function( data ) {
                            response( data );
                        },
                        error: function() {
                            response([]);
                        }
                    });
                };
            } else {
                this.source = this.options.source;
            }
        },
    
        _searchTimeout: function( event ) {
            clearTimeout( this.searching );
            this.searching = this._delay(function() {
    
                // Search if the value has changed, or if the user retypes the same value (see #7434)
                var equalValues = this.term === this._value(),
                    menuVisible = this.menu.element.is( ":visible" ),
                    modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
    
                if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
                    this.selectedItem = null;
                    this.search( null, event );
                }
            }, this.options.delay );
        },
    
        search: function( value, event ) {
            value = value != null ? value : this._value();
    
            // always save the actual value, not the one passed as an argument
            this.term = this._value();
    
            if ( value.length < this.options.minLength ) {
                return this.close( event );
            }
    
            if ( this._trigger( "search", event ) === false ) {
                return;
            }
    
            return this._search( value );
        },
    
        _search: function( value ) {
            this.pending++;
            this.element.addClass( "ui-autocomplete-loading" );
            this.cancelSearch = false;
    
            this.source( { term: value }, this._response() );
        },
    
        _response: function() {
            var index = ++this.requestIndex;
    
            return $.proxy(function( content ) {
                if ( index === this.requestIndex ) {
                    this.__response( content );
                }
    
                this.pending--;
                if ( !this.pending ) {
                    this.element.removeClass( "ui-autocomplete-loading" );
                }
            }, this );
        },
    
        __response: function( content ) {
            if ( content ) {
                content = this._normalize( content );
            }
            this._trigger( "response", null, { content: content } );
            if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
                this._suggest( content );
                this._trigger( "open" );
            } else {
                // use ._close() instead of .close() so we don't cancel future searches
                this._close();
            }
        },
    
        close: function( event ) {
            this.cancelSearch = true;
            this._close( event );
        },
    
        _close: function( event ) {
            if ( this.menu.element.is( ":visible" ) ) {
                this.menu.element.hide();
                this.menu.blur();
                this.isNewMenu = true;
                this._trigger( "close", event );
            }
        },
    
        _change: function( event ) {
            if ( this.previous !== this._value() ) {
                this._trigger( "change", event, { item: this.selectedItem } );
            }
        },
    
        _normalize: function( items ) {
            // assume all items have the right format when the first item is complete
            if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
                return items;
            }
            return $.map( items, function( item ) {
                if ( typeof item === "string" ) {
                    return {
                        label: item,
                        value: item
                    };
                }
                return $.extend( {}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                });
            });
        },
    
        _suggest: function( items ) {
            var ul = this.menu.element.empty();
            this._renderMenu( ul, items );
            this.isNewMenu = true;
            this.menu.refresh();
    
            // size and position menu
            ul.show();
            this._resizeMenu();
            ul.position( $.extend({
                of: this.element
            }, this.options.position ) );
    
            if ( this.options.autoFocus ) {
                this.menu.next();
            }
        },
    
        _resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth( Math.max(
                // Firefox wraps long text (possibly a rounding bug)
                // so we add 1px to avoid the wrapping (#7513)
                ul.width( "" ).outerWidth() + 1,
                this.element.outerWidth()
            ) );
        },
    
        _renderMenu: function( ul, items ) {
            var that = this;
            $.each( items, function( index, item ) {
                that._renderItemData( ul, item );
            });
        },
    
        _renderItemData: function( ul, item ) {
            return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
        },
    
        _renderItem: function( ul, item ) {
            return $( "<li>" ).text( item.label ).appendTo( ul );
        },
    
        _move: function( direction, event ) {
            if ( !this.menu.element.is( ":visible" ) ) {
                this.search( null, event );
                return;
            }
            if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
                    this.menu.isLastItem() && /^next/.test( direction ) ) {
    
                if ( !this.isMultiLine ) {
                    this._value( this.term );
                }
    
                this.menu.blur();
                return;
            }
            this.menu[ direction ]( event );
        },
    
        widget: function() {
            return this.menu.element;
        },
    
        _value: function() {
            return this.valueMethod.apply( this.element, arguments );
        },
    
        _keyEvent: function( keyEvent, event ) {
            if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
                this._move( keyEvent, event );
    
                // prevents moving cursor to beginning/end of the text field in some browsers
                event.preventDefault();
            }
        }
    });
    
    $.extend( $.ui.autocomplete, {
        escapeRegex: function( value ) {
            return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
        },
        filter: function( array, term ) {
            var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
            return $.grep( array, function( value ) {
                return matcher.test( value.label || value.value || value );
            });
        }
    });
    
    // live region extension, adding a `messages` option
    // NOTE: This is an experimental API. We are still investigating
    // a full solution for string manipulation and internationalization.
    $.widget( "ui.autocomplete", $.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function( amount ) {
                    return amount + ( amount > 1 ? " results are" : " result is" ) +
                        " available, use up and down arrow keys to navigate.";
                }
            }
        },
    
        __response: function( content ) {
            var message;
            this._superApply( arguments );
            if ( this.options.disabled || this.cancelSearch ) {
                return;
            }
            if ( content && content.length ) {
                message = this.options.messages.results( content.length );
            } else {
                message = this.options.messages.noResults;
            }
            this.liveRegion.children().hide();
            $( "<div>" ).text( message ).appendTo( this.liveRegion );
        }
    });
    
    return $.ui.autocomplete;
    
    }));
    
    
    
    /*!
     * jQuery UI Mouse 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/mouse/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define([
                "jquery",
                "./widget"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    var mouseHandled = false;
    $( document ).mouseup( function() {
        mouseHandled = false;
    });
    
    return $.widget("ui.mouse", {
        version: "1.11.4",
        options: {
            cancel: "input,textarea,button,select,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
    
            this.element
                .bind("mousedown." + this.widgetName, function(event) {
                    return that._mouseDown(event);
                })
                .bind("click." + this.widgetName, function(event) {
                    if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                        $.removeData(event.target, that.widgetName + ".preventClickEvent");
                        event.stopImmediatePropagation();
                        return false;
                    }
                });
    
            this.started = false;
        },
    
        // TODO: make sure destroying one instance of mouse doesn't mess with
        // other instances of mouse
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName);
            if ( this._mouseMoveDelegate ) {
                this.document
                    .unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
                    .unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            }
        },
    
        _mouseDown: function(event) {
            // don't let more than one widget handle mouseStart
            if ( mouseHandled ) {
                return;
            }
    
            this._mouseMoved = false;
    
            // we may have missed mouseup (out of window)
            (this._mouseStarted && this._mouseUp(event));
    
            this._mouseDownEvent = event;
    
            var that = this,
                btnIsLeft = (event.which === 1),
                // event.target.nodeName works around a bug in IE 8 with
                // disabled inputs (#7620)
                elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }
    
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = true;
                }, this.options.delay);
            }
    
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(event) !== false);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }
    
            // Click event may never have fired (Gecko & Opera)
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
                $.removeData(event.target, this.widgetName + ".preventClickEvent");
            }
    
            // these delegates are required to keep context
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event);
            };
    
            this.document
                .bind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
                .bind( "mouseup." + this.widgetName, this._mouseUpDelegate );
    
            event.preventDefault();
    
            mouseHandled = true;
            return true;
        },
    
        _mouseMove: function(event) {
            // Only check for mouseups outside the document if you've moved inside the document
            // at least once. This prevents the firing of mouseup in the case of IE<9, which will
            // fire a mousemove event if content is placed under the cursor. See #7778
            // Support: IE <9
            if ( this._mouseMoved ) {
                // IE mouseup check - mouseup happened when mouse was out of window
                if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
                    return this._mouseUp(event);
    
                // Iframe mouseup check - mouseup occurred in another document
                } else if ( !event.which ) {
                    return this._mouseUp( event );
                }
            }
    
            if ( event.which || event.button ) {
                this._mouseMoved = true;
            }
    
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }
    
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted =
                    (this._mouseStart(this._mouseDownEvent, event) !== false);
                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
            }
    
            return !this._mouseStarted;
        },
    
        _mouseUp: function(event) {
            this.document
                .unbind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
                .unbind( "mouseup." + this.widgetName, this._mouseUpDelegate );
    
            if (this._mouseStarted) {
                this._mouseStarted = false;
    
                if (event.target === this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + ".preventClickEvent", true);
                }
    
                this._mouseStop(event);
            }
    
            mouseHandled = false;
            return false;
        },
    
        _mouseDistanceMet: function(event) {
            return (Math.max(
                    Math.abs(this._mouseDownEvent.pageX - event.pageX),
                    Math.abs(this._mouseDownEvent.pageY - event.pageY)
                ) >= this.options.distance
            );
        },
    
        _mouseDelayMet: function(/* event */) {
            return this.mouseDelayMet;
        },
    
        // These are placeholder methods, to be overriden by extending plugin
        _mouseStart: function(/* event */) {},
        _mouseDrag: function(/* event */) {},
        _mouseStop: function(/* event */) {},
        _mouseCapture: function(/* event */) { return true; }
    });
    
    }));
    
    
    
    
    /*!
     * jQuery UI Sortable 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/sortable/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define([
                "jquery",
                "./core",
                "./mouse",
                "./widget"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    return $.widget("ui.sortable", $.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "sort",
        ready: false,
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1000,
    
            // callbacks
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
    
        _isOverAxis: function( x, reference, size ) {
            return ( x >= reference ) && ( x < ( reference + size ) );
        },
    
        _isFloating: function( item ) {
            return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
        },
    
        _create: function() {
            this.containerCache = {};
            this.element.addClass("ui-sortable");
    
            //Get the items
            this.refresh();
    
            //Let's determine the parent's offset
            this.offset = this.element.offset();
    
            //Initialize mouse events for interaction
            this._mouseInit();
    
            this._setHandleClassName();
    
            //We're ready to go
            this.ready = true;
    
        },
    
        _setOption: function( key, value ) {
            this._super( key, value );
    
            if ( key === "handle" ) {
                this._setHandleClassName();
            }
        },
    
        _setHandleClassName: function() {
            this.element.find( ".ui-sortable-handle" ).removeClass( "ui-sortable-handle" );
            $.each( this.items, function() {
                ( this.instance.options.handle ?
                    this.item.find( this.instance.options.handle ) : this.item )
                    .addClass( "ui-sortable-handle" );
            });
        },
    
        _destroy: function() {
            this.element
                .removeClass( "ui-sortable ui-sortable-disabled" )
                .find( ".ui-sortable-handle" )
                    .removeClass( "ui-sortable-handle" );
            this._mouseDestroy();
    
            for ( var i = this.items.length - 1; i >= 0; i-- ) {
                this.items[i].item.removeData(this.widgetName + "-item");
            }
    
            return this;
        },
    
        _mouseCapture: function(event, overrideHandle) {
            var currentItem = null,
                validHandle = false,
                that = this;
    
            if (this.reverting) {
                return false;
            }
    
            if(this.options.disabled || this.options.type === "static") {
                return false;
            }
    
            //We have to refresh the items data once first
            this._refreshItems(event);
    
            //Find out if the clicked node (or one of its parents) is a actual item in this.items
            $(event.target).parents().each(function() {
                if($.data(this, that.widgetName + "-item") === that) {
                    currentItem = $(this);
                    return false;
                }
            });
            if($.data(event.target, that.widgetName + "-item") === that) {
                currentItem = $(event.target);
            }
    
            if(!currentItem) {
                return false;
            }
            if(this.options.handle && !overrideHandle) {
                $(this.options.handle, currentItem).find("*").addBack().each(function() {
                    if(this === event.target) {
                        validHandle = true;
                    }
                });
                if(!validHandle) {
                    return false;
                }
            }
    
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true;
    
        },
    
        _mouseStart: function(event, overrideHandle, noActivation) {
    
            var i, body,
                o = this.options;
    
            this.currentContainer = this;
    
            //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
            this.refreshPositions();
    
            //Create and append the visible helper
            this.helper = this._createHelper(event);
    
            //Cache the helper size
            this._cacheHelperProportions();
    
            /*
             * - Position generation -
             * This block generates everything position related - it's the core of draggables.
             */
    
            //Cache the margins of the original element
            this._cacheMargins();
    
            //Get the next scrolling parent
            this.scrollParent = this.helper.scrollParent();
    
            //The element's absolute position on the page minus margins
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
    
            $.extend(this.offset, {
                click: { //Where the click happened, relative to the element
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
            });
    
            // Only after we got the offset, we can change the helper's position to absolute
            // TODO: Still need to figure out a way to make relative sorting possible
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
    
            //Generate the original position
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
    
            //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
    
            //Cache the former DOM position
            this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };
    
            //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
            if(this.helper[0] !== this.currentItem[0]) {
                this.currentItem.hide();
            }
    
            //Create the placeholder
            this._createPlaceholder();
    
            //Set a containment if given in the options
            if(o.containment) {
                this._setContainment();
            }
    
            if( o.cursor && o.cursor !== "auto" ) { // cursor option
                body = this.document.find( "body" );
    
                // support: IE
                this.storedCursor = body.css( "cursor" );
                body.css( "cursor", o.cursor );
    
                this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
            }
    
            if(o.opacity) { // opacity option
                if (this.helper.css("opacity")) {
                    this._storedOpacity = this.helper.css("opacity");
                }
                this.helper.css("opacity", o.opacity);
            }
    
            if(o.zIndex) { // zIndex option
                if (this.helper.css("zIndex")) {
                    this._storedZIndex = this.helper.css("zIndex");
                }
                this.helper.css("zIndex", o.zIndex);
            }
    
            //Prepare scrolling
            if(this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
                this.overflowOffset = this.scrollParent.offset();
            }
    
            //Call callbacks
            this._trigger("start", event, this._uiHash());
    
            //Recache the helper size
            if(!this._preserveHelperProportions) {
                this._cacheHelperProportions();
            }
    
    
            //Post "activate" events to possible containers
            if( !noActivation ) {
                for ( i = this.containers.length - 1; i >= 0; i-- ) {
                    this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
                }
            }
    
            //Prepare possible droppables
            if($.ui.ddmanager) {
                $.ui.ddmanager.current = this;
            }
    
            if ($.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(this, event);
            }
    
            this.dragging = true;
    
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
            return true;
    
        },
    
        _mouseDrag: function(event) {
            var i, item, itemElement, intersection,
                o = this.options,
                scrolled = false;
    
            //Compute the helpers position
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
    
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs;
            }
    
            //Do scrolling
            if(this.options.scroll) {
                if(this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
    
                    if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                    } else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                    }
    
                    if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                    } else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                    }
    
                } else {
    
                    if(event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
                        scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);
                    } else if(this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
                        scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);
                    }
    
                    if(event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
                        scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);
                    } else if(this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
                        scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);
                    }
    
                }
    
                if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                    $.ui.ddmanager.prepareOffsets(this, event);
                }
            }
    
            //Regenerate the absolute position used for position checks
            this.positionAbs = this._convertPositionTo("absolute");
    
            //Set the helper position
            if(!this.options.axis || this.options.axis !== "y") {
                this.helper[0].style.left = this.position.left+"px";
            }
            if(!this.options.axis || this.options.axis !== "x") {
                this.helper[0].style.top = this.position.top+"px";
            }
    
            //Rearrange
            for (i = this.items.length - 1; i >= 0; i--) {
    
                //Cache variables and intersection, continue if no intersection
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) {
                    continue;
                }
    
                // Only put the placeholder inside the current Container, skip all
                // items from other containers. This works because when moving
                // an item from one container to another the
                // currentContainer is switched before the placeholder is moved.
                //
                // Without this, moving items in "sub-sortables" can cause
                // the placeholder to jitter between the outer and inner container.
                if (item.instance !== this.currentContainer) {
                    continue;
                }
    
                // cannot intersect with itself
                // no useless actions that have been done before
                // no action if the item moved is the parent of the item checked
                if (itemElement !== this.currentItem[0] &&
                    this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
                    !$.contains(this.placeholder[0], itemElement) &&
                    (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
                ) {
    
                    this.direction = intersection === 1 ? "down" : "up";
    
                    if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
                        this._rearrange(event, item);
                    } else {
                        break;
                    }
    
                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }
    
            //Post events to containers
            this._contactContainers(event);
    
            //Interconnect with droppables
            if($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event);
            }
    
            //Call callbacks
            this._trigger("sort", event, this._uiHash());
    
            this.lastPositionAbs = this.positionAbs;
            return false;
    
        },
    
        _mouseStop: function(event, noPropagation) {
    
            if(!event) {
                return;
            }
    
            //If we are using droppables, inform the manager about the drop
            if ($.ui.ddmanager && !this.options.dropBehaviour) {
                $.ui.ddmanager.drop(this, event);
            }
    
            if(this.options.revert) {
                var that = this,
                    cur = this.placeholder.offset(),
                    axis = this.options.axis,
                    animation = {};
    
                if ( !axis || axis === "x" ) {
                    animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);
                }
                if ( !axis || axis === "y" ) {
                    animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);
                }
                this.reverting = true;
                $(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
                    that._clear(event);
                });
            } else {
                this._clear(event, noPropagation);
            }
    
            return false;
    
        },
    
        cancel: function() {
    
            if(this.dragging) {
    
                this._mouseUp({ target: null });
    
                if(this.options.helper === "original") {
                    this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                } else {
                    this.currentItem.show();
                }
    
                //Post deactivating events to containers
                for (var i = this.containers.length - 1; i >= 0; i--){
                    this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                    if(this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
    
            }
    
            if (this.placeholder) {
                //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
                if(this.placeholder[0].parentNode) {
                    this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                }
                if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
                    this.helper.remove();
                }
    
                $.extend(this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                });
    
                if(this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.currentItem);
                } else {
                    $(this.domPosition.parent).prepend(this.currentItem);
                }
            }
    
            return this;
    
        },
    
        serialize: function(o) {
    
            var items = this._getItemsAsjQuery(o && o.connected),
                str = [];
            o = o || {};
    
            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
                if (res) {
                    str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
                }
            });
    
            if(!str.length && o.key) {
                str.push(o.key + "=");
            }
    
            return str.join("&");
    
        },
    
        toArray: function(o) {
    
            var items = this._getItemsAsjQuery(o && o.connected),
                ret = [];
    
            o = o || {};
    
            items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
            return ret;
    
        },
    
        /* Be careful with the following core functions */
        _intersectsWith: function(item) {
    
            var x1 = this.positionAbs.left,
                x2 = x1 + this.helperProportions.width,
                y1 = this.positionAbs.top,
                y2 = y1 + this.helperProportions.height,
                l = item.left,
                r = l + item.width,
                t = item.top,
                b = t + item.height,
                dyClick = this.offset.click.top,
                dxClick = this.offset.click.left,
                isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
                isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
                isOverElement = isOverElementHeight && isOverElementWidth;
    
            if ( this.options.tolerance === "pointer" ||
                this.options.forcePointerForContainers ||
                (this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
            ) {
                return isOverElement;
            } else {
    
                return (l < x1 + (this.helperProportions.width / 2) && // Right Half
                    x2 - (this.helperProportions.width / 2) < r && // Left Half
                    t < y1 + (this.helperProportions.height / 2) && // Bottom Half
                    y2 - (this.helperProportions.height / 2) < b ); // Top Half
    
            }
        },
    
        _intersectsWithPointer: function(item) {
    
            var isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
                isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
                isOverElement = isOverElementHeight && isOverElementWidth,
                verticalDirection = this._getDragVerticalDirection(),
                horizontalDirection = this._getDragHorizontalDirection();
    
            if (!isOverElement) {
                return false;
            }
    
            return this.floating ?
                ( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
                : ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );
    
        },
    
        _intersectsWithSides: function(item) {
    
            var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
                isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
                verticalDirection = this._getDragVerticalDirection(),
                horizontalDirection = this._getDragHorizontalDirection();
    
            if (this.floating && horizontalDirection) {
                return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
            } else {
                return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
            }
    
        },
    
        _getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return delta !== 0 && (delta > 0 ? "down" : "up");
        },
    
        _getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return delta !== 0 && (delta > 0 ? "right" : "left");
        },
    
        refresh: function(event) {
            this._refreshItems(event);
            this._setHandleClassName();
            this.refreshPositions();
            return this;
        },
    
        _connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
        },
    
        _getItemsAsjQuery: function(connected) {
    
            var i, j, cur, inst,
                items = [],
                queries = [],
                connectWith = this._connectWith();
    
            if(connectWith && connected) {
                for (i = connectWith.length - 1; i >= 0; i--){
                    cur = $(connectWith[i], this.document[0]);
                    for ( j = cur.length - 1; j >= 0; j--){
                        inst = $.data(cur[j], this.widgetFullName);
                        if(inst && inst !== this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
                        }
                    }
                }
            }
    
            queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
    
            function addItems() {
                items.push( this );
            }
            for (i = queries.length - 1; i >= 0; i--){
                queries[i][0].each( addItems );
            }
    
            return $(items);
    
        },
    
        _removeCurrentsFromItems: function() {
    
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
    
            this.items = $.grep(this.items, function (item) {
                for (var j=0; j < list.length; j++) {
                    if(list[j] === item.item[0]) {
                        return false;
                    }
                }
                return true;
            });
    
        },
    
        _refreshItems: function(event) {
    
            this.items = [];
            this.containers = [this];
    
            var i, j, cur, inst, targetData, _queries, item, queriesLength,
                items = this.items,
                queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
                connectWith = this._connectWith();
    
            if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
                for (i = connectWith.length - 1; i >= 0; i--){
                    cur = $(connectWith[i], this.document[0]);
                    for (j = cur.length - 1; j >= 0; j--){
                        inst = $.data(cur[j], this.widgetFullName);
                        if(inst && inst !== this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
                            this.containers.push(inst);
                        }
                    }
                }
            }
    
            for (i = queries.length - 1; i >= 0; i--) {
                targetData = queries[i][1];
                _queries = queries[i][0];
    
                for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
                    item = $(_queries[j]);
    
                    item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)
    
                    items.push({
                        item: item,
                        instance: targetData,
                        width: 0, height: 0,
                        left: 0, top: 0
                    });
                }
            }
    
        },
    
        refreshPositions: function(fast) {
    
            // Determine whether items are being displayed horizontally
            this.floating = this.items.length ?
                this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
                false;
    
            //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
            if(this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset();
            }
    
            var i, item, t, p;
    
            for (i = this.items.length - 1; i >= 0; i--){
                item = this.items[i];
    
                //We ignore calculating positions of all connected containers when we're not over them
                if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
                    continue;
                }
    
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
    
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }
    
                p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
    
            if(this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this);
            } else {
                for (i = this.containers.length - 1; i >= 0; i--){
                    p = this.containers[i].element.offset();
                    this.containers[i].containerCache.left = p.left;
                    this.containers[i].containerCache.top = p.top;
                    this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                    this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
                }
            }
    
            return this;
        },
    
        _createPlaceholder: function(that) {
            that = that || this;
            var className,
                o = that.options;
    
            if(!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder;
                o.placeholder = {
                    element: function() {
    
                        var nodeName = that.currentItem[0].nodeName.toLowerCase(),
                            element = $( "<" + nodeName + ">", that.document[0] )
                                .addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
                                .removeClass("ui-sortable-helper");
    
                        if ( nodeName === "tbody" ) {
                            that._createTrPlaceholder(
                                that.currentItem.find( "tr" ).eq( 0 ),
                                $( "<tr>", that.document[ 0 ] ).appendTo( element )
                            );
                        } else if ( nodeName === "tr" ) {
                            that._createTrPlaceholder( that.currentItem, element );
                        } else if ( nodeName === "img" ) {
                            element.attr( "src", that.currentItem.attr( "src" ) );
                        }
    
                        if ( !className ) {
                            element.css( "visibility", "hidden" );
                        }
    
                        return element;
                    },
                    update: function(container, p) {
    
                        // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
                        // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
                        if(className && !o.forcePlaceholderSize) {
                            return;
                        }
    
                        //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
                        if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
                        if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
                    }
                };
            }
    
            //Create the placeholder
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
    
            //Append it after the actual current item
            that.currentItem.after(that.placeholder);
    
            //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
            o.placeholder.update(that, that.placeholder);
    
        },
    
        _createTrPlaceholder: function( sourceTr, targetTr ) {
            var that = this;
    
            sourceTr.children().each(function() {
                $( "<td>&#160;</td>", that.document[ 0 ] )
                    .attr( "colspan", $( this ).attr( "colspan" ) || 1 )
                    .appendTo( targetTr );
            });
        },
    
        _contactContainers: function(event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,
                innermostContainer = null,
                innermostIndex = null;
    
            // get innermost container that intersects with item
            for (i = this.containers.length - 1; i >= 0; i--) {
    
                // never consider a container that's located within the item itself
                if($.contains(this.currentItem[0], this.containers[i].element[0])) {
                    continue;
                }
    
                if(this._intersectsWith(this.containers[i].containerCache)) {
    
                    // if we've already found a container and it's more "inner" than this, then continue
                    if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
                        continue;
                    }
    
                    innermostContainer = this.containers[i];
                    innermostIndex = i;
    
                } else {
                    // container doesn't intersect. trigger "out" event if necessary
                    if(this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", event, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
    
            }
    
            // if no intersecting containers found, return
            if(!innermostContainer) {
                return;
            }
    
            // move the item into the container if it's not there already
            if(this.containers.length === 1) {
                if (!this.containers[innermostIndex].containerCache.over) {
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                }
            } else {
    
                //When entering a new container, we will find the item with the least distance and append our item near it
                dist = 10000;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || this._isFloating(this.currentItem);
                posProperty = floating ? "left" : "top";
                sizeProperty = floating ? "width" : "height";
                axis = floating ? "clientX" : "clientY";
    
                for (j = this.items.length - 1; j >= 0; j--) {
                    if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
                        continue;
                    }
                    if(this.items[j].item[0] === this.currentItem[0]) {
                        continue;
                    }
    
                    cur = this.items[j].item.offset()[posProperty];
                    nearBottom = false;
                    if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
                        nearBottom = true;
                    }
    
                    if ( Math.abs( event[ axis ] - cur ) < dist ) {
                        dist = Math.abs( event[ axis ] - cur );
                        itemWithLeastDistance = this.items[ j ];
                        this.direction = nearBottom ? "up": "down";
                    }
                }
    
                //Check if dropOnEmpty is enabled
                if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
                    return;
                }
    
                if(this.currentContainer === this.containers[innermostIndex]) {
                    if ( !this.currentContainer.containerCache.over ) {
                        this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
                        this.currentContainer.containerCache.over = 1;
                    }
                    return;
                }
    
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                this.currentContainer = this.containers[innermostIndex];
    
                //Update the placeholder
                this.options.placeholder.update(this.currentContainer, this.placeholder);
    
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }
    
    
        },
    
        _createHelper: function(event) {
    
            var o = this.options,
                helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);
    
            //Add the helper to the DOM if that didn't happen already
            if(!helper.parents("body").length) {
                $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
            }
    
            if(helper[0] === this.currentItem[0]) {
                this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
            }
    
            if(!helper[0].style.width || o.forceHelperSize) {
                helper.width(this.currentItem.width());
            }
            if(!helper[0].style.height || o.forceHelperSize) {
                helper.height(this.currentItem.height());
            }
    
            return helper;
    
        },
    
        _adjustOffsetFromHelper: function(obj) {
            if (typeof obj === "string") {
                obj = obj.split(" ");
            }
            if ($.isArray(obj)) {
                obj = {left: +obj[0], top: +obj[1] || 0};
            }
            if ("left" in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ("right" in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ("top" in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ("bottom" in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },
    
        _getParentOffset: function() {
    
    
            //Get the offsetParent and cache its position
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
    
            // This is a special case where we need to modify a offset calculated on start, since the following happened:
            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
            if(this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
    
            // This needs to be actually done for all browsers, since pageX/pageY includes this information
            // with an ugly IE fix
            if( this.offsetParent[0] === this.document[0].body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
                po = { top: 0, left: 0 };
            }
    
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
            };
    
        },
    
        _getRelativeOffset: function() {
    
            if(this.cssPosition === "relative") {
                var p = this.currentItem.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
                };
            } else {
                return { top: 0, left: 0 };
            }
    
        },
    
        _cacheMargins: function() {
            this.margins = {
                left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
                top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
            };
        },
    
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
    
        _setContainment: function() {
    
            var ce, co, over,
                o = this.options;
            if(o.containment === "parent") {
                o.containment = this.helper[0].parentNode;
            }
            if(o.containment === "document" || o.containment === "window") {
                this.containment = [
                    0 - this.offset.relative.left - this.offset.parent.left,
                    0 - this.offset.relative.top - this.offset.parent.top,
                    o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left,
                    (o.containment === "document" ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
                ];
            }
    
            if(!(/^(document|window|parent)$/).test(o.containment)) {
                ce = $(o.containment)[0];
                co = $(o.containment).offset();
                over = ($(ce).css("overflow") !== "hidden");
    
                this.containment = [
                    co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
                    co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
                    co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
                    co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
                ];
            }
    
        },
    
        _convertPositionTo: function(d, pos) {
    
            if(!pos) {
                pos = this.position;
            }
            var mod = d === "absolute" ? 1 : -1,
                scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
    
            return {
                top: (
                    pos.top	+																// The absolute mouse position
                    this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
                    ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
                ),
                left: (
                    pos.left +																// The absolute mouse position
                    this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
                    ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
                )
            };
    
        },
    
        _generatePosition: function(event) {
    
            var top, left,
                o = this.options,
                pageX = event.pageX,
                pageY = event.pageY,
                scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
    
            // This is another very weird special case that only happens for relative elements:
            // 1. If the css position is relative
            // 2. and the scroll parent is the document or similar to the offset parent
            // we have to refresh the relative offset during the scroll so there are no jumps
            if(this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset();
            }
    
            /*
             * - Position constraining -
             * Constrain the position to a mix of grid, containment.
             */
    
            if(this.originalPosition) { //If we are not dragging yet, we won't check for options
    
                if(this.containment) {
                    if(event.pageX - this.offset.click.left < this.containment[0]) {
                        pageX = this.containment[0] + this.offset.click.left;
                    }
                    if(event.pageY - this.offset.click.top < this.containment[1]) {
                        pageY = this.containment[1] + this.offset.click.top;
                    }
                    if(event.pageX - this.offset.click.left > this.containment[2]) {
                        pageX = this.containment[2] + this.offset.click.left;
                    }
                    if(event.pageY - this.offset.click.top > this.containment[3]) {
                        pageY = this.containment[3] + this.offset.click.top;
                    }
                }
    
                if(o.grid) {
                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
    
                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                }
    
            }
    
            return {
                top: (
                    pageY -																// The absolute mouse position
                    this.offset.click.top -													// Click offset (relative to the element)
                    this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
                    ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
                ),
                left: (
                    pageX -																// The absolute mouse position
                    this.offset.click.left -												// Click offset (relative to the element)
                    this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
                    ( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
                )
            };
    
        },
    
        _rearrange: function(event, i, a, hardRefresh) {
    
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));
    
            //Various things done here to improve the performance:
            // 1. we create a setTimeout, that calls refreshPositions
            // 2. on the instance, we have a counter variable, that get's higher after every append
            // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
            // 4. this lets only the last addition to the timeout stack through
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
    
            this._delay(function() {
                if(counter === this.counter) {
                    this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
                }
            });
    
        },
    
        _clear: function(event, noPropagation) {
    
            this.reverting = false;
            // We delay all events that have to be triggered to after the point where the placeholder has been removed and
            // everything else normalized again
            var i,
                delayedTriggers = [];
    
            // We first have to update the dom position of the actual currentItem
            // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
            if(!this._noFinalSort && this.currentItem.parent().length) {
                this.placeholder.before(this.currentItem);
            }
            this._noFinalSort = null;
    
            if(this.helper[0] === this.currentItem[0]) {
                for(i in this._storedCSS) {
                    if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
                        this._storedCSS[i] = "";
                    }
                }
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            } else {
                this.currentItem.show();
            }
    
            if(this.fromOutside && !noPropagation) {
                delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
            }
            if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
                delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
            }
    
            // Check if the items Container has Changed and trigger appropriate
            // events.
            if (this !== this.currentContainer) {
                if(!noPropagation) {
                    delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
                    delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
                    delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
                }
            }
    
    
            //Post events to containers
            function delayEvent( type, instance, container ) {
                return function( event ) {
                    container._trigger( type, event, instance._uiHash( instance ) );
                };
            }
            for (i = this.containers.length - 1; i >= 0; i--){
                if (!noPropagation) {
                    delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
                }
                if(this.containers[i].containerCache.over) {
                    delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
                    this.containers[i].containerCache.over = 0;
                }
            }
    
            //Do what was originally in plugins
            if ( this.storedCursor ) {
                this.document.find( "body" ).css( "cursor", this.storedCursor );
                this.storedStylesheet.remove();
            }
            if(this._storedOpacity) {
                this.helper.css("opacity", this._storedOpacity);
            }
            if(this._storedZIndex) {
                this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
            }
    
            this.dragging = false;
    
            if(!noPropagation) {
                this._trigger("beforeStop", event, this._uiHash());
            }
    
            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
    
            if ( !this.cancelHelperRemoval ) {
                if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
                    this.helper.remove();
                }
                this.helper = null;
            }
    
            if(!noPropagation) {
                for (i=0; i < delayedTriggers.length; i++) {
                    delayedTriggers[i].call(this, event);
                } //Trigger all delayed events
                this._trigger("stop", event, this._uiHash());
            }
    
            this.fromOutside = false;
            return !this.cancelHelperRemoval;
    
        },
    
        _trigger: function() {
            if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel();
            }
        },
    
        _uiHash: function(_inst) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $([]),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            };
        }
    
    });
    
    }));
    /*!
     * jQuery UI Effects 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/category/effects-core/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    var dataSpace = "ui-effects-",
    
        // Create a local jQuery because jQuery Color relies on it and the
        // global may not exist with AMD and a custom build (#10199)
        jQuery = $;
    
    $.effects = {
        effect: {}
    };
    
    /*!
     * jQuery Color Animations v2.1.2
     * https://github.com/jquery/jquery-color
     *
     * Copyright 2014 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * Date: Wed Jan 16 08:47:09 2013 -0600
     */
    (function( jQuery, undefined ) {
    
        var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
    
        // plusequals test for += 100 -= 100
        rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
        // a set of RE's that can match strings and generate color tuples.
        stringParsers = [ {
                re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function( execResult ) {
                    return [
                        execResult[ 1 ],
                        execResult[ 2 ],
                        execResult[ 3 ],
                        execResult[ 4 ]
                    ];
                }
            }, {
                re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                parse: function( execResult ) {
                    return [
                        execResult[ 1 ] * 2.55,
                        execResult[ 2 ] * 2.55,
                        execResult[ 3 ] * 2.55,
                        execResult[ 4 ]
                    ];
                }
            }, {
                // this regex ignores A-F because it's compared against an already lowercased string
                re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                parse: function( execResult ) {
                    return [
                        parseInt( execResult[ 1 ], 16 ),
                        parseInt( execResult[ 2 ], 16 ),
                        parseInt( execResult[ 3 ], 16 )
                    ];
                }
            }, {
                // this regex ignores A-F because it's compared against an already lowercased string
                re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                parse: function( execResult ) {
                    return [
                        parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
                        parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
                        parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
                    ];
                }
            }, {
                re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                space: "hsla",
                parse: function( execResult ) {
                    return [
                        execResult[ 1 ],
                        execResult[ 2 ] / 100,
                        execResult[ 3 ] / 100,
                        execResult[ 4 ]
                    ];
                }
            } ],
    
        // jQuery.Color( )
        color = jQuery.Color = function( color, green, blue, alpha ) {
            return new jQuery.Color.fn.parse( color, green, blue, alpha );
        },
        spaces = {
            rgba: {
                props: {
                    red: {
                        idx: 0,
                        type: "byte"
                    },
                    green: {
                        idx: 1,
                        type: "byte"
                    },
                    blue: {
                        idx: 2,
                        type: "byte"
                    }
                }
            },
    
            hsla: {
                props: {
                    hue: {
                        idx: 0,
                        type: "degrees"
                    },
                    saturation: {
                        idx: 1,
                        type: "percent"
                    },
                    lightness: {
                        idx: 2,
                        type: "percent"
                    }
                }
            }
        },
        propTypes = {
            "byte": {
                floor: true,
                max: 255
            },
            "percent": {
                max: 1
            },
            "degrees": {
                mod: 360,
                floor: true
            }
        },
        support = color.support = {},
    
        // element for support tests
        supportElem = jQuery( "<p>" )[ 0 ],
    
        // colors = jQuery.Color.names
        colors,
    
        // local aliases of functions called often
        each = jQuery.each;
    
    // determine rgba support immediately
    supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
    support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;
    
    // define cache name and alpha properties
    // for rgba and hsla spaces
    each( spaces, function( spaceName, space ) {
        space.cache = "_" + spaceName;
        space.props.alpha = {
            idx: 3,
            type: "percent",
            def: 1
        };
    });
    
    function clamp( value, prop, allowEmpty ) {
        var type = propTypes[ prop.type ] || {};
    
        if ( value == null ) {
            return (allowEmpty || !prop.def) ? null : prop.def;
        }
    
        // ~~ is an short way of doing floor for positive numbers
        value = type.floor ? ~~value : parseFloat( value );
    
        // IE will pass in empty strings as value for alpha,
        // which will hit this case
        if ( isNaN( value ) ) {
            return prop.def;
        }
    
        if ( type.mod ) {
            // we add mod before modding to make sure that negatives values
            // get converted properly: -10 -> 350
            return (value + type.mod) % type.mod;
        }
    
        // for now all property types without mod have min and max
        return 0 > value ? 0 : type.max < value ? type.max : value;
    }
    
    function stringParse( string ) {
        var inst = color(),
            rgba = inst._rgba = [];
    
        string = string.toLowerCase();
    
        each( stringParsers, function( i, parser ) {
            var parsed,
                match = parser.re.exec( string ),
                values = match && parser.parse( match ),
                spaceName = parser.space || "rgba";
    
            if ( values ) {
                parsed = inst[ spaceName ]( values );
    
                // if this was an rgba parse the assignment might happen twice
                // oh well....
                inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
                rgba = inst._rgba = parsed._rgba;
    
                // exit each( stringParsers ) here because we matched
                return false;
            }
        });
    
        // Found a stringParser that handled it
        if ( rgba.length ) {
    
            // if this came from a parsed string, force "transparent" when alpha is 0
            // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
            if ( rgba.join() === "0,0,0,0" ) {
                jQuery.extend( rgba, colors.transparent );
            }
            return inst;
        }
    
        // named colors
        return colors[ string ];
    }
    
    color.fn = jQuery.extend( color.prototype, {
        parse: function( red, green, blue, alpha ) {
            if ( red === undefined ) {
                this._rgba = [ null, null, null, null ];
                return this;
            }
            if ( red.jquery || red.nodeType ) {
                red = jQuery( red ).css( green );
                green = undefined;
            }
    
            var inst = this,
                type = jQuery.type( red ),
                rgba = this._rgba = [];
    
            // more than 1 argument specified - assume ( red, green, blue, alpha )
            if ( green !== undefined ) {
                red = [ red, green, blue, alpha ];
                type = "array";
            }
    
            if ( type === "string" ) {
                return this.parse( stringParse( red ) || colors._default );
            }
    
            if ( type === "array" ) {
                each( spaces.rgba.props, function( key, prop ) {
                    rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
                });
                return this;
            }
    
            if ( type === "object" ) {
                if ( red instanceof color ) {
                    each( spaces, function( spaceName, space ) {
                        if ( red[ space.cache ] ) {
                            inst[ space.cache ] = red[ space.cache ].slice();
                        }
                    });
                } else {
                    each( spaces, function( spaceName, space ) {
                        var cache = space.cache;
                        each( space.props, function( key, prop ) {
    
                            // if the cache doesn't exist, and we know how to convert
                            if ( !inst[ cache ] && space.to ) {
    
                                // if the value was null, we don't need to copy it
                                // if the key was alpha, we don't need to copy it either
                                if ( key === "alpha" || red[ key ] == null ) {
                                    return;
                                }
                                inst[ cache ] = space.to( inst._rgba );
                            }
    
                            // this is the only case where we allow nulls for ALL properties.
                            // call clamp with alwaysAllowEmpty
                            inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
                        });
    
                        // everything defined but alpha?
                        if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
                            // use the default of 1
                            inst[ cache ][ 3 ] = 1;
                            if ( space.from ) {
                                inst._rgba = space.from( inst[ cache ] );
                            }
                        }
                    });
                }
                return this;
            }
        },
        is: function( compare ) {
            var is = color( compare ),
                same = true,
                inst = this;
    
            each( spaces, function( _, space ) {
                var localCache,
                    isCache = is[ space.cache ];
                if (isCache) {
                    localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
                    each( space.props, function( _, prop ) {
                        if ( isCache[ prop.idx ] != null ) {
                            same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
                            return same;
                        }
                    });
                }
                return same;
            });
            return same;
        },
        _space: function() {
            var used = [],
                inst = this;
            each( spaces, function( spaceName, space ) {
                if ( inst[ space.cache ] ) {
                    used.push( spaceName );
                }
            });
            return used.pop();
        },
        transition: function( other, distance ) {
            var end = color( other ),
                spaceName = end._space(),
                space = spaces[ spaceName ],
                startColor = this.alpha() === 0 ? color( "transparent" ) : this,
                start = startColor[ space.cache ] || space.to( startColor._rgba ),
                result = start.slice();
    
            end = end[ space.cache ];
            each( space.props, function( key, prop ) {
                var index = prop.idx,
                    startValue = start[ index ],
                    endValue = end[ index ],
                    type = propTypes[ prop.type ] || {};
    
                // if null, don't override start value
                if ( endValue === null ) {
                    return;
                }
                // if null - use end
                if ( startValue === null ) {
                    result[ index ] = endValue;
                } else {
                    if ( type.mod ) {
                        if ( endValue - startValue > type.mod / 2 ) {
                            startValue += type.mod;
                        } else if ( startValue - endValue > type.mod / 2 ) {
                            startValue -= type.mod;
                        }
                    }
                    result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
                }
            });
            return this[ spaceName ]( result );
        },
        blend: function( opaque ) {
            // if we are already opaque - return ourself
            if ( this._rgba[ 3 ] === 1 ) {
                return this;
            }
    
            var rgb = this._rgba.slice(),
                a = rgb.pop(),
                blend = color( opaque )._rgba;
    
            return color( jQuery.map( rgb, function( v, i ) {
                return ( 1 - a ) * blend[ i ] + a * v;
            }));
        },
        toRgbaString: function() {
            var prefix = "rgba(",
                rgba = jQuery.map( this._rgba, function( v, i ) {
                    return v == null ? ( i > 2 ? 1 : 0 ) : v;
                });
    
            if ( rgba[ 3 ] === 1 ) {
                rgba.pop();
                prefix = "rgb(";
            }
    
            return prefix + rgba.join() + ")";
        },
        toHslaString: function() {
            var prefix = "hsla(",
                hsla = jQuery.map( this.hsla(), function( v, i ) {
                    if ( v == null ) {
                        v = i > 2 ? 1 : 0;
                    }
    
                    // catch 1 and 2
                    if ( i && i < 3 ) {
                        v = Math.round( v * 100 ) + "%";
                    }
                    return v;
                });
    
            if ( hsla[ 3 ] === 1 ) {
                hsla.pop();
                prefix = "hsl(";
            }
            return prefix + hsla.join() + ")";
        },
        toHexString: function( includeAlpha ) {
            var rgba = this._rgba.slice(),
                alpha = rgba.pop();
    
            if ( includeAlpha ) {
                rgba.push( ~~( alpha * 255 ) );
            }
    
            return "#" + jQuery.map( rgba, function( v ) {
    
                // default to 0 when nulls exist
                v = ( v || 0 ).toString( 16 );
                return v.length === 1 ? "0" + v : v;
            }).join("");
        },
        toString: function() {
            return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
        }
    });
    color.fn.parse.prototype = color.fn;
    
    // hsla conversions adapted from:
    // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021
    
    function hue2rgb( p, q, h ) {
        h = ( h + 1 ) % 1;
        if ( h * 6 < 1 ) {
            return p + ( q - p ) * h * 6;
        }
        if ( h * 2 < 1) {
            return q;
        }
        if ( h * 3 < 2 ) {
            return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
        }
        return p;
    }
    
    spaces.hsla.to = function( rgba ) {
        if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
            return [ null, null, null, rgba[ 3 ] ];
        }
        var r = rgba[ 0 ] / 255,
            g = rgba[ 1 ] / 255,
            b = rgba[ 2 ] / 255,
            a = rgba[ 3 ],
            max = Math.max( r, g, b ),
            min = Math.min( r, g, b ),
            diff = max - min,
            add = max + min,
            l = add * 0.5,
            h, s;
    
        if ( min === max ) {
            h = 0;
        } else if ( r === max ) {
            h = ( 60 * ( g - b ) / diff ) + 360;
        } else if ( g === max ) {
            h = ( 60 * ( b - r ) / diff ) + 120;
        } else {
            h = ( 60 * ( r - g ) / diff ) + 240;
        }
    
        // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
        // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
        if ( diff === 0 ) {
            s = 0;
        } else if ( l <= 0.5 ) {
            s = diff / add;
        } else {
            s = diff / ( 2 - add );
        }
        return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
    };
    
    spaces.hsla.from = function( hsla ) {
        if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
            return [ null, null, null, hsla[ 3 ] ];
        }
        var h = hsla[ 0 ] / 360,
            s = hsla[ 1 ],
            l = hsla[ 2 ],
            a = hsla[ 3 ],
            q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
            p = 2 * l - q;
    
        return [
            Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
            Math.round( hue2rgb( p, q, h ) * 255 ),
            Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
            a
        ];
    };
    
    each( spaces, function( spaceName, space ) {
        var props = space.props,
            cache = space.cache,
            to = space.to,
            from = space.from;
    
        // makes rgba() and hsla()
        color.fn[ spaceName ] = function( value ) {
    
            // generate a cache for this space if it doesn't exist
            if ( to && !this[ cache ] ) {
                this[ cache ] = to( this._rgba );
            }
            if ( value === undefined ) {
                return this[ cache ].slice();
            }
    
            var ret,
                type = jQuery.type( value ),
                arr = ( type === "array" || type === "object" ) ? value : arguments,
                local = this[ cache ].slice();
    
            each( props, function( key, prop ) {
                var val = arr[ type === "object" ? key : prop.idx ];
                if ( val == null ) {
                    val = local[ prop.idx ];
                }
                local[ prop.idx ] = clamp( val, prop );
            });
    
            if ( from ) {
                ret = color( from( local ) );
                ret[ cache ] = local;
                return ret;
            } else {
                return color( local );
            }
        };
    
        // makes red() green() blue() alpha() hue() saturation() lightness()
        each( props, function( key, prop ) {
            // alpha is included in more than one space
            if ( color.fn[ key ] ) {
                return;
            }
            color.fn[ key ] = function( value ) {
                var vtype = jQuery.type( value ),
                    fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
                    local = this[ fn ](),
                    cur = local[ prop.idx ],
                    match;
    
                if ( vtype === "undefined" ) {
                    return cur;
                }
    
                if ( vtype === "function" ) {
                    value = value.call( this, cur );
                    vtype = jQuery.type( value );
                }
                if ( value == null && prop.empty ) {
                    return this;
                }
                if ( vtype === "string" ) {
                    match = rplusequals.exec( value );
                    if ( match ) {
                        value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
                    }
                }
                local[ prop.idx ] = value;
                return this[ fn ]( local );
            };
        });
    });
    
    // add cssHook and .fx.step function for each named hook.
    // accept a space separated string of properties
    color.hook = function( hook ) {
        var hooks = hook.split( " " );
        each( hooks, function( i, hook ) {
            jQuery.cssHooks[ hook ] = {
                set: function( elem, value ) {
                    var parsed, curElem,
                        backgroundColor = "";
    
                    if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
                        value = color( parsed || value );
                        if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
                            curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                            while (
                                (backgroundColor === "" || backgroundColor === "transparent") &&
                                curElem && curElem.style
                            ) {
                                try {
                                    backgroundColor = jQuery.css( curElem, "backgroundColor" );
                                    curElem = curElem.parentNode;
                                } catch ( e ) {
                                }
                            }
    
                            value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
                                backgroundColor :
                                "_default" );
                        }
    
                        value = value.toRgbaString();
                    }
                    try {
                        elem.style[ hook ] = value;
                    } catch ( e ) {
                        // wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
                    }
                }
            };
            jQuery.fx.step[ hook ] = function( fx ) {
                if ( !fx.colorInit ) {
                    fx.start = color( fx.elem, hook );
                    fx.end = color( fx.end );
                    fx.colorInit = true;
                }
                jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
            };
        });
    
    };
    
    color.hook( stepHooks );
    
    jQuery.cssHooks.borderColor = {
        expand: function( value ) {
            var expanded = {};
    
            each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
                expanded[ "border" + part + "Color" ] = value;
            });
            return expanded;
        }
    };
    
    // Basic color names only.
    // Usage of any of the other color names requires adding yourself or including
    // jquery.color.svg-names.js.
    colors = jQuery.Color.names = {
        // 4.1. Basic color keywords
        aqua: "#00ffff",
        black: "#000000",
        blue: "#0000ff",
        fuchsia: "#ff00ff",
        gray: "#808080",
        green: "#008000",
        lime: "#00ff00",
        maroon: "#800000",
        navy: "#000080",
        olive: "#808000",
        purple: "#800080",
        red: "#ff0000",
        silver: "#c0c0c0",
        teal: "#008080",
        white: "#ffffff",
        yellow: "#ffff00",
    
        // 4.2.3. "transparent" color keyword
        transparent: [ null, null, null, 0 ],
    
        _default: "#ffffff"
    };
    
    })( jQuery );
    
    /******************************************************************************/
    /****************************** CLASS ANIMATIONS ******************************/
    /******************************************************************************/
    (function() {
    
    var classAnimationActions = [ "add", "remove", "toggle" ],
        shorthandStyles = {
            border: 1,
            borderBottom: 1,
            borderColor: 1,
            borderLeft: 1,
            borderRight: 1,
            borderTop: 1,
            borderWidth: 1,
            margin: 1,
            padding: 1
        };
    
    $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
        $.fx.step[ prop ] = function( fx ) {
            if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
                jQuery.style( fx.elem, prop, fx.end );
                fx.setAttr = true;
            }
        };
    });
    
    function getElementStyles( elem ) {
        var key, len,
            style = elem.ownerDocument.defaultView ?
                elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
                elem.currentStyle,
            styles = {};
    
        if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
            len = style.length;
            while ( len-- ) {
                key = style[ len ];
                if ( typeof style[ key ] === "string" ) {
                    styles[ $.camelCase( key ) ] = style[ key ];
                }
            }
        // support: Opera, IE <9
        } else {
            for ( key in style ) {
                if ( typeof style[ key ] === "string" ) {
                    styles[ key ] = style[ key ];
                }
            }
        }
    
        return styles;
    }
    
    function styleDifference( oldStyle, newStyle ) {
        var diff = {},
            name, value;
    
        for ( name in newStyle ) {
            value = newStyle[ name ];
            if ( oldStyle[ name ] !== value ) {
                if ( !shorthandStyles[ name ] ) {
                    if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
                        diff[ name ] = value;
                    }
                }
            }
        }
    
        return diff;
    }
    
    // support: jQuery <1.8
    if ( !$.fn.addBack ) {
        $.fn.addBack = function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter( selector )
            );
        };
    }
    
    $.effects.animateClass = function( value, duration, easing, callback ) {
        var o = $.speed( duration, easing, callback );
    
        return this.queue( function() {
            var animated = $( this ),
                baseClass = animated.attr( "class" ) || "",
                applyClassChange,
                allAnimations = o.children ? animated.find( "*" ).addBack() : animated;
    
            // map the animated objects to store the original styles.
            allAnimations = allAnimations.map(function() {
                var el = $( this );
                return {
                    el: el,
                    start: getElementStyles( this )
                };
            });
    
            // apply class change
            applyClassChange = function() {
                $.each( classAnimationActions, function(i, action) {
                    if ( value[ action ] ) {
                        animated[ action + "Class" ]( value[ action ] );
                    }
                });
            };
            applyClassChange();
    
            // map all animated objects again - calculate new styles and diff
            allAnimations = allAnimations.map(function() {
                this.end = getElementStyles( this.el[ 0 ] );
                this.diff = styleDifference( this.start, this.end );
                return this;
            });
    
            // apply original class
            animated.attr( "class", baseClass );
    
            // map all animated objects again - this time collecting a promise
            allAnimations = allAnimations.map(function() {
                var styleInfo = this,
                    dfd = $.Deferred(),
                    opts = $.extend({}, o, {
                        queue: false,
                        complete: function() {
                            dfd.resolve( styleInfo );
                        }
                    });
    
                this.el.animate( this.diff, opts );
                return dfd.promise();
            });
    
            // once all animations have completed:
            $.when.apply( $, allAnimations.get() ).done(function() {
    
                // set the final class
                applyClassChange();
    
                // for each animated element,
                // clear all css properties that were animated
                $.each( arguments, function() {
                    var el = this.el;
                    $.each( this.diff, function(key) {
                        el.css( key, "" );
                    });
                });
    
                // this is guarnteed to be there if you use jQuery.speed()
                // it also handles dequeuing the next anim...
                o.complete.call( animated[ 0 ] );
            });
        });
    };
    
    $.fn.extend({
        addClass: (function( orig ) {
            return function( classNames, speed, easing, callback ) {
                return speed ?
                    $.effects.animateClass.call( this,
                        { add: classNames }, speed, easing, callback ) :
                    orig.apply( this, arguments );
            };
        })( $.fn.addClass ),
    
        removeClass: (function( orig ) {
            return function( classNames, speed, easing, callback ) {
                return arguments.length > 1 ?
                    $.effects.animateClass.call( this,
                        { remove: classNames }, speed, easing, callback ) :
                    orig.apply( this, arguments );
            };
        })( $.fn.removeClass ),
    
        toggleClass: (function( orig ) {
            return function( classNames, force, speed, easing, callback ) {
                if ( typeof force === "boolean" || force === undefined ) {
                    if ( !speed ) {
                        // without speed parameter
                        return orig.apply( this, arguments );
                    } else {
                        return $.effects.animateClass.call( this,
                            (force ? { add: classNames } : { remove: classNames }),
                            speed, easing, callback );
                    }
                } else {
                    // without force parameter
                    return $.effects.animateClass.call( this,
                        { toggle: classNames }, force, speed, easing );
                }
            };
        })( $.fn.toggleClass ),
    
        switchClass: function( remove, add, speed, easing, callback) {
            return $.effects.animateClass.call( this, {
                add: add,
                remove: remove
            }, speed, easing, callback );
        }
    });
    
    })();
    
    /******************************************************************************/
    /*********************************** EFFECTS **********************************/
    /******************************************************************************/
    
    (function() {
    
    $.extend( $.effects, {
        version: "1.11.4",
    
        // Saves a set of properties in a data storage
        save: function( element, set ) {
            for ( var i = 0; i < set.length; i++ ) {
                if ( set[ i ] !== null ) {
                    element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
                }
            }
        },
    
        // Restores a set of previously saved properties from a data storage
        restore: function( element, set ) {
            var val, i;
            for ( i = 0; i < set.length; i++ ) {
                if ( set[ i ] !== null ) {
                    val = element.data( dataSpace + set[ i ] );
                    // support: jQuery 1.6.2
                    // http://bugs.jquery.com/ticket/9917
                    // jQuery 1.6.2 incorrectly returns undefined for any falsy value.
                    // We can't differentiate between "" and 0 here, so we just assume
                    // empty string since it's likely to be a more common value...
                    if ( val === undefined ) {
                        val = "";
                    }
                    element.css( set[ i ], val );
                }
            }
        },
    
        setMode: function( el, mode ) {
            if (mode === "toggle") {
                mode = el.is( ":hidden" ) ? "show" : "hide";
            }
            return mode;
        },
    
        // Translates a [top,left] array into a baseline value
        // this should be a little more flexible in the future to handle a string & hash
        getBaseline: function( origin, original ) {
            var y, x;
            switch ( origin[ 0 ] ) {
                case "top": y = 0; break;
                case "middle": y = 0.5; break;
                case "bottom": y = 1; break;
                default: y = origin[ 0 ] / original.height;
            }
            switch ( origin[ 1 ] ) {
                case "left": x = 0; break;
                case "center": x = 0.5; break;
                case "right": x = 1; break;
                default: x = origin[ 1 ] / original.width;
            }
            return {
                x: x,
                y: y
            };
        },
    
        // Wraps the element around a wrapper that copies position properties
        createWrapper: function( element ) {
    
            // if the element is already wrapped, return it
            if ( element.parent().is( ".ui-effects-wrapper" )) {
                return element.parent();
            }
    
            // wrap the element
            var props = {
                    width: element.outerWidth(true),
                    height: element.outerHeight(true),
                    "float": element.css( "float" )
                },
                wrapper = $( "<div></div>" )
                    .addClass( "ui-effects-wrapper" )
                    .css({
                        fontSize: "100%",
                        background: "transparent",
                        border: "none",
                        margin: 0,
                        padding: 0
                    }),
                // Store the size in case width/height are defined in % - Fixes #5245
                size = {
                    width: element.width(),
                    height: element.height()
                },
                active = document.activeElement;
    
            // support: Firefox
            // Firefox incorrectly exposes anonymous content
            // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
            try {
                active.id;
            } catch ( e ) {
                active = document.body;
            }
    
            element.wrap( wrapper );
    
            // Fixes #7595 - Elements lose focus when wrapped.
            if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
                $( active ).focus();
            }
    
            wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element
    
            // transfer positioning properties to the wrapper
            if ( element.css( "position" ) === "static" ) {
                wrapper.css({ position: "relative" });
                element.css({ position: "relative" });
            } else {
                $.extend( props, {
                    position: element.css( "position" ),
                    zIndex: element.css( "z-index" )
                });
                $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                    props[ pos ] = element.css( pos );
                    if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
                        props[ pos ] = "auto";
                    }
                });
                element.css({
                    position: "relative",
                    top: 0,
                    left: 0,
                    right: "auto",
                    bottom: "auto"
                });
            }
            element.css(size);
    
            return wrapper.css( props ).show();
        },
    
        removeWrapper: function( element ) {
            var active = document.activeElement;
    
            if ( element.parent().is( ".ui-effects-wrapper" ) ) {
                element.parent().replaceWith( element );
    
                // Fixes #7595 - Elements lose focus when wrapped.
                if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
                    $( active ).focus();
                }
            }
    
            return element;
        },
    
        setTransition: function( element, list, factor, value ) {
            value = value || {};
            $.each( list, function( i, x ) {
                var unit = element.cssUnit( x );
                if ( unit[ 0 ] > 0 ) {
                    value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
                }
            });
            return value;
        }
    });
    
    // return an effect options object for the given parameters:
    function _normalizeArguments( effect, options, speed, callback ) {
    
        // allow passing all options as the first parameter
        if ( $.isPlainObject( effect ) ) {
            options = effect;
            effect = effect.effect;
        }
    
        // convert to an object
        effect = { effect: effect };
    
        // catch (effect, null, ...)
        if ( options == null ) {
            options = {};
        }
    
        // catch (effect, callback)
        if ( $.isFunction( options ) ) {
            callback = options;
            speed = null;
            options = {};
        }
    
        // catch (effect, speed, ?)
        if ( typeof options === "number" || $.fx.speeds[ options ] ) {
            callback = speed;
            speed = options;
            options = {};
        }
    
        // catch (effect, options, callback)
        if ( $.isFunction( speed ) ) {
            callback = speed;
            speed = null;
        }
    
        // add options to effect
        if ( options ) {
            $.extend( effect, options );
        }
    
        speed = speed || options.duration;
        effect.duration = $.fx.off ? 0 :
            typeof speed === "number" ? speed :
            speed in $.fx.speeds ? $.fx.speeds[ speed ] :
            $.fx.speeds._default;
    
        effect.complete = callback || options.complete;
    
        return effect;
    }
    
    function standardAnimationOption( option ) {
        // Valid standard speeds (nothing, number, named speed)
        if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
            return true;
        }
    
        // Invalid strings - treat as "normal" speed
        if ( typeof option === "string" && !$.effects.effect[ option ] ) {
            return true;
        }
    
        // Complete callback
        if ( $.isFunction( option ) ) {
            return true;
        }
    
        // Options hash (but not naming an effect)
        if ( typeof option === "object" && !option.effect ) {
            return true;
        }
    
        // Didn't match any standard API
        return false;
    }
    
    $.fn.extend({
        effect: function( /* effect, options, speed, callback */ ) {
            var args = _normalizeArguments.apply( this, arguments ),
                mode = args.mode,
                queue = args.queue,
                effectMethod = $.effects.effect[ args.effect ];
    
            if ( $.fx.off || !effectMethod ) {
                // delegate to the original method (e.g., .show()) if possible
                if ( mode ) {
                    return this[ mode ]( args.duration, args.complete );
                } else {
                    return this.each( function() {
                        if ( args.complete ) {
                            args.complete.call( this );
                        }
                    });
                }
            }
    
            function run( next ) {
                var elem = $( this ),
                    complete = args.complete,
                    mode = args.mode;
    
                function done() {
                    if ( $.isFunction( complete ) ) {
                        complete.call( elem[0] );
                    }
                    if ( $.isFunction( next ) ) {
                        next();
                    }
                }
    
                // If the element already has the correct final state, delegate to
                // the core methods so the internal tracking of "olddisplay" works.
                if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
                    elem[ mode ]();
                    done();
                } else {
                    effectMethod.call( elem[0], args, done );
                }
            }
    
            return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
        },
    
        show: (function( orig ) {
            return function( option ) {
                if ( standardAnimationOption( option ) ) {
                    return orig.apply( this, arguments );
                } else {
                    var args = _normalizeArguments.apply( this, arguments );
                    args.mode = "show";
                    return this.effect.call( this, args );
                }
            };
        })( $.fn.show ),
    
        hide: (function( orig ) {
            return function( option ) {
                if ( standardAnimationOption( option ) ) {
                    return orig.apply( this, arguments );
                } else {
                    var args = _normalizeArguments.apply( this, arguments );
                    args.mode = "hide";
                    return this.effect.call( this, args );
                }
            };
        })( $.fn.hide ),
    
        toggle: (function( orig ) {
            return function( option ) {
                if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
                    return orig.apply( this, arguments );
                } else {
                    var args = _normalizeArguments.apply( this, arguments );
                    args.mode = "toggle";
                    return this.effect.call( this, args );
                }
            };
        })( $.fn.toggle ),
    
        // helper functions
        cssUnit: function(key) {
            var style = this.css( key ),
                val = [];
    
            $.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
                if ( style.indexOf( unit ) > 0 ) {
                    val = [ parseFloat( style ), unit ];
                }
            });
            return val;
        }
    });
    
    })();
    
    /******************************************************************************/
    /*********************************** EASING ***********************************/
    /******************************************************************************/
    
    (function() {
    
    // based on easing equations from Robert Penner (http://www.robertpenner.com/easing)
    
    var baseEasings = {};
    
    $.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
        baseEasings[ name ] = function( p ) {
            return Math.pow( p, i + 2 );
        };
    });
    
    $.extend( baseEasings, {
        Sine: function( p ) {
            return 1 - Math.cos( p * Math.PI / 2 );
        },
        Circ: function( p ) {
            return 1 - Math.sqrt( 1 - p * p );
        },
        Elastic: function( p ) {
            return p === 0 || p === 1 ? p :
                -Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
        },
        Back: function( p ) {
            return p * p * ( 3 * p - 2 );
        },
        Bounce: function( p ) {
            var pow2,
                bounce = 4;
    
            while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
            return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
        }
    });
    
    $.each( baseEasings, function( name, easeIn ) {
        $.easing[ "easeIn" + name ] = easeIn;
        $.easing[ "easeOut" + name ] = function( p ) {
            return 1 - easeIn( 1 - p );
        };
        $.easing[ "easeInOut" + name ] = function( p ) {
            return p < 0.5 ?
                easeIn( p * 2 ) / 2 :
                1 - easeIn( p * -2 + 2 ) / 2;
        };
    });
    
    })();
    
    return $.effects;
    
    }));
    
    
    /*!
     * jQuery UI Effects Highlight 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/highlight-effect/
     */
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define([
                "jquery",
                "./effect"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    
    return $.effects.effect.highlight = function( o, done ) {
        var elem = $( this ),
            props = [ "backgroundImage", "backgroundColor", "opacity" ],
            mode = $.effects.setMode( elem, o.mode || "show" ),
            animation = {
                backgroundColor: elem.css( "backgroundColor" )
            };
    
        if (mode === "hide") {
            animation.opacity = 0;
        }
    
        $.effects.save( elem, props );
    
        elem
            .show()
            .css({
                backgroundImage: "none",
                backgroundColor: o.color || "#ffff99"
            })
            .animate( animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function() {
                    if ( mode === "hide" ) {
                        elem.hide();
                    }
                    $.effects.restore( elem, props );
                    done();
                }
            });
    };
    
    }));
    /*!
     * Datepicker v1.0.0-beta
     * https://fengyuanchen.github.io/datepicker
     *
     * Copyright 2014-present Chen Fengyuan
     * Released under the MIT license
     *
     * Date: 2018-06-30T09:15:49.717Z
     */
    
    !function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):t(e.jQuery)}(this,function(D){"use strict";D=D&&D.hasOwnProperty("default")?D.default:D;var a={autoShow:!1,autoHide:!1,autoPick:!1,inline:!1,container:null,trigger:null,language:"",format:"mm/dd/yyyy",date:null,startDate:null,endDate:null,startView:0,weekStart:0,yearFirst:!1,yearSuffix:"",days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],itemTag:"li",mutedClass:"muted",pickedClass:"picked",disabledClass:"disabled",highlightedClass:"highlighted",template:'<div class="datepicker-container"><div class="datepicker-panel" data-view="years picker"><ul><li data-view="years prev">&lsaquo;</li><li data-view="years current"></li><li data-view="years next">&rsaquo;</li></ul><ul data-view="years"></ul></div><div class="datepicker-panel" data-view="months picker"><ul><li data-view="year prev">&lsaquo;</li><li data-view="year current"></li><li data-view="year next">&rsaquo;</li></ul><ul data-view="months"></ul></div><div class="datepicker-panel" data-view="days picker"><ul><li data-view="month prev">&lsaquo;</li><li data-view="month current"></li><li data-view="month next">&rsaquo;</li></ul><ul data-view="week"></ul><ul data-view="days"></ul></div></div>',offset:10,zIndex:1e3,filter:null,show:null,hide:null,pick:null},e="undefined"!=typeof window?window:{},d="datepicker",s="click."+d,n="focus."+d,r="hide."+d,h="keyup."+d,o="pick."+d,t="resize."+d,l="show."+d,u=d+"-hide",c={},p=0,f=1,g=2,i=Object.prototype.toString;function y(e){return"string"==typeof e}var v=Number.isNaN||e.isNaN;function m(e){return"number"==typeof e&&!v(e)}function w(e){return void 0===e}function k(e){return"date"===(t=e,i.call(t).slice(8,-1).toLowerCase());var t}function b(a,s){for(var e=arguments.length,n=Array(2<e?e-2:0),t=2;t<e;t++)n[t-2]=arguments[t];return function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];return a.apply(s,n.concat(t))}}function C(e){return'[data-view="'+e+'"]'}function G(e,t){return[31,(i=e,i%4==0&&i%100!=0||i%400==0?29:28),31,30,31,30,31,31,30,31,30,31][t];var i}function $(e,t,i){return Math.min(i,G(e,t))}var x=/(y|m|d)+/g;var F=/\d+/g,M={show:function(){this.built||this.build(),this.shown||this.trigger(l).isDefaultPrevented()||(this.shown=!0,this.$picker.removeClass(u).on(s,D.proxy(this.click,this)),this.showView(this.options.startView),this.inline||(D(window).on(t,this.onResize=b(this.place,this)),D(document).on(s,this.onGlobalClick=b(this.globalClick,this)),D(document).on(h,this.onGlobalKeyup=b(this.globalKeyup,this)),this.place()))},hide:function(){this.shown&&(this.trigger(r).isDefaultPrevented()||(this.shown=!1,this.$picker.addClass(u).off(s,this.click),this.inline||(D(window).off(t,this.onResize),D(document).off(s,this.onGlobalClick),D(document).off(h,this.onGlobalKeyup))))},toggle:function(){this.shown?this.hide():this.show()},update:function(){var e=this.getValue();e!==this.oldValue&&(this.setDate(e,!0),this.oldValue=e)},pick:function(e){var t=this.$element,i=this.date;this.trigger(o,{view:e||"",date:i}).isDefaultPrevented()||(i=this.formatDate(this.date),this.setValue(i),this.isInput&&(t.trigger("input"),t.trigger("change")))},reset:function(){this.setDate(this.initialDate,!0),this.setValue(this.initialValue),this.shown&&this.showView(this.options.startView)},getMonthName:function(e,t){var i=this.options,a=i.monthsShort,s=i.months;return D.isNumeric(e)?e=Number(e):w(t)&&(t=e),!0===t&&(s=a),s[m(e)?e:this.date.getMonth()]},getDayName:function(e,t,i){var a=this.options,s=a.days;return D.isNumeric(e)?e=Number(e):(w(i)&&(i=t),w(t)&&(t=e)),i?s=a.daysMin:t&&(s=a.daysShort),s[m(e)?e:this.date.getDay()]},getDate:function(e){var t=this.date;return e?this.formatDate(t):new Date(t)},setDate:function(e,t){var i=this.options.filter;if(k(e)||y(e)){if(e=this.parseDate(e),D.isFunction(i)&&!1===i.call(this.$element,e,"day"))return;this.date=e,this.viewDate=new Date(e),t||this.pick(),this.built&&this.render()}},setStartDate:function(e){k(e)||y(e)?this.startDate=this.parseDate(e):this.startDate=null,this.built&&this.render()},setEndDate:function(e){k(e)||y(e)?this.endDate=this.parseDate(e):this.endDate=null,this.built&&this.render()},parseDate:function(e){var a=this.format,t=[];if(k(e))return new Date(e.getFullYear(),e.getMonth(),e.getDate());y(e)&&(t=e.match(F)||[]),e=new Date;var i=a.parts.length,s=e.getFullYear(),n=e.getDate(),r=e.getMonth();return t.length===i&&D.each(t,function(e,t){var i=parseInt(t,10)||1;switch(a.parts[e]){case"dd":case"d":n=i;break;case"mm":case"m":r=i-1;break;case"yy":s=2e3+i;break;case"yyyy":s=i}}),new Date(s,r,n)},formatDate:function(e){var t=this.format,i="";if(k(e)){var a=e.getFullYear(),s={d:e.getDate(),m:e.getMonth()+1,yy:a.toString().substring(2),yyyy:a};s.dd=(s.d<10?"0":"")+s.d,s.mm=(s.m<10?"0":"")+s.m,i=t.source,D.each(t.parts,function(e,t){i=i.replace(t,s[t])})}return i},destroy:function(){this.unbind(),this.unbuild(),this.$element.removeData(d)}},V={click:function(e){var t=D(e.target),i=this.options,a=this.viewDate,s=this.format;if(e.stopPropagation(),e.preventDefault(),!t.hasClass("disabled")){var n=t.data("view"),r=a.getFullYear(),h=a.getMonth(),o=a.getDate();switch(n){case"years prev":case"years next":r="years prev"===n?r-10:r+10,this.viewDate=new Date(r,h,$(r,h,o)),this.renderYears();break;case"year prev":case"year next":r="year prev"===n?r-1:r+1,this.viewDate=new Date(r,h,$(r,h,o)),this.renderMonths();break;case"year current":s.hasYear&&this.showView(g);break;case"year picked":s.hasMonth?this.showView(f):(t.addClass(i.pickedClass).siblings().removeClass(i.pickedClass),this.hideView()),this.pick("year");break;case"year":r=parseInt(t.text(),10),this.date=new Date(r,h,$(r,h,o)),s.hasMonth?(this.viewDate=new Date(this.date),this.showView(f)):(t.addClass(i.pickedClass).siblings().removeClass(i.pickedClass),this.renderYears(),this.hideView()),this.pick("year");break;case"month prev":case"month next":(h="month prev"===n?h-1:h+1)<0?(r-=1,h+=12):11<h&&(r+=1,h-=12),this.viewDate=new Date(r,h,$(r,h,o)),this.renderDays();break;case"month current":s.hasMonth&&this.showView(f);break;case"month picked":s.hasDay?this.showView(p):(t.addClass(i.pickedClass).siblings().removeClass(i.pickedClass),this.hideView()),this.pick("month");break;case"month":h=D.inArray(t.text(),i.monthsShort),this.date=new Date(r,h,$(r,h,o)),s.hasDay?(this.viewDate=new Date(r,h,$(r,h,o)),this.showView(p)):(t.addClass(i.pickedClass).siblings().removeClass(i.pickedClass),this.renderMonths(),this.hideView()),this.pick("month");break;case"day prev":case"day next":case"day":"day prev"===n?h-=1:"day next"===n&&(h+=1),o=parseInt(t.text(),10),this.date=new Date(r,h,o),this.viewDate=new Date(r,h,o),this.renderDays(),"day"===n&&this.hideView(),this.pick("day");break;case"day picked":this.hideView(),this.pick("day")}}},globalClick:function(e){for(var t=e.target,i=this.element,a=this.$trigger[0],s=!0;t!==document;){if(t===a||t===i){s=!1;break}t=t.parentNode}s&&this.hide()},keyup:function(){this.update()},globalKeyup:function(e){var t=e.target,i=e.key,a=e.keyCode;this.isInput&&t!==this.element&&this.shown&&("Tab"===i||9===a)&&this.hide()}},Y={render:function(){this.renderYears(),this.renderMonths(),this.renderDays()},renderWeek:function(){var i=this,a=[],e=this.options,t=e.weekStart,s=e.daysMin;t=parseInt(t,10)%7,s=s.slice(t).concat(s.slice(0,t)),D.each(s,function(e,t){a.push(i.createItem({text:t}))}),this.$week.html(a.join(""))},renderYears:function(){var e=this.options,t=this.startDate,i=this.endDate,a=e.disabledClass,s=e.filter,n=e.yearSuffix,r=this.viewDate.getFullYear(),h=(new Date).getFullYear(),o=this.date.getFullYear(),l=[],d=!1,u=!1,c=void 0;for(c=-5;c<=6;c+=1){var p=new Date(r+c,1,1),f=!1;t&&(f=p.getFullYear()<t.getFullYear(),-5===c&&(d=f)),!f&&i&&(f=p.getFullYear()>i.getFullYear(),6===c&&(u=f)),!f&&s&&(f=!1===s.call(this.$element,p,"year"));var g=r+c===o,y=g?"year picked":"year";l.push(this.createItem({picked:g,disabled:f,text:r+c,view:f?"year disabled":y,highlighted:p.getFullYear()===h}))}this.$yearsPrev.toggleClass(a,d),this.$yearsNext.toggleClass(a,u),this.$yearsCurrent.toggleClass(a,!0).html(r+-5+n+" - "+(r+6)+n),this.$years.html(l.join(""))},renderMonths:function(){var e=this.options,t=this.startDate,i=this.endDate,a=this.viewDate,s=e.disabledClass||"",n=e.monthsShort,r=D.isFunction(e.filter)&&e.filter,h=a.getFullYear(),o=new Date,l=o.getFullYear(),d=o.getMonth(),u=this.date.getFullYear(),c=this.date.getMonth(),p=[],f=!1,g=!1,y=void 0;for(y=0;y<=11;y+=1){var v=new Date(h,y,1),m=!1;t&&(m=(f=v.getFullYear()===t.getFullYear())&&v.getMonth()<t.getMonth()),!m&&i&&(m=(g=v.getFullYear()===i.getFullYear())&&v.getMonth()>i.getMonth()),!m&&r&&(m=!1===r.call(this.$element,v,"month"));var w=h===u&&y===c,k=w?"month picked":"month";p.push(this.createItem({disabled:m,picked:w,highlighted:h===l&&v.getMonth()===d,index:y,text:n[y],view:m?"month disabled":k}))}this.$yearPrev.toggleClass(s,f),this.$yearNext.toggleClass(s,g),this.$yearCurrent.toggleClass(s,f&&g).html(h+e.yearSuffix||""),this.$months.html(p.join(""))},renderDays:function(){var e=this.$element,t=this.options,i=this.startDate,a=this.endDate,s=this.viewDate,n=this.date,r=t.disabledClass,h=t.filter,o=t.monthsShort,l=t.weekStart,d=t.yearSuffix,u=s.getFullYear(),c=s.getMonth(),p=new Date,f=p.getFullYear(),g=p.getMonth(),y=p.getDate(),v=n.getFullYear(),m=n.getMonth(),w=n.getDate(),k=void 0,D=void 0,b=void 0,C=[],$=u,x=c,F=!1;0===c?($-=1,x=11):x-=1,k=G($,x);var M=new Date(u,c,1);for((b=M.getDay()-parseInt(l,10)%7)<=0&&(b+=7),i&&(F=M.getTime()<=i.getTime()),D=k-(b-1);D<=k;D+=1){var V=new Date($,x,D),Y=!1;i&&(Y=V.getTime()<i.getTime()),!Y&&h&&(Y=!1===h.call(e,V,"day")),C.push(this.createItem({disabled:Y,highlighted:$===f&&x===g&&V.getDate()===y,muted:!0,picked:$===v&&x===m&&D===w,text:D,view:"day prev"}))}var I=[],S=u,T=c,P=!1;11===c?(S+=1,T=0):T+=1,k=G(u,c),b=42-(C.length+k);var N=new Date(u,c,k);for(a&&(P=N.getTime()>=a.getTime()),D=1;D<=b;D+=1){var j=new Date(S,T,D),q=S===v&&T===m&&D===w,A=!1;a&&(A=j.getTime()>a.getTime()),!A&&h&&(A=!1===h.call(e,j,"day")),I.push(this.createItem({disabled:A,picked:q,highlighted:S===f&&T===g&&j.getDate()===y,muted:!0,text:D,view:"day next"}))}var O=[];for(D=1;D<=k;D+=1){var W=new Date(u,c,D),z=!1;i&&(z=W.getTime()<i.getTime()),!z&&a&&(z=W.getTime()>a.getTime()),!z&&h&&(z=!1===h.call(e,W,"day"));var J=u===v&&c===m&&D===w,E=J?"day picked":"day";O.push(this.createItem({disabled:z,picked:J,highlighted:u===f&&c===g&&W.getDate()===y,text:D,view:z?"day disabled":E}))}this.$monthPrev.toggleClass(r,F),this.$monthNext.toggleClass(r,P),this.$monthCurrent.toggleClass(r,F&&P).html(t.yearFirst?u+d+" "+o[c]:o[c]+" "+u+d),this.$days.html(C.join("")+O.join("")+I.join(""))}},I=function(){function a(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(e,t,i){return t&&a(e.prototype,t),i&&a(e,i),e}}();var S=d+"-top-left",T=d+"-bottom-left",P=[S,d+"-top-right",T,d+"-bottom-right"].join(" "),N=function(){function i(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),this.$element=D(e),this.element=e,this.options=D.extend({},a,c[t.language],D.isPlainObject(t)&&t),this.built=!1,this.shown=!1,this.isInput=!1,this.inline=!1,this.initialValue="",this.initialDate=null,this.startDate=null,this.endDate=null,this.init()}return I(i,[{key:"init",value:function(){var e=this.$element,t=this.options,i=t.startDate,a=t.endDate,s=t.date;this.$trigger=D(t.trigger),this.isInput=e.is("input")||e.is("textarea"),this.inline=t.inline&&(t.container||!this.isInput),this.format=function(i){var e=String(i).toLowerCase(),t=e.match(x);if(!t||0===t.length)throw new Error("Invalid date format.");return i={source:e,parts:t},D.each(t,function(e,t){switch(t){case"dd":case"d":i.hasDay=!0;break;case"mm":case"m":i.hasMonth=!0;break;case"yyyy":case"yy":i.hasYear=!0}}),i}(t.format);var n=this.getValue();this.initialValue=n,this.oldValue=n,s=this.parseDate(s||n),i&&(i=this.parseDate(i),s.getTime()<i.getTime()&&(s=new Date(i)),this.startDate=i),a&&(a=this.parseDate(a),i&&a.getTime()<i.getTime()&&(a=new Date(i)),s.getTime()>a.getTime()&&(s=new Date(a)),this.endDate=a),this.date=s,this.viewDate=new Date(s),this.initialDate=new Date(this.date),this.bind(),(t.autoShow||this.inline)&&this.show(),t.autoPick&&this.pick()}},{key:"build",value:function(){if(!this.built){this.built=!0;var e=this.$element,t=this.options,i=D(t.template);this.$picker=i,this.$week=i.find(C("week")),this.$yearsPicker=i.find(C("years picker")),this.$yearsPrev=i.find(C("years prev")),this.$yearsNext=i.find(C("years next")),this.$yearsCurrent=i.find(C("years current")),this.$years=i.find(C("years")),this.$monthsPicker=i.find(C("months picker")),this.$yearPrev=i.find(C("year prev")),this.$yearNext=i.find(C("year next")),this.$yearCurrent=i.find(C("year current")),this.$months=i.find(C("months")),this.$daysPicker=i.find(C("days picker")),this.$monthPrev=i.find(C("month prev")),this.$monthNext=i.find(C("month next")),this.$monthCurrent=i.find(C("month current")),this.$days=i.find(C("days")),this.inline?D(t.container||e).append(i.addClass(d+"-inline")):(D(document.body).append(i.addClass(d+"-dropdown")),i.addClass(u)),this.renderWeek()}}},{key:"unbuild",value:function(){this.built&&(this.built=!1,this.$picker.remove())}},{key:"bind",value:function(){var e=this.options,t=this.$element;D.isFunction(e.show)&&t.on(l,e.show),D.isFunction(e.hide)&&t.on(r,e.hide),D.isFunction(e.pick)&&t.on(o,e.pick),this.isInput&&t.on(h,D.proxy(this.keyup,this)),this.inline||(e.trigger?this.$trigger.on(s,D.proxy(this.toggle,this)):this.isInput?t.on(n,D.proxy(this.show,this)):t.on(s,D.proxy(this.show,this)))}},{key:"unbind",value:function(){var e=this.$element,t=this.options;D.isFunction(t.show)&&e.off(l,t.show),D.isFunction(t.hide)&&e.off(r,t.hide),D.isFunction(t.pick)&&e.off(o,t.pick),this.isInput&&e.off(h,this.keyup),this.inline||(t.trigger?this.$trigger.off(s,this.toggle):this.isInput?e.off(n,this.show):e.off(s,this.show))}},{key:"showView",value:function(e){var t=this.$yearsPicker,i=this.$monthsPicker,a=this.$daysPicker,s=this.format;if(s.hasYear||s.hasMonth||s.hasDay)switch(Number(e)){case g:i.addClass(u),a.addClass(u),s.hasYear?(this.renderYears(),t.removeClass(u),this.place()):this.showView(p);break;case f:t.addClass(u),a.addClass(u),s.hasMonth?(this.renderMonths(),i.removeClass(u),this.place()):this.showView(g);break;default:t.addClass(u),i.addClass(u),s.hasDay?(this.renderDays(),a.removeClass(u),this.place()):this.showView(f)}}},{key:"hideView",value:function(){!this.inline&&this.options.autoHide&&this.hide()}},{key:"place",value:function(){if(!this.inline){var e=this.$element,t=this.options,i=this.$picker,a=D(document).outerWidth(),s=D(document).outerHeight(),n=e.outerWidth(),r=e.outerHeight(),h=i.width(),o=i.height(),l=e.offset(),d=l.left,u=l.top,c=parseFloat(t.offset),p=S;v(c)&&(c=10),o<u&&s<u+r+o?(u-=o+c,p=T):u+=r+c,a<d+h&&(d+=n-h,p=p.replace("left","right")),i.removeClass(P).addClass(p).css({top:u,left:d,zIndex:parseInt(t.zIndex,10)})}}},{key:"trigger",value:function(e,t){var i=D.Event(e,t);return this.$element.trigger(i),i}},{key:"createItem",value:function(e){var t=this.options,i=t.itemTag,a={text:"",view:"",muted:!1,picked:!1,disabled:!1,highlighted:!1},s=[];return D.extend(a,e),a.muted&&s.push(t.mutedClass),a.highlighted&&s.push(t.highlightedClass),a.picked&&s.push(t.pickedClass),a.disabled&&s.push(t.disabledClass),"<"+i+' class="'+s.join(" ")+'" data-view="'+a.view+'">'+a.text+"</"+i+">"}},{key:"getValue",value:function(){var e=this.$element;return this.isInput?e.val():e.text()}},{key:"setValue",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=this.$element;this.isInput?t.val(e):t.text(e)}}],[{key:"setDefaults",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};D.extend(a,c[e.language],D.isPlainObject(e)&&e)}}]),i}();if(D.extend&&D.extend(N.prototype,Y,V,M),D.fn){var j=D.fn.datepicker;D.fn.datepicker=function(h){for(var e=arguments.length,o=Array(1<e?e-1:0),t=1;t<e;t++)o[t-1]=arguments[t];var l=void 0;return this.each(function(e,t){var i=D(t),a="destroy"===h,s=i.data(d);if(!s){if(a)return;var n=D.extend({},i.data(),D.isPlainObject(h)&&h);s=new N(t,n),i.data(d,s)}if(y(h)){var r=s[h];D.isFunction(r)&&(l=r.apply(s,o),a&&i.removeData(d))}}),w(l)?this:l},D.fn.datepicker.Constructor=N,D.fn.datepicker.languages=c,D.fn.datepicker.setDefaults=N.setDefaults,D.fn.datepicker.noConflict=function(){return D.fn.datepicker=j,this}}});
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery')) :
      typeof define === 'function' && define.amd ? define(['jquery'], factory) :
      (factory(global.jQuery));
    }(this, (function ($) {
      'use strict';
    
      $.fn.datepicker.languages['ru-RU'] = {
        format: 'dd.mm.YYYY',
        days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
        daysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
        daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
        months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
        monthsShort: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
        weekStart: 1,
        startView: 0,
        yearFirst: false,
        yearSuffix: ''
      };
    })));
    /**
    * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
    */
    
    ;(function(window, document) {
    /*jshint evil:true */
      /** version */
      var version = '3.7.0';
    
      /** Preset options */
      var options = window.html5 || {};
    
      /** Used to skip problem elements */
      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;
    
      /** Not all elements can be cloned in IE **/
      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;
    
      /** Detect whether the browser supports default html5 styles */
      var supportsHtml5Styles;
    
      /** Name of the expando, to work with multiple documents or to re-shiv one document */
      var expando = '_html5shiv';
    
      /** The id for the the documents expando */
      var expanID = 0;
    
      /** Cached data for each document */
      var expandoData = {};
    
      /** Detect whether the browser supports unknown elements */
      var supportsUnknownElements;
    
      (function() {
        try {
            var a = document.createElement('a');
            a.innerHTML = '<xyz></xyz>';
            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
            supportsHtml5Styles = ('hidden' in a);
    
            supportsUnknownElements = a.childNodes.length == 1 || (function() {
              // assign a false positive if unable to shiv
              (document.createElement)('a');
              var frag = document.createDocumentFragment();
              return (
                typeof frag.cloneNode == 'undefined' ||
                typeof frag.createDocumentFragment == 'undefined' ||
                typeof frag.createElement == 'undefined'
              );
            }());
        } catch(e) {
          // assign a false positive if detection fails => unable to shiv
          supportsHtml5Styles = true;
          supportsUnknownElements = true;
        }
    
      }());
    
      /*--------------------------------------------------------------------------*/
    
      /**
       * Creates a style sheet with the given CSS text and adds it to the document.
       * @private
       * @param {Document} ownerDocument The document.
       * @param {String} cssText The CSS text.
       * @returns {StyleSheet} The style element.
       */
      function addStyleSheet(ownerDocument, cssText) {
        var p = ownerDocument.createElement('p'),
            parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;
    
        p.innerHTML = 'x<style>' + cssText + '</style>';
        return parent.insertBefore(p.lastChild, parent.firstChild);
      }
    
      /**
       * Returns the value of `html5.elements` as an array.
       * @private
       * @returns {Array} An array of shived element node names.
       */
      function getElements() {
        var elements = html5.elements;
        return typeof elements == 'string' ? elements.split(' ') : elements;
      }
    
        /**
       * Returns the data associated to the given document
       * @private
       * @param {Document} ownerDocument The document.
       * @returns {Object} An object of data.
       */
      function getExpandoData(ownerDocument) {
        var data = expandoData[ownerDocument[expando]];
        if (!data) {
            data = {};
            expanID++;
            ownerDocument[expando] = expanID;
            expandoData[expanID] = data;
        }
        return data;
      }
    
      /**
       * returns a shived element for the given nodeName and document
       * @memberOf html5
       * @param {String} nodeName name of the element
       * @param {Document} ownerDocument The context document.
       * @returns {Object} The shived element.
       */
      function createElement(nodeName, ownerDocument, data){
        if (!ownerDocument) {
            ownerDocument = document;
        }
        if(supportsUnknownElements){
            return ownerDocument.createElement(nodeName);
        }
        if (!data) {
            data = getExpandoData(ownerDocument);
        }
        var node;
    
        if (data.cache[nodeName]) {
            node = data.cache[nodeName].cloneNode();
        } else if (saveClones.test(nodeName)) {
            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
        } else {
            node = data.createElem(nodeName);
        }
    
        // Avoid adding some elements to fragments in IE < 9 because
        // * Attributes like `name` or `type` cannot be set/changed once an element
        //   is inserted into a document/fragment
        // * Link elements with `src` attributes that are inaccessible, as with
        //   a 403 response, will cause the tab/window to crash
        // * Script elements appended to fragments will execute when their `src`
        //   or `text` property is set
        return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;
      }
    
      /**
       * returns a shived DocumentFragment for the given document
       * @memberOf html5
       * @param {Document} ownerDocument The context document.
       * @returns {Object} The shived DocumentFragment.
       */
      function createDocumentFragment(ownerDocument, data){
        if (!ownerDocument) {
            ownerDocument = document;
        }
        if(supportsUnknownElements){
            return ownerDocument.createDocumentFragment();
        }
        data = data || getExpandoData(ownerDocument);
        var clone = data.frag.cloneNode(),
            i = 0,
            elems = getElements(),
            l = elems.length;
        for(;i<l;i++){
            clone.createElement(elems[i]);
        }
        return clone;
      }
    
      /**
       * Shivs the `createElement` and `createDocumentFragment` methods of the document.
       * @private
       * @param {Document|DocumentFragment} ownerDocument The document.
       * @param {Object} data of the document.
       */
      function shivMethods(ownerDocument, data) {
        if (!data.cache) {
            data.cache = {};
            data.createElem = ownerDocument.createElement;
            data.createFrag = ownerDocument.createDocumentFragment;
            data.frag = data.createFrag();
        }
    
    
        ownerDocument.createElement = function(nodeName) {
          //abort shiv
          if (!html5.shivMethods) {
              return data.createElem(nodeName);
          }
          return createElement(nodeName, ownerDocument, data);
        };
    
        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
          'var n=f.cloneNode(),c=n.createElement;' +
          'h.shivMethods&&(' +
            // unroll the `createElement` calls
            getElements().join().replace(/[\w\-:]+/g, function(nodeName) {
              data.createElem(nodeName);
              data.frag.createElement(nodeName);
              return 'c("' + nodeName + '")';
            }) +
          ');return n}'
        )(html5, data.frag);
      }
    
      /*--------------------------------------------------------------------------*/
    
      /**
       * Shivs the given document.
       * @memberOf html5
       * @param {Document} ownerDocument The document to shiv.
       * @returns {Document} The shived document.
       */
      function shivDocument(ownerDocument) {
        if (!ownerDocument) {
            ownerDocument = document;
        }
        var data = getExpandoData(ownerDocument);
    
        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
          data.hasCSS = !!addStyleSheet(ownerDocument,
            // corrects block display not defined in IE6/7/8/9
            'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +
            // adds styling not present in IE6/7/8/9
            'mark{background:#FF0;color:#000}' +
            // hides non-rendered elements
            'template{display:none}'
          );
        }
        if (!supportsUnknownElements) {
          shivMethods(ownerDocument, data);
        }
        return ownerDocument;
      }
    
      /*--------------------------------------------------------------------------*/
    
      /**
       * The `html5` object is exposed so that more elements can be shived and
       * existing shiving can be detected on iframes.
       * @type Object
       * @example
       *
       * // options can be changed before the script is included
       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
       */
      var html5 = {
    
        /**
         * An array or space separated string of node names of the elements to shiv.
         * @memberOf html5
         * @type Array|String
         */
        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',
    
        /**
         * current version of html5shiv
         */
        'version': version,
    
        /**
         * A flag to indicate that the HTML5 style sheet should be inserted.
         * @memberOf html5
         * @type Boolean
         */
        'shivCSS': (options.shivCSS !== false),
    
        /**
         * Is equal to true if a browser supports creating unknown/HTML5 elements
         * @memberOf html5
         * @type boolean
         */
        'supportsUnknownElements': supportsUnknownElements,
    
        /**
         * A flag to indicate that the document's `createElement` and `createDocumentFragment`
         * methods should be overwritten.
         * @memberOf html5
         * @type Boolean
         */
        'shivMethods': (options.shivMethods !== false),
    
        /**
         * A string to describe the type of `html5` object ("default" or "default print").
         * @memberOf html5
         * @type String
         */
        'type': 'default',
    
        // shivs the document according to the specified `html5` object options
        'shivDocument': shivDocument,
    
        //creates a shived element
        createElement: createElement,
    
        //creates a shived documentFragment
        createDocumentFragment: createDocumentFragment
      };
    
      /*--------------------------------------------------------------------------*/
    
      // expose html5
      window.html5 = html5;
    
      // shiv the document
      shivDocument(document);
    
    }(this, document));
    !function($){
      function rewriteSelector(context, name, argPos){
        var original = context[name];
    
        if (!original) return;
    
        context[name] = function(){
          arguments[argPos] = arguments[argPos].replace(/@([\w\u00c0-\uFFFF\-]+)/g, '[role~="$1"]');
          return original.apply(context, arguments);
        };
    
        $.extend(context[name], original);
      }
    
      rewriteSelector($, 'find', 0);
      rewriteSelector($, 'multiFilter', 0);
      rewriteSelector($.find, 'matchesSelector', 1);
      rewriteSelector($.find, 'matches', 0);
    
      function parse(roleString, without){
        var role, result = [], roles = $.trim(roleString).split(/\s+/);
    
        for(var i=0; i<roles.length; i++) {
          role = roles[i];
          if (!~$.inArray(role, result) && (!without || !~$.inArray(role, without)))
            result.push(role);
        }
    
        return result;
      };
    
      $.extend($.fn, {
        roles: function(){ return parse(this.attr('role')); },
    
        hasRole: function(roleName){
          var roles = parse(roleName);
          for(var i=0;i<roles.length;i++)
            if (!this.is('@'+roles[i])) return false;
    
          return true;
        },
    
        addRole: function(roleName){
          if (this.hasRole(roleName)) return this;
    
          return this.each(function(_, element){
            var $el = $(element);
            $el.attr('role', parse($el.attr('role') + ' ' + roleName).join(' '));
          });
        },
    
        removeRole: function(roleName){
          if (!this.hasRole(roleName)) return this;
    
          return this.each(function(_, element){
            var $el = $(element);
            $el.attr('role', parse($el.attr('role'), parse(roleName)).join(' '));
          });
        },
    
        toggleRole: function(roleName){
          var roles = parse(roleName);
          for(var i=0;i<roles.length;i++)
            this[this.hasRole(roles[i]) ? 'removeRole' : 'addRole'].call(this, roles[i]);
          return this;
        }
      });
    }(jQuery)
    ;
    (function($) {
      window.NestedFormEvents = function() {
        this.addFields = $.proxy(this.addFields, this);
        this.removeFields = $.proxy(this.removeFields, this);
      };
    
      NestedFormEvents.prototype = {
        addFields: function(e) {
          // Setup
          var link      = e.currentTarget;
          var assoc     = $(link).data('association');                // Name of child
          var blueprint = $('#' + $(link).data('blueprint-id'));
          var content   = blueprint.data('blueprint');                // Fields template
    
          // Make the context correct by replacing <parents> with the generated ID
          // of each of the parent objects
          var context = ($(link).closest('.fields').closestChild('input, textarea, select').eq(0).attr('name') || '').replace(new RegExp('\[[a-z_]+\]$'), '');
    
          // context will be something like this for a brand new form:
          // project[tasks_attributes][1255929127459][assignments_attributes][1255929128105]
          // or for an edit form:
          // project[tasks_attributes][0][assignments_attributes][1]
          if (context) {
            var parentNames = context.match(/[a-z_]+_attributes(?=\]\[(new_)?\d+\])/g) || [];
            var parentIds   = context.match(/[0-9]+/g) || [];
    
            for(var i = 0; i < parentNames.length; i++) {
              if(parentIds[i]) {
                content = content.replace(
                  new RegExp('(_' + parentNames[i] + ')_.+?_', 'g'),
                  '$1_' + parentIds[i] + '_');
    
                content = content.replace(
                  new RegExp('(\\[' + parentNames[i] + '\\])\\[.+?\\]', 'g'),
                  '$1[' + parentIds[i] + ']');
              }
            }
          }
    
          // Make a unique ID for the new child
          var regexp  = new RegExp('new_' + assoc, 'g');
          var new_id  = this.newId();
          content     = $.trim(content.replace(regexp, new_id));
    
          var field = this.insertFields(content, assoc, link);
          // bubble up event upto document (through form)
          field
            .trigger({ type: 'nested:fieldAdded', field: field })
            .trigger({ type: 'nested:fieldAdded:' + assoc, field: field });
          return false;
        },
        newId: function() {
          return new Date().getTime();
        },
        insertFields: function(content, assoc, link) {
          var target = $(link).data('target');
          if (target) {
            return $(content).appendTo($(target));
          } else {
            return $(content).insertBefore(link);
          }
        },
        removeFields: function(e) {
          var $link = $(e.currentTarget),
              assoc = $link.data('association'); // Name of child to be removed
          
          var hiddenField = $link.prev('input[type=hidden]');
          hiddenField.val('1');
          
          var field = $link.closest('.fields');
          field.hide();
          
          field
            .trigger({ type: 'nested:fieldRemoved', field: field })
            .trigger({ type: 'nested:fieldRemoved:' + assoc, field: field });
          return false;
        }
      };
    
      window.nestedFormEvents = new NestedFormEvents();
      $(document)
        .delegate('form a.add_nested_fields',    'click', nestedFormEvents.addFields)
        .delegate('form a.remove_nested_fields', 'click', nestedFormEvents.removeFields);
    })(jQuery);
    
    // http://plugins.jquery.com/project/closestChild
    /*
     * Copyright 2011, Tobias Lindig
     *
     * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
     * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
     *
     */
    (function($) {
            $.fn.closestChild = function(selector) {
                    // breadth first search for the first matched node
                    if (selector && selector != '') {
                            var queue = [];
                            queue.push(this);
                            while(queue.length > 0) {
                                    var node = queue.shift();
                                    var children = node.children();
                                    for(var i = 0; i < children.length; ++i) {
                                            var child = $(children[i]);
                                            if (child.is(selector)) {
                                                    return child; //well, we found one
                                            }
                                            queue.push(child);
                                    }
                            }
                    }
                    return $();//nothing found
            };
    })(jQuery);
    //     Underscore.js 1.5.2
    //     http://underscorejs.org
    //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.
    
    (function() {
    
      // Baseline setup
      // --------------
    
      // Establish the root object, `window` in the browser, or `exports` on the server.
      var root = this;
    
      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;
    
      // Establish the object that gets returned to break out of a loop iteration.
      var breaker = {};
    
      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    
      // Create quick reference variables for speed access to core prototypes.
      var
        push             = ArrayProto.push,
        slice            = ArrayProto.slice,
        concat           = ArrayProto.concat,
        toString         = ObjProto.toString,
        hasOwnProperty   = ObjProto.hasOwnProperty;
    
      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var
        nativeForEach      = ArrayProto.forEach,
        nativeMap          = ArrayProto.map,
        nativeReduce       = ArrayProto.reduce,
        nativeReduceRight  = ArrayProto.reduceRight,
        nativeFilter       = ArrayProto.filter,
        nativeEvery        = ArrayProto.every,
        nativeSome         = ArrayProto.some,
        nativeIndexOf      = ArrayProto.indexOf,
        nativeLastIndexOf  = ArrayProto.lastIndexOf,
        nativeIsArray      = Array.isArray,
        nativeKeys         = Object.keys,
        nativeBind         = FuncProto.bind;
    
      // Create a safe reference to the Underscore object for use below.
      var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
      };
    
      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for the old `require()` API. If we're in
      // the browser, add `_` as a global object via a string identifier,
      // for Closure Compiler "advanced" mode.
      if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }
    
      // Current version.
      _.VERSION = '1.5.2';
    
      // Collection Functions
      // --------------------
    
      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles objects with the built-in `forEach`, arrays, and raw objects.
      // Delegates to **ECMAScript 5**'s native `forEach` if available.
      var each = _.each = _.forEach = function(obj, iterator, context) {
        if (obj == null) return;
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
          for (var i = 0, length = obj.length; i < length; i++) {
            if (iterator.call(context, obj[i], i, obj) === breaker) return;
          }
        } else {
          var keys = _.keys(obj);
          for (var i = 0, length = keys.length; i < length; i++) {
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
          }
        }
      };
    
      // Return the results of applying the iterator to each element.
      // Delegates to **ECMAScript 5**'s native `map` if available.
      _.map = _.collect = function(obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function(value, index, list) {
          results.push(iterator.call(context, value, index, list));
        });
        return results;
      };
    
      var reduceError = 'Reduce of empty array with no initial value';
    
      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
      _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function(value, index, list) {
          if (!initial) {
            memo = value;
            initial = true;
          } else {
            memo = iterator.call(context, memo, value, index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };
    
      // The right-associative version of reduce, also known as `foldr`.
      // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
      _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (length !== +length) {
          var keys = _.keys(obj);
          length = keys.length;
        }
        each(obj, function(value, index, list) {
          index = keys ? keys[--length] : --length;
          if (!initial) {
            memo = obj[index];
            initial = true;
          } else {
            memo = iterator.call(context, memo, obj[index], index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };
    
      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function(obj, iterator, context) {
        var result;
        any(obj, function(value, index, list) {
          if (iterator.call(context, value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };
    
      // Return all the elements that pass a truth test.
      // Delegates to **ECMAScript 5**'s native `filter` if available.
      // Aliased as `select`.
      _.filter = _.select = function(obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
        each(obj, function(value, index, list) {
          if (iterator.call(context, value, index, list)) results.push(value);
        });
        return results;
      };
    
      // Return all the elements for which a truth test fails.
      _.reject = function(obj, iterator, context) {
        return _.filter(obj, function(value, index, list) {
          return !iterator.call(context, value, index, list);
        }, context);
      };
    
      // Determine whether all of the elements match a truth test.
      // Delegates to **ECMAScript 5**'s native `every` if available.
      // Aliased as `all`.
      _.every = _.all = function(obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = true;
        if (obj == null) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
        each(obj, function(value, index, list) {
          if (!(result = result && iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };
    
      // Determine if at least one element in the object matches a truth test.
      // Delegates to **ECMAScript 5**'s native `some` if available.
      // Aliased as `any`.
      var any = _.some = _.any = function(obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = false;
        if (obj == null) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
        each(obj, function(value, index, list) {
          if (result || (result = iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };
    
      // Determine if the array or object contains a given value (using `===`).
      // Aliased as `include`.
      _.contains = _.include = function(obj, target) {
        if (obj == null) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function(value) {
          return value === target;
        });
      };
    
      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };
    
      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function(obj, key) {
        return _.map(obj, function(value){ return value[key]; });
      };
    
      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function(obj, attrs, first) {
        if (_.isEmpty(attrs)) return first ? void 0 : [];
        return _[first ? 'find' : 'filter'](obj, function(value) {
          for (var key in attrs) {
            if (attrs[key] !== value[key]) return false;
          }
          return true;
        });
      };
    
      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function(obj, attrs) {
        return _.where(obj, attrs, true);
      };
    
      // Return the maximum element or (element-based computation).
      // Can't optimize arrays of integers longer than 65,535 elements.
      // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
      _.max = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.max.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return -Infinity;
        var result = {computed : -Infinity, value: -Infinity};
        each(obj, function(value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed > result.computed && (result = {value : value, computed : computed});
        });
        return result.value;
      };
    
      // Return the minimum element (or element-based computation).
      _.min = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.min.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return Infinity;
        var result = {computed : Infinity, value: Infinity};
        each(obj, function(value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed < result.computed && (result = {value : value, computed : computed});
        });
        return result.value;
      };
    
      // Shuffle an array, using the modern version of the
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle).
      _.shuffle = function(obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function(value) {
          rand = _.random(index++);
          shuffled[index - 1] = shuffled[rand];
          shuffled[rand] = value;
        });
        return shuffled;
      };
    
      // Sample **n** random values from an array.
      // If **n** is not specified, returns a single random element from the array.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function(obj, n, guard) {
        if (arguments.length < 2 || guard) {
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };
    
      // An internal function to generate lookup iterators.
      var lookupIterator = function(value) {
        return _.isFunction(value) ? value : function(obj){ return obj[value]; };
      };
    
      // Sort the object's values by a criterion produced by an iterator.
      _.sortBy = function(obj, value, context) {
        var iterator = lookupIterator(value);
        return _.pluck(_.map(obj, function(value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iterator.call(context, value, index, list)
          };
        }).sort(function(left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
          }
          return left.index - right.index;
        }), 'value');
      };
    
      // An internal function used for aggregate "group by" operations.
      var group = function(behavior) {
        return function(obj, value, context) {
          var result = {};
          var iterator = value == null ? _.identity : lookupIterator(value);
          each(obj, function(value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value);
          });
          return result;
        };
      };
    
      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function(result, key, value) {
        (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
      });
    
      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function(result, key, value) {
        result[key] = value;
      });
    
      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function(result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
      });
    
      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function(array, obj, iterator, context) {
        iterator = iterator == null ? _.identity : lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0, high = array.length;
        while (low < high) {
          var mid = (low + high) >>> 1;
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
      };
    
      // Safely create a real, live array from anything iterable.
      _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (obj.length === +obj.length) return _.map(obj, _.identity);
        return _.values(obj);
      };
    
      // Return the number of elements in an object.
      _.size = function(obj) {
        if (obj == null) return 0;
        return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
      };
    
      // Array Functions
      // ---------------
    
      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function(array, n, guard) {
        if (array == null) return void 0;
        return (n == null) || guard ? array[0] : slice.call(array, 0, n);
      };
    
      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N. The **guard** check allows it to work with
      // `_.map`.
      _.initial = function(array, n, guard) {
        return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
      };
    
      // Get the last element of an array. Passing **n** will return the last N
      // values in the array. The **guard** check allows it to work with `_.map`.
      _.last = function(array, n, guard) {
        if (array == null) return void 0;
        if ((n == null) || guard) {
          return array[array.length - 1];
        } else {
          return slice.call(array, Math.max(array.length - n, 0));
        }
      };
    
      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array. The **guard**
      // check allows it to work with `_.map`.
      _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, (n == null) || guard ? 1 : n);
      };
    
      // Trim out all falsy values from an array.
      _.compact = function(array) {
        return _.filter(array, _.identity);
      };
    
      // Internal implementation of a recursive `flatten` function.
      var flatten = function(input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        each(input, function(value) {
          if (_.isArray(value) || _.isArguments(value)) {
            shallow ? push.apply(output, value) : flatten(value, shallow, output);
          } else {
            output.push(value);
          }
        });
        return output;
      };
    
      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function(array, shallow) {
        return flatten(array, shallow, []);
      };
    
      // Return a version of the array that does not contain the specified value(s).
      _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
      };
    
      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function(array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
          context = iterator;
          iterator = isSorted;
          isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function(value, index) {
          if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
            seen.push(value);
            results.push(array[index]);
          }
        });
        return results;
      };
    
      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = function() {
        return _.uniq(_.flatten(arguments, true));
      };
    
      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function(array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function(item) {
          return _.every(rest, function(other) {
            return _.indexOf(other, item) >= 0;
          });
        });
      };
    
      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = function(array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function(value){ return !_.contains(rest, value); });
      };
    
      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = function() {
        var length = _.max(_.pluck(arguments, "length").concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, '' + i);
        }
        return results;
      };
    
      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values.
      _.object = function(list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };
    
      // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
      // we need this function. Return the position of the first occurrence of an
      // item in an array, or -1 if the item is not included in the array.
      // Delegates to **ECMAScript 5**'s native `indexOf` if available.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = function(array, item, isSorted) {
        if (array == null) return -1;
        var i = 0, length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (; i < length; i++) if (array[i] === item) return i;
        return -1;
      };
    
      // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
      _.lastIndexOf = function(array, item, from) {
        if (array == null) return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = (hasIndex ? from : array.length);
        while (i--) if (array[i] === item) return i;
        return -1;
      };
    
      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function(start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = arguments[2] || 1;
    
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);
    
        while(idx < length) {
          range[idx++] = start;
          start += step;
        }
    
        return range;
      };
    
      // Function (ahem) Functions
      // ------------------
    
      // Reusable constructor function for prototype setting.
      var ctor = function(){};
    
      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = function(func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError;
        args = slice.call(arguments, 2);
        return bound = function() {
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
          ctor.prototype = func.prototype;
          var self = new ctor;
          ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (Object(result) === result) return result;
          return self;
        };
      };
    
      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context.
      _.partial = function(func) {
        var args = slice.call(arguments, 1);
        return function() {
          return func.apply(this, args.concat(slice.call(arguments)));
        };
      };
    
      // Bind all of an object's methods to that object. Useful for ensuring that
      // all callbacks defined on an object belong to it.
      _.bindAll = function(obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0) throw new Error("bindAll must be passed function names");
        each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
        return obj;
      };
    
      // Memoize an expensive function by storing its results.
      _.memoize = function(func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function() {
          var key = hasher.apply(this, arguments);
          return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
        };
      };
    
      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function(){ return func.apply(null, args); }, wait);
      };
    
      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = function(func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
      };
    
      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function() {
          previous = options.leading === false ? 0 : new Date;
          timeout = null;
          result = func.apply(context, args);
        };
        return function() {
          var now = new Date;
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };
    
      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function() {
          context = this;
          args = arguments;
          timestamp = new Date();
          var later = function() {
            var last = (new Date()) - timestamp;
            if (last < wait) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate) result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow) result = func.apply(context, args);
          return result;
        };
      };
    
      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = function(func) {
        var ran = false, memo;
        return function() {
          if (ran) return memo;
          ran = true;
          memo = func.apply(this, arguments);
          func = null;
          return memo;
        };
      };
    
      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function(func, wrapper) {
        return function() {
          var args = [func];
          push.apply(args, arguments);
          return wrapper.apply(this, args);
        };
      };
    
      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function() {
        var funcs = arguments;
        return function() {
          var args = arguments;
          for (var i = funcs.length - 1; i >= 0; i--) {
            args = [funcs[i].apply(this, args)];
          }
          return args[0];
        };
      };
    
      // Returns a function that will only be executed after being called N times.
      _.after = function(times, func) {
        return function() {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };
    
      // Object Functions
      // ----------------
    
      // Retrieve the names of an object's properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`
      _.keys = nativeKeys || function(obj) {
        if (obj !== Object(obj)) throw new TypeError('Invalid object');
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        return keys;
      };
    
      // Retrieve the values of an object's properties.
      _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };
    
      // Convert an object into a list of `[key, value]` pairs.
      _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };
    
      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };
    
      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`
      _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
      };
    
      // Extend a given object with all the properties in passed-in object(s).
      _.extend = function(obj) {
        each(slice.call(arguments, 1), function(source) {
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };
    
      // Return a copy of the object only containing the whitelisted properties.
      _.pick = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function(key) {
          if (key in obj) copy[key] = obj[key];
        });
        return copy;
      };
    
       // Return a copy of the object without the blacklisted properties.
      _.omit = function(obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
          if (!_.contains(keys, key)) copy[key] = obj[key];
        }
        return copy;
      };
    
      // Fill in a given object with default properties.
      _.defaults = function(obj) {
        each(slice.call(arguments, 1), function(source) {
          if (source) {
            for (var prop in source) {
              if (obj[prop] === void 0) obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };
    
      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };
    
      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
      };
    
      // Internal recursive comparison function for `isEqual`.
      var eq = function(a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a == 1 / b;
        // A strict comparison is necessary because `null == undefined`.
        if (a == null || b == null) return a === b;
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
          // Strings, numbers, dates, and booleans are compared by value.
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return a == String(b);
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
            // other numeric values.
            return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a == +b;
          // RegExps are compared by their source patterns and flags.
          case '[object RegExp]':
            return a.source == b.source &&
                   a.global == b.global &&
                   a.multiline == b.multiline &&
                   a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object') return false;
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] == a) return bStack[length] == b;
        }
        // Objects with different constructors are not equivalent, but `Object`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                                 _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
          return false;
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        var size = 0, result = true;
        // Recursively compare objects and arrays.
        if (className == '[object Array]') {
          // Compare array lengths to determine if a deep comparison is necessary.
          size = a.length;
          result = size == b.length;
          if (result) {
            // Deep compare the contents, ignoring non-numeric properties.
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack))) break;
            }
          }
        } else {
          // Deep compare objects.
          for (var key in a) {
            if (_.has(a, key)) {
              // Count the expected number of properties.
              size++;
              // Deep compare each member.
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
            }
          }
          // Ensure that both objects contain the same number of properties.
          if (result) {
            for (key in b) {
              if (_.has(b, key) && !(size--)) break;
            }
            result = !size;
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return result;
      };
    
      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function(a, b) {
        return eq(a, b, [], []);
      };
    
      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
      };
    
      // Is a given value a DOM element?
      _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
      };
    
      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) == '[object Array]';
      };
    
      // Is a given variable an object?
      _.isObject = function(obj) {
        return obj === Object(obj);
      };
    
      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
      each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
        _['is' + name] = function(obj) {
          return toString.call(obj) == '[object ' + name + ']';
        };
      });
    
      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
          return !!(obj && _.has(obj, 'callee'));
        };
      }
    
      // Optimize `isFunction` if appropriate.
      if (typeof (/./) !== 'function') {
        _.isFunction = function(obj) {
          return typeof obj === 'function';
        };
      }
    
      // Is a given object a finite number?
      _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };
    
      // Is the given value `NaN`? (NaN is the only number which does not equal itself).
      _.isNaN = function(obj) {
        return _.isNumber(obj) && obj != +obj;
      };
    
      // Is a given value a boolean?
      _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
      };
    
      // Is a given value equal to null?
      _.isNull = function(obj) {
        return obj === null;
      };
    
      // Is a given variable undefined?
      _.isUndefined = function(obj) {
        return obj === void 0;
      };
    
      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function(obj, key) {
        return hasOwnProperty.call(obj, key);
      };
    
      // Utility Functions
      // -----------------
    
      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
      };
    
      // Keep the identity function around for default iterators.
      _.identity = function(value) {
        return value;
      };
    
      // Run a function **n** times.
      _.times = function(n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum;
      };
    
      // Return a random integer between min and max (inclusive).
      _.random = function(min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };
    
      // List of HTML entities for escaping.
      var entityMap = {
        escape: {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#x27;'
        }
      };
      entityMap.unescape = _.invert(entityMap.escape);
    
      // Regexes containing the keys and values listed immediately above.
      var entityRegexes = {
        escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
      };
    
      // Functions for escaping and unescaping strings to/from HTML interpolation.
      _.each(['escape', 'unescape'], function(method) {
        _[method] = function(string) {
          if (string == null) return '';
          return ('' + string).replace(entityRegexes[method], function(match) {
            return entityMap[method][match];
          });
        };
      });
    
      // If the value of the named `property` is a function then invoke it with the
      // `object` as context; otherwise, return it.
      _.result = function(object, property) {
        if (object == null) return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
      };
    
      // Add your own custom functions to the Underscore object.
      _.mixin = function(obj) {
        each(_.functions(obj), function(name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function() {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };
    
      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };
    
      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate    : /<%([\s\S]+?)%>/g,
        interpolate : /<%=([\s\S]+?)%>/g,
        escape      : /<%-([\s\S]+?)%>/g
      };
    
      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;
    
      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'":      "'",
        '\\':     '\\',
        '\r':     'r',
        '\n':     'n',
        '\t':     't',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };
    
      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    
      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      _.template = function(text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);
    
        // Combine delimiters into one regular expression via alternation.
        var matcher = new RegExp([
          (settings.escape || noMatch).source,
          (settings.interpolate || noMatch).source,
          (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');
    
        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset)
            .replace(escaper, function(match) { return '\\' + escapes[match]; });
    
          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          }
          if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          }
          if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";
    
        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
    
        source = "var __t,__p='',__j=Array.prototype.join," +
          "print=function(){__p+=__j.call(arguments,'');};\n" +
          source + "return __p;\n";
    
        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }
    
        if (data) return render(data, _);
        var template = function(data) {
          return render.call(this, data, _);
        };
    
        // Provide the compiled function source as a convenience for precompilation.
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';
    
        return template;
      };
    
      // Add a "chain" function, which will delegate to the wrapper.
      _.chain = function(obj) {
        return _(obj).chain();
      };
    
      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.
    
      // Helper function to continue chaining intermediate results.
      var result = function(obj) {
        return this._chain ? _(obj).chain() : obj;
      };
    
      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);
    
      // Add all mutator Array functions to the wrapper.
      each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
          return result.call(this, obj);
        };
      });
    
      // Add all accessor Array functions to the wrapper.
      each(['concat', 'join', 'slice'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });
    
      _.extend(_.prototype, {
    
        // Start chaining a wrapped Underscore object.
        chain: function() {
          this._chain = true;
          return this;
        },
    
        // Extracts the result from a wrapped and chained object.
        value: function() {
          return this._wrapped;
        }
    
      });
    
    }).call(this);
    /*
    * jQuery UI Tag-it!
    *
    * @version v2.0 (06/2011)1
    *
    * Copyright 2011, Levy Carneiro Jr.
    * Released under the MIT license.
    * http://aehlke.github.com/tag-it/LICENSE
    *
    * Homepage:
    *   http://aehlke.github.com/tag-it/
    *
    * Authors:
    *   Levy Carneiro Jr.
    *   Martin Rehfeld
    *   Tobias Schmidt
    *   Skylar Challand
    *   Alex Ehlke
    *
    * Maintainer:
    *   Alex Ehlke - Twitter: @aehlke
    *
    * Dependencies:
    *   jQuery v1.4+
    *   jQuery UI v1.8+
    */
    
    
    (function($) {
    
        $.widget('ui.tagit', {
            options: {
                allowDuplicates   : false,
                caseSensitive     : true,
                fieldName         : 'tags',
                placeholderText   : null,   // Sets `placeholder` attr on input field.
                readOnly          : false,  // Disables editing.
                removeConfirmation: false,  // Require confirmation to remove tags.
                tagLimit          : null,   // Max number of tags allowed (null for unlimited).
    
                // Used for autocomplete, unless you override `autocomplete.source`.
                availableTags     : [],
    
                // Use to override or add any options to the autocomplete widget.
                //
                // By default, autocomplete.source will map to availableTags,
                // unless overridden.
                autocomplete: {},
    
                // Shows autocomplete before the user even types anything.
                showAutocompleteOnFocus: false,
    
                // When enabled, quotes are unneccesary for inputting multi-word tags.
                allowSpaces: false,
    
                // The below options are for using a single field instead of several
                // for our form values.
                //
                // When enabled, will use a single hidden field for the form,
                // rather than one per tag. It will delimit tags in the field
                // with singleFieldDelimiter.
                //
                // The easiest way to use singleField is to just instantiate tag-it
                // on an INPUT element, in which case singleField is automatically
                // set to true, and singleFieldNode is set to that element. This
                // way, you don't need to fiddle with these options.
                singleField: false,
    
                // This is just used when preloading data from the field, and for
                // populating the field with delimited tags as the user adds them.
                singleFieldDelimiter: ',',
    
                // Set this to an input DOM node to use an existing form field.
                // Any text in it will be erased on init. But it will be
                // populated with the text of tags as they are created,
                // delimited by singleFieldDelimiter.
                //
                // If this is not set, we create an input node for it,
                // with the name given in settings.fieldName.
                singleFieldNode: null,
    
                // Whether to animate tag removals or not.
                animate: true,
    
                // Optionally set a tabindex attribute on the input that gets
                // created for tag-it.
                tabIndex: null,
    
                // Event callbacks.
                beforeTagAdded      : null,
                afterTagAdded       : null,
    
                beforeTagRemoved    : null,
                afterTagRemoved     : null,
    
                onTagClicked        : null,
                onTagLimitExceeded  : null,
    
    
                // DEPRECATED:
                //
                // /!\ These event callbacks are deprecated and WILL BE REMOVED at some
                // point in the future. They're here for backwards-compatibility.
                // Use the above before/after event callbacks instead.
                onTagAdded  : null,
                onTagRemoved: null,
                // `autocomplete.source` is the replacement for tagSource.
                tagSource: null
                // Do not use the above deprecated options.
            },
    
            _create: function() {
                // for handling static scoping inside callbacks
                var that = this;
    
                // There are 2 kinds of DOM nodes this widget can be instantiated on:
                //     1. UL, OL, or some element containing either of these.
                //     2. INPUT, in which case 'singleField' is overridden to true,
                //        a UL is created and the INPUT is hidden.
                if (this.element.is('input')) {
                    this.tagList = $('<ul></ul>').insertAfter(this.element);
                    this.options.singleField = true;
                    this.options.singleFieldNode = this.element;
                    this.element.addClass('tagit-hidden-field');
                } else {
                    this.tagList = this.element.find('ul, ol').andSelf().last();
                }
    
                this.tagInput = $('<input type="text" />').addClass('ui-widget-content');
    
                if (this.options.readOnly) this.tagInput.attr('disabled', 'disabled');
    
                if (this.options.tabIndex) {
                    this.tagInput.attr('tabindex', this.options.tabIndex);
                }
    
                if (this.options.placeholderText) {
                    this.tagInput.attr('placeholder', this.options.placeholderText);
                }
    
                if (!this.options.autocomplete.source) {
                    this.options.autocomplete.source = function(search, showChoices) {
                        var filter = search.term.toLowerCase();
                        var choices = $.grep(this.options.availableTags, function(element) {
                            // Only match autocomplete options that begin with the search term.
                            // (Case insensitive.)
                            return (element.toLowerCase().indexOf(filter) === 0);
                        });
                        if (!this.options.allowDuplicates) {
                            choices = this._subtractArray(choices, this.assignedTags());
                        }
                        showChoices(choices);
                    };
                }
    
                if (this.options.showAutocompleteOnFocus) {
                    this.tagInput.focus(function(event, ui) {
                        that._showAutocomplete();
                    });
    
                    if (typeof this.options.autocomplete.minLength === 'undefined') {
                        this.options.autocomplete.minLength = 0;
                    }
                }
    
                // Bind autocomplete.source callback functions to this context.
                if ($.isFunction(this.options.autocomplete.source)) {
                    this.options.autocomplete.source = $.proxy(this.options.autocomplete.source, this);
                }
    
                // DEPRECATED.
                if ($.isFunction(this.options.tagSource)) {
                    this.options.tagSource = $.proxy(this.options.tagSource, this);
                }
    
                this.tagList
                    .addClass('tagit')
                    .addClass('ui-widget ui-widget-content ui-corner-all')
                    // Create the input field.
                    .append($('<li class="tagit-new"></li>').append(this.tagInput))
                    .click(function(e) {
                        var target = $(e.target);
                        if (target.hasClass('tagit-label')) {
                            var tag = target.closest('.tagit-choice');
                            if (!tag.hasClass('removed')) {
                                that._trigger('onTagClicked', e, {tag: tag, tagLabel: that.tagLabel(tag)});
                            }
                        } else {
                            // Sets the focus() to the input field, if the user
                            // clicks anywhere inside the UL. This is needed
                            // because the input field needs to be of a small size.
                            that.tagInput.focus();
                        }
                    });
    
                // Single field support.
                var addedExistingFromSingleFieldNode = false;
                if (this.options.singleField) {
                    if (this.options.singleFieldNode) {
                        // Add existing tags from the input field.
                        var node = $(this.options.singleFieldNode);
                        var tags = node.val().split(this.options.singleFieldDelimiter);
                        node.val('');
                        $.each(tags, function(index, tag) {
                            that.createTag(tag, null, true);
                            addedExistingFromSingleFieldNode = true;
                        });
                    } else {
                        // Create our single field input after our list.
                        this.options.singleFieldNode = $('<input type="hidden" style="display:none;" value="" name="' + this.options.fieldName + '" />');
                        this.tagList.after(this.options.singleFieldNode);
                    }
                }
    
                // Add existing tags from the list, if any.
                if (!addedExistingFromSingleFieldNode) {
                    this.tagList.children('li').each(function() {
                        if (!$(this).hasClass('tagit-new')) {
                            that.createTag($(this).text(), $(this).attr('class'), true);
                            $(this).remove();
                        }
                    });
                }
    
                that.tagInput.focus(function(){
                  that.tagList.addClass('infocus')
                })
    
                that.tagInput.blur(function(){
                  that.tagList.removeClass('infocus')
                })
    
                // Events.
                this.tagInput
                    .keypress(function(event){
    
                        // Comma/Space/Enter are all valid delimiters for new tags,
                        // except when there is an open quote or if setting allowSpaces = true.
                        // Tab will also create a tag, unless the tag input is empty,
                        // in which case it isn't caught.
                        if (
                            event.which === 44 ||
                            event.which === 13 ||
                            event.which === 47 ||
                            (
                                event.which == 32 &&
                                that.options.allowSpaces !== true &&
                                (
                                    $.trim(that.tagInput.val()).replace( /^s*/, '' ).charAt(0) != '"' ||
                                    (
                                        $.trim(that.tagInput.val()).charAt(0) == '"' &&
                                        $.trim(that.tagInput.val()).charAt($.trim(that.tagInput.val()).length - 1) == '"' &&
                                        $.trim(that.tagInput.val()).length - 1 !== 0
                                    )
                                )
                            )
                        ) {
                            // Enter submits the form if there's no text in the input.
                            if (!(event.which === 13 && that.tagInput.val() === '')) {
                                event.preventDefault();
                            }
    
                            // Autocomplete will create its own tag from a selection and close automatically.
                            that.createTag(that._cleanedInput());
                        }
                    })
                    .keydown(function(event) {
    
                      // Backspace is not detected within a keypress, so it must use keydown.
                      if (event.which == $.ui.keyCode.BACKSPACE && that.tagInput.val() === '') {
                          var tag = that._lastTag();
                          if (!that.options.removeConfirmation || tag.hasClass('remove')) {
                              // When backspace is pressed, the last tag is deleted.
                              that.removeTag(tag);
                          } else if (that.options.removeConfirmation) {
                              tag.addClass('remove ui-state-highlight');
                          }
                      } else if (that.options.removeConfirmation) {
                          that._lastTag().removeClass('remove ui-state-highlight');
                      }
    
                      // Comma/Space/Enter are all valid delimiters for new tags,
                      // except when there is an open quote or if setting allowSpaces = true.
                      // Tab will also create a tag, unless the tag input is empty,
                      // in which case it isn't caught.
                      if (
                          (
                            event.which == $.ui.keyCode.TAB &&
                            that.tagInput.val() !== ''
                          ) ) {
    
                          // Autocomplete will create its own tag from a selection and close automatically.
                          if (!that.tagInput.data('autocomplete-open')) {
                              that.createTag(that._cleanedInput());
                          }
                      }
                    }).blur(function(e){
                        // Create a tag when the element loses focus.
                        // If autocomplete is enabled and suggestion was clicked, don't add it.
                        if (!that.tagInput.data('autocomplete-open')) {
                            that.createTag(that._cleanedInput());
                        }
                    });
    
                // Autocomplete.
                if (this.options.availableTags || this.options.tagSource || this.options.autocomplete.source) {
                    var autocompleteOptions = {
                        select: function(event, ui) {
                            that.createTag(ui.item.value);
                            // Preventing the tag input to be updated with the chosen value.
                            return false;
                        }
                    };
                    $.extend(autocompleteOptions, this.options.autocomplete);
    
                    // tagSource is deprecated, but takes precedence here since autocomplete.source is set by default,
                    // while tagSource is left null by default.
                    autocompleteOptions.source = this.options.tagSource || autocompleteOptions.source;
    
                    this.tagInput.autocomplete(autocompleteOptions).bind('autocompleteopen.tagit', function(event, ui) {
                        that.tagInput.data('autocomplete-open', true);
                    }).bind('autocompleteclose.tagit', function(event, ui) {
                        that.tagInput.data('autocomplete-open', false)
                    });
    
                    this.tagInput.autocomplete('widget').addClass('tagit-autocomplete');
                }
            },
    
            destroy: function() {
                $.Widget.prototype.destroy.call(this);
    
                this.element.unbind('.tagit');
                this.tagList.unbind('.tagit');
    
                this.tagInput.removeData('autocomplete-open');
    
                this.tagList.removeClass([
                    'tagit',
                    'ui-widget',
                    'ui-widget-content',
                    'ui-corner-all',
                    'tagit-hidden-field'
                ].join(' '));
    
                if (this.element.is('input')) {
                    this.element.removeClass('tagit-hidden-field');
                    this.tagList.remove();
                } else {
                    this.element.children('li').each(function() {
                        if ($(this).hasClass('tagit-new')) {
                            $(this).remove();
                        } else {
                            $(this).removeClass([
                                'tagit-choice',
                                'ui-widget-content',
                                'ui-state-default',
                                'ui-state-highlight',
                                'ui-corner-all',
                                'remove',
                                'tagit-choice-editable',
                                'tagit-choice-read-only'
                            ].join(' '));
    
                            $(this).text($(this).children('.tagit-label').text());
                        }
                    });
    
                    if (this.singleFieldNode) {
                        this.singleFieldNode.remove();
                    }
                }
    
                return this;
            },
    
            _cleanedInput: function() {
                // Returns the contents of the tag input, cleaned and ready to be passed to createTag
                return $.trim(this.tagInput.val().replace(/^"(.*)"$/, '$1'));
            },
    
            _lastTag: function() {
                return this.tagList.find('.tagit-choice:last:not(.removed)');
            },
    
            _tags: function() {
                return this.tagList.find('.tagit-choice:not(.removed)');
            },
    
            assignedTags: function() {
                // Returns an array of tag string values
                var that = this;
                var tags = [];
                if (this.options.singleField) {
                    tags = $(this.options.singleFieldNode).val().split(this.options.singleFieldDelimiter);
                    if (tags[0] === '') {
                        tags = [];
                    }
                } else {
                    this._tags().each(function() {
                        tags.push(that.tagLabel(this));
                    });
                }
                return tags;
            },
    
            _updateSingleTagsField: function(tags) {
                // Takes a list of tag string values, updates this.options.singleFieldNode.val to the tags delimited by this.options.singleFieldDelimiter
                $(this.options.singleFieldNode).val(tags.join(this.options.singleFieldDelimiter)).trigger('change');
            },
    
            _subtractArray: function(a1, a2) {
                var result = [];
                for (var i = 0; i < a1.length; i++) {
                    if ($.inArray(a1[i], a2) == -1) {
                        result.push(a1[i]);
                    }
                }
                return result;
            },
    
            tagLabel: function(tag) {
                // Returns the tag's string label.
                if (this.options.singleField) {
                    return $(tag).find('.tagit-label:first').text();
                } else {
                    return $(tag).find('input:first').val();
                }
            },
    
            _showAutocomplete: function() {
                this.tagInput.autocomplete('search', '');
            },
    
            _findTagByLabel: function(name) {
                var that = this;
                var tag = null;
                this._tags().each(function(i) {
                    if (that._formatStr(name) == that._formatStr(that.tagLabel(this))) {
                        tag = $(this);
                        return false;
                    }
                });
                return tag;
            },
    
            _isNew: function(name) {
                return !this._findTagByLabel(name);
            },
    
            _formatStr: function(str) {
                if (this.options.caseSensitive) {
                    return str;
                }
                return $.trim(str.toLowerCase());
            },
    
            _effectExists: function(name) {
                return Boolean($.effects && ($.effects[name] || ($.effects.effect && $.effects.effect[name])));
            },
    
            createTag: function(value, additionalClass, duringInitialization) {
                var that = this;
    
                value = $.trim(value);
    
                if(this.options.preprocessTag) {
                    value = this.options.preprocessTag(value);
                }
    
                if (value === '') {
                    return false;
                }
    
                if (!this.options.allowDuplicates && !this._isNew(value)) {
                    var existingTag = this._findTagByLabel(value);
                    if (this._trigger('onTagExists', null, {
                        existingTag: existingTag,
                        duringInitialization: duringInitialization
                    }) !== false) {
                        if (this._effectExists('highlight')) {
                            existingTag.effect('highlight');
                        }
                    }
                    return false;
                }
    
                if (this.options.tagLimit && this._tags().length >= this.options.tagLimit) {
                    this._trigger('onTagLimitExceeded', null, {duringInitialization: duringInitialization});
                    return false;
                }
    
                var label = $(this.options.onTagClicked ? '<a class="tagit-label"></a>' : '<span class="tagit-label"></span>').text(value);
    
                // Create tag.
                var tag = $('<li></li>')
                    .addClass('tagit-choice ui-widget-content ui-state-default ui-corner-all')
                    .addClass(additionalClass)
                    .append(label);
    
                if (this.options.readOnly){
                    tag.addClass('tagit-choice-read-only');
                } else {
                    tag.addClass('tagit-choice-editable');
                    // Button for removing the tag.
                    var removeTagIcon = $('<span></span>')
                        .addClass('ui-icon ui-icon-close');
                    var removeTag = $('<a><span class="text-icon">\xd7</span></a>') // \xd7 is an X
                        .addClass('tagit-close')
                        .append(removeTagIcon)
                        .click(function(e) {
                            // Removes a tag when the little 'x' is clicked.
                            that.removeTag(tag);
                        });
                    tag.append(removeTag);
                }
    
                // Unless options.singleField is set, each tag has a hidden input field inline.
                if (!this.options.singleField) {
                    var escapedValue = label.html();
                    tag.append('<input type="hidden" value="' + escapedValue + '" name="' + this.options.fieldName + '" class="tagit-hidden-field" />');
                }
    
                if (this._trigger('beforeTagAdded', null, {
                    tag: tag,
                    tagLabel: this.tagLabel(tag),
                    duringInitialization: duringInitialization
                }) === false) {
                    return;
                }
    
                if (this.options.singleField) {
                    var tags = this.assignedTags();
                    tags.push(value);
                    this._updateSingleTagsField(tags);
                }
    
                // DEPRECATED.
                this._trigger('onTagAdded', null, tag);
    
                this.tagInput.val('');
    
                // Insert tag.
                this.tagInput.parent().before(tag);
    
                this._trigger('afterTagAdded', null, {
                    tag: tag,
                    tagLabel: this.tagLabel(tag),
                    duringInitialization: duringInitialization
                });
    
                if (this.options.showAutocompleteOnFocus && !duringInitialization) {
                    setTimeout(function () { that._showAutocomplete(); }, 0);
                }
            },
    
            removeTag: function(tag, animate) {
                animate = typeof animate === 'undefined' ? this.options.animate : animate;
    
                tag = $(tag);
    
                // DEPRECATED.
                this._trigger('onTagRemoved', null, tag);
    
                if (this._trigger('beforeTagRemoved', null, {tag: tag, tagLabel: this.tagLabel(tag)}) === false) {
                    return;
                }
    
                if (this.options.singleField) {
                    var tags = this.assignedTags();
                    var removedTagLabel = this.tagLabel(tag);
                    tags = $.grep(tags, function(el){
                        return el != removedTagLabel;
                    });
                    this._updateSingleTagsField(tags);
                }
    
                if (animate) {
                    tag.addClass('removed'); // Excludes this tag from _tags.
                    var hide_args = this._effectExists('blind') ? ['blind', {direction: 'horizontal'}, 'fast'] : ['fast'];
    
                    var thisTag = this;
                    hide_args.push(function() {
                        tag.remove();
                        thisTag._trigger('afterTagRemoved', null, {tag: tag, tagLabel: thisTag.tagLabel(tag)});
                    });
    
                    tag.fadeOut('fast').hide.apply(tag, hide_args).dequeue();
                } else {
                    tag.remove();
                    this._trigger('afterTagRemoved', null, {tag: tag, tagLabel: this.tagLabel(tag)});
                }
    
            },
    
            removeTagByLabel: function(tagLabel, animate) {
                var toRemove = this._findTagByLabel(tagLabel);
                if (!toRemove) {
                    throw "No such tag exists with the name '" + tagLabel + "'";
                }
                this.removeTag(toRemove, animate);
            },
    
            removeAll: function() {
                // Removes all tags.
                var that = this;
                this._tags().each(function(index, tag) {
                    that.removeTag(tag, false);
                });
            }
    
        });
    })(jQuery);
    
    /**
     * Copyright (c) 2007 Ariel Flesler - aflesler ○ gmail • com | https://github.com/flesler
     * Licensed under MIT
     * @author Ariel Flesler
     * @version 2.1.2
     */
    
    ;(function(f){"use strict";"function"===typeof define&&define.amd?define(["jquery"],f):"undefined"!==typeof module&&module.exports?module.exports=f(require("jquery")):f(jQuery)})(function($){"use strict";function n(a){return!a.nodeName||-1!==$.inArray(a.nodeName.toLowerCase(),["iframe","#document","html","body"])}function h(a){return $.isFunction(a)||$.isPlainObject(a)?a:{top:a,left:a}}var p=$.scrollTo=function(a,d,b){return $(window).scrollTo(a,d,b)};p.defaults={axis:"xy",duration:0,limit:!0};$.fn.scrollTo=function(a,d,b){"object"=== typeof d&&(b=d,d=0);"function"===typeof b&&(b={onAfter:b});"max"===a&&(a=9E9);b=$.extend({},p.defaults,b);d=d||b.duration;var u=b.queue&&1<b.axis.length;u&&(d/=2);b.offset=h(b.offset);b.over=h(b.over);return this.each(function(){function k(a){var k=$.extend({},b,{queue:!0,duration:d,complete:a&&function(){a.call(q,e,b)}});r.animate(f,k)}if(null!==a){var l=n(this),q=l?this.contentWindow||window:this,r=$(q),e=a,f={},t;switch(typeof e){case "number":case "string":if(/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(e)){e= h(e);break}e=l?$(e):$(e,q);case "object":if(e.length===0)return;if(e.is||e.style)t=(e=$(e)).offset()}var v=$.isFunction(b.offset)&&b.offset(q,e)||b.offset;$.each(b.axis.split(""),function(a,c){var d="x"===c?"Left":"Top",m=d.toLowerCase(),g="scroll"+d,h=r[g](),n=p.max(q,c);t?(f[g]=t[m]+(l?0:h-r.offset()[m]),b.margin&&(f[g]-=parseInt(e.css("margin"+d),10)||0,f[g]-=parseInt(e.css("border"+d+"Width"),10)||0),f[g]+=v[m]||0,b.over[m]&&(f[g]+=e["x"===c?"width":"height"]()*b.over[m])):(d=e[m],f[g]=d.slice&& "%"===d.slice(-1)?parseFloat(d)/100*n:d);b.limit&&/^\d+$/.test(f[g])&&(f[g]=0>=f[g]?0:Math.min(f[g],n));!a&&1<b.axis.length&&(h===f[g]?f={}:u&&(k(b.onAfterFirst),f={}))});k(b.onAfter)}})};p.max=function(a,d){var b="x"===d?"Width":"Height",h="scroll"+b;if(!n(a))return a[h]-$(a)[b.toLowerCase()]();var b="client"+b,k=a.ownerDocument||a.document,l=k.documentElement,k=k.body;return Math.max(l[h],k[h])-Math.min(l[b],k[b])};$.Tween.propHooks.scrollLeft=$.Tween.propHooks.scrollTop={get:function(a){return $(a.elem)[a.prop]()}, set:function(a){var d=this.get(a);if(a.options.interrupt&&a._last&&a._last!==d)return $(a.elem).stop();var b=Math.round(a.now);d!==b&&($(a.elem)[a.prop](b),a._last=this.get(a))}};return p});
    /**
    * autoNumeric.js
    * @author: Bob Knothe
    * @author: Sokolov Yura aka funny_falcon
    * @version: 1.7.5
    *
    * Created by Robert J. Knothe on 2010-10-25. Please report any bug at http://www.decorplanit.com/plugin/
    * Created by Sokolov Yura on 2010-11-07. http://github.com/funny_falcon
    *
    * Copyright (c) 2011 Robert J. Knothe  http://www.decorplanit.com/plugin/
    * Copyright (c) 2011 Sokolov Yura aka funny_falcon
    *
    * The MIT License (http://www.opensource.org/licenses/mit-license.php)
    *
    * Permission is hereby granted, free of charge, to any person
    * obtaining a copy of this software and associated documentation
    * files (the "Software"), to deal in the Software without
    * restriction, including without limitation the rights to use,
    * copy, modify, merge, publish, distribute, sublicense, and/or sell
    * copies of the Software, and to permit persons to whom the
    * Software is furnished to do so, subject to the following
    * conditions:
    *
    * The above copyright notice and this permission notice shall be
    * included in all copies or substantial portions of the Software.
    *
    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    * OTHER DEALINGS IN THE SOFTWARE.
    */
    
    
    (function ($) {
        /**
        * Cross browser routin for getting selected range/cursor position
        */
        function getElementSelection(that) {
            var position = {};
            if (that.selectionStart === undefined) {
                that.focus();
                var select = document.selection.createRange();
                position.length = select.text.length;
                select.moveStart('character', -that.value.length);
                position.end = select.text.length;
                position.start = position.end - position.length;
            } else {
                position.start = that.selectionStart;
                position.end = that.selectionEnd;
                position.length = position.end - position.start;
            }
            return position;
        }
        /**
        * Cross browser routin for setting selected range/cursor position
        */
        function setElementSelection(that, start, end) {
            if (that.selectionStart === undefined) {
                that.focus();
                var r = that.createTextRange();
                r.collapse(true);
                r.moveEnd('character', end);
                r.moveStart('character', start);
                r.select();
            } else {
                that.selectionStart = start;
                that.selectionEnd = end;
            }
        }
        /**
        * run callbacks in parameters if any
        * any parameter could be a callback:
        * - a function, which invoked with jQuery element, parameters and this parameter name and returns parameter value
        * - a name of function, attached to $.autoNumeric, which called as previous
        * - a css selector recognized by jQuery - value of input is taken as a parameter value
        */
        function runCallbacks($this, io) {
            /**
            * loops through the io object (option array) to find the following
            * k = option name example k=aNum
            * val = option value example val=0123456789
            */
            $.each(io, function (k, val) {
                if (typeof (val) === 'function') {
                    io[k] = val($this, io, k);
                } else if (typeof (val) === 'string') {
                    var kind = val.substr(0, 4);
                    if (kind === 'fun:') {
                        var fun = $.autoNumeric[val.substr(4)];
                        if (typeof (fun) === 'function') {
                            /**
                            * calls the attached function from meta="{aSign:'fun:functionName'}"
                            * example: $autoNumeric.functionName($this, io, optionName);
                            */
                            io[k] = $.autoNumeric[val.substr(4)]($this, io, k);
                        } else {
                            io[k] = null;
                        }
                    } else if (kind === 'css:') {
                        /**
                        * retrieves the value by css selector meta="{mDec:'css:#decimal'}"
                        * example: would assign the value to io[k] = $('#decimal').val();
                        */
                        io[k] = $(val.substr(4)).val();
                    }
                }
            });
        }
        function convertKeyToNumber(io, key) {
            if (typeof (io[key]) === 'string') {
                io[key] *= 1;
            }
        }
        /**
        * Preparing user defined options for further usage
        * merge them with defaults appropriatly
        */
        function autoCode($this, options) {
            var io = $.extend({}, $.fn.autoNumeric.defaults, options);
            if ($.metadata) { /** consider declared metadata on input */
                io = $.extend(io, $this.metadata());
            }
            runCallbacks($this, io);
            var vmax = io.vMax.toString().split('.');
            var vmin = (!io.vMin && io.vMin !== 0) ? [] : io.vMin.toString().split('.');
            convertKeyToNumber(io, 'vMax');
            convertKeyToNumber(io, 'vMin');
            convertKeyToNumber(io, 'mDec');
            io.aNeg = io.vMin < 0 ? '-' : ''; /** set mDec, if not defained by user */
            if (typeof (io.mDec) !== 'number') {
                io.mDec = Math.max((vmax[1] ? vmax[1] : '').length, (vmin[1] ? vmin[1] : '').length);
            } /** set alternative decimal separator key */
            if (io.altDec === null && io.mDec > 0) {
                if (io.aDec === '.' && io.aSep !== ',') {
                    io.altDec = ',';
                } else if (io.aDec === ',' && io.aSep !== '.') {
                    io.altDec = '.';
                }
            } /** cache regexps for autoStrip */
            var aNegReg = io.aNeg ? '([-\\' + io.aNeg + ']?)' : '(-?)';
            io._aNegReg = aNegReg;
            io._skipFirst = new RegExp(aNegReg + '[^-' + (io.aNeg ? '\\' + io.aNeg : '') + '\\' + io.aDec + '\\d]' + '.*?(\\d|\\' + io.aDec + '\\d)');
            io._skipLast = new RegExp('(\\d\\' + io.aDec + '?)[^\\' + io.aDec + '\\d]\\D*$');
            var allowed = (io.aNeg ? io.aNeg : '-') + io.aNum + '\\' + io.aDec;
            if (io.altDec && io.altDec !== io.aSep) {
                allowed += io.altDec;
            }
            io._allowed = new RegExp('[^' + allowed + ']', 'gi');
            io._numReg = new RegExp(aNegReg + '(?:\\' + io.aDec + '?(\\d+\\' + io.aDec + '\\d+)|(\\d*(?:\\' + io.aDec + '\\d*)?))');
            return io;
        }
        /**
        * strip all unwanted characters and leave only a number
        */
        function autoStrip(s, io, strip_zero) {
            if (io.aSign) { /** remove currency sign */
                while (s.indexOf(io.aSign) > -1) {
                    s = s.replace(io.aSign, '');
                }
            }
            s = s.replace(io._skipFirst, '$1$2'); /** first replace anything before digits */
            s = s.replace(io._skipLast, '$1'); /** then replace anything after digits */
            s = s.replace(io._allowed, ''); /** then remove any uninterested characters */
            if (io.altDec) {
                s = s.replace(io.altDec, io.aDec);
            } /** get only number string */
            var m = s.match(io._numReg);
            s = m ? [m[1], m[2], m[3]].join('') : ''; /** strip zero if need */
            if (strip_zero) {
                var strip_reg = '^' + io._aNegReg + '0*(\\d' + (strip_zero === 'leading' ? ')' : '|$)');
                strip_reg = new RegExp(strip_reg);
                s = s.replace(strip_reg, '$1$2');
            }
            return s;
        }
        /**
        * truncate decimal part of a number
        */
        function truncateDecimal(s, aDec, mDec) {
            if (aDec && mDec) {
                var parts = s.split(aDec);
                /** truncate decimal part to satisfying length
                * cause we would round it anyway */
                if (parts[1] && parts[1].length > mDec) {
                    if (mDec > 0) {
                        parts[1] = parts[1].substring(0, mDec);
                        s = parts.join(aDec);
                    } else {
                        s = parts[0];
                    }
                }
            }
            return s;
        }
        /**
        * prepare number string to be converted to real number
        */
        function fixNumber(s, aDec, aNeg) {
            if (aDec && aDec !== '.') {
                s = s.replace(aDec, '.');
            }
            if (aNeg && aNeg !== '-') {
                s = s.replace(aNeg, '-');
            }
            if (!s.match(/\d/)) {
                s += '0';
            }
            return s;
        }
        /**
        * prepare real number to be converted to our format
        */
        function presentNumber(s, aDec, aNeg) {
            if (aNeg && aNeg !== '-') {
                s = s.replace('-', aNeg);
            }
            if (aDec && aDec !== '.') {
                s = s.replace('.', aDec);
            }
            return s;
        }
        /**
        * checking that number satisfy format conditions
        * and lays between io.vMin and io.vMax
        */
        function autoCheck(s, io) {
            s = autoStrip(s, io);
            s = truncateDecimal(s, io.aDec, io.mDec);
            s = fixNumber(s, io.aDec, io.aNeg);
            var value = +s;
            return value >= io.vMin && value <= io.vMax;
        }
        /**
        * private function to check for empty value
        */
        function checkEmpty(iv, io, signOnEmpty) {
            if (iv === '' || iv === io.aNeg) {
                if (io.wEmpty === 'zero') {
                    return iv + '0';
                } else if (io.wEmpty === 'sign' || signOnEmpty) {
                    return iv + io.aSign;
                } else {
                    return iv;
                }
            }
            return null;
        }
        /**
        * private function that formats our number
        */
        function autoGroup(iv, io) {
            iv = autoStrip(iv, io);
            var empty = checkEmpty(iv, io, true);
            if (empty !== null) {
                return empty;
            }
            var digitalGroup = '';
            if (io.dGroup === 2) {
                digitalGroup = /(\d)((\d)(\d{2}?)+)$/;
            } else if (io.dGroup === 4) {
                digitalGroup = /(\d)((\d{4}?)+)$/;
            } else {
                digitalGroup = /(\d)((\d{3}?)+)$/;
            } /** splits the string at the decimal string */
            var ivSplit = iv.split(io.aDec);
            if (io.altDec && ivSplit.length === 1) {
                ivSplit = iv.split(io.altDec);
            } /** assigns the whole number to the a varibale (s) */
            var s = ivSplit[0];
            if (io.aSep) {
                while (digitalGroup.test(s)) { /**  re-inserts the thousand sepparator via a regualer expression */
                    s = s.replace(digitalGroup, '$1' + io.aSep + '$2');
                }
            }
            if (io.mDec !== 0 && ivSplit.length > 1) {
                if (ivSplit[1].length > io.mDec) {
                    ivSplit[1] = ivSplit[1].substring(0, io.mDec);
                } /** joins the whole number with the deciaml value */
                iv = s + io.aDec + ivSplit[1];
            } else { /** if whole numers only */
                iv = s;
            }
            if (io.aSign) {
                var has_aNeg = iv.indexOf(io.aNeg) !== -1;
                iv = iv.replace(io.aNeg, '');
                iv = io.pSign === 'p' ? io.aSign + iv : iv + io.aSign;
                if (has_aNeg) {
                    iv = io.aNeg + iv;
                }
            }
            return iv;
        }
        /**
        * round number after setting by pasting or $().autoNumericSet()
        * private function for round the number
        * please note this handled as text - Javascript math function can return inaccurate values
        * also this offers multiple rounding metods that are not easily accomplished in javascript
        */
        function autoRound(iv, mDec, mRound, aPad) { /** value to string */
            iv = (iv === '') ? '0' : iv.toString();
            var ivRounded = '';
            var i = 0;
            var nSign = '';
            var rDec = (typeof (aPad) === 'boolean' || aPad === null) ? (aPad ? mDec : 0) : +aPad;
            var truncateZeros = function (ivRounded) { /** truncate not needed zeros */
                var regex = rDec === 0 ? (/(\.[1-9]*)0*$/) : rDec === 1 ? (/(\.\d[1-9]*)0*$/) : new RegExp('(\\.\\d{' + rDec + '}[1-9]*)0*$');
                ivRounded = ivRounded.replace(regex, '$1'); /** If there are no decimal places, we don't need a decimal point at the end */
                if (rDec === 0) {
                    ivRounded = ivRounded.replace(/\.$/, '');
                }
                return ivRounded;
            };
            if (iv.charAt(0) === '-') { /** Checks if the iv (input Value)is a negative value */
                nSign = '-'; /** removes the negative sign will be added back later if required */
                iv = iv.replace('-', '');
            } /** prepend a zero if first character is not a digit (then it is likely to be a dot)*/
            if (!iv.match(/^\d/)) {
                iv = '0' + iv;
            } /** determines if the value is zero - if zero no negative sign */
            if (nSign === '-' && +iv === 0) {
                nSign = '';
            } /** trims leading zero's if needed */
            if ((+iv) > 0) {
                iv = iv.replace(/^0*(\d)/, '$1');
            } /** decimal postion as an integer */
            var dPos = iv.lastIndexOf('.'); /** virtual decimal position */
            var vdPos = dPos === -1 ? iv.length - 1 : dPos; /** checks decimal places to determine if rounding is required */
            var cDec = (iv.length - 1) - vdPos; /** check if no rounding is required */
            if (cDec <= mDec) {
                ivRounded = iv; /** check if we need to pad with zeros */
                if (cDec < rDec) {
                    if (dPos === -1) {
                        ivRounded += '.';
                    }
                    while (cDec < rDec) {
                        var zeros = '000000'.substring(0, rDec - cDec);
                        ivRounded += zeros;
                        cDec += zeros.length;
                    }
                } else if (cDec > rDec) {
                    ivRounded = truncateZeros(ivRounded);
                } else if (cDec === 0 && rDec === 0) {
                    ivRounded = ivRounded.replace(/\.$/, '');
                }
                return nSign + ivRounded;
            } /** rounded length of the string after rounding  */
            var rLength = dPos + mDec; /** test round */
            var tRound = +iv.charAt(rLength + 1);
            var ivArray = iv.substring(0, rLength + 1).split('');
            var odd = (iv.charAt(rLength) === '.') ? (iv.charAt(rLength - 1) % 2) : (iv.charAt(rLength) % 2);
            if ((tRound > 4 && mRound === 'S') || (tRound > 4 && mRound === 'A' && nSign === '') || (tRound > 5 && mRound === 'A' && nSign === '-') || (tRound > 5 && mRound === 's') || (tRound > 5 && mRound === 'a' && nSign === '') || (tRound > 4 && mRound === 'a' && nSign === '-') || (tRound > 5 && mRound === 'B') || (tRound === 5 && mRound === 'B' && odd === 1) || (tRound > 0 && mRound === 'C' && nSign === '') || (tRound > 0 && mRound === 'F' && nSign === '-') || (tRound > 0 && mRound === 'U')) {
                /** Round up the last digit if required, and continue until no more 9's are found */
                for (i = (ivArray.length - 1); i >= 0; i -= 1) {
                    if (ivArray[i] !== '.') {
                        ivArray[i] = +ivArray[i] + 1;
                        if (ivArray[i] < 10) {
                            break;
                        } else if (i > 0) {
                            ivArray[i] = '0';
                        }
                    }
                }
            } /** Reconstruct the string, converting any 10's to 0's */
            ivArray = ivArray.slice(0, rLength + 1);
            ivRounded = truncateZeros(ivArray.join('')); /** return rounded value */
            return nSign + ivRounded;
        }
        /**
        * Holder object for field properties
        */
        function autoNumericHolder(that, options) {
            this.options = options;
            this.that = that;
            this.$that = $(that);
            this.formatted = false;
            this.io = autoCode(this.$that, this.options);
            this.value = that.value;
        }
        autoNumericHolder.prototype = {
            init: function (e) {
                this.value = this.that.value;
                this.io = autoCode(this.$that, this.options);
                this.ctrlKey = e.ctrlKey;
                this.cmdKey = e.metaKey;
                this.shiftKey = e.shiftKey;
                this.selection = getElementSelection(this.that); /** keypress event overwrites meaningfull value of e.keyCode */
                if (e.type === 'keydown' || e.type === 'keyup') {
                    this.kdCode = e.keyCode;
                }
                this.which = e.which;
                this.processed = false;
                this.formatted = false;
            },
            setSelection: function (start, end, setReal) {
                start = Math.max(start, 0);
                end = Math.min(end, this.that.value.length);
                this.selection = {
                    start: start,
                    end: end,
                    length: end - start
                };
                if (setReal === undefined || setReal) {
                    setElementSelection(this.that, start, end);
                }
            },
            setPosition: function (pos, setReal) {
                this.setSelection(pos, pos, setReal);
            },
            getBeforeAfter: function () {
                var value = this.value;
                var left = value.substring(0, this.selection.start);
                var right = value.substring(this.selection.end, value.length);
                return [left, right];
            },
            getBeforeAfterStriped: function () {
                var parts = this.getBeforeAfter();
                parts[0] = autoStrip(parts[0], this.io);
                parts[1] = autoStrip(parts[1], this.io);
                return parts;
            },
            /**
            * strip parts from excess characters and leading zeroes
            */
            normalizeParts: function (left, right) {
                var io = this.io;
                right = autoStrip(right, io); /** if right is not empty and first character is not aDec, */
                /** we could strip all zeros, otherwise only leading */
                var strip = right.match(/^\d/) ? true : 'leading';
                left = autoStrip(left, io, strip); /** strip leading zeros from right part if left part has no digits */
                if ((left === '' || left === io.aNeg)) {
                    if (right > '') {
                        right = right.replace(/^0*(\d)/, '$1');
                    }
                }
                var new_value = left + right; /** insert zero if has leading dot */
                if (io.aDec) {
                    var m = new_value.match(new RegExp('^' + io._aNegReg + '\\' + io.aDec));
                    if (m) {
                        left = left.replace(m[1], m[1] + '0');
                        new_value = left + right;
                    }
                } /** insert zero if number is empty and io.wEmpty == 'zero' */
                if (io.wEmpty === 'zero' && (new_value === io.aNeg || new_value === '')) {
                    left += '0';
                }
                return [left, right];
            },
            /**
            * set part of number to value keeping position of cursor
            */
            setValueParts: function (left, right) {
                var io = this.io;
                var parts = this.normalizeParts(left, right);
                var new_value = parts.join('');
                var position = parts[0].length;
                if (autoCheck(new_value, io)) {
                    new_value = truncateDecimal(new_value, io.aDec, io.mDec);
                    if (position > new_value.length) {
                        position = new_value.length;
                    }
                    this.value = new_value;
                    this.setPosition(position, false);
                    return true;
                }
                return false;
            },
            /**
            * helper function for expandSelectionOnSign
            * returns sign position of a formatted value
            */
            signPosition: function () {
                var io = this.io, aSign = io.aSign, that = this.that;
                if (aSign) {
                    var aSignLen = aSign.length;
                    if (io.pSign === 'p') {
                        var hasNeg = io.aNeg && that.value && that.value.charAt(0) === io.aNeg;
                        return hasNeg ? [1, aSignLen + 1] : [0, aSignLen];
                    } else {
                        var valueLen = that.value.length;
                        return [valueLen - aSignLen, valueLen];
                    }
                } else {
                    return [1000, -1];
                }
            },
            /**
            * expands selection to cover whole sign
            * prevents partial deletion/copying/overwritting of a sign
            */
            expandSelectionOnSign: function (setReal) {
                var sign_position = this.signPosition();
                var selection = this.selection;
                if (selection.start < sign_position[1] && selection.end > sign_position[0]) { /** if selection catches something except sign and catches only space from sign */
                    if ((selection.start < sign_position[0] || selection.end > sign_position[1]) && this.value.substring(Math.max(selection.start, sign_position[0]), Math.min(selection.end, sign_position[1])).match(/^\s*$/)) { /** then select without empty space */
                        if (selection.start < sign_position[0]) {
                            this.setSelection(selection.start, sign_position[0], setReal);
                        } else {
                            this.setSelection(sign_position[1], selection.end, setReal);
                        }
                    } else { /** else select with whole sign */
                        this.setSelection(Math.min(selection.start, sign_position[0]), Math.max(selection.end, sign_position[1]), setReal);
                    }
                }
            },
            /**
            * try to strip pasted value to digits
            */
            checkPaste: function () {
                if (this.valuePartsBeforePaste !== undefined) {
                    var parts = this.getBeforeAfter();
                    var oldParts = this.valuePartsBeforePaste;
                    delete this.valuePartsBeforePaste; /* try to strip pasted value first */
                    parts[0] = parts[0].substr(0, oldParts[0].length) + autoStrip(parts[0].substr(oldParts[0].length), this.io);
                    if (!this.setValueParts(parts[0], parts[1])) {
                        this.value = oldParts.join('');
                        this.setPosition(oldParts[0].length, false);
                    }
                }
            },
            /**
            * process pasting, cursor moving and skipping of not interesting keys
            * if returns true, futher processing is not performed
            */
            skipAllways: function (e) {
                var kdCode = this.kdCode, which = this.which, ctrlKey = this.ctrlKey, cmdKey = this.cmdKey; /** catch the ctrl up on ctrl-v */
                if (kdCode === 17 && e.type === 'keyup' && this.valuePartsBeforePaste !== undefined) {
                    this.checkPaste();
                    return false;
                }
                /** codes are taken from http://www.cambiaresearch.com/c4/702b8cd1-e5b0-42e6-83ac-25f0306e3e25/Javascript-Char-Codes-Key-Codes.aspx
                * skip Fx keys, windows keys, other special keys */
                if ((kdCode >= 112 && kdCode <= 123) || (kdCode >= 91 && kdCode <= 93) || (kdCode >= 9 && kdCode <= 31) || (kdCode < 8 && (which === 0 || which === kdCode)) || kdCode === 144 || kdCode === 145 || kdCode === 45) {
                    return true;
                } /** if select all (a=65)*/
                if ((ctrlKey || cmdKey) && kdCode === 65) {
                    return true;
                } /** if copy (c=67) paste (v=86) or cut (x=88) */
                if ((ctrlKey || cmdKey) && (kdCode === 67 || kdCode === 86 || kdCode === 88)) { /** replace or cut whole sign */
                    if (e.type === 'keydown') {
                        this.expandSelectionOnSign();
                    } /** try to prevent wrong paste */
                    if (kdCode === 86) {
                        if (e.type === 'keydown' || e.type === 'keypress') {
                            if (this.valuePartsBeforePaste === undefined) {
                                this.valuePartsBeforePaste = this.getBeforeAfter();
                            }
                        } else {
                            this.checkPaste();
                        }
                    }
                    return e.type === 'keydown' || e.type === 'keypress' || kdCode === 67;
                }
                if (ctrlKey || cmdKey) {
                    return true;
                }
                if (kdCode === 37 || kdCode === 39) { /** jump over thousand separator */
                    var aSep = this.io.aSep, start = this.selection.start, value = this.that.value;
                    if (e.type === 'keydown' && aSep && !this.shiftKey) {
                        if (kdCode === 37 && value.charAt(start - 2) === aSep) {
                            this.setPosition(start - 1);
                        } else if (kdCode === 39 && value.charAt(start) === aSep) {
                            this.setPosition(start + 1);
                        }
                    }
                    return true;
                }
                if (kdCode >= 34 && kdCode <= 40) {
                    return true;
                }
                return false;
            },
            /**
            * process deletion of characters alert
            * returns true if processing performed
            */
            processAllways: function () {
                var parts; /** process backspace or delete */
                if (this.kdCode === 8 || this.kdCode === 46) {
                    if (!this.selection.length) {
                        parts = this.getBeforeAfterStriped();
                        if (this.kdCode === 8) {
                            parts[0] = parts[0].substring(0, parts[0].length - 1);
                        } else {
                            parts[1] = parts[1].substring(1, parts[1].length);
                        }
                        this.setValueParts(parts[0], parts[1]);
                    } else {
                        this.expandSelectionOnSign(false);
                        parts = this.getBeforeAfterStriped();
                        this.setValueParts(parts[0], parts[1]);
                    }
                    return true;
                }
                return false;
            },
            /**
            * process insertion of characters
            * returns true if processing performed
            */
            processKeypress: function () {
                var io = this.io;
                var cCode = String.fromCharCode(this.which);
                var parts = this.getBeforeAfterStriped();
                var left = parts[0], right = parts[1]; /** start rules when the decimal charactor key is pressed */
                /** always use numeric pad dot to insert decimal separator */
                if (cCode === io.aDec || (io.altDec && cCode === io.altDec) || ((cCode === '.' || cCode === ',') && this.kdCode === 110)) { /** do not allow decimal character if no decimal part allowed */
                    if (!io.mDec || !io.aDec) {
                        return true;
                    } /** do not allow decimal character before aNeg character */
                    if (io.aNeg && right.indexOf(io.aNeg) > -1) {
                        return true;
                    } /** do not allow decimal character if other decimal character present */
                    if (left.indexOf(io.aDec) > -1) {
                        return true;
                    }
                    if (right.indexOf(io.aDec) > 0) {
                        return true;
                    }
                    if (right.indexOf(io.aDec) === 0) {
                        right = right.substr(1);
                    }
                    this.setValueParts(left + io.aDec, right);
                    return true;
                } /** start rule on negative sign */
                if (cCode === '-' || cCode === '+') { /** prevent minus if not allowed */
                    if (!io.aNeg) {
                        return true;
                    } /** carret is always after minus */
                    if (left === '' && right.indexOf(io.aNeg) > -1) {
                        left = io.aNeg;
                        right = right.substring(1, right.length);
                    } /** change sign of number, remove part if should */
                    if (left.charAt(0) === io.aNeg) {
                        left = left.substring(1, left.length);
                    } else {
                        left = (cCode === '-') ? io.aNeg + left : left;
                    }
                    this.setValueParts(left, right);
                    return true;
                } /** digits */
                if (cCode >= '0' && cCode <= '9') { /** if try to insert digit before minus */
                    if (io.aNeg && left === '' && right.indexOf(io.aNeg) > -1) {
                        left = io.aNeg;
                        right = right.substring(1, right.length);
                    }
                    this.setValueParts(left + cCode, right);
                    return true;
                } /** prevent any other character */
                return true;
            },
            /**
            * formatting of just processed value with keeping of cursor position
            */
            formatQuick: function () {
                var io = this.io;
                var parts = this.getBeforeAfterStriped();
                var value = autoGroup(this.value, this.io);
                var position = value.length;
                if (value) {
                    /** prepare regexp which searches for cursor position from unformatted left part */
                    var left_ar = parts[0].split('');
                    var i;
                    for (i = 0; i < left_ar.length; i += 1) { /** thanks Peter Kovari */
                        if (!left_ar[i].match('\\d')) {
                            left_ar[i] = '\\' + left_ar[i];
                        }
                    }
                    var leftReg = new RegExp('^.*?' + left_ar.join('.*?'));
                    /** search cursor position in formatted value */
                    var newLeft = value.match(leftReg);
                    if (newLeft) {
                        position = newLeft[0].length;
                        /** if we are just before sign which is in prefix position */
                        if (((position === 0 && value.charAt(0) !== io.aNeg) || (position === 1 && value.charAt(0) === io.aNeg)) && io.aSign && io.pSign === 'p') {
                            /** place carret after prefix sign */
                            position = this.io.aSign.length + (value.charAt(0) === '-' ? 1 : 0);
                        }
                    } else if (io.aSign && io.pSign === 's') {
                        /** if we could not find a place for cursor and have a sign as a suffix */
                        /** place carret before suffix currency sign */
                        position -= io.aSign.length;
                    }
                }
                this.that.value = value;
                this.setPosition(position);
                this.formatted = true;
            }
        };
        function getData($that) {
            var data = $that.data('autoNumeric');
            if (!data) {
                data = {};
                $that.data('autoNumeric', data);
            }
            return data;
        }
        function getHolder($that, options) {
            var data = getData($that);
            var holder = data.holder;
            if (holder === undefined && options) {
                holder = new autoNumericHolder($that.get(0), options);
                data.holder = holder;
            }
            return holder;
        }
        function getOptions($that) {
            var data = $that.data('autoNumeric');
            if (data && data.holder) {
                return data.holder.options;
            }
            return {};
        }
        function onInit(options) {
            options = options || {};
            var iv = $(this), holder = getHolder(iv, options);
            if (holder.io.aForm && (this.value || holder.io.wEmpty !== 'empty')) {
                iv.autoNumericSet(iv.autoNumericGet(options), options);
            }
        }
        function onKeyDown(e) {
            var iv = $(e.target), holder = getHolder(iv);
            holder.init(e);
            if (holder.skipAllways(e)) {
                holder.processed = true;
                return true;
            }
            if (holder.processAllways()) {
                holder.processed = true;
                holder.formatQuick();
                e.preventDefault();
                return false;
            } else {
                holder.formatted = false;
            }
            return true;
        }
        function onKeyPress(e) {
            var iv = $(e.target), holder = getHolder(iv);
            var processed = holder.processed;
            holder.init(e);
            if (holder.skipAllways(e)) {
                return true;
            }
            if (processed) {
                e.preventDefault();
                return false;
            }
            if (holder.processAllways() || holder.processKeypress()) {
                holder.formatQuick();
                e.preventDefault();
                return false;
            } else {
                holder.formatted = false;
            }
        }
        function onKeyUp(e) {
            var iv = $(e.target), holder = getHolder(iv);
            holder.init(e);
            var skip = holder.skipAllways(e);
            holder.kdCode = 0;
            delete holder.valuePartsBeforePaste;
            if (skip) {
                return true;
            }
            if (this.value === '') {
                return true;
            }
            if (!holder.formatted) {
                holder.formatQuick();
            }
        }
        function onFocusIn(e) {
            var iv = $(e.target), holder = getHolder(iv);
            holder.inVal = iv.val();
            var onempty = checkEmpty(holder.inVal, holder.io, true);
            if (onempty !== null) {
                iv.val(onempty);
            }
        }
        /** start change - thanks to Javier P. corrected the inline onChange event  added focusout version 1.55*/
        function onFocusOut(e) {
            var iv = $(e.target), holder = getHolder(iv);
            var io = holder.io, value = iv.val(), origValue = value;
            if (value !== '') {
                value = autoStrip(value, io);
                if (checkEmpty(value, io) === null && autoCheck(value, io)) {
                    value = fixNumber(value, io.aDec, io.aNeg);
                    value = autoRound(value, io.mDec, io.mRound, io.aPad);
                    value = presentNumber(value, io.aDec, io.aNeg);
                } else {
                    value = '';
                }
            }
            var groupedValue = checkEmpty(value, io, false);
            if (groupedValue === null) {
                groupedValue = autoGroup(value, io);
            }
            if (groupedValue !== origValue) {
                iv.val(groupedValue);
            }
            if (groupedValue !== holder.inVal) {
                iv.change();
                delete holder.inVal;
            }
        }
        $.fn.autoNumeric = function (options) {
            return this.each(function () {
                onInit.call(this, options);
            }).unbind('.autoNumeric').bind({
                'keydown.autoNumeric': onKeyDown,
                'keypress.autoNumeric': onKeyPress,
                'keyup.autoNumeric': onKeyUp,
                'focusin.autoNumeric': onFocusIn,
                'focusout.autoNumeric': onFocusOut
            });
        };
        /** thanks to Anthony & Evan C */
        function autoGet(obj) {
            if (typeof (obj) === 'string') {
                obj = obj.replace(/\[/g, "\\[").replace(/\]/g, "\\]");
                obj = '#' + obj.replace(/(:|\.)/g, '\\$1');
            }
            return $(obj);
        }
        $.autoNumeric = {};
        /**
        * public function that stripes the format and converts decimal seperator to a period
        * as of 1.7.2 `options` argument is deprecated, options are taken from initializer
        */
        $.autoNumeric.Strip = function (ii) {
            var $that = autoGet(ii);
            var options = getOptions($that);
            if (arguments[1] && typeof (arguments[1]) === 'object') {
                options = $.extend({}, options, arguments[1]);
            }
            var io = autoCode($that, options);
            var iv = autoGet(ii).val();
            iv = autoStrip(iv, io);
            iv = fixNumber(iv, io.aDec, io.aNeg);
            if (+iv === 0) {
                iv = '0';
            }
            return iv;
        };
        /**
        * public function that recieves a numeric string and formats to the target input field
        * as of 1.7.2 `options` argument is deprecated, options are taken from initializer
        */
        $.autoNumeric.Format = function (ii, iv) {
            var $that = autoGet(ii);
            var options = getOptions($that);
            if (arguments[2] && typeof (arguments[2]) === 'object') {
                options = $.extend({}, options, arguments[2]);
            }
            iv.toString();
            var io = autoCode($that, options);
            iv = autoRound(iv, io.mDec, io.mRound, io.aPad);
            iv = presentNumber(iv, io.aDec, io.aNeg);
            if (!autoCheck(iv, io)) {
                iv = autoRound('', io.mDec, io.mRound, io.aPad);
            }
            return autoGroup(iv, io);
        };
        /**
        * get a number (as a number) from a field.
        * as of 1.7.2 argument is deprecated, options are taken from initializer
        * $('input#my').autoNumericGet()
        */
        $.fn.autoNumericGet = function () {
            if (arguments[0]) {
                return $.autoNumeric.Strip(this, arguments[0]);
            }
            return $.autoNumeric.Strip(this);
        };
        /**
        * set a number to a field, formatting it appropriatly
        * as of 1.7.2 second argument is deprecated, options are taken from initializer
        * $('input#my').autoNumericSet(2.423)
        */
        $.fn.autoNumericSet = function (iv) {
            if (arguments[1]) {
                return this.val($.autoNumeric.Format(this, iv, arguments[1]));
            }
            return this.val($.fn.autoNumeric.Format(this, iv));
        };
        /**
        * plugin defaults
        */
        $.autoNumeric.defaults = {
            /**  allowed  numeric values
            * please do not modify
            */
            aNum: '0123456789',
            /** allowed thousand separator characters
            * comma = ','
            * period "full stop" = '.'
            * apostrophe is escaped = '\''
            * space = ' '
            * none = ''
            * NOTE: do not use numeric characters
            */
            aSep: ',',
            /** digital grouping for the thousand separator used in Format
            * dGroup: '2', results in 99,99,99,999 common in India
            * dGroup: '3', results in 999,999,999 default
            * dGroup: '4', results in 9999,9999,9999 used in some Asian countries
            */
            dGroup: '3',
            /** allowed decimal separator characters
            * period "full stop" = '.'
            * comma = ','
            */
            aDec: '.',
            /** allow to declare alternative decimal separator which is automatically replaced by aDec
            * developed for countries the use a comma ',' as the decimal character
            * and have keyboards\numeric pads that have a period 'full stop' as the decimal characters (Spain is an example)
            */
            altDec: null,
            /** allowed currency symbol
            * Must be in quotes aSign: '$',
            */
            aSign: '',
            /** placement of currency sign
            * for prefix  pSign: 'p',
            * for suffix pSign: 's',
            */
            pSign: 'p',
            /** maximum possible value
            * value must be enclosed in quotes and use the period for the decimal point
            * value must be larger than vMin
            */
            vMax: '999999999.99',
            /** minimum possible value
            * value must be enclosed in quotes and use the period for the decimal point
            * value must be smaller than vMax
            */
            vMin: '0.00',
            /** max number of decimal places = used to overide deciaml places set by the vMin & vMax values
            * value must be enclosed in quotes example mDec: '3',
            * This can also set the value via a call back function mDec: 'css:#
            */
            mDec: null,
            /** method used for rounding
            * mRound: 'S', Round-Half-Up Symmetric (default)
            * mRound: 'A', Round-Half-Up Asymmetric
            * mRound: 's', Round-Half-Down Symmetric (lower case s)
            * mRound: 'a', Round-Half-Down Asymmetric (lower case a)
            * mRound: 'B', Round-Half-Even "Bankers Rounding"
            * mRound: 'U', Round Up "Round-Away-From-Zero"
            * mRound: 'D', Round Down "Round-Toward-Zero" - same as trancate
            * mRound: 'C', Round to Ceiling "Toward Positive Infinity"
            * mRound: 'F', Round to Floor "Toward Negative Infinity"
            */
            mRound: 'S',
            /** controls decimal padding
            * aPad: true - always Pad decimals with zeros
            * aPad: false - does not pad with zeros.
            * aPad: `some number` - pad decimals with zero to number different from mDec
            * thanks to Jonas Johansson for the suggestion
            */
            aPad: true,
            /** Displayed on empty string
            * wEmpty: 'empty', - input can be blank
            * wEmpty: 'zero', - displays zero
            * wEmpty: 'sign', - displays the currency sign
            */
            wEmpty: 'empty',
            /** atomatically format value "###########.##" in form
            * Please note this is a little buggy due to how each browser handles refresh
            * use with caution
            */
            aForm: false
        }; /** deprecated way to access defaults and helper functions */
        $.fn.autoNumeric.defaults = $.autoNumeric.defaults;
        $.fn.autoNumeric.Strip = $.autoNumeric.Strip;
        $.fn.autoNumeric.Format = $.autoNumeric.Format;
    })(jQuery);
    $(document).on('click', '.new_dropdown .handler', function () {
      var handler = $(this)
      var dropdown = handler.closest('.new_dropdown')
    
      $('.new_dropdown').removeClass('open')
    
      dropdown.addClass('open')
    
      $(document).one('click', function () {
        dropdown.removeClass('open')
      })
      return false
    })
    ;
    /*
      Redactor 10.2.3
      Updated: August 15, 2015
    
      http://imperavi.com/redactor/
    
      Copyright (c) 2009-2015, Imperavi LLC.
      License: http://imperavi.com/redactor/license/
    
      Usage: $('#content').redactor();
    */
    
    
    (function($)
    {
    
      'use strict';
    
      if (!Function.prototype.bind)
      {
        Function.prototype.bind = function(scope)
        {
          var fn = this;
          return function()
          {
            return fn.apply(scope);
          };
        };
      }
    
      var uuid = 0;
    
      // Plugin
      $.fn.redactor = function(options)
      {
        var val = [];
        var args = Array.prototype.slice.call(arguments, 1);
    
        if (typeof options === 'string')
        {
          this.each(function()
          {
            var instance = $.data(this, 'redactor');
            var func;
    
            if (options.search(/\./) != '-1')
            {
              func = options.split('.');
              if (typeof instance[func[0]] != 'undefined')
              {
                func = instance[func[0]][func[1]];
              }
            }
            else
            {
              func = instance[options];
            }
    
            if (typeof instance !== 'undefined' && $.isFunction(func))
            {
              var methodVal = func.apply(instance, args);
              if (methodVal !== undefined && methodVal !== instance)
              {
                val.push(methodVal);
              }
            }
            else
            {
              $.error('No such method "' + options + '" for Redactor');
            }
          });
        }
        else
        {
          this.each(function()
          {
            $.data(this, 'redactor', {});
            $.data(this, 'redactor', Redactor(this, options));
          });
        }
    
        if (val.length === 0) return this;
        else if (val.length === 1) return val[0];
        else return val;
    
      };
    
      // Initialization
      function Redactor(el, options)
      {
        return new Redactor.prototype.init(el, options);
      }
    
      // Functionality
      $.Redactor = Redactor;
      $.Redactor.VERSION = '10.2.3';
      $.Redactor.modules = ['alignment', 'autosave', 'block', 'buffer', 'build', 'button',
                  'caret', 'clean', 'code', 'core', 'dropdown', 'file', 'focus',
                  'image', 'indent', 'inline', 'insert', 'keydown', 'keyup',
                  'lang', 'line', 'link', 'linkify', 'list', 'modal', 'observe', 'paragraphize',
                  'paste', 'placeholder', 'progress', 'selection', 'shortcuts',
                  'tabifier', 'tidy',  'toolbar', 'upload', 'utils'];
    
      $.Redactor.opts = {
    
        // settings
        lang: 'en',
        direction: 'ltr', // ltr or rtl
    
        plugins: false, // array
    
        focus: false,
        focusEnd: false,
    
        placeholder: false,
    
        visual: true,
        tabindex: false,
    
        minHeight: false,
        maxHeight: false,
    
        linebreaks: false,
        replaceDivs: true,
        paragraphize: true,
        cleanStyleOnEnter: false,
        enterKey: true,
    
        cleanOnPaste: true,
        cleanSpaces: true,
        pastePlainText: false,
    
        autosave: false, // false or url
        autosaveName: false,
        autosaveInterval: 60, // seconds
        autosaveOnChange: false,
        autosaveFields: false,
    
        linkTooltip: true,
        linkProtocol: 'http',
        linkNofollow: false,
        linkSize: 50,
    
        imageEditable: true,
        imageLink: true,
        imagePosition: true,
        imageFloatMargin: '10px',
        imageResizable: true,
    
        imageUpload: null,
        imageUploadParam: 'file',
    
        uploadImageField: false,
    
        dragImageUpload: true,
    
        fileUpload: null,
        fileUploadParam: 'file',
    
        dragFileUpload: true,
    
        s3: false,
    
        convertLinks: true,
        convertUrlLinks: true,
        convertImageLinks: true,
        convertVideoLinks: true,
    
        preSpaces: 4, // or false
        tabAsSpaces: false, // true or number of spaces
        tabKey: true,
    
        scrollTarget: false,
    
        toolbar: true,
        toolbarFixed: true,
        toolbarFixedTarget: document,
        toolbarFixedTopOffset: 0, // pixels
        toolbarExternal: false, // ID selector
        toolbarOverflow: false,
    
        source: true,
        buttons: ['html', 'formatting', 'bold', 'italic', 'deleted', 'unorderedlist', 'orderedlist',
              'outdent', 'indent', 'image', 'file', 'link', 'alignment', 'horizontalrule'], // + 'underline'
    
        buttonsHide: [],
        buttonsHideOnMobile: [],
    
        formatting: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        formattingAdd: false,
    
        tabifier: true,
    
        deniedTags: ['script', 'style'],
        allowedTags: false, // or array
    
        paragraphizeBlocks: ['table', 'div', 'pre', 'form', 'ul', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'dl', 'blockquote', 'figcaption',
                  'address', 'section', 'header', 'footer', 'aside', 'article', 'object', 'style', 'script', 'iframe', 'select', 'input', 'textarea',
                  'button', 'option', 'map', 'area', 'math', 'hr', 'fieldset', 'legend', 'hgroup', 'nav', 'figure', 'details', 'menu', 'summary', 'p'],
    
        removeComments: false,
        replaceTags: [
          ['strike', 'del'],
          ['b', 'strong']
        ],
        replaceStyles: [
                ['font-weight:\\s?bold', "strong"],
                ['font-style:\\s?italic', "em"],
                ['text-decoration:\\s?underline', "u"],
                ['text-decoration:\\s?line-through', 'del']
            ],
            removeDataAttr: false,
    
        removeAttr: false, // or multi array
        allowedAttr: false, // or multi array
    
        removeWithoutAttr: ['span'], // or false
        removeEmpty: ['p'], // or false;
    
        activeButtons: ['deleted', 'italic', 'bold', 'underline', 'unorderedlist', 'orderedlist',
                'alignleft', 'aligncenter', 'alignright', 'justify'],
        activeButtonsStates: {
          b: 'bold',
          strong: 'bold',
          i: 'italic',
          em: 'italic',
          del: 'deleted',
          strike: 'deleted',
          ul: 'unorderedlist',
          ol: 'orderedlist',
          u: 'underline'
        },
    
        shortcuts: {
          'ctrl+shift+m, meta+shift+m': { func: 'inline.removeFormat' },
          'ctrl+b, meta+b': { func: 'inline.format', params: ['bold'] },
          'ctrl+i, meta+i': { func: 'inline.format', params: ['italic'] },
          'ctrl+h, meta+h': { func: 'inline.format', params: ['superscript'] },
          'ctrl+l, meta+l': { func: 'inline.format', params: ['subscript'] },
          'ctrl+k, meta+k': { func: 'link.show' },
          'ctrl+shift+7':   { func: 'list.toggle', params: ['orderedlist'] },
          'ctrl+shift+8':   { func: 'list.toggle', params: ['unorderedlist'] }
        },
        shortcutsAdd: false,
    
        // private
        buffer: [],
        rebuffer: [],
        emptyHtml: '<p>&#x200b;</p>',
        invisibleSpace: '&#x200b;',
        imageTypes: ['image/png', 'image/jpeg', 'image/gif'],
        indentValue: 20,
        verifiedTags:     ['a', 'img', 'b', 'strong', 'sub', 'sup', 'i', 'em', 'u', 'small', 'strike', 'del', 'cite', 'ul', 'ol', 'li'], // and for span tag special rule
        inlineTags:     ['strong', 'b', 'u', 'em', 'i', 'code', 'del', 'ins', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small'],
        alignmentTags:    ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6',  'DL', 'DT', 'DD', 'DIV', 'TD', 'BLOCKQUOTE', 'OUTPUT', 'FIGCAPTION', 'ADDRESS', 'SECTION', 'HEADER', 'FOOTER', 'ASIDE', 'ARTICLE'],
        blockLevelElements: ['PRE', 'UL', 'OL', 'LI'],
        highContrast: false,
        observe: {
          dropdowns: []
        },
    
        // lang
        langs: {
          en: {
            html: 'HTML',
            video: 'Insert Video',
            image: 'Insert Image',
            table: 'Table',
            link: 'Link',
            link_insert: 'Insert link',
            link_edit: 'Edit link',
            unlink: 'Unlink',
            formatting: 'Formatting',
            paragraph: 'Normal text',
            quote: 'Quote',
            code: 'Code',
            header1: 'Header 1',
            header2: 'Header 2',
            header3: 'Header 3',
            header4: 'Header 4',
            header5: 'Header 5',
            bold: 'Bold',
            italic: 'Italic',
            fontcolor: 'Font Color',
            backcolor: 'Back Color',
            unorderedlist: 'Unordered List',
            orderedlist: 'Ordered List',
            outdent: 'Outdent',
            indent: 'Indent',
            cancel: 'Cancel',
            insert: 'Insert',
            save: 'Save',
            _delete: 'Delete',
            insert_table: 'Insert Table',
            insert_row_above: 'Add Row Above',
            insert_row_below: 'Add Row Below',
            insert_column_left: 'Add Column Left',
            insert_column_right: 'Add Column Right',
            delete_column: 'Delete Column',
            delete_row: 'Delete Row',
            delete_table: 'Delete Table',
            rows: 'Rows',
            columns: 'Columns',
            add_head: 'Add Head',
            delete_head: 'Delete Head',
            title: 'Title',
            image_position: 'Position',
            none: 'None',
            left: 'Left',
            right: 'Right',
            center: 'Center',
            image_web_link: 'Image Web Link',
            text: 'Text',
            mailto: 'Email',
            web: 'URL',
            video_html_code: 'Video Embed Code or Youtube/Vimeo Link',
            file: 'Insert File',
            upload: 'Upload',
            download: 'Download',
            choose: 'Choose',
            or_choose: 'Or choose',
            drop_file_here: 'Drop file here',
            align_left: 'Align text to the left',
            align_center: 'Center text',
            align_right: 'Align text to the right',
            align_justify: 'Justify text',
            horizontalrule: 'Insert Horizontal Rule',
            deleted: 'Deleted',
            anchor: 'Anchor',
            link_new_tab: 'Open link in new tab',
            underline: 'Underline',
            alignment: 'Alignment',
            filename: 'Name (optional)',
            edit: 'Edit',
            upload_label: 'Drop file here or '
          }
        },
    
        linkify: {
          regexps: {
            youtube: /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube\.com\S*[^\w\-\s])([\w\-]{11})(?=[^\w\-]|$)(?![?=&+%\w.\-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig,
            vimeo: /https?:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/,
            image: /((https?|www)[^\s]+\.)(jpe?g|png|gif)(\?[^\s-]+)?/ig,
            url: /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/ig,
          }
        },
    
        codemirror: false
      };
    
      // Functionality
      Redactor.fn = $.Redactor.prototype = {
    
        keyCode: {
          BACKSPACE: 8,
          DELETE: 46,
          UP: 38,
          DOWN: 40,
          ENTER: 13,
          SPACE: 32,
          ESC: 27,
          TAB: 9,
          CTRL: 17,
          META: 91,
          SHIFT: 16,
          ALT: 18,
          RIGHT: 39,
          LEFT: 37,
          LEFT_WIN: 91
        },
    
        // Initialization
        init: function(el, options)
        {
          this.$element = $(el);
          this.uuid = uuid++;
    
          // if paste event detected = true
          this.rtePaste = false;
          this.$pasteBox = false;
    
          this.loadOptions(options);
          this.loadModules();
    
          // formatting storage
          this.formatting = {};
    
          // block level tags
          $.merge(this.opts.blockLevelElements, this.opts.alignmentTags);
          this.reIsBlock = new RegExp('^(' + this.opts.blockLevelElements.join('|' ) + ')$', 'i');
    
          // setup allowed and denied tags
          this.tidy.setupAllowed();
    
          // setup denied tags
          if (this.opts.deniedTags !== false)
          {
            var tags = ['html', 'head', 'link', 'body', 'meta', 'applet'];
            for (var i = 0; i < tags.length; i++)
            {
              this.opts.deniedTags.push(tags[i]);
            }
          }
    
          // load lang
          this.lang.load();
    
          // extend shortcuts
          $.extend(this.opts.shortcuts, this.opts.shortcutsAdd);
    
          // start callback
          this.core.setCallback('start');
    
          // build
          this.start = true;
          this.build.run();
        },
    
        loadOptions: function(options)
        {
          this.opts = $.extend(
            {},
            $.extend(true, {}, $.Redactor.opts),
            this.$element.data(),
            options
          );
        },
        getModuleMethods: function(object)
        {
          return Object.getOwnPropertyNames(object).filter(function(property)
          {
            return typeof object[property] == 'function';
          });
        },
        loadModules: function()
        {
          var len = $.Redactor.modules.length;
          for (var i = 0; i < len; i++)
          {
            this.bindModuleMethods($.Redactor.modules[i]);
          }
        },
        bindModuleMethods: function(module)
        {
          if (typeof this[module] == 'undefined') return;
    
          // init module
          this[module] = this[module]();
    
          var methods = this.getModuleMethods(this[module]);
          var len = methods.length;
    
          // bind methods
          for (var z = 0; z < len; z++)
          {
            this[module][methods[z]] = this[module][methods[z]].bind(this);
          }
        },
        alignment: function()
        {
          return {
            left: function()
            {
              this.alignment.set('');
            },
            right: function()
            {
              this.alignment.set('right');
            },
            center: function()
            {
              this.alignment.set('center');
            },
            justify: function()
            {
              this.alignment.set('justify');
            },
            set: function(type)
            {
              // focus
              if (!this.utils.browser('msie')) this.$editor.focus();
    
              this.buffer.set();
              this.selection.save();
    
              // get blocks
              this.alignment.blocks = this.selection.getBlocks();
              this.alignment.type = type;
    
              // set alignment
              if (this.alignment.isLinebreaksOrNoBlocks())
              {
                this.alignment.setText();
              }
              else
              {
                this.alignment.setBlocks();
              }
    
              // sync
              this.selection.restore();
              this.code.sync();
            },
            setText: function()
            {
              var wrapper = this.selection.wrap('div');
              $(wrapper).attr('data-tagblock', 'redactor').css('text-align', this.alignment.type);
            },
            setBlocks: function()
            {
              $.each(this.alignment.blocks, $.proxy(function(i, el)
              {
                var $el = this.utils.getAlignmentElement(el);
                if (!$el) return;
    
                if (this.alignment.isNeedReplaceElement($el))
                {
                  this.alignment.replaceElement($el);
                }
                else
                {
                  this.alignment.alignElement($el);
                }
    
              }, this));
            },
            isLinebreaksOrNoBlocks: function()
            {
              return (this.opts.linebreaks && this.alignment.blocks[0] === false);
            },
            isNeedReplaceElement: function($el)
            {
              return (this.alignment.type === '' && typeof($el.data('tagblock')) !== 'undefined');
            },
            replaceElement: function($el)
            {
              $el.replaceWith($el.html());
            },
            alignElement: function($el)
            {
              $el.css('text-align', this.alignment.type);
              this.utils.removeEmptyAttr($el, 'style');
            }
          };
        },
        autosave: function()
        {
          return {
            html: false,
            enable: function()
            {
              if (!this.opts.autosave) return;
    
              this.autosave.name = (this.opts.autosaveName) ? this.opts.autosaveName : this.$textarea.attr('name');
    
              if (this.opts.autosaveOnChange) return;
              this.autosaveInterval = setInterval(this.autosave.load, this.opts.autosaveInterval * 1000);
            },
            onChange: function()
            {
              if (!this.opts.autosaveOnChange) return;
              this.autosave.load();
            },
            load: function()
            {
              if (!this.opts.autosave) return;
    
              this.autosave.source = this.code.get();
    
              if (this.autosave.html === this.autosave.source) return;
    
              // data
              var data = {};
              data['name'] = this.autosave.name;
              data[this.autosave.name] = this.autosave.source;
              data = this.autosave.getHiddenFields(data);
    
              // ajax
              var jsxhr = $.ajax({
                url: this.opts.autosave,
                type: 'post',
                data: data
              });
    
              jsxhr.done(this.autosave.success);
            },
            getHiddenFields: function(data)
            {
              if (this.opts.autosaveFields === false || typeof this.opts.autosaveFields !== 'object')
              {
                return data;
              }
    
              $.each(this.opts.autosaveFields, $.proxy(function(k, v)
              {
                if (v !== null && v.toString().indexOf('#') === 0) v = $(v).val();
                data[k] = v;
    
              }, this));
    
              return data;
    
            },
            success: function(data)
            {
              var json;
              try
              {
                json = $.parseJSON(data);
              }
              catch(e)
              {
                //data has already been parsed
                json = data;
              }
    
              var callbackName = (typeof json.error == 'undefined') ? 'autosave' :  'autosaveError';
    
              this.core.setCallback(callbackName, this.autosave.name, json);
              this.autosave.html = this.autosave.source;
            },
            disable: function()
            {
              clearInterval(this.autosaveInterval);
            }
          };
        },
        block: function()
        {
          return {
            formatting: function(name)
            {
              this.block.clearStyle = false;
              var type, value;
    
              if (typeof this.formatting[name].data != 'undefined') type = 'data';
              else if (typeof this.formatting[name].attr != 'undefined') type = 'attr';
              else if (typeof this.formatting[name]['class'] != 'undefined') type = 'class';
    
              if (typeof this.formatting[name].clear != 'undefined')
              {
                this.block.clearStyle = true;
              }
    
              if (type) value = this.formatting[name][type];
    
              this.block.format(this.formatting[name].tag, type, value);
    
            },
            format: function(tag, type, value)
            {
              if (tag == 'quote') tag = 'blockquote';
    
              var formatTags = ['p', 'pre', 'blockquote', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
              if ($.inArray(tag, formatTags) == -1) return;
    
              this.block.isRemoveInline = (tag == 'pre' || tag.search(/h[1-6]/i) != -1);
    
              // focus
              if (!this.utils.browser('msie')) this.$editor.focus();
    
              var html = $.trim(this.$editor.html());
              this.block.isEmpty = this.utils.isEmpty(html);
    
              // FF focus
              if (this.utils.browser('mozilla') && !this.focus.isFocused())
              {
                if (this.block.isEmpty)
                {
                  var $first;
                  if (!this.opts.linebreaks)
                  {
                    $first = this.$editor.children().first();
                    this.caret.setEnd($first);
                  }
                }
              }
    
              this.block.blocks = this.selection.getBlocks();
    
              this.block.blocksSize = this.block.blocks.length;
              this.block.type = type;
              this.block.value = value;
    
              this.buffer.set();
              this.selection.save();
    
              this.block.set(tag);
    
              this.selection.restore();
              this.code.sync();
              this.observe.load();
    
            },
            set: function(tag)
            {
    
              this.selection.get();
              this.block.containerTag = this.range.commonAncestorContainer.tagName;
    
              if (this.range.collapsed)
              {
                this.block.setCollapsed(tag);
              }
              else
              {
                this.block.setMultiple(tag);
              }
            },
            setCollapsed: function(tag)
            {
              if (this.opts.linebreaks && this.block.isEmpty && tag != 'p')
              {
                var node = document.createElement(tag);
                this.$editor.html(node);
                this.caret.setEnd(node);
    
                return;
              }
    
    
              var block = this.block.blocks[0];
              if (block === false) return;
    
              if (block.tagName == 'LI')
              {
                if (tag != 'blockquote') return;
    
                this.block.formatListToBlockquote();
                return;
              }
    
              var isContainerTable = (this.block.containerTag  == 'TD' || this.block.containerTag  == 'TH');
              if (isContainerTable && !this.opts.linebreaks)
              {
                document.execCommand('formatblock', false, '<' + tag + '>');
    
                block = this.selection.getBlock();
                this.block.toggle($(block));
    
              }
              else if (block.tagName.toLowerCase() != tag)
              {
                if (this.opts.linebreaks && tag == 'p')
                {
                  $(block).append('<br>');
                  this.utils.replaceWithContents(block);
                }
                else
                {
                  var $formatted = this.utils.replaceToTag(block, tag);
    
                  this.block.toggle($formatted);
    
                  if (tag != 'p' && tag != 'blockquote') $formatted.find('img').remove();
                  if (this.block.isRemoveInline) this.utils.removeInlineTags($formatted);
                  if (tag == 'p' || this.block.headTag) $formatted.find('p').contents().unwrap();
    
                  this.block.formatTableWrapping($formatted);
                }
              }
              else if (tag == 'blockquote' && block.tagName.toLowerCase() == tag)
              {
                // blockquote off
                if (this.opts.linebreaks)
                {
                  $(block).append('<br>');
                  this.utils.replaceWithContents(block);
                }
                else
                {
                  var $el = this.utils.replaceToTag(block, 'p');
                  this.block.toggle($el);
                }
              }
              else if (block.tagName.toLowerCase() == tag)
              {
                this.block.toggle($(block));
              }
    
    
              if (typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined')
              {
                $(block).removeAttr('class').removeAttr('style');
              }
            },
            setMultiple: function(tag)
            {
              var block = this.block.blocks[0];
              var isContainerTable = (this.block.containerTag  == 'TD' || this.block.containerTag  == 'TH');
    
              if (block !== false && this.block.blocksSize === 1)
              {
                if (block.tagName.toLowerCase() == tag &&  tag == 'blockquote')
                {
                  // blockquote off
                  if (this.opts.linebreaks)
                  {
                    $(block).append('<br>');
                    this.utils.replaceWithContents(block);
                  }
                  else
                  {
                    var $el = this.utils.replaceToTag(block, 'p');
                    this.block.toggle($el);
                  }
                }
                else if (block.tagName == 'LI')
                {
                  if (tag != 'blockquote') return;
    
                  this.block.formatListToBlockquote();
                }
                else if (this.block.containerTag == 'BLOCKQUOTE')
                {
                  this.block.formatBlockquote(tag);
                }
                else if (this.opts.linebreaks && ((isContainerTable) || (this.range.commonAncestorContainer != block)))
                {
                  this.block.formatWrap(tag);
                }
                else
                {
                  if (this.opts.linebreaks && tag == 'p')
                  {
                    $(block).prepend('<br>').append('<br>');
                    this.utils.replaceWithContents(block);
                  }
                  else if (block.tagName === 'TD')
                  {
                    this.block.formatWrap(tag);
                  }
                  else
                  {
                    var $formatted = this.utils.replaceToTag(block, tag);
    
                    this.block.toggle($formatted);
    
                    if (this.block.isRemoveInline) this.utils.removeInlineTags($formatted);
                    if (tag == 'p' || this.block.headTag) $formatted.find('p').contents().unwrap();
                  }
                }
              }
              else
              {
                if (this.opts.linebreaks || tag != 'p')
                {
                  if (tag == 'blockquote')
                  {
                    var count = 0;
                    for (var i = 0; i < this.block.blocksSize; i++)
                    {
                      if (this.block.blocks[i].tagName == 'BLOCKQUOTE') count++;
                    }
    
                    // only blockquote selected
                    if (count == this.block.blocksSize)
                    {
                      $.each(this.block.blocks, $.proxy(function(i,s)
                      {
                        var $formatted = false;
                        if (this.opts.linebreaks)
                        {
                          $(s).prepend('<br>').append('<br>');
                          $formatted = this.utils.replaceWithContents(s);
                        }
                        else
                        {
                          $formatted = this.utils.replaceToTag(s, 'p');
                        }
    
                        if ($formatted && typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined')
                        {
                          $formatted.removeAttr('class').removeAttr('style');
                        }
    
                      }, this));
    
                      return;
                    }
    
                  }
    
                  this.block.formatWrap(tag);
                }
                else
                {
                  var classSize = 0;
                  var toggleType = false;
                  if (this.block.type == 'class')
                  {
                    toggleType = 'toggle';
                    classSize = $(this.block.blocks).filter('.' + this.block.value).length;
    
                    if (this.block.blocksSize == classSize) toggleType = 'toggle';
                    else if (this.block.blocksSize > classSize) toggleType = 'set';
                    else if (classSize === 0) toggleType = 'set';
    
                  }
    
                  var exceptTags = ['ul', 'ol', 'li', 'td', 'th', 'dl', 'dt', 'dd'];
                  $.each(this.block.blocks, $.proxy(function(i,s)
                  {
                    if ($.inArray(s.tagName.toLowerCase(), exceptTags) != -1) return;
    
                    var $formatted = this.utils.replaceToTag(s, tag);
    
                    if (toggleType)
                    {
                      if (toggleType == 'toggle') this.block.toggle($formatted);
                      else if (toggleType == 'remove') this.block.remove($formatted);
                      else if (toggleType == 'set') this.block.setForce($formatted);
                    }
                    else this.block.toggle($formatted);
    
                    if (tag != 'p' && tag != 'blockquote') $formatted.find('img').remove();
                    if (this.block.isRemoveInline) this.utils.removeInlineTags($formatted);
                    if (tag == 'p' || this.block.headTag) $formatted.find('p').contents().unwrap();
    
                    if (typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined')
                    {
                      $formatted.removeAttr('class').removeAttr('style');
                    }
    
    
                  }, this));
                }
              }
            },
            setForce: function($el)
            {
              // remove style and class if the specified setting
              if (this.block.clearStyle)
              {
                $el.removeAttr('class').removeAttr('style');
              }
    
              if (this.block.type == 'class')
              {
                $el.addClass(this.block.value);
                return;
              }
              else if (this.block.type == 'attr' || this.block.type == 'data')
              {
                $el.attr(this.block.value.name, this.block.value.value);
                return;
              }
            },
            toggle: function($el)
            {
              // remove style and class if the specified setting
              if (this.block.clearStyle)
              {
                $el.removeAttr('class').removeAttr('style');
              }
    
              if (this.block.type == 'class')
              {
                $el.toggleClass(this.block.value);
                return;
              }
              else if (this.block.type == 'attr' || this.block.type == 'data')
              {
                if ($el.attr(this.block.value.name) == this.block.value.value)
                {
                  $el.removeAttr(this.block.value.name);
                }
                else
                {
                  $el.attr(this.block.value.name, this.block.value.value);
                }
    
                return;
              }
              else
              {
                $el.removeAttr('style class');
                return;
              }
            },
            remove: function($el)
            {
              $el.removeClass(this.block.value);
            },
            formatListToBlockquote: function()
            {
              var block = $(this.block.blocks[0]).closest('ul, ol', this.$editor[0]);
    
              $(block).find('ul, ol').contents().unwrap();
              $(block).find('li').append($('<br>')).contents().unwrap();
    
              var $el = this.utils.replaceToTag(block, 'blockquote');
              this.block.toggle($el);
            },
            formatBlockquote: function(tag)
            {
              document.execCommand('outdent');
              document.execCommand('formatblock', false, tag);
    
              this.clean.clearUnverified();
              this.$editor.find('p:empty').remove();
    
              var formatted = this.selection.getBlock();
    
              if (tag != 'p')
              {
                $(formatted).find('img').remove();
              }
    
              if (!this.opts.linebreaks)
              {
                this.block.toggle($(formatted));
              }
    
              this.$editor.find('ul, ol, tr, blockquote, p').each($.proxy(this.utils.removeEmpty, this));
    
              if (this.opts.linebreaks && tag == 'p')
              {
                this.utils.replaceWithContents(formatted);
              }
    
            },
            formatWrap: function(tag)
            {
              if (this.block.containerTag == 'UL' || this.block.containerTag == 'OL')
              {
                if (tag == 'blockquote')
                {
                  this.block.formatListToBlockquote();
                }
                else
                {
                  return;
                }
              }
    
              var formatted = this.selection.wrap(tag);
              if (formatted === false) return;
    
              var $formatted = $(formatted);
    
              this.block.formatTableWrapping($formatted);
    
              var $elements = $formatted.find(this.opts.blockLevelElements.join(',') + ', td, table, thead, tbody, tfoot, th, tr');
    
              $elements.contents().unwrap();
    
              if (tag != 'p' && tag != 'blockquote') $formatted.find('img').remove();
    
              $.each(this.block.blocks, $.proxy(this.utils.removeEmpty, this));
    
              $formatted.append(this.selection.getMarker(2));
    
              if (!this.opts.linebreaks)
              {
                this.block.toggle($formatted);
              }
    
              this.$editor.find('ul, ol, tr, blockquote, p').each($.proxy(this.utils.removeEmpty, this));
              $formatted.find('blockquote:empty').remove();
    
              if (this.block.isRemoveInline)
              {
                this.utils.removeInlineTags($formatted);
              }
    
              if (this.opts.linebreaks && tag == 'p')
              {
                this.utils.replaceWithContents($formatted);
              }
    
              if (this.opts.linebreaks)
              {
                var $next = $formatted.next().next();
                if ($next.size() != 0 && $next[0].tagName === 'BR')
                {
                  $next.remove();
                }
              }
    
    
    
            },
            formatTableWrapping: function($formatted)
            {
              if ($formatted.closest('table', this.$editor[0]).length === 0) return;
    
              if ($formatted.closest('tr', this.$editor[0]).length === 0) $formatted.wrap('<tr>');
              if ($formatted.closest('td', this.$editor[0]).length === 0 && $formatted.closest('th').length === 0)
              {
                $formatted.wrap('<td>');
              }
            },
            removeData: function(name, value)
            {
              var blocks = this.selection.getBlocks();
              $(blocks).removeAttr('data-' + name);
    
              this.code.sync();
            },
            setData: function(name, value)
            {
              var blocks = this.selection.getBlocks();
              $(blocks).attr('data-' + name, value);
    
              this.code.sync();
            },
            toggleData: function(name, value)
            {
              var blocks = this.selection.getBlocks();
              $.each(blocks, function()
              {
                if ($(this).attr('data-' + name))
                {
                  $(this).removeAttr('data-' + name);
                }
                else
                {
                  $(this).attr('data-' + name, value);
                }
              });
            },
            removeAttr: function(attr, value)
            {
              var blocks = this.selection.getBlocks();
              $(blocks).removeAttr(attr);
    
              this.code.sync();
            },
            setAttr: function(attr, value)
            {
              var blocks = this.selection.getBlocks();
              $(blocks).attr(attr, value);
    
              this.code.sync();
            },
            toggleAttr: function(attr, value)
            {
              var blocks = this.selection.getBlocks();
              $.each(blocks, function()
              {
                if ($(this).attr(name))
                {
                  $(this).removeAttr(name);
                }
                else
                {
                  $(this).attr(name, value);
                }
              });
            },
            removeClass: function(className)
            {
              var blocks = this.selection.getBlocks();
              $(blocks).removeClass(className);
    
              this.utils.removeEmptyAttr(blocks, 'class');
    
              this.code.sync();
            },
            setClass: function(className)
            {
              var blocks = this.selection.getBlocks();
              $(blocks).addClass(className);
    
              this.code.sync();
            },
            toggleClass: function(className)
            {
              var blocks = this.selection.getBlocks();
              $(blocks).toggleClass(className);
    
              this.code.sync();
            }
          };
        },
        buffer: function()
        {
          return {
            set: function(type)
            {
              if (typeof type == 'undefined' || type == 'undo')
              {
                this.buffer.setUndo();
              }
              else
              {
                this.buffer.setRedo();
              }
            },
            setUndo: function()
            {
              this.selection.save();
              this.opts.buffer.push(this.$editor.html());
              this.selection.restore();
            },
            setRedo: function()
            {
              this.selection.save();
              this.opts.rebuffer.push(this.$editor.html());
              this.selection.restore();
            },
            getUndo: function()
            {
              this.$editor.html(this.opts.buffer.pop());
            },
            getRedo: function()
            {
              this.$editor.html(this.opts.rebuffer.pop());
            },
            add: function()
            {
              this.opts.buffer.push(this.$editor.html());
            },
            undo: function()
            {
              if (this.opts.buffer.length === 0) return;
    
              this.buffer.set('redo');
              this.buffer.getUndo();
    
              this.selection.restore();
    
              setTimeout($.proxy(this.observe.load, this), 50);
            },
            redo: function()
            {
              if (this.opts.rebuffer.length === 0) return;
    
              this.buffer.set('undo');
              this.buffer.getRedo();
    
              this.selection.restore();
    
              setTimeout($.proxy(this.observe.load, this), 50);
            }
          };
        },
        build: function()
        {
          return {
            run: function()
            {
              this.build.createContainerBox();
              this.build.loadContent();
              this.build.loadEditor();
              this.build.enableEditor();
              this.build.setCodeAndCall();
            },
            isTextarea: function()
            {
              return (this.$element[0].tagName === 'TEXTAREA');
            },
            createContainerBox: function()
            {
              this.$box = $('<div class="redactor-box" role="application" />');
            },
            createTextarea: function()
            {
              this.$textarea = $('<textarea />').attr('name', this.build.getTextareaName());
            },
            getTextareaName: function()
            {
              return ((typeof(name) == 'undefined')) ? 'content-' + this.uuid : this.$element.attr('id');
            },
            loadContent: function()
            {
              var func = (this.build.isTextarea()) ? 'val' : 'html';
              this.content = $.trim(this.$element[func]());
            },
            enableEditor: function()
            {
              this.$editor.attr({ 'contenteditable': true, 'dir': this.opts.direction });
            },
            loadEditor: function()
            {
              var func = (this.build.isTextarea()) ? 'fromTextarea' : 'fromElement';
              this.build[func]();
            },
            fromTextarea: function()
            {
              this.$editor = $('<div />');
              this.$textarea = this.$element;
              this.$box.insertAfter(this.$element).append(this.$editor).append(this.$element);
              this.$editor.addClass('redactor-editor');
    
              this.$element.hide();
            },
            fromElement: function()
            {
              this.$editor = this.$element;
              this.build.createTextarea();
              this.$box.insertAfter(this.$editor).append(this.$editor).append(this.$textarea);
              this.$editor.addClass('redactor-editor');
    
              this.$textarea.hide();
            },
            setCodeAndCall: function()
            {
              // set code
              this.code.set(this.content);
    
              this.build.setOptions();
              this.build.callEditor();
    
              // code mode
              if (this.opts.visual) return;
              setTimeout($.proxy(this.code.showCode, this), 200);
            },
            callEditor: function()
            {
              this.build.disableMozillaEditing();
              this.build.disableIeLinks();
              this.build.setEvents();
              this.build.setHelpers();
    
              // load toolbar
              if (this.opts.toolbar)
              {
                this.opts.toolbar = this.toolbar.init();
                this.toolbar.build();
              }
    
              // modal templates init
              this.modal.loadTemplates();
    
              // plugins
              this.build.plugins();
    
              // observers
              setTimeout($.proxy(this.observe.load, this), 4);
    
              // init callback
              this.core.setCallback('init');
            },
            setOptions: function()
            {
              // textarea direction
              $(this.$textarea).attr('dir', this.opts.direction);
    
              if (this.opts.linebreaks) this.$editor.addClass('redactor-linebreaks');
    
              if (this.opts.tabindex) this.$editor.attr('tabindex', this.opts.tabindex);
    
              if (this.opts.minHeight) this.$editor.css('minHeight', this.opts.minHeight);
              if (this.opts.maxHeight) this.$editor.css('maxHeight', this.opts.maxHeight);
    
            },
            setEventDropUpload: function(e)
            {
              e.preventDefault();
    
              if (!this.opts.dragImageUpload || !this.opts.dragFileUpload) return;
    
              var files = e.dataTransfer.files;
              this.upload.directUpload(files[0], e);
            },
            setEventDrop: function(e)
            {
              this.code.sync();
              setTimeout(this.clean.clearUnverified, 1);
              this.core.setCallback('drop', e);
            },
            setEvents: function()
            {
              // drop
              this.$editor.on('drop.redactor', $.proxy(function(e)
              {
                e = e.originalEvent || e;
    
                if (window.FormData === undefined || !e.dataTransfer) return true;
    
                if (e.dataTransfer.files.length === 0)
                {
                  return this.build.setEventDrop(e);
                }
                else
                {
                  this.build.setEventDropUpload(e);
                }
    
                setTimeout(this.clean.clearUnverified, 1);
                this.core.setCallback('drop', e);
    
              }, this));
    
    
              // click
              this.$editor.on('click.redactor', $.proxy(function(e)
              {
                var event = this.core.getEvent();
                var type = (event == 'click' || event == 'arrow') ? false : 'click';
    
                this.core.addEvent(type);
                this.utils.disableSelectAll();
                this.core.setCallback('click', e);
    
              }, this));
    
              // paste
              this.$editor.on('paste.redactor', $.proxy(this.paste.init, this));
    
              // cut
              this.$editor.on('cut.redactor', $.proxy(this.code.sync, this));
    
              // keydown
              this.$editor.on('keydown.redactor', $.proxy(this.keydown.init, this));
    
              // keyup
              this.$editor.on('keyup.redactor', $.proxy(this.keyup.init, this));
    
              // textarea keydown
              if ($.isFunction(this.opts.codeKeydownCallback))
              {
                this.$textarea.on('keydown.redactor-textarea', $.proxy(this.opts.codeKeydownCallback, this));
              }
    
              // textarea keyup
              if ($.isFunction(this.opts.codeKeyupCallback))
              {
                this.$textarea.on('keyup.redactor-textarea', $.proxy(this.opts.codeKeyupCallback, this));
              }
    
              // focus
              this.$editor.on('focus.redactor', $.proxy(function(e)
              {
                if ($.isFunction(this.opts.focusCallback)) this.core.setCallback('focus', e);
    
                if (this.selection.getCurrent() === false)
                {
                  this.selection.get();
                  this.range.setStart(this.$editor[0], 0);
                  this.range.setEnd(this.$editor[0], 0);
                  this.selection.addRange();
                }
    
    
              }, this));
    
    
              // blur
              $(document).on('mousedown.redactor-blur.' + this.uuid, $.proxy(function(e)
              {
                if (this.start) return;
                if (this.rtePaste) return;
    
                if ($(e.target).closest('.redactor-editor, .redactor-toolbar, .redactor-dropdown').size() !== 0)
                {
                  return;
                }
    
                this.utils.disableSelectAll();
                if ($.isFunction(this.opts.blurCallback)) this.core.setCallback('blur', e);
    
              }, this));
    
            },
            setHelpers: function()
            {
              // linkify
              if (this.linkify.isEnabled())
              {
                this.linkify.format();
              }
    
              // placeholder
              this.placeholder.enable();
    
              // focus
              if (this.opts.focus) setTimeout(this.focus.setStart, 100);
              if (this.opts.focusEnd) setTimeout(this.focus.setEnd, 100);
    
            },
            plugins: function()
            {
              if (!this.opts.plugins) return;
    
              $.each(this.opts.plugins, $.proxy(function(i, s)
              {
                var func = (typeof RedactorPlugins !== 'undefined' && typeof RedactorPlugins[s] !== 'undefined') ? RedactorPlugins : Redactor.fn;
    
                if (!$.isFunction(func[s]))
                {
                  return;
                }
    
                this[s] = func[s]();
    
                // get methods
                var methods = this.getModuleMethods(this[s]);
                var len = methods.length;
    
                // bind methods
                for (var z = 0; z < len; z++)
                {
                  this[s][methods[z]] = this[s][methods[z]].bind(this);
                }
    
                if ($.isFunction(this[s].init))
                {
                  this[s].init();
                }
    
    
              }, this));
    
            },
            disableMozillaEditing: function()
            {
              if (!this.utils.browser('mozilla')) return;
    
              // FF fix
              try {
                document.execCommand('enableObjectResizing', false, false);
                document.execCommand('enableInlineTableEditing', false, false);
              } catch (e) {}
            },
            disableIeLinks: function()
            {
              if (!this.utils.browser('msie')) return;
    
              // IE prevent converting links
              document.execCommand("AutoUrlDetect", false, false);
            }
          };
        },
        button: function()
        {
          return {
            build: function(btnName, btnObject)
            {
              var $button = $('<a href="#" class="re-icon re-' + btnName + '" rel="' + btnName + '" />').attr({'role': 'button', 'aria-label': btnObject.title, 'tabindex': '-1'});
    
              // click
              if (btnObject.func || btnObject.command || btnObject.dropdown)
              {
                this.button.setEvent($button, btnName, btnObject);
              }
    
              // dropdown
              if (btnObject.dropdown)
              {
                $button.addClass('redactor-toolbar-link-dropdown').attr('aria-haspopup', true);
    
                var $dropdown = $('<div class="redactor-dropdown redactor-dropdown-' + this.uuid + ' redactor-dropdown-box-' + btnName + '" style="display: none;">');
                $button.data('dropdown', $dropdown);
                this.dropdown.build(btnName, $dropdown, btnObject.dropdown);
              }
    
              // tooltip
              if (this.utils.isDesktop())
              {
                this.button.createTooltip($button, btnName, btnObject.title);
              }
    
              return $button;
            },
            setEvent: function($button, btnName, btnObject)
            {
              $button.on('touchstart click', $.proxy(function(e)
              {
                if ($button.hasClass('redactor-button-disabled')) return false;
    
                var type = 'func';
                var callback = btnObject.func;
    
                if (btnObject.command)
                {
                  type = 'command';
                  callback = btnObject.command;
                }
                else if (btnObject.dropdown)
                {
                  type = 'dropdown';
                  callback = false;
                }
    
                this.button.onClick(e, btnName, type, callback);
    
              }, this));
            },
            createTooltip: function($button, name, title)
            {
              var $tooltip = $('<span>').addClass('redactor-toolbar-tooltip redactor-toolbar-tooltip-' + this.uuid + ' redactor-toolbar-tooltip-' + name).hide().html(title);
              $tooltip.appendTo('body');
    
              $button.on('mouseover', function()
              {
                if ($(this).hasClass('redactor-button-disabled')) return;
    
                var pos = $button.offset();
    
                $tooltip.show();
                $tooltip.css({
                  top: (pos.top + $button.innerHeight()) + 'px',
                  left: (pos.left + $button.innerWidth()/2 - $tooltip.innerWidth()/2) + 'px'
                });
              });
    
              $button.on('mouseout', function()
              {
                $tooltip.hide();
              });
    
            },
            onClick: function(e, btnName, type, callback)
            {
              this.button.caretOffset = this.caret.getOffset();
    
              e.preventDefault();
    
              $(document).find('.redactor-toolbar-tooltip').hide();
    
              if (this.utils.browser('msie')) e.returnValue = false;
    
              if (type == 'command') this.inline.format(callback);
              else if (type == 'dropdown') this.dropdown.show(e, btnName);
              else this.button.onClickCallback(e, callback, btnName);
            },
            onClickCallback: function(e, callback, btnName)
            {
              var func;
    
              if ($.isFunction(callback)) callback.call(this, btnName);
              else if (callback.search(/\./) != '-1')
              {
                func = callback.split('.');
                if (typeof this[func[0]] == 'undefined') return;
    
                this[func[0]][func[1]](btnName);
              }
              else this[callback](btnName);
    
              this.observe.buttons(e, btnName);
            },
            get: function(key)
            {
              return this.$toolbar.find('a.re-' + key);
            },
            setActive: function(key)
            {
              this.button.get(key).addClass('redactor-act');
            },
            setInactive: function(key)
            {
              this.button.get(key).removeClass('redactor-act');
            },
            setInactiveAll: function(key)
            {
              if (typeof key === 'undefined')
              {
                this.$toolbar.find('a.re-icon').removeClass('redactor-act');
              }
              else
              {
                this.$toolbar.find('a.re-icon').not('.re-' + key).removeClass('redactor-act');
              }
            },
            setActiveInVisual: function()
            {
              this.$toolbar.find('a.re-icon').not('a.re-html, a.re-fullscreen').removeClass('redactor-button-disabled');
            },
            setInactiveInCode: function()
            {
              this.$toolbar.find('a.re-icon').not('a.re-html, a.re-fullscreen').addClass('redactor-button-disabled');
            },
            changeIcon: function(key, classname)
            {
              this.button.get(key).addClass('re-' + classname);
            },
            removeIcon: function(key, classname)
            {
              this.button.get(key).removeClass('re-' + classname);
            },
            setAwesome: function(key, name)
            {
              var $button = this.button.get(key);
              $button.removeClass('redactor-btn-image').addClass('fa-redactor-btn');
              $button.html('<i class="fa ' + name + '"></i>');
            },
            addCallback: function($btn, callback)
            {
              if ($btn == "buffer") return;
    
              var type = (callback == 'dropdown') ? 'dropdown' : 'func';
              var key = $btn.attr('rel');
              $btn.on('touchstart click', $.proxy(function(e)
              {
                if ($btn.hasClass('redactor-button-disabled')) return false;
                this.button.onClick(e, key, type, callback);
    
              }, this));
            },
            addDropdown: function($btn, dropdown)
            {
              $btn.addClass('redactor-toolbar-link-dropdown').attr('aria-haspopup', true);
    
              var key = $btn.attr('rel');
              this.button.addCallback($btn, 'dropdown');
    
              var $dropdown = $('<div class="redactor-dropdown redactor-dropdown-' + this.uuid + ' redactor-dropdown-box-' + key + '" style="display: none;">');
              $btn.data('dropdown', $dropdown);
    
              // build dropdown
              if (dropdown) this.dropdown.build(key, $dropdown, dropdown);
    
              return $dropdown;
            },
            add: function(key, title)
            {
              if (!this.opts.toolbar) return;
    
              if (this.button.isMobileUndoRedo(key)) return "buffer";
    
              var btn = this.button.build(key, { title: title });
              btn.addClass('redactor-btn-image');
    
              this.$toolbar.append($('<li>').append(btn));
    
              return btn;
            },
            addFirst: function(key, title)
            {
              if (!this.opts.toolbar) return;
    
              if (this.button.isMobileUndoRedo(key)) return "buffer";
    
              var btn = this.button.build(key, { title: title });
              btn.addClass('redactor-btn-image');
              this.$toolbar.prepend($('<li>').append(btn));
    
              return btn;
            },
            addAfter: function(afterkey, key, title)
            {
              if (!this.opts.toolbar) return;
    
              if (this.button.isMobileUndoRedo(key)) return "buffer";
    
              var btn = this.button.build(key, { title: title });
              btn.addClass('redactor-btn-image');
              var $btn = this.button.get(afterkey);
    
              if ($btn.length !== 0) $btn.parent().after($('<li>').append(btn));
              else this.$toolbar.append($('<li>').append(btn));
    
              return btn;
            },
            addBefore: function(beforekey, key, title)
            {
              if (!this.opts.toolbar) return;
    
              if (this.button.isMobileUndoRedo(key)) return "buffer";
    
              var btn = this.button.build(key, { title: title });
              btn.addClass('redactor-btn-image');
              var $btn = this.button.get(beforekey);
    
              if ($btn.length !== 0) $btn.parent().before($('<li>').append(btn));
              else this.$toolbar.append($('<li>').append(btn));
    
              return btn;
            },
            remove: function(key)
            {
              this.button.get(key).remove();
            },
            isMobileUndoRedo: function(key)
            {
              return (key == "undo" || key == "redo") && !this.utils.isDesktop();
            }
          };
        },
        caret: function()
        {
          return {
            setStart: function(node)
            {
              // inline tag
              if (!this.utils.isBlock(node))
              {
                var space = this.utils.createSpaceElement();
    
                $(node).prepend(space);
                this.caret.setEnd(space);
              }
              else
              {
                this.caret.set(node, 0, node, 0);
              }
            },
            setEnd: function(node)
            {
              node = node[0] || node;
              if (node.lastChild.nodeType == 1)
              {
                return this.caret.setAfter(node.lastChild);
              }
    
              this.caret.set(node, 1, node, 1);
    
            },
            set: function(orgn, orgo, focn, foco)
            {
              // focus
              // disabled in 10.0.7
              // if (!this.utils.browser('msie')) this.$editor.focus();
    
              orgn = orgn[0] || orgn;
              focn = focn[0] || focn;
    
              if (this.utils.isBlockTag(orgn.tagName) && orgn.innerHTML === '')
              {
                orgn.innerHTML = this.opts.invisibleSpace;
              }
    
              if (orgn.tagName == 'BR' && this.opts.linebreaks === false)
              {
                var parent = $(this.opts.emptyHtml)[0];
                $(orgn).replaceWith(parent);
                orgn = parent;
                focn = orgn;
              }
    
              this.selection.get();
    
              try
              {
                this.range.setStart(orgn, orgo);
                this.range.setEnd(focn, foco);
              }
              catch (e) {}
    
              this.selection.addRange();
            },
            setAfter: function(node)
            {
              try
              {
                var tag = $(node)[0].tagName;
    
                // inline tag
                if (tag != 'BR' && !this.utils.isBlock(node))
                {
                  var space = this.utils.createSpaceElement();
    
                  $(node).after(space);
                  this.caret.setEnd(space);
                }
                else
                {
                  if (tag != 'BR' && this.utils.browser('msie'))
                  {
                    this.caret.setStart($(node).next());
                  }
                  else
                  {
                    this.caret.setAfterOrBefore(node, 'after');
                  }
                }
              }
              catch (e)
              {
                var space = this.utils.createSpaceElement();
                $(node).after(space);
                this.caret.setEnd(space);
              }
            },
            setBefore: function(node)
            {
              // block tag
              if (this.utils.isBlock(node))
              {
                this.caret.setEnd($(node).prev());
              }
              else
              {
                this.caret.setAfterOrBefore(node, 'before');
              }
            },
            setAfterOrBefore: function(node, type)
            {
              // focus
              if (!this.utils.browser('msie')) this.$editor.focus();
    
              node = node[0] || node;
    
              this.selection.get();
    
              if (type == 'after')
              {
                try {
    
                  this.range.setStartAfter(node);
                  this.range.setEndAfter(node);
                }
                catch (e) {}
              }
              else
              {
                try {
                  this.range.setStartBefore(node);
                  this.range.setEndBefore(node);
                }
                catch (e) {}
              }
    
    
              this.range.collapse(false);
              this.selection.addRange();
            },
            getOffsetOfElement: function(node)
            {
              node = node[0] || node;
    
              this.selection.get();
    
              var cloned = this.range.cloneRange();
              cloned.selectNodeContents(node);
              cloned.setEnd(this.range.endContainer, this.range.endOffset);
    
              return $.trim(cloned.toString()).length;
            },
            getOffset: function()
            {
              var offset = 0;
                var sel = window.getSelection();
    
                if (sel.rangeCount > 0)
                {
                    var range = window.getSelection().getRangeAt(0);
                    var caretRange = range.cloneRange();
                    caretRange.selectNodeContents(this.$editor[0]);
                    caretRange.setEnd(range.endContainer, range.endOffset);
                    offset = caretRange.toString().length;
                }
    
              return offset;
            },
            setOffset: function(start, end)
            {
              if (typeof end == 'undefined') end = start;
              if (!this.focus.isFocused()) this.focus.setStart();
    
              var sel = this.selection.get();
              var node, offset = 0;
              var walker = document.createTreeWalker(this.$editor[0], NodeFilter.SHOW_TEXT, null, null);
    
              while (node == walker.nextNode())
              {
                offset += node.nodeValue.length;
                if (offset > start)
                {
                  this.range.setStart(node, node.nodeValue.length + start - offset);
                  start = Infinity;
                }
    
                if (offset >= end)
                {
                  this.range.setEnd(node, node.nodeValue.length + end - offset);
                  break;
                }
              }
    
              this.range.collapse(false);
              this.selection.addRange();
            },
            // deprecated
            setToPoint: function(start, end)
            {
              this.caret.setOffset(start, end);
            },
            getCoords: function()
            {
              return this.caret.getOffset();
            }
          };
        },
        clean: function()
        {
          return {
            onSet: function(html)
            {
              html = this.clean.savePreCode(html);
    
              // convert script tag
              html = html.replace(/<script(.*?[^>]?)>([\w\W]*?)<\/script>/gi, '<pre class="redactor-script-tag" style="display: none;" $1>$2</pre>');
    
              // replace dollar sign to entity
              html = html.replace(/\$/g, '&#36;');
    
              // replace special characters in links
              html = html.replace(/<a href="(.*?[^>]?)®(.*?[^>]?)">/gi, '<a href="$1&reg$2">');
    
              if (this.opts.replaceDivs && !this.opts.linebreaks) html = this.clean.replaceDivs(html);
              if (this.opts.linebreaks)  html = this.clean.replaceParagraphsToBr(html);
    
              // save form tag
              html = this.clean.saveFormTags(html);
    
              // convert font tag to span
              var $div = $('<div>');
              $div.html(html);
              var fonts = $div.find('font[style]');
              if (fonts.length !== 0)
              {
                fonts.replaceWith(function()
                {
                  var $el = $(this);
                  var $span = $('<span>').attr('style', $el.attr('style'));
                  return $span.append($el.contents());
                });
    
                html = $div.html();
              }
    
              $div.remove();
    
              // remove font tag
              html = html.replace(/<font(.*?)>/gi, '');
              html = html.replace(/<\/font>/gi, '');
    
              // tidy html
              html = this.tidy.load(html);
    
              // paragraphize
              if (this.opts.paragraphize) html = this.paragraphize.load(html);
    
              // verified
              html = this.clean.setVerified(html);
    
              // convert inline tags
              html = this.clean.convertInline(html);
    
              html = html.replace(/&amp;/g, '&');
    
              return html;
            },
            onSync: function(html)
            {
              // remove spaces
              html = html.replace(/\u200B/g, '');
              html = html.replace(/&#x200b;/gi, '');
    
              if (this.opts.cleanSpaces)
              {
                html = html.replace(/&nbsp;/gi, ' ');
              }
    
              if (html.search(/^<p>(||\s||<br\s?\/?>||&nbsp;)<\/p>$/i) != -1)
              {
                return '';
              }
    
              // reconvert script tag
              html = html.replace(/<pre class="redactor-script-tag" style="display: none;"(.*?[^>]?)>([\w\W]*?)<\/pre>/gi, '<script$1>$2</script>');
    
              // restore form tag
              html = this.clean.restoreFormTags(html);
    
              var chars = {
                '\u2122': '&trade;',
                '\u00a9': '&copy;',
                '\u2026': '&hellip;',
                '\u2014': '&mdash;',
                '\u2010': '&dash;'
              };
              // replace special characters
              $.each(chars, function(i,s)
              {
                html = html.replace(new RegExp(i, 'g'), s);
              });
    
              // remove last br in FF
              if (this.utils.browser('mozilla'))
              {
                html = html.replace(/<br\s?\/?>$/gi, '');
              }
    
              // remove br in|of li tags
              html = html.replace(new RegExp('<br\\s?/?></li>', 'gi'), '</li>');
              html = html.replace(new RegExp('</li><br\\s?/?>', 'gi'), '</li>');
    
              // remove empty attributes
              html = html.replace(/<(.*?)rel="\s*?"(.*?[^>]?)>/gi, '<$1$2">');
              html = html.replace(/<(.*?)style="\s*?"(.*?[^>]?)>/gi, '<$1$2">');
              html = html.replace(/="">/gi, '>');
              html = html.replace(/""">/gi, '">');
              html = html.replace(/"">/gi, '">');
    
              // remove verified
              html = html.replace(/<div(.*?)data-tagblock="redactor"(.*?[^>])>/gi, '<div$1$2>');
              html = html.replace(/<(.*?) data-verified="redactor"(.*?[^>])>/gi, '<$1$2>');
    
              var $div = $("<div/>").html($.parseHTML(html, document, true));
              $div.find("span").removeAttr("rel");
    
              $div.find('pre .redactor-invisible-space').each(function()
              {
                $(this).contents().unwrap();
              });
    
              html = $div.html();
    
              // remove rel attribute from img
              html = html.replace(/<img(.*?[^>])rel="(.*?[^>])"(.*?[^>])>/gi, '<img$1$3>');
              html = html.replace(/<span class="redactor-invisible-space">(.*?)<\/span>/gi, '$1');
    
              html = html.replace(/ data-save-url="(.*?[^>])"/gi, '');
    
              // remove image resize
              html = html.replace(/<span(.*?)id="redactor-image-box"(.*?[^>])>([\w\W]*?)<img(.*?)><\/span>/gi, '$3<img$4>');
              html = html.replace(/<span(.*?)id="redactor-image-resizer"(.*?[^>])>(.*?)<\/span>/gi, '');
              html = html.replace(/<span(.*?)id="redactor-image-editter"(.*?[^>])>(.*?)<\/span>/gi, '');
    
              // remove font tag
              html = html.replace(/<font(.*?)>/gi, '');
              html = html.replace(/<\/font>/gi, '');
    
              // tidy html
              html = this.tidy.load(html);
    
              // link nofollow
              if (this.opts.linkNofollow)
              {
                html = html.replace(/<a(.*?)rel="nofollow"(.*?[^>])>/gi, '<a$1$2>');
                html = html.replace(/<a(.*?[^>])>/gi, '<a$1 rel="nofollow">');
              }
    
              // reconvert inline
              html = html.replace(/\sdata-redactor-(tag|class|style)="(.*?[^>])"/gi, '');
              html = html.replace(new RegExp('<(.*?) data-verified="redactor"(.*?[^>])>', 'gi'), '<$1$2>');
              html = html.replace(new RegExp('<(.*?) data-verified="redactor">', 'gi'), '<$1>');
    
              html = html.replace(/&amp;/g, '&');
    
              return html;
            },
            onPaste: function(html, setMode)
            {
              html = $.trim(html);
              html = html.replace(/\$/g, '&#36;');
    
              // convert dirty spaces
              html = html.replace(/<span class="s[0-9]">/gi, '<span>');
              html = html.replace(/<span class="Apple-converted-space">&nbsp;<\/span>/gi, ' ');
              html = html.replace(/<span class="Apple-tab-span"[^>]*>\t<\/span>/gi, '\t');
              html = html.replace(/<span[^>]*>(\s|&nbsp;)<\/span>/gi, ' ');
    
              if (this.opts.pastePlainText)
              {
                return this.clean.getPlainText(html);
              }
    
              if (!this.utils.isSelectAll() && typeof setMode == 'undefined')
              {
                if (this.utils.isCurrentOrParent(['FIGCAPTION', 'A']))
                {
                  return this.clean.getPlainText(html, false);
                }
    
                if (this.utils.isCurrentOrParent('PRE'))
                {
                  html = html.replace(/”/g, '"');
                  html = html.replace(/“/g, '"');
                  html = html.replace(/‘/g, '\'');
                  html = html.replace(/’/g, '\'');
    
                  return this.clean.getPreCode(html);
                }
    
                if (this.utils.isCurrentOrParent(['BLOCKQUOTE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6']))
                {
                  html = this.clean.getOnlyImages(html);
    
                  if (!this.utils.browser('msie'))
                  {
                    var block = this.selection.getBlock();
                    if (block && block.tagName == 'P')
                    {
                      html = html.replace(/<img(.*?)>/gi, '<p><img$1></p>');
                    }
                  }
    
                  return html;
                }
    
                if (this.utils.isCurrentOrParent(['TD']))
                {
                  html = this.clean.onPasteTidy(html, 'td');
    
                  if (this.opts.linebreaks) html = this.clean.replaceParagraphsToBr(html);
    
                  html = this.clean.replaceDivsToBr(html);
    
                  return html;
                }
    
    
                if (this.utils.isCurrentOrParent(['LI']))
                {
                  return this.clean.onPasteTidy(html, 'li');
                }
              }
    
    
              html = this.clean.isSingleLine(html, setMode);
    
              if (!this.clean.singleLine)
              {
                if (this.opts.linebreaks)  html = this.clean.replaceParagraphsToBr(html);
                if (this.opts.replaceDivs) html = this.clean.replaceDivs(html);
    
                html = this.clean.saveFormTags(html);
              }
    
    
              html = this.clean.onPasteWord(html);
              html = this.clean.onPasteExtra(html);
    
              html = this.clean.onPasteTidy(html, 'all');
    
    
              // paragraphize
              if (!this.clean.singleLine && this.opts.paragraphize)
              {
                html = this.paragraphize.load(html);
              }
    
              html = this.clean.removeDirtyStyles(html);
              html = this.clean.onPasteRemoveSpans(html);
              html = this.clean.onPasteRemoveEmpty(html);
    
    
              html = this.clean.convertInline(html);
    
              return html;
            },
            onPasteWord: function(html)
            {
              // comments
              html = html.replace(/<!--[\s\S]*?-->/gi, '');
    
              // style
              html = html.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');
    
              // op
              html = html.replace(/<o\:p[^>]*>[\s\S]*?<\/o\:p>/gi, '');
    
              if (html.match(/class="?Mso|style="[^"]*\bmso-|style='[^'']*\bmso-|w:WordDocument/i))
              {
                // comments
                html = html.replace(/<!--[\s\S]+?-->/gi, '');
    
                // scripts
                html = html.replace(/<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s\/>]))[^>]*>/gi, '');
    
                // Convert <s> into <strike>
                html = html.replace(/<(\/?)s>/gi, "<$1strike>");
    
                // Replace nbsp entites to char since it's easier to handle
                html = html.replace(/ /gi, ' ');
    
                // Convert <span style="mso-spacerun:yes">___</span> to string of alternating
                // breaking/non-breaking spaces of same length
                html = html.replace(/<span\s+style\s*=\s*"\s*mso-spacerun\s*:\s*yes\s*;?\s*"\s*>([\s\u00a0]*)<\/span>/gi, function(str, spaces) {
                  return (spaces.length > 0) ? spaces.replace(/./, " ").slice(Math.floor(spaces.length/2)).split("").join("\u00a0") : '';
                });
    
                html = this.clean.onPasteIeFixLinks(html);
    
                // shapes
                html = html.replace(/<img(.*?)v:shapes=(.*?)>/gi, '');
                html = html.replace(/src="file\:\/\/(.*?)"/, 'src=""');
    
                // lists
                var $div = $("<div/>").html(html);
    
                var lastList = false;
                var lastLevel = 1;
                var listsIds = [];
    
                $div.find("p[style]").each(function()
                {
                  var matches = $(this).attr('style').match(/mso\-list\:l([0-9]+)\slevel([0-9]+)/);
    
                  if (matches)
                  {
                    var currentList = parseInt(matches[1]);
                    var currentLevel = parseInt(matches[2]);
                    var listType = $(this).html().match(/^[\w]+\./) ? "ol" : "ul";
    
                    var $li = $("<li/>").html($(this).html());
    
                    $li.html($li.html().replace(/^([\w\.]+)</, '<'));
                    $li.find("span:first").remove();
    
                    if (currentLevel == 1 && $.inArray(currentList, listsIds) == -1)
                    {
                      var $list = $("<" + listType + "/>").attr({"data-level": currentLevel,
                                             "data-list": currentList})
                                        .html($li);
    
                      $(this).replaceWith($list);
    
                      lastList = currentList;
                      listsIds.push(currentList);
                    }
                    else
                    {
                      if (currentLevel > lastLevel)
                      {
                        var $prevList = $div.find('[data-level="' + lastLevel + '"][data-list="' + lastList + '"]');
    
                        var $lastList = $prevList;
    
                        for(var i = lastLevel; i < currentLevel; i++)
                        {
                          $list = $("<" + listType + "/>");
    
                          $list.appendTo($lastList.find("li").last());
    
                          $lastList = $list;
                        }
    
                        $lastList.attr({"data-level": currentLevel,
                                "data-list": currentList})
                             .html($li);
    
                      }
                      else
                      {
                        var $prevList = $div.find('[data-level="' + currentLevel + '"][data-list="' + currentList + '"]').last();
    
                        $prevList.append($li);
                      }
    
                      lastLevel = currentLevel;
                      lastList = currentList;
    
                      $(this).remove();
                    }
                  }
                });
    
                $div.find('[data-level][data-list]').removeAttr('data-level data-list');
                html = $div.html();
    
                // remove ms word's bullet
                html = html.replace(/·/g, '');
                html = html.replace(/<p class="Mso(.*?)"/gi, '<p');
    
                // classes
                html = html.replace(/ class=\"(mso[^\"]*)\"/gi, "");
                html = html.replace(/ class=(mso\w+)/gi, "");
    
                // remove ms word tags
                html = html.replace(/<o:p(.*?)>([\w\W]*?)<\/o:p>/gi, '$2');
    
                // ms word break lines
                html = html.replace(/\n/g, ' ');
    
                // ms word lists break lines
                html = html.replace(/<p>\n?<li>/gi, '<li>');
              }
    
              return html;
            },
            onPasteExtra: function(html)
            {
              // remove google docs markers
              html = html.replace(/<b\sid="internal-source-marker(.*?)">([\w\W]*?)<\/b>/gi, "$2");
              html = html.replace(/<b(.*?)id="docs-internal-guid(.*?)">([\w\W]*?)<\/b>/gi, "$3");
    
              // google docs styles
              html = html.replace(/<span[^>]*(font-style: italic; font-weight: bold|font-weight: bold; font-style: italic)[^>]*>/gi, '<span style="font-weight: bold;"><span style="font-style: italic;">');
              html = html.replace(/<span[^>]*font-style: italic[^>]*>/gi, '<span style="font-style: italic;">');
              html = html.replace(/<span[^>]*font-weight: bold[^>]*>/gi, '<span style="font-weight: bold;">');
              html = html.replace(/<span[^>]*text-decoration: underline[^>]*>/gi, '<span style="text-decoration: underline;">');
    
              html = html.replace(/<img>/gi, '');
              html = html.replace(/\n{3,}/gi, '\n');
              html = html.replace(/<font(.*?)>([\w\W]*?)<\/font>/gi, '$2');
    
              // remove dirty p
              html = html.replace(/<p><p>/gi, '<p>');
              html = html.replace(/<\/p><\/p>/gi, '</p>');
              html = html.replace(/<li>(\s*|\t*|\n*)<p>/gi, '<li>');
              html = html.replace(/<\/p>(\s*|\t*|\n*)<\/li>/gi, '</li>');
    
              // remove space between paragraphs
              html = html.replace(/<\/p>\s<p/gi, '<\/p><p');
    
              // remove safari local images
              html = html.replace(/<img src="webkit-fake-url\:\/\/(.*?)"(.*?)>/gi, '');
    
              // bullets
              html = html.replace(/<p>•([\w\W]*?)<\/p>/gi, '<li>$1</li>');
    
              // FF fix
              if (this.utils.browser('mozilla'))
              {
                html = html.replace(/<br\s?\/?>$/gi, '');
              }
    
              return html;
            },
            onPasteTidy: function(html, type)
            {
              // remove all tags except these
              var tags = ['span', 'a', 'pre', 'blockquote', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'address', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del',
                    'ol', 'ul', 'li', 'dl', 'dt', 'dd', 'p', 'br', 'video', 'audio', 'iframe', 'embed', 'param', 'object', 'img', 'table',
                    'td', 'th', 'tr', 'tbody', 'tfoot', 'thead', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
              var tagsEmpty = false;
              var attrAllowed =  [
                  ['a', '*'],
                  ['img', ['src', 'alt']],
                  ['span', ['class', 'rel', 'data-verified']],
                  ['iframe', '*'],
                  ['video', '*'],
                  ['audio', '*'],
                  ['embed', '*'],
                  ['object', '*'],
                  ['param', '*'],
                  ['source', '*']
                ];
    
              if (type == 'all')
              {
                tagsEmpty = ['p', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
                attrAllowed =  [
                  ['table', 'class'],
                  ['td', ['colspan', 'rowspan']],
                  ['a', '*'],
                  ['img', ['src', 'alt', 'data-redactor-inserted-image']],
                  ['span', ['class', 'rel', 'data-verified']],
                  ['iframe', '*'],
                  ['video', '*'],
                  ['audio', '*'],
                  ['embed', '*'],
                  ['object', '*'],
                  ['param', '*'],
                  ['source', '*']
                ];
              }
              else if (type == 'td')
              {
                // remove all tags except these and remove all table tags: tr, td etc
                tags = ['ul', 'ol', 'li', 'span', 'a', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del',
                    'ol', 'ul', 'li', 'dl', 'dt', 'dd', 'br', 'iframe', 'video', 'audio', 'embed', 'param', 'object', 'img', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
    
              }
              else if (type == 'li')
              {
                // only inline tags and ul, ol, li
                tags = ['ul', 'ol', 'li', 'span', 'a', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del', 'br',
                    'iframe', 'video', 'audio', 'embed', 'param', 'object', 'img'];
              }
    
              var options = {
                deniedTags: (this.opts.deniedTags) ? this.opts.deniedTags : false,
                allowedTags: (this.opts.allowedTags) ? this.opts.allowedTags : tags,
                removeComments: true,
                removePhp: true,
                removeAttr: (this.opts.removeAttr) ? this.opts.removeAttr : false,
                allowedAttr: (this.opts.allowedAttr) ? this.opts.allowedAttr : attrAllowed,
                removeEmpty: tagsEmpty
              };
    
              return this.tidy.load(html, options);
            },
            onPasteRemoveEmpty: function(html)
            {
              html = html.replace(/<(p|h[1-6])>(|\s|\n|\t|<br\s?\/?>)<\/(p|h[1-6])>/gi, '');
    
              // remove br in the end
              if (!this.opts.linebreaks) html = html.replace(/<br>$/i, '');
    
              return html;
            },
            onPasteRemoveSpans: function(html)
            {
              html = html.replace(/<span>(.*?)<\/span>/gi, '$1');
              html = html.replace(/<span[^>]*>\s|&nbsp;<\/span>/gi, ' ');
    
              return html;
            },
            onPasteIeFixLinks: function(html)
            {
              if (!this.utils.browser('msie')) return html;
    
              var tmp = $.trim(html);
              if (tmp.search(/^<a(.*?)>(.*?)<\/a>$/i) === 0)
              {
                html = html.replace(/^<a(.*?)>(.*?)<\/a>$/i, "$2");
              }
    
              return html;
            },
            isSingleLine: function(html, setMode)
            {
              this.clean.singleLine = false;
    
              if (!this.utils.isSelectAll() && typeof setMode == 'undefined')
              {
                var blocks = this.opts.blockLevelElements.join('|').replace('P|', '').replace('DIV|', '');
    
                var matchBlocks = html.match(new RegExp('</(' + blocks + ')>', 'gi'));
                var matchContainers = html.match(/<\/(p|div)>/gi);
    
                if (!matchBlocks && (matchContainers === null || (matchContainers && matchContainers.length <= 1)))
                {
                  var matchBR = html.match(/<br\s?\/?>/gi);
                  //var matchIMG = html.match(/<img(.*?[^>])>/gi);
                  if (!matchBR)
                  {
                    this.clean.singleLine = true;
                    html = html.replace(/<\/?(p|div)(.*?)>/gi, '');
                  }
                }
              }
    
              return html;
            },
            stripTags: function(input, allowed)
            {
                allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
    
                return input.replace(tags, function ($0, $1) {
                    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                });
            },
            savePreCode: function(html)
            {
              html = this.clean.savePreFormatting(html);
              html = this.clean.saveCodeFormatting(html);
    
              html = this.clean.restoreSelectionMarker(html);
    
              return html;
            },
            savePreFormatting: function(html)
            {
              var pre = html.match(/<pre(.*?)>([\w\W]*?)<\/pre>/gi);
    
              if (pre !== null)
              {
                $.each(pre, $.proxy(function(i,s)
                {
                  var arr = s.match(/<pre(.*?)>([\w\W]*?)<\/pre>/i);
    
                  arr[2] = arr[2].replace(/<br\s?\/?>/g, '\n');
                  arr[2] = arr[2].replace(/&nbsp;/g, ' ');
    
                  if (this.opts.preSpaces)
                  {
                    arr[2] = arr[2].replace(/\t/g, Array(this.opts.preSpaces + 1).join(' '));
                  }
    
                  arr[2] = this.clean.encodeEntities(arr[2]);
    
                  // $ fix
                  arr[2] = arr[2].replace(/\$/g, '&#36;');
    
                  html = html.replace(s, '<pre' + arr[1] + '>' + arr[2] + '</pre>');
    
                }, this));
              }
    
              return html;
            },
            saveCodeFormatting: function(html)
            {
              var code = html.match(/<code(.*?)>([\w\W]*?)<\/code>/gi);
    
              if (code !== null)
              {
                $.each(code, $.proxy(function(i,s)
                {
                  var arr = s.match(/<code(.*?)>([\w\W]*?)<\/code>/i);
    
                  arr[2] = arr[2].replace(/&nbsp;/g, ' ');
                  arr[2] = this.clean.encodeEntities(arr[2]);
                  arr[2] = arr[2].replace(/\$/g, '&#36;');
    
                  html = html.replace(s, '<code' + arr[1] + '>' + arr[2] + '</code>');
                }, this));
              }
    
              return html;
            },
            restoreSelectionMarker: function(html)
            {
              html = html.replace(/&lt;span id=&quot;selection-marker-([0-9])&quot; class=&quot;redactor-selection-marker&quot; data-verified=&quot;redactor&quot;&gt;​&lt;\/span&gt;/g, '<span id="selection-marker-$1" class="redactor-selection-marker" data-verified="redactor">​</span>');
    
              return html;
            },
            getTextFromHtml: function(html)
            {
              html = html.replace(/<br\s?\/?>|<\/H[1-6]>|<\/p>|<\/div>|<\/li>|<\/td>/gi, '\n');
    
              var tmp = document.createElement('div');
              tmp.innerHTML = html;
              html = tmp.textContent || tmp.innerText;
    
              return $.trim(html);
            },
            getPlainText: function(html, paragraphize)
            {
              html = this.clean.getTextFromHtml(html);
              html = html.replace(/\n/g, '<br />');
    
              if (this.opts.paragraphize && typeof paragraphize == 'undefined' && !this.utils.browser('mozilla'))
              {
                html = this.paragraphize.load(html);
              }
    
              return html;
            },
            getPreCode: function(html)
            {
              html = html.replace(/<img(.*?) style="(.*?)"(.*?[^>])>/gi, '<img$1$3>');
              html = html.replace(/<img(.*?)>/gi, '&lt;img$1&gt;');
              html = this.clean.getTextFromHtml(html);
    
              if (this.opts.preSpaces)
              {
                html = html.replace(/\t/g, Array(this.opts.preSpaces + 1).join(' '));
              }
    
              html = this.clean.encodeEntities(html);
    
              return html;
            },
            getOnlyImages: function(html)
            {
              html = html.replace(/<img(.*?)>/gi, '[img$1]');
    
              // remove all tags
              html = html.replace(/<([Ss]*?)>/gi, '');
    
              html = html.replace(/\[img(.*?)\]/gi, '<img$1>');
    
              return html;
            },
            getOnlyLinksAndImages: function(html)
            {
              html = html.replace(/<a(.*?)href="(.*?)"(.*?)>([\w\W]*?)<\/a>/gi, '[a href="$2"]$4[/a]');
              html = html.replace(/<img(.*?)>/gi, '[img$1]');
    
              // remove all tags
              html = html.replace(/<(.*?)>/gi, '');
    
              html = html.replace(/\[a href="(.*?)"\]([\w\W]*?)\[\/a\]/gi, '<a href="$1">$2</a>');
              html = html.replace(/\[img(.*?)\]/gi, '<img$1>');
    
              return html;
            },
            encodeEntities: function(str)
            {
              str = String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
              return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
            },
            removeDirtyStyles: function(html)
            {
              if (this.utils.browser('msie')) return html;
    
              var div = document.createElement('div');
              div.innerHTML = html;
    
              this.clean.clearUnverifiedRemove($(div));
    
              html = div.innerHTML;
              $(div).remove();
    
              return html;
            },
            clearUnverified: function()
            {
              if (this.utils.browser('msie')) return;
    
              this.clean.clearUnverifiedRemove(this.$editor);
    
              var headers = this.$editor.find('h1, h2, h3, h4, h5, h6');
              headers.find('span').removeAttr('style');
              headers.find(this.opts.verifiedTags.join(', ')).removeAttr('style');
    
              this.code.sync();
            },
            clearUnverifiedRemove: function($editor)
            {
              $editor.find(this.opts.verifiedTags.join(', ')).removeAttr('style');
              $editor.find('span').not('[data-verified="redactor"]').removeAttr('style');
    
              $editor.find('span[data-verified="redactor"], img[data-verified="redactor"]').each(function(i, s)
              {
                var $s = $(s);
                $s.attr('style', $s.attr('rel'));
              });
    
            },
            cleanEmptyParagraph: function()
            {
    
            },
            setVerified: function(html)
            {
              if (this.utils.browser('msie')) return html;
    
              html = html.replace(new RegExp('<img(.*?[^>])>', 'gi'), '<img$1 data-verified="redactor">');
              html = html.replace(new RegExp('<span(.*?[^>])>', 'gi'), '<span$1 data-verified="redactor">');
    
              var matches = html.match(new RegExp('<(span|img)(.*?)style="(.*?)"(.*?[^>])>', 'gi'));
    
              if (matches)
              {
                var len = matches.length;
                for (var i = 0; i < len; i++)
                {
                  try {
    
                    var newTag = matches[i].replace(/style="(.*?)"/i, 'style="$1" rel="$1"');
                    html = html.replace(matches[i], newTag);
    
                  }
                  catch (e) {}
                }
              }
    
              return html;
            },
            convertInline: function(html)
            {
              var $div = $('<div />').html(html);
    
              var tags = this.opts.inlineTags;
              tags.push('span');
    
              $div.find(tags.join(',')).each(function()
              {
                var $el = $(this);
                var tag = this.tagName.toLowerCase();
                $el.attr('data-redactor-tag', tag);
    
                if (tag == 'span')
                {
                  if ($el.attr('style')) $el.attr('data-redactor-style', $el.attr('style'));
                  else if ($el.attr('class')) $el.attr('data-redactor-class', $el.attr('class'));
                }
    
              });
    
              html = $div.html();
              $div.remove();
    
              return html;
            },
            normalizeLists: function()
            {
              this.$editor.find('li').each(function(i,s)
              {
                var $next = $(s).next();
                if ($next.length !== 0 && ($next[0].tagName == 'UL' || $next[0].tagName == 'OL'))
                {
                  $(s).append($next);
                }
    
              });
            },
            removeSpaces: function(html)
            {
              html = html.replace(/\n/g, '');
              html = html.replace(/[\t]*/g, '');
              html = html.replace(/\n\s*\n/g, "\n");
              html = html.replace(/^[\s\n]*/g, ' ');
              html = html.replace(/[\s\n]*$/g, ' ');
              html = html.replace( />\s{2,}</g, '> <'); // between inline tags can be only one space
              html = html.replace(/\n\n/g, "\n");
              html = html.replace(/\u200B/g, '');
    
              return html;
            },
            replaceDivs: function(html)
            {
              if (this.opts.linebreaks)
              {
                html = html.replace(/<div><br\s?\/?><\/div>/gi, '<br />');
                html = html.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, '$2<br />');
              }
              else
              {
                html = html.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, '<p$1>$2</p>');
              }
    
              html = html.replace(/<div(.*?[^>])>/gi, '');
              html = html.replace(/<\/div>/gi, '');
    
              return html;
            },
            replaceDivsToBr: function(html)
            {
              html = html.replace(/<div\s(.*?)>/gi, '<p>');
              html = html.replace(/<div><br\s?\/?><\/div>/gi, '<br /><br />');
              html = html.replace(/<div>([\w\W]*?)<\/div>/gi, '$1<br /><br />');
    
              return html;
            },
            replaceParagraphsToBr: function(html)
            {
              html = html.replace(/<p\s(.*?)>/gi, '<p>');
              html = html.replace(/<p><br\s?\/?><\/p>/gi, '<br />');
              html = html.replace(/<p>([\w\W]*?)<\/p>/gi, '$1<br /><br />');
              html = html.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, '</blockquote>');
    
              return html;
            },
            saveFormTags: function(html)
            {
              return html.replace(/<form(.*?)>([\w\W]*?)<\/form>/gi, '<section$1 rel="redactor-form-tag">$2</section>');
            },
            restoreFormTags: function(html)
            {
              return html.replace(/<section(.*?) rel="redactor-form-tag"(.*?)>([\w\W]*?)<\/section>/gi, '<form$1$2>$3</form>');
            }
          };
        },
        code: function()
        {
          return {
            set: function(html)
            {
              html = $.trim(html.toString());
    
              // clean
              html = this.clean.onSet(html);
    
    
              if (this.utils.browser('msie'))
              {
                html = html.replace(/<span(.*?)id="selection-marker-(1|2)"(.*?)><\/span>/gi, '');
              }
    
              this.$editor.html(html);
              this.code.sync();
    
              if (html !== '') this.placeholder.remove();
    
              setTimeout($.proxy(this.buffer.add, this), 15);
              if (this.start === false) this.observe.load();
    
            },
            get: function()
            {
              var code = this.$textarea.val();
    
              if (this.opts.replaceDivs) code = this.clean.replaceDivs(code);
              if (this.opts.linebreaks) code = this.clean.replaceParagraphsToBr(code);
    
              // indent code
              code = this.tabifier.get(code);
    
              return code;
            },
            sync: function()
            {
              setTimeout($.proxy(this.code.startSync, this), 10);
            },
            startSync: function()
            {
              var html = this.$editor.html();
    
              // is there a need to synchronize
              if (this.code.syncCode && this.code.syncCode == html)
              {
                // do not sync
                return;
              }
    
              // save code
              this.code.syncCode = html;
    
              // before clean callback
              html = this.core.setCallback('syncBefore', html);
    
              // clean
              html = this.clean.onSync(html);
    
              // set code
              this.$textarea.val(html);
    
              // after sync callback
              this.core.setCallback('sync', html);
    
              if (this.start === false)
              {
                this.core.setCallback('change', html);
              }
    
              this.start = false;
    
              if (this.autosave.html == false)
              {
                this.autosave.html = this.code.get();
              }
    
              if (this.opts.codemirror)
              {
                this.$textarea.next('.CodeMirror').each(function(i, el)
                {
                  el.CodeMirror.setValue(html);
                });
              }
    
              //autosave
              this.autosave.onChange();
              this.autosave.enable();
            },
            toggle: function()
            {
              if (this.opts.visual)
              {
                this.code.showCode();
              }
              else
              {
                this.code.showVisual();
              }
            },
            showCode: function()
            {
              this.selection.save();
    
              this.code.offset = this.caret.getOffset();
              var scroll = $(window).scrollTop();
    
              var width = this.$editor.innerWidth(),
                height = this.$editor.innerHeight();
    
              this.$editor.hide();
    
              var html = this.$textarea.val();
    
              this.modified = this.clean.removeSpaces(html);
    
              // indent code
              html = this.tabifier.get(html);
    
              // caret position sync
              var start = 0, end = 0;
              var $editorDiv = $("<div/>").append($.parseHTML(this.clean.onSync(this.$editor.html()), document, true));
              var $selectionMarkers = $editorDiv.find("span.redactor-selection-marker");
    
              if ($selectionMarkers.length > 0)
              {
                var editorHtml = this.tabifier.get($editorDiv.html()).replace(/&amp;/g, '&');
    
                if ($selectionMarkers.length == 1)
                {
                  start = this.utils.strpos(editorHtml, $editorDiv.find("#selection-marker-1").prop("outerHTML"));
                  end   = start;
                }
                else if ($selectionMarkers.length == 2)
                {
                  start = this.utils.strpos(editorHtml, $editorDiv.find("#selection-marker-1").prop("outerHTML"));
                  end  = this.utils.strpos(editorHtml, $editorDiv.find("#selection-marker-2").prop("outerHTML")) - $editorDiv.find("#selection-marker-1").prop("outerHTML").toString().length;
                }
              }
    
              this.selection.removeMarkers();
              this.$textarea.val(html);
    
              if (this.opts.codemirror)
              {
                this.$textarea.next('.CodeMirror').each(function(i, el)
                {
                  $(el).show();
                  el.CodeMirror.setValue(html);
                  el.CodeMirror.setSize('100%', height);
                  el.CodeMirror.refresh();
    
                  if (start == end)
                  {
                    el.CodeMirror.setCursor(el.CodeMirror.posFromIndex(start).line, el.CodeMirror.posFromIndex(end).ch);
                  }
                  else
                  {
                    el.CodeMirror.setSelection({line: el.CodeMirror.posFromIndex(start).line,
                                  ch: el.CodeMirror.posFromIndex(start).ch},
                                  {line: el.CodeMirror.posFromIndex(end).line,
                                   ch:  el.CodeMirror.posFromIndex(end).ch});
                  }
    
                  el.CodeMirror.focus();
                });
              }
              else
              {
                this.$textarea.height(height).show().focus();
                this.$textarea.on('keydown.redactor-textarea-indenting', this.code.textareaIndenting);
    
                $(window).scrollTop(scroll);
    
                if (this.$textarea[0].setSelectionRange)
                {
                  this.$textarea[0].setSelectionRange(start, end);
                }
    
                this.$textarea[0].scrollTop = 0;
              }
    
              this.opts.visual = false;
    
              this.button.setInactiveInCode();
              this.button.setActive('html');
              this.core.setCallback('source', html);
            },
            showVisual: function()
            {
              var html;
    
              if (this.opts.visual) return;
    
              var start = 0, end = 0;
    
              if (this.opts.codemirror)
              {
                var selection;
    
                this.$textarea.next('.CodeMirror').each(function(i, el)
                {
                  selection = el.CodeMirror.listSelections();
    
                  start = el.CodeMirror.indexFromPos(selection[0].anchor);
                  end = el.CodeMirror.indexFromPos(selection[0].head);
    
                  html = el.CodeMirror.getValue();
                });
              }
              else
              {
                start = this.$textarea.get(0).selectionStart;
                end = this.$textarea.get(0).selectionEnd;
    
                html = this.$textarea.hide().val();
              }
    
              // if selection starts from end
              if (start > end && end > 0)
              {
                var tempStart = end;
                var tempEnd = start;
    
                start = tempStart;
                end = tempEnd;
              }
    
              start = this.code.enlargeOffset(html, start);
              end = this.code.enlargeOffset(html, end);
    
              html = html.substr(0, start) + this.selection.getMarkerAsHtml(1) + html.substr(start);
    
              if (end > start)
              {
                var markerLength = this.selection.getMarkerAsHtml(1).toString().length;
    
                html = html.substr(0, end + markerLength) + this.selection.getMarkerAsHtml(2) + html.substr(end + markerLength);
              }
    
    
    
              if (this.modified !== this.clean.removeSpaces(html))
              {
                this.code.set(html);
    
              }
    
              if (this.opts.codemirror)
              {
                this.$textarea.next('.CodeMirror').hide();
              }
    
              this.$editor.show();
    
              if (!this.utils.isEmpty(html))
              {
                this.placeholder.remove();
              }
    
              this.selection.restore();
    
              this.$textarea.off('keydown.redactor-textarea-indenting');
    
              this.button.setActiveInVisual();
              this.button.setInactive('html');
              this.observe.load();
              this.opts.visual = true;
              this.core.setCallback('visual', html);
            },
            textareaIndenting: function(e)
            {
              if (e.keyCode !== 9) return true;
    
              var $el = this.$textarea;
              var start = $el.get(0).selectionStart;
              $el.val($el.val().substring(0, start) + "\t" + $el.val().substring($el.get(0).selectionEnd));
              $el.get(0).selectionStart = $el.get(0).selectionEnd = start + 1;
    
              return false;
            },
            enlargeOffset: function(html, offset)
            {
              var htmlLength = html.length;
              var c = 0;
    
              if (html[offset] == '>')
              {
                c++;
              }
              else
              {
                for(var i = offset; i <= htmlLength; i++)
                {
                  c++;
    
                  if (html[i] == '>')
                  {
                    break;
                  }
                  else if (html[i] == '<' || i == htmlLength)
                  {
                    c = 0;
                    break;
                  }
                }
              }
    
              return offset + c;
            }
          };
        },
        core: function()
        {
          return {
            getObject: function()
            {
              return $.extend({}, this);
            },
            getEditor: function()
            {
              return this.$editor;
            },
            getBox: function()
            {
              return this.$box;
            },
            getElement: function()
            {
              return this.$element;
            },
            getTextarea: function()
            {
              return this.$textarea;
            },
            getToolbar: function()
            {
              return (this.$toolbar) ? this.$toolbar : false;
            },
            addEvent: function(name)
            {
              this.core.event = name;
            },
            getEvent: function()
            {
              return this.core.event;
            },
            setCallback: function(type, e, data)
            {
              var eventName = type + 'Callback';
              var eventNamespace = 'redactor';
              var callback = this.opts[eventName];
    
              if (this.$textarea)
              {
                var returnValue = false;
                var events = $._data(this.$textarea[0], 'events');
    
                if (typeof events != 'undefined' && typeof events[eventName] != 'undefined')
                {
                  $.each(events[eventName], $.proxy(function(key, value)
                  {
                    if (value['namespace'] == eventNamespace)
                    {
                      var data = (typeof data == 'undefined') ? [e] : [e, data];
    
                      returnValue = (typeof data == 'undefined') ? value.handler.call(this, e) : value.handler.call(this, e, data);
                    }
                  }, this));
                }
    
                if (returnValue) return returnValue;
              }
    
              if ($.isFunction(callback))
              {
                return (typeof data == 'undefined') ? callback.call(this, e) : callback.call(this, e, data);
              }
              else
              {
                return (typeof data == 'undefined') ? e : data;
              }
            },
            destroy: function()
            {
              this.opts.destroyed = true;
    
              this.core.setCallback('destroy');
    
              // off events and remove data
              this.$element.off('.redactor').removeData('redactor');
              this.$editor.off('.redactor');
    
              $(document).off('mousedown.redactor-blur.' + this.uuid);
              $(document).off('mousedown.redactor.' + this.uuid);
              $(document).off('click.redactor-image-delete.' + this.uuid);
              $(document).off('click.redactor-image-resize-hide.' + this.uuid);
              $(document).off('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid);
              $("body").off('scroll.redactor.' + this.uuid);
              $(this.opts.toolbarFixedTarget).off('scroll.redactor.' + this.uuid);
    
              // common
              this.$editor.removeClass('redactor-editor redactor-linebreaks redactor-placeholder');
              this.$editor.removeAttr('contenteditable');
    
              var html = this.code.get();
    
              if (this.opts.toolbar)
              {
                // dropdowns off
                this.$toolbar.find('a').each(function()
                {
                  var $el = $(this);
                  if ($el.data('dropdown'))
                  {
                    $el.data('dropdown').remove();
                    $el.data('dropdown', {});
                  }
                });
              }
    
              if (this.build.isTextarea())
              {
                this.$box.after(this.$element);
                this.$box.remove();
                this.$element.val(html).show();
              }
              else
              {
                this.$box.after(this.$editor);
                this.$box.remove();
                this.$element.html(html).show();
              }
    
              // paste box
              if (this.$pasteBox) this.$pasteBox.remove();
    
              // modal
              if (this.$modalBox) this.$modalBox.remove();
              if (this.$modalOverlay) this.$modalOverlay.remove();
    
              // buttons tooltip
              $('.redactor-toolbar-tooltip-' + this.uuid).remove();
    
              // autosave
              clearInterval(this.autosaveInterval);
            }
          };
        },
        dropdown: function()
        {
          return {
            build: function(name, $dropdown, dropdownObject)
            {
              if (name == 'formatting' && this.opts.formattingAdd)
              {
                $.each(this.opts.formattingAdd, $.proxy(function(i,s)
                {
                  var name = s.tag,
                    func;
    
                  if (typeof s['class'] != 'undefined')
                  {
                    name = name + '-' + s['class'];
                  }
    
                  s.type = (this.utils.isBlockTag(s.tag)) ? 'block' : 'inline';
    
                  if (typeof s.func !== "undefined")
                  {
                    func = s.func;
                  }
                  else
                  {
                    func = (s.type == 'inline') ? 'inline.formatting' : 'block.formatting';
                  }
    
                  if (this.opts.linebreaks && s.type == 'block' && s.tag == 'p') return;
    
                  this.formatting[name] = {
                    tag: s.tag,
                    style: s.style,
                    'class': s['class'],
                    attr: s.attr,
                    data: s.data,
                    clear: s.clear
                  };
    
                  dropdownObject[name] = {
                    func: func,
                    title: s.title
                  };
    
                }, this));
              }
    
              $.each(dropdownObject, $.proxy(function(btnName, btnObject)
              {
                var $item = $('<a href="#" class="redactor-dropdown-' + btnName + '" role="button">' + btnObject.title + '</a>');
                if (name == 'formatting') $item.addClass('redactor-formatting-' + btnName);
    
                $item.on('click', $.proxy(function(e)
                {
                  e.preventDefault();
    
                  var type = 'func';
                  var callback = btnObject.func;
                  if (btnObject.command)
                  {
                    type = 'command';
                    callback = btnObject.command;
                  }
                  else if (btnObject.dropdown)
                  {
                    type = 'dropdown';
                    callback = btnObject.dropdown;
                  }
    
                  if ($(e.target).hasClass('redactor-dropdown-link-inactive')) return;
    
                  this.button.onClick(e, btnName, type, callback);
                  this.dropdown.hideAll();
    
                }, this));
    
                this.observe.addDropdown($item, btnName, btnObject);
    
                $dropdown.append($item);
    
              }, this));
            },
            show: function(e, key)
            {
              if (!this.opts.visual)
              {
                e.preventDefault();
                return false;
              }
    
              var $button = this.button.get(key);
    
              // Always re-append it to the end of <body> so it always has the highest sub-z-index.
              var $dropdown = $button.data('dropdown').appendTo(document.body);
    
              if (this.opts.highContrast)
              {
                $dropdown.addClass("redactor-dropdown-contrast");
              }
    
              if ($button.hasClass('dropact'))
              {
                this.dropdown.hideAll();
              }
              else
              {
                this.dropdown.hideAll();
                this.observe.dropdowns();
    
                this.core.setCallback('dropdownShow', { dropdown: $dropdown, key: key, button: $button });
    
                this.button.setActive(key);
    
                $button.addClass('dropact');
    
                var keyPosition = $button.offset();
    
                // fix right placement
                var dropdownWidth = $dropdown.width();
                if ((keyPosition.left + dropdownWidth) > $(document).width())
                {
                  keyPosition.left = Math.max(0, keyPosition.left - dropdownWidth);
                }
    
                var left = keyPosition.left + 'px';
                if (this.$toolbar.hasClass('toolbar-fixed-box'))
                {
                  var top = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset;
                  var position = 'fixed';
                  if (this.opts.toolbarFixedTarget !== document)
                  {
                    top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top) + this.opts.toolbarFixedTopOffset;
                    position = 'absolute';
                  }
    
                  $dropdown.css({ position: position, left: left, top: top + 'px' }).show();
                }
                else
                {
                  var top = ($button.innerHeight() + keyPosition.top) + 'px';
    
                  $dropdown.css({ position: 'absolute', left: left, top: top }).show();
                }
    
                this.core.setCallback('dropdownShown', { dropdown: $dropdown, key: key, button: $button });
    
                this.$dropdown = $dropdown;
              }
    
    
              $(document).one('click.redactor-dropdown', $.proxy(this.dropdown.hide, this));
              this.$editor.one('click.redactor-dropdown', $.proxy(this.dropdown.hide, this));
              $(document).one('keyup.redactor-dropdown', $.proxy(this.dropdown.closeHandler, this));
    
              // disable scroll whan dropdown scroll
              $dropdown.on('mouseover.redactor-dropdown', $.proxy(this.utils.disableBodyScroll, this)).on('mouseout.redactor-dropdown', $.proxy(this.utils.enableBodyScroll, this));
    
    
              e.stopPropagation();
            },
            closeHandler: function(e)
            {
              if (e.which != this.keyCode.ESC) return;
    
              this.dropdown.hideAll();
              this.$editor.focus();
            },
            hideAll: function()
            {
              this.$toolbar.find('a.dropact').removeClass('redactor-act').removeClass('dropact');
    
              this.utils.enableBodyScroll();
    
              $('.redactor-dropdown-' + this.uuid).hide();
              $('.redactor-dropdown-link-selected').removeClass('redactor-dropdown-link-selected');
    
    
              if (this.$dropdown)
              {
                this.$dropdown.off('.redactor-dropdown');
                this.core.setCallback('dropdownHide', this.$dropdown);
    
                this.$dropdown = false;
              }
            },
            hide: function (e)
            {
              var $dropdown = $(e.target);
    
              if (!$dropdown.hasClass('dropact') && !$dropdown.hasClass('redactor-dropdown-link-inactive'))
              {
                $dropdown.removeClass('dropact');
                $dropdown.off('mouseover mouseout');
    
                this.dropdown.hideAll();
              }
            }
          };
        },
        file: function()
        {
          return {
            show: function()
            {
              this.modal.load('file', this.lang.get('file'), 700);
              this.upload.init('#redactor-modal-file-upload', this.opts.fileUpload, this.file.insert);
    
              this.selection.save();
    
              this.selection.get();
              var text = this.sel.toString();
    
              $('#redactor-filename').val(text);
    
              this.modal.show();
            },
            insert: function(json, direct, e)
            {
              // error callback
              if (typeof json.error != 'undefined')
              {
                this.modal.close();
                this.selection.restore();
                this.core.setCallback('fileUploadError', json);
                return;
              }
    
              var link;
              if (typeof json == 'string')
              {
                link = json;
              }
              else
              {
                var text = $('#redactor-filename').val();
                if (typeof text == 'undefined' || text === '') text = json.filename;
    
                link = '<a href="' + json.filelink + '" id="filelink-marker">' + text + '</a>';
              }
    
              if (direct)
              {
                this.selection.removeMarkers();
                var marker = this.selection.getMarker();
                this.insert.nodeToCaretPositionFromPoint(e, marker);
              }
              else
              {
                this.modal.close();
              }
    
              this.selection.restore();
              this.buffer.set();
    
              this.insert.htmlWithoutClean(link);
    
              if (typeof json == 'string') return;
    
              var linkmarker = $(this.$editor.find('a#filelink-marker'));
              if (linkmarker.length !== 0)
              {
                linkmarker.removeAttr('id').removeAttr('style');
              }
              else linkmarker = false;
    
              this.core.setCallback('fileUpload', linkmarker, json);
    
            }
          };
        },
        focus: function()
        {
          return {
            setStart: function()
            {
              this.$editor.focus();
    
              var first = this.$editor.children().first();
    
              if (first.length === 0) return;
              if (first[0].length === 0 || first[0].tagName == 'BR' || first[0].nodeType == 3)
              {
                return;
              }
    
              if (first[0].tagName == 'UL' || first[0].tagName == 'OL')
              {
                var child = first.find('li').first();
                if (!this.utils.isBlock(child) && child.text() === '')
                {
                  // empty inline tag in li
                  this.caret.setStart(child);
                  return;
                }
              }
    
              if (this.opts.linebreaks && !this.utils.isBlockTag(first[0].tagName))
              {
                this.selection.get();
                this.range.setStart(this.$editor[0], 0);
                this.range.setEnd(this.$editor[0], 0);
                this.selection.addRange();
    
                return;
              }
    
              // if node is tag
              this.caret.setStart(first);
            },
            setEnd: function()
            {
              var last = this.$editor.children().last();
              this.$editor.focus();
    
              if (last.size() === 0) return;
              if (this.utils.isEmpty(this.$editor.html()))
              {
    
                this.selection.get();
                this.range.collapse(true);
                this.range.setStartAfter(last[0]);
                this.range.setEnd(last[0], 0);
                this.selection.addRange();
              }
              else
              {
                this.selection.get();
                this.range.selectNodeContents(last[0]);
                this.range.collapse(false);
                this.selection.addRange();
    
              }
            },
            isFocused: function()
            {
              var focusNode = document.getSelection().focusNode;
              if (focusNode === null) return false;
    
              if (this.opts.linebreaks && $(focusNode.parentNode).hasClass('redactor-linebreaks')) return true;
              else if (!this.utils.isRedactorParent(focusNode.parentNode)) return false;
    
              return this.$editor.is(':focus');
            }
          };
        },
        image: function()
        {
          return {
            show: function()
            {
              this.modal.load('image', this.lang.get('image'), 700);
              this.upload.init('#redactor-modal-image-droparea', this.opts.imageUpload, this.image.insert);
    
              this.selection.save();
              this.modal.show();
    
            },
            showEdit: function($image)
            {
              var $link = $image.closest('a', this.$editor[0]);
    
              this.modal.load('imageEdit', this.lang.get('edit'), 705);
    
              this.modal.createCancelButton();
              this.image.buttonDelete = this.modal.createDeleteButton(this.lang.get('_delete'));
              this.image.buttonSave = this.modal.createActionButton(this.lang.get('save'));
    
              this.image.buttonDelete.on('click', $.proxy(function()
              {
                this.image.remove($image);
    
              }, this));
    
              this.image.buttonSave.on('click', $.proxy(function()
              {
                this.image.update($image);
    
              }, this));
    
              // hide link's tooltip
              $('.redactor-link-tooltip').remove();
    
              $('#redactor-image-title').val($image.attr('alt'));
    
              if (!this.opts.imageLink) $('.redactor-image-link-option').hide();
              else
              {
                var $redactorImageLink = $('#redactor-image-link');
    
                $redactorImageLink.attr('href', $image.attr('src'));
                if ($link.length !== 0)
                {
                  $redactorImageLink.val($link.attr('href'));
                  if ($link.attr('target') == '_blank') $('#redactor-image-link-blank').prop('checked', true);
                }
              }
    
              if (!this.opts.imagePosition) $('.redactor-image-position-option').hide();
              else
              {
                var floatValue = ($image.css('display') == 'block' && $image.css('float') == 'none') ? 'center' : $image.css('float');
                $('#redactor-image-align').val(floatValue);
              }
    
              this.modal.show();
              $('#redactor-image-title').focus();
    
            },
            setFloating: function($image)
            {
              var floating = $('#redactor-image-align').val();
    
              var imageFloat = '';
              var imageDisplay = '';
              var imageMargin = '';
    
              switch (floating)
              {
                case 'left':
                  imageFloat = 'left';
                  imageMargin = '0 ' + this.opts.imageFloatMargin + ' ' + this.opts.imageFloatMargin + ' 0';
                break;
                case 'right':
                  imageFloat = 'right';
                  imageMargin = '0 0 ' + this.opts.imageFloatMargin + ' ' + this.opts.imageFloatMargin;
                break;
                case 'center':
                  imageDisplay = 'block';
                  imageMargin = 'auto';
                break;
              }
    
              $image.css({ 'float': imageFloat, display: imageDisplay, margin: imageMargin });
              $image.attr('rel', $image.attr('style'));
            },
            update: function($image)
            {
              this.image.hideResize();
              this.buffer.set();
    
              var $link = $image.closest('a', this.$editor[0]);
    
              var title = $('#redactor-image-title').val().replace(/(<([^>]+)>)/ig,"");
              $image.attr('alt', title);
    
              this.image.setFloating($image);
    
              // as link
              var link = $.trim($('#redactor-image-link').val());
              var link = link.replace(/(<([^>]+)>)/ig,"");
              if (link !== '')
              {
                // test url (add protocol)
                var pattern = '((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}';
                var re = new RegExp('^(http|ftp|https)://' + pattern, 'i');
                var re2 = new RegExp('^' + pattern, 'i');
    
                if (link.search(re) == -1 && link.search(re2) === 0 && this.opts.linkProtocol)
                {
                  link = this.opts.linkProtocol + '://' + link;
                }
    
                var target = ($('#redactor-image-link-blank').prop('checked')) ? true : false;
    
                if ($link.length === 0)
                {
                  var a = $('<a href="' + link + '">' + this.utils.getOuterHtml($image) + '</a>');
                  if (target) a.attr('target', '_blank');
    
                  $image.replaceWith(a);
                }
                else
                {
                  $link.attr('href', link);
                  if (target)
                  {
                    $link.attr('target', '_blank');
                  }
                  else
                  {
                    $link.removeAttr('target');
                  }
                }
              }
              else if ($link.length !== 0)
              {
                $link.replaceWith(this.utils.getOuterHtml($image));
    
              }
    
              this.modal.close();
              this.observe.images();
              this.code.sync();
    
    
            },
            setEditable: function($image)
            {
              if (this.opts.imageEditable)
              {
                $image.on('dragstart', $.proxy(this.image.onDrag, this));
              }
    
              var handler = $.proxy(function(e)
              {
    
                this.observe.image = $image;
    
                this.image.resizer = this.image.loadEditableControls($image);
    
                $(document).on('mousedown.redactor-image-resize-hide.' + this.uuid, $.proxy(this.image.hideResize, this));
    
                // resize
                if (!this.opts.imageResizable) return;
    
                this.image.resizer.on('mousedown.redactor touchstart.redactor', $.proxy(function(e)
                {
                  this.image.setResizable(e, $image);
                }, this));
    
              }, this);
    
    
              $image.off('mousedown.redactor').on('mousedown.redactor', $.proxy(this.image.hideResize, this));
              $image.off('click.redactor touchstart.redactor').on('click.redactor touchstart.redactor', handler);
            },
            setResizable: function(e, $image)
            {
              e.preventDefault();
    
                this.image.resizeHandle = {
                    x : e.pageX,
                    y : e.pageY,
                    el : $image,
                    ratio: $image.width() / $image.height(),
                    h: $image.height()
                };
    
                e = e.originalEvent || e;
    
                if (e.targetTouches)
                {
                     this.image.resizeHandle.x = e.targetTouches[0].pageX;
                     this.image.resizeHandle.y = e.targetTouches[0].pageY;
                }
    
              this.image.startResize();
    
    
            },
            startResize: function()
            {
              $(document).on('mousemove.redactor-image-resize touchmove.redactor-image-resize', $.proxy(this.image.moveResize, this));
              $(document).on('mouseup.redactor-image-resize touchend.redactor-image-resize', $.proxy(this.image.stopResize, this));
            },
            moveResize: function(e)
            {
              e.preventDefault();
    
              e = e.originalEvent || e;
    
              var height = this.image.resizeHandle.h;
    
                    if (e.targetTouches) height += (e.targetTouches[0].pageY -  this.image.resizeHandle.y);
                    else height += (e.pageY -  this.image.resizeHandle.y);
    
              var width = Math.round(height * this.image.resizeHandle.ratio);
    
              if (height < 50 || width < 100) return;
    
              var height = Math.round(this.image.resizeHandle.el.width() / this.image.resizeHandle.ratio);
    
              this.image.resizeHandle.el.attr({width: width, height: height});
                    this.image.resizeHandle.el.width(width);
                    this.image.resizeHandle.el.height(height);
    
                    this.code.sync();
            },
            stopResize: function()
            {
              this.handle = false;
              $(document).off('.redactor-image-resize');
    
              this.image.hideResize();
            },
            onDrag: function(e)
            {
              if (this.$editor.find('#redactor-image-box').length !== 0)
              {
                e.preventDefault();
                return false;
              }
    
              this.$editor.on('drop.redactor-image-inside-drop', $.proxy(function()
              {
                setTimeout($.proxy(this.image.onDrop, this), 1);
    
              }, this));
            },
            onDrop: function()
            {
              this.image.fixImageSourceAfterDrop();
              this.observe.images();
              this.$editor.off('drop.redactor-image-inside-drop');
              this.clean.clearUnverified();
              this.code.sync();
            },
            fixImageSourceAfterDrop: function()
            {
              this.$editor.find('img[data-save-url]').each(function()
              {
                var $el = $(this);
                $el.attr('src', $el.attr('data-save-url'));
                $el.removeAttr('data-save-url');
              });
            },
            hideResize: function(e)
            {
              if (e && $(e.target).closest('#redactor-image-box', this.$editor[0]).length !== 0) return;
              if (e && e.target.tagName == 'IMG')
              {
                var $image = $(e.target);
                $image.attr('data-save-url', $image.attr('src'));
              }
    
              var imageBox = this.$editor.find('#redactor-image-box');
              if (imageBox.length === 0) return;
    
              $('#redactor-image-editter').remove();
              $('#redactor-image-resizer').remove();
    
              imageBox.find('img').css({
                marginTop: imageBox[0].style.marginTop,
                marginBottom: imageBox[0].style.marginBottom,
                marginLeft: imageBox[0].style.marginLeft,
                marginRight: imageBox[0].style.marginRight
              });
    
              imageBox.css('margin', '');
              imageBox.find('img').css('opacity', '');
              imageBox.replaceWith(function()
              {
                return $(this).contents();
              });
    
              $(document).off('mousedown.redactor-image-resize-hide.' + this.uuid);
    
    
              if (typeof this.image.resizeHandle !== 'undefined')
              {
                this.image.resizeHandle.el.attr('rel', this.image.resizeHandle.el.attr('style'));
              }
    
              this.code.sync();
    
            },
            loadResizableControls: function($image, imageBox)
            {
              if (this.opts.imageResizable && !this.utils.isMobile())
              {
                var imageResizer = $('<span id="redactor-image-resizer" data-redactor="verified"></span>');
    
                if (!this.utils.isDesktop())
                {
                  imageResizer.css({ width: '15px', height: '15px' });
                }
    
                imageResizer.attr('contenteditable', false);
                imageBox.append(imageResizer);
                imageBox.append($image);
    
                return imageResizer;
              }
              else
              {
                imageBox.append($image);
                return false;
              }
            },
            loadEditableControls: function($image)
            {
              var imageBox = $('<span id="redactor-image-box" data-redactor="verified">');
              imageBox.css('float', $image.css('float')).attr('contenteditable', false);
    
              if ($image[0].style.margin != 'auto')
              {
                imageBox.css({
                  marginTop: $image[0].style.marginTop,
                  marginBottom: $image[0].style.marginBottom,
                  marginLeft: $image[0].style.marginLeft,
                  marginRight: $image[0].style.marginRight
                });
    
                $image.css('margin', '');
              }
              else
              {
                imageBox.css({ 'display': 'block', 'margin': 'auto' });
              }
    
              $image.css('opacity', '.5').after(imageBox);
    
    
              if (this.opts.imageEditable)
              {
                // editter
                this.image.editter = $('<span id="redactor-image-editter" data-redactor="verified">' + this.lang.get('edit') + '</span>');
                this.image.editter.attr('contenteditable', false);
                this.image.editter.on('click', $.proxy(function()
                {
                  this.image.showEdit($image);
                }, this));
    
                imageBox.append(this.image.editter);
    
                // position correction
                var editerWidth = this.image.editter.innerWidth();
                this.image.editter.css('margin-left', '-' + editerWidth/2 + 'px');
              }
    
              return this.image.loadResizableControls($image, imageBox);
    
            },
            remove: function(image)
            {
              var $image = $(image);
              var $link = $image.closest('a', this.$editor[0]);
              var $figure = $image.closest('figure', this.$editor[0]);
              var $parent = $image.parent();
              if ($('#redactor-image-box').length !== 0)
              {
                $parent = $('#redactor-image-box').parent();
              }
    
              var $next;
              if ($figure.length !== 0)
              {
                $next = $figure.next();
                $figure.remove();
              }
              else if ($link.length !== 0)
              {
                $parent = $link.parent();
                $link.remove();
              }
              else
              {
                $image.remove();
              }
    
              $('#redactor-image-box').remove();
    
              if ($figure.length !== 0)
              {
                this.caret.setStart($next);
              }
              else
              {
                this.caret.setStart($parent);
              }
    
              // delete callback
              this.core.setCallback('imageDelete', $image[0].src, $image);
    
              this.modal.close();
              this.code.sync();
            },
            insert: function(json, direct, e)
            {
              // error callback
              if (typeof json.error != 'undefined')
              {
                this.modal.close();
                this.selection.restore();
                this.core.setCallback('imageUploadError', json);
                return;
              }
    
              var $img;
              if (typeof json == 'string')
              {
                $img = $(json).attr('data-redactor-inserted-image', 'true');
              }
              else
              {
                $img = $('<img>');
                $img.attr('src', json.filelink).attr('data-redactor-inserted-image', 'true');
              }
    
    
              var node = $img;
              var isP = this.utils.isCurrentOrParent('P');
              if (isP)
              {
                // will replace
                node = $('<blockquote />').append($img);
              }
    
              if (direct)
              {
                this.selection.removeMarkers();
                var marker = this.selection.getMarker();
                this.insert.nodeToCaretPositionFromPoint(e, marker);
              }
              else
              {
                this.modal.close();
              }
    
              this.selection.restore();
              this.buffer.set();
    
              this.insert.html(this.utils.getOuterHtml(node), false);
    
              var $image = this.$editor.find('img[data-redactor-inserted-image=true]').removeAttr('data-redactor-inserted-image');
    
              if (isP)
              {
                $image.parent().contents().unwrap().wrap('<p />');
              }
              else if (this.opts.linebreaks)
              {
                if (!this.utils.isEmpty(this.code.get()))
                {
                  $image.before('<br>');
                }
    
                $image.after('<br>');
              }
    
              if (typeof json == 'string') return;
    
              this.core.setCallback('imageUpload', $image, json);
    
            }
          };
        },
        indent: function()
        {
          return {
            increase: function()
            {
              // focus
              if (!this.utils.browser('msie')) this.$editor.focus();
    
              this.buffer.set();
              this.selection.save();
    
              var block = this.selection.getBlock();
    
              if (block && block.tagName == 'LI')
              {
                this.indent.increaseLists();
              }
              else if (block === false && this.opts.linebreaks)
              {
                this.indent.increaseText();
              }
              else
              {
                this.indent.increaseBlocks();
              }
    
              this.selection.restore();
              this.code.sync();
            },
            increaseLists: function()
            {
              document.execCommand('indent');
    
              this.indent.fixEmptyIndent();
              this.clean.normalizeLists();
              this.clean.clearUnverified();
            },
            increaseBlocks: function()
            {
              $.each(this.selection.getBlocks(), $.proxy(function(i, elem)
              {
                if (elem.tagName === 'TD' || elem.tagName === 'TH') return;
    
                var $el = this.utils.getAlignmentElement(elem);
    
                var left = this.utils.normalize($el.css('margin-left')) + this.opts.indentValue;
                $el.css('margin-left', left + 'px');
    
              }, this));
            },
            increaseText: function()
            {
              var wrapper = this.selection.wrap('div');
              $(wrapper).attr('data-tagblock', 'redactor');
              $(wrapper).css('margin-left', this.opts.indentValue + 'px');
            },
            decrease: function()
            {
              this.buffer.set();
              this.selection.save();
    
              var block = this.selection.getBlock();
              if (block && block.tagName == 'LI')
              {
                this.indent.decreaseLists();
              }
              else
              {
                this.indent.decreaseBlocks();
              }
    
              this.selection.restore();
              this.code.sync();
            },
            decreaseLists: function()
            {
              document.execCommand('outdent');
    
              var current = this.selection.getCurrent();
              var $item = $(current).closest('li', this.$editor[0]);
    
              this.indent.fixEmptyIndent();
    
              if (!this.opts.linebreaks && $item.length === 0)
              {
                document.execCommand('formatblock', false, 'p');
                this.$editor.find('ul, ol, blockquote, p').each($.proxy(this.utils.removeEmpty, this));
              }
    
              this.clean.clearUnverified();
            },
            decreaseBlocks: function()
            {
              $.each(this.selection.getBlocks(), $.proxy(function(i, elem)
              {
                var $el = this.utils.getAlignmentElement(elem);
                var left = this.utils.normalize($el.css('margin-left')) - this.opts.indentValue;
    
                if (left <= 0)
                {
                  if (this.opts.linebreaks && typeof($el.data('tagblock')) !== 'undefined')
                  {
                    $el.replaceWith($el.html() + '<br />');
                  }
                  else
                  {
                    $el.css('margin-left', '');
                    this.utils.removeEmptyAttr($el, 'style');
                  }
                }
                else
                {
                  $el.css('margin-left', left + 'px');
                }
    
              }, this));
            },
            fixEmptyIndent: function()
            {
              var block = this.selection.getBlock();
    
              if (this.range.collapsed && block && block.tagName == 'LI' && this.utils.isEmpty($(block).text()))
              {
                var $block = $(block);
                $block.find('span').not('.redactor-selection-marker').contents().unwrap();
                $block.append('<br>');
              }
            }
          };
        },
        inline: function()
        {
          return {
            formatting: function(name)
            {
              var type, value;
    
              if (typeof this.formatting[name].style != 'undefined') type = 'style';
              else if (typeof this.formatting[name]['class'] != 'undefined') type = 'class';
    
              if (type) value = this.formatting[name][type];
    
              this.inline.format(this.formatting[name].tag, type, value);
    
            },
            format: function(tag, type, value)
            {
              var current = this.selection.getCurrent();
              if (current && current.tagName === 'TR') return;
    
              // Stop formatting pre and headers
              if (this.utils.isCurrentOrParent('PRE') || this.utils.isCurrentOrParentHeader()) return;
    
              var tags = ['b', 'bold', 'i', 'italic', 'underline', 'strikethrough', 'deleted', 'superscript', 'subscript'];
              var replaced = ['strong', 'strong', 'em', 'em', 'u', 'del', 'del', 'sup', 'sub'];
    
              for (var i = 0; i < tags.length; i++)
              {
                if (tag == tags[i]) tag = replaced[i];
              }
    
    
              if (this.opts.allowedTags)
              {
                if ($.inArray(tag, this.opts.allowedTags) == -1) return;
              }
              else
              {
                if ($.inArray(tag, this.opts.deniedTags) !== -1) return;
              }
    
              this.inline.type = type || false;
              this.inline.value = value || false;
    
              this.buffer.set();
    
              if (!this.utils.browser('msie') && !this.opts.linebreaks)
              {
                this.$editor.focus();
              }
    
              this.selection.get();
    
              if (this.range.collapsed)
              {
                this.inline.formatCollapsed(tag);
              }
              else
              {
                this.inline.formatMultiple(tag);
              }
            },
            formatCollapsed: function(tag)
            {
              var current = this.selection.getCurrent();
              var $parent = $(current).closest(tag + '[data-redactor-tag=' + tag + ']', this.$editor[0]);
    
              // inline there is
              if ($parent.length !== 0 && (this.inline.type != 'style' && $parent[0].tagName != 'SPAN'))
              {
                // remove empty
                if (this.utils.isEmpty($parent.text()))
                {
                  this.caret.setAfter($parent[0]);
    
                  $parent.remove();
                  this.code.sync();
                }
                else if (this.utils.isEndOfElement($parent))
                {
                  this.caret.setAfter($parent[0]);
                }
    
                return;
              }
    
              // create empty inline
              var node = $('<' + tag + '>').attr('data-verified', 'redactor').attr('data-redactor-tag', tag);
              node.html(this.opts.invisibleSpace);
    
              node = this.inline.setFormat(node);
    
              var node = this.insert.node(node);
              this.caret.setEnd(node);
    
              this.code.sync();
            },
            formatMultiple: function(tag)
            {
              this.inline.formatConvert(tag);
    
              this.selection.save();
              document.execCommand('strikethrough');
    
              this.$editor.find('strike').each($.proxy(function(i,s)
              {
                var $el = $(s);
    
                this.inline.formatRemoveSameChildren($el, tag);
    
                var $span;
                if (this.inline.type)
                {
                  $span = $('<span>').attr('data-redactor-tag', tag).attr('data-verified', 'redactor');
                  $span = this.inline.setFormat($span);
                }
                else
                {
                  $span = $('<' + tag + '>').attr('data-redactor-tag', tag).attr('data-verified', 'redactor');
                }
    
                $el.replaceWith($span.html($el.contents()));
                var $parent = $span.parent();
    
                // remove U tag if selected link + node
                if ($span[0].tagName === 'A' && $parent && $parent[0].tagName === 'U')
                {
                  $span.parent().replaceWith($span);
                }
    
                if (tag == 'span')
                {
                  if ($parent && $parent[0].tagName === 'SPAN' && this.inline.type === 'style')
                  {
                    var arr = this.inline.value.split(';');
    
                    for (var z = 0; z < arr.length; z++)
                    {
                      if (arr[z] === '') return;
                      var style = arr[z].split(':');
                      $parent.css(style[0], '');
    
                      if (this.utils.removeEmptyAttr($parent, 'style'))
                      {
                        $parent.replaceWith($parent.contents());
                      }
    
                    }
    
                  }
                }
    
              }, this));
    
              // clear text decoration
              if (tag != 'span')
              {
                this.$editor.find(this.opts.inlineTags.join(', ')).each($.proxy(function(i,s)
                {
                  var $el = $(s);
    
    
                  if (s.tagName === 'U' && s.attributes.length === 0)
                  {
                    $el.replaceWith($el.contents());
                    return;
                  }
    
                  var property = $el.css('text-decoration');
                  if (property === 'line-through')
                  {
                    $el.css('text-decoration', '');
                    this.utils.removeEmptyAttr($el, 'style');
                  }
                }, this));
              }
    
              if (tag != 'del')
              {
                var _this = this;
                this.$editor.find('inline').each(function(i,s)
                {
                  _this.utils.replaceToTag(s, 'del');
                });
              }
    
              this.selection.restore();
              this.code.sync();
    
            },
            formatRemoveSameChildren: function($el, tag)
            {
              var self = this;
              $el.children(tag).each(function()
              {
                var $child = $(this);
    
                if (!$child.hasClass('redactor-selection-marker'))
                {
                  if (self.inline.type == 'style')
                  {
                    var arr = self.inline.value.split(';');
    
                    for (var z = 0; z < arr.length; z++)
                    {
                      if (arr[z] === '') return;
    
                      var style = arr[z].split(':');
                      $child.css(style[0], '');
    
                      if (self.utils.removeEmptyAttr($child , 'style'))
                      {
                        $child.replaceWith($child.contents());
                      }
    
                    }
                  }
                  else
                  {
                    $child.contents().unwrap();
                  }
                }
    
              });
            },
            formatConvert: function(tag)
            {
              this.selection.save();
    
              var find = '';
              if (this.inline.type == 'class') find = '[data-redactor-class=' + this.inline.value + ']';
              else if (this.inline.type == 'style')
              {
                find = '[data-redactor-style="' + this.inline.value + '"]';
              }
    
              var self = this;
              if (tag != 'del')
              {
                this.$editor.find('del').each(function(i,s)
                {
                  self.utils.replaceToTag(s, 'inline');
                });
              }
    
              if (tag != 'span')
              {
                this.$editor.find(tag).each(function()
                {
                  var $el = $(this);
                  $el.replaceWith($('<strike />').html($el.contents()));
    
                });
              }
    
              this.$editor.find('[data-redactor-tag="' + tag + '"]' + find).each(function()
              {
                if (find === '' && tag == 'span' && this.tagName.toLowerCase() == tag) return;
    
                var $el = $(this);
                $el.replaceWith($('<strike />').html($el.contents()));
    
              });
    
              this.selection.restore();
            },
            setFormat: function(node)
            {
              switch (this.inline.type)
              {
                case 'class':
    
                  if (node.hasClass(this.inline.value))
                  {
                    node.removeClass(this.inline.value);
                    node.removeAttr('data-redactor-class');
                  }
                  else
                  {
                    node.addClass(this.inline.value);
                    node.attr('data-redactor-class', this.inline.value);
                  }
    
    
                break;
                case 'style':
    
                  node[0].style.cssText = this.inline.value;
                  node.attr('data-redactor-style', this.inline.value);
    
                break;
              }
    
              return node;
            },
            removeStyle: function()
            {
              this.buffer.set();
              var current = this.selection.getCurrent();
              var nodes = this.selection.getInlines();
    
              this.selection.save();
    
              if (current && current.tagName === 'SPAN')
              {
                var $s = $(current);
    
                $s.removeAttr('style');
                if ($s[0].attributes.length === 0)
                {
                  $s.replaceWith($s.contents());
                }
              }
    
              $.each(nodes, $.proxy(function(i,s)
              {
                var $s = $(s);
                if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker'))
                {
                  $s.removeAttr('style');
                  if ($s[0].attributes.length === 0)
                  {
                    $s.replaceWith($s.contents());
                  }
                }
              }, this));
    
              this.selection.restore();
              this.code.sync();
    
            },
            removeStyleRule: function(name)
            {
              this.buffer.set();
              var parent = this.selection.getParent();
              var nodes = this.selection.getInlines();
    
              this.selection.save();
    
              if (parent && parent.tagName === 'SPAN')
              {
                var $s = $(parent);
    
                $s.css(name, '');
                this.utils.removeEmptyAttr($s, 'style');
                if ($s[0].attributes.length === 0)
                {
                  $s.replaceWith($s.contents());
                }
              }
    
              $.each(nodes, $.proxy(function(i,s)
              {
                var $s = $(s);
                if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker'))
                {
                  $s.css(name, '');
                  this.utils.removeEmptyAttr($s, 'style');
                  if ($s[0].attributes.length === 0)
                  {
                    $s.replaceWith($s.contents());
                  }
                }
              }, this));
    
              this.selection.restore();
              this.code.sync();
            },
            removeFormat: function()
            {
              this.buffer.set();
              var current = this.selection.getCurrent();
    
              this.selection.save();
    
              document.execCommand('removeFormat');
    
              if (current && current.tagName === 'SPAN')
              {
                $(current).replaceWith($(current).contents());
              }
    
    
              $.each(this.selection.getNodes(), $.proxy(function(i,s)
              {
                var $s = $(s);
                if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker'))
                {
                  $s.replaceWith($s.contents());
                }
              }, this));
    
              this.selection.restore();
              this.code.sync();
    
            },
            toggleClass: function(className)
            {
              this.inline.format('span', 'class', className);
            },
            toggleStyle: function(value)
            {
              this.inline.format('span', 'style', value);
            }
          };
        },
        insert: function()
        {
          return {
            set: function(html, clean)
            {
              this.placeholder.remove();
    
              html = this.clean.setVerified(html);
    
              if (typeof clean == 'undefined')
              {
                html = this.clean.onPaste(html, false);
              }
    
              this.$editor.html(html);
              this.selection.remove();
              this.focus.setEnd();
              this.clean.normalizeLists();
              this.code.sync();
              this.observe.load();
    
              if (typeof clean == 'undefined')
              {
                setTimeout($.proxy(this.clean.clearUnverified, this), 10);
              }
            },
            text: function(text)
            {
              this.placeholder.remove();
    
              text = text.toString();
              text = $.trim(text);
              text = this.clean.getPlainText(text, false);
    
              this.$editor.focus();
    
              if (this.utils.browser('msie'))
              {
                this.insert.htmlIe(text);
              }
              else
              {
                this.selection.get();
    
                this.range.deleteContents();
                var el = document.createElement("div");
                el.innerHTML = text;
                var frag = document.createDocumentFragment(), node, lastNode;
                while ((node = el.firstChild))
                {
                  lastNode = frag.appendChild(node);
                }
    
                this.range.insertNode(frag);
    
                if (lastNode)
                {
                  var range = this.range.cloneRange();
                  range.setStartAfter(lastNode);
                  range.collapse(true);
                  this.sel.removeAllRanges();
                  this.sel.addRange(range);
                }
              }
    
              this.code.sync();
              this.clean.clearUnverified();
            },
            htmlWithoutClean: function(html)
            {
              this.insert.html(html, false);
            },
            html: function(html, clean)
            {
              this.placeholder.remove();
    
              if (typeof clean == 'undefined') clean = true;
    
              if (!this.opts.linebreaks)
              {
                this.$editor.focus();
              }
    
              html = this.clean.setVerified(html);
    
              if (clean)
              {
                html = this.clean.onPaste(html);
              }
    
              if (this.utils.browser('msie'))
              {
                this.insert.htmlIe(html);
              }
              else
              {
                if (this.clean.singleLine) this.insert.execHtml(html);
                else document.execCommand('insertHTML', false, html);
    
                this.insert.htmlFixMozilla();
    
              }
    
              this.clean.normalizeLists();
    
              // remove empty paragraphs finaly
              if (!this.opts.linebreaks)
              {
                this.$editor.find('p').each($.proxy(this.utils.removeEmpty, this));
              }
    
              this.code.sync();
              this.observe.load();
    
              if (clean)
              {
                this.clean.clearUnverified();
              }
    
            },
            htmlFixMozilla: function()
            {
              // FF inserts empty p when content was selected dblclick
              if (!this.utils.browser('mozilla')) return;
    
              var $next = $(this.selection.getBlock()).next();
              if ($next.length > 0 && $next[0].tagName == 'P' && $next.html() === '')
              {
                $next.remove();
              }
    
            },
            htmlIe: function(html)
            {
              if (this.utils.isIe11())
              {
                var parent = this.utils.isCurrentOrParent('P');
                var $html = $('<div>').append(html);
                var blocksMatch = $html.contents().is('p, :header, dl, ul, ol, div, table, td, blockquote, pre, address, section, header, footer, aside, article');
    
                if (parent && blocksMatch) this.insert.ie11FixInserting(parent, html);
                else this.insert.ie11PasteFrag(html);
    
                return;
              }
    
              document.selection.createRange().pasteHTML(html);
    
            },
            execHtml: function(html)
            {
              html = this.clean.setVerified(html);
    
              this.selection.get();
    
              this.range.deleteContents();
    
              var el = document.createElement('div');
              el.innerHTML = html;
    
              var frag = document.createDocumentFragment(), node, lastNode;
              while ((node = el.firstChild))
              {
                lastNode = frag.appendChild(node);
              }
    
              this.range.insertNode(frag);
    
              this.range.collapse(true);
              this.caret.setAfter(lastNode);
    
            },
            node: function(node, deleteContents)
            {
              node = node[0] || node;
    
              var html = this.utils.getOuterHtml(node);
              html = this.clean.setVerified(html);
    
              if (html.match(/</g) !== null)
              {
                node = $(html)[0];
              }
    
              this.selection.get();
    
              if (deleteContents !== false)
              {
                this.range.deleteContents();
              }
    
              this.range.insertNode(node);
              this.range.collapse(false);
              this.selection.addRange();
    
              return node;
            },
            nodeToPoint: function(node, x, y)
            {
              node = node[0] || node;
    
              this.selection.get();
    
              var range;
              if (document.caretPositionFromPoint)
              {
                  var pos = document.caretPositionFromPoint(x, y);
    
                  this.range.setStart(pos.offsetNode, pos.offset);
                  this.range.collapse(true);
                  this.range.insertNode(node);
              }
              else if (document.caretRangeFromPoint)
              {
                  range = document.caretRangeFromPoint(x, y);
                  range.insertNode(node);
              }
              else if (typeof document.body.createTextRange != "undefined")
              {
                    range = document.body.createTextRange();
                    range.moveToPoint(x, y);
                    var endRange = range.duplicate();
                    endRange.moveToPoint(x, y);
                    range.setEndPoint("EndToEnd", endRange);
                    range.select();
              }
            },
            nodeToCaretPositionFromPoint: function(e, node)
            {
              node = node[0] || node;
    
              var range;
              var x = e.clientX, y = e.clientY;
              if (document.caretPositionFromPoint)
              {
                  var pos = document.caretPositionFromPoint(x, y);
                  var sel = document.getSelection();
                  range = sel.getRangeAt(0);
                  range.setStart(pos.offsetNode, pos.offset);
                  range.collapse(true);
                  range.insertNode(node);
              }
              else if (document.caretRangeFromPoint)
              {
                  range = document.caretRangeFromPoint(x, y);
                  range.insertNode(node);
              }
              else if (typeof document.body.createTextRange != "undefined")
              {
                    range = document.body.createTextRange();
                    range.moveToPoint(x, y);
                    var endRange = range.duplicate();
                    endRange.moveToPoint(x, y);
                    range.setEndPoint("EndToEnd", endRange);
                    range.select();
              }
    
            },
            ie11FixInserting: function(parent, html)
            {
              var node = document.createElement('span');
              node.className = 'redactor-ie-paste';
              this.insert.node(node);
    
              var parHtml = $(parent).html();
    
              parHtml = '<p>' + parHtml.replace(/<span class="redactor-ie-paste"><\/span>/gi, '</p>' + html + '<p>') + '</p>';
              parHtml = parHtml.replace(/<p><\/p>/gi, '');
              $(parent).replaceWith(parHtml);
            },
            ie11PasteFrag: function(html)
            {
              this.selection.get();
              this.range.deleteContents();
    
              var el = document.createElement("div");
              el.innerHTML = html;
    
              var frag = document.createDocumentFragment(), node, lastNode;
              while ((node = el.firstChild))
              {
                lastNode = frag.appendChild(node);
              }
    
              this.range.insertNode(frag);
              this.range.collapse(false);
              this.selection.addRange();
            }
          };
        },
        keydown: function()
        {
          return {
            init: function(e)
            {
              if (this.rtePaste) return;
    
              var key = e.which;
              var arrow = (key >= 37 && key <= 40);
    
              this.keydown.ctrl = e.ctrlKey || e.metaKey;
              this.keydown.current = this.selection.getCurrent();
              this.keydown.parent = this.selection.getParent();
              this.keydown.block = this.selection.getBlock();
    
                  // detect tags
              this.keydown.pre = this.utils.isTag(this.keydown.current, 'pre');
              this.keydown.blockquote = this.utils.isTag(this.keydown.current, 'blockquote');
              this.keydown.figcaption = this.utils.isTag(this.keydown.current, 'figcaption');
    
              // shortcuts setup
              this.shortcuts.init(e, key);
    
              if (this.utils.isDesktop())
              {
                this.keydown.checkEvents(arrow, key);
                this.keydown.setupBuffer(e, key);
              }
    
              this.keydown.addArrowsEvent(arrow);
              this.keydown.setupSelectAll(e, key);
    
              // callback
              var keydownStop = this.core.setCallback('keydown', e);
              if (keydownStop === false)
              {
                e.preventDefault();
                return false;
              }
    
              // ie and ff exit from table
              if (this.opts.enterKey && (this.utils.browser('msie') || this.utils.browser('mozilla')) && (key === this.keyCode.DOWN || key === this.keyCode.RIGHT))
              {
                var isEndOfTable = false;
                var $table = false;
                if (this.keydown.block && this.keydown.block.tagName === 'TD')
                {
                  $table = $(this.keydown.block).closest('table', this.$editor[0]);
                }
    
                if ($table && $table.find('td').last()[0] === this.keydown.block)
                {
                  isEndOfTable = true;
                }
    
                if (this.utils.isEndOfElement() && isEndOfTable)
                {
                  var node = $(this.opts.emptyHtml);
                  $table.after(node);
                  this.caret.setStart(node);
                }
              }
    
              // down
              if (this.opts.enterKey && key === this.keyCode.DOWN)
              {
                this.keydown.onArrowDown();
              }
    
              // turn off enter key
              if (!this.opts.enterKey && key === this.keyCode.ENTER)
              {
                e.preventDefault();
                // remove selected
                if (!this.range.collapsed) this.range.deleteContents();
                return;
              }
    
              // on enter
              if (key == this.keyCode.ENTER && !e.shiftKey && !e.ctrlKey && !e.metaKey)
              {
                var stop = this.core.setCallback('enter', e);
                if (stop === false)
                {
                  e.preventDefault();
                  return false;
                }
    
                if (this.keydown.blockquote && this.keydown.exitFromBlockquote(e) === true)
                {
                  return false;
                }
    
                var current, $next;
                if (this.keydown.pre)
                {
                  return this.keydown.insertNewLine(e);
                }
                else if (this.keydown.blockquote || this.keydown.figcaption)
                {
                  current = this.selection.getCurrent();
                  $next = $(current).next();
    
                  if ($next.length !== 0 && $next[0].tagName == 'BR')
                  {
                    return this.keydown.insertBreakLine(e);
                  }
                  else if (this.utils.isEndOfElement() && (current && current != 'SPAN'))
                  {
                    return this.keydown.insertDblBreakLine(e);
                  }
                  else
                  {
                    return this.keydown.insertBreakLine(e);
                  }
                }
                else if (this.opts.linebreaks && !this.keydown.block)
                {
                  current = this.selection.getCurrent();
                  $next = $(this.keydown.current).next();
    
                  if ($next.length !== 0 && $next[0].tagName == 'BR')
                  {
                    return this.keydown.insertBreakLine(e);
                  }
                  else if (current !== false && $(current).hasClass('redactor-invisible-space'))
                  {
                    this.caret.setAfter(current);
                    $(current).contents().unwrap();
    
                    return this.keydown.insertDblBreakLine(e);
                  }
                  else
                  {
                    if (this.utils.isEndOfEditor())
                    {
                      return this.keydown.insertDblBreakLine(e);
                    }
                    else if ($next.length === 0 && current === false && typeof $next.context != 'undefined')
                    {
                      return this.keydown.insertBreakLine(e);
                    }
    
                    return this.keydown.insertBreakLine(e);
                  }
    
                }
                else if (this.opts.linebreaks && this.keydown.block)
                {
                  setTimeout($.proxy(this.keydown.replaceDivToBreakLine, this), 1);
                }
                // paragraphs
                else if (!this.opts.linebreaks && this.keydown.block)
                {
                  setTimeout($.proxy(this.keydown.replaceDivToParagraph, this), 1);
    
                  if (this.keydown.block.tagName === 'LI')
                  {
                    current = this.selection.getCurrent();
                    var $parent = $(current).closest('li', this.$editor[0]);
                    var $list = $parent.closest('ul,ol', this.$editor[0]);
    
                    if ($parent.length !== 0 && this.utils.isEmpty($parent.html()) && $list.next().length === 0 && this.utils.isEmpty($list.find("li").last().html()))
                    {
                      $list.find("li").last().remove();
    
                      var node = $(this.opts.emptyHtml);
                      $list.after(node);
                      this.caret.setStart(node);
    
                      return false;
                    }
                  }
                }
                else if (!this.opts.linebreaks && !this.keydown.block)
                {
                  return this.keydown.insertParagraph(e);
                }
              }
    
              // Shift+Enter or Ctrl+Enter
              if (key === this.keyCode.ENTER && (e.ctrlKey || e.shiftKey))
              {
                return this.keydown.onShiftEnter(e);
              }
    
    
              // tab or cmd + [
              if (key === this.keyCode.TAB || e.metaKey && key === 221 || e.metaKey && key === 219)
              {
                return this.keydown.onTab(e, key);
              }
    
              // image delete and backspace
              if (key === this.keyCode.BACKSPACE || key === this.keyCode.DELETE)
              {
                var nodes = this.selection.getNodes();
    
                if (nodes)
                {
                  var len = nodes.length;
                  var last;
                  for (var i = 0; i < len; i++)
                  {
                    var children = $(nodes[i]).children('img');
                    if (children.length !== 0)
                    {
                      var self = this;
                      $.each(children, function(z,s)
                      {
                        var $s = $(s);
                        if ($s.css('float') != 'none') return;
    
                        // image delete callback
                        self.core.setCallback('imageDelete', s.src, $s);
                        last = s;
                      });
                    }
                    else if (nodes[i].tagName == 'IMG')
                    {
                      if (last != nodes[i])
                      {
                        // image delete callback
                        this.core.setCallback('imageDelete', nodes[i].src, $(nodes[i]));
                        last = nodes[i];
                      }
                    }
                  }
                }
              }
    
              // backspace
              if (key === this.keyCode.BACKSPACE)
              {
                // backspace as outdent
                var block = this.selection.getBlock();
                var indented = ($(block).css('margin-left') !== '0px');
                if (block && indented && this.range.collapsed && this.utils.isStartOfElement())
                {
                  this.indent.decrease();
                  e.preventDefault();
                  return;
                }
    
                // remove hr in FF
                if (this.utils.browser('mozilla'))
                {
                  var prev = this.selection.getPrev();
                  var prev2 = $(prev).prev()[0];
                  if (prev && prev.tagName === 'HR') $(prev).remove();
                  if (prev2 && prev2.tagName === 'HR') $(prev2).remove();
                }
    
                this.keydown.removeInvisibleSpace();
                this.keydown.removeEmptyListInTable(e);
              }
    
              this.code.sync();
            },
            checkEvents: function(arrow, key)
            {
              if (!arrow && (this.core.getEvent() == 'click' || this.core.getEvent() == 'arrow'))
              {
                this.core.addEvent(false);
    
                if (this.keydown.checkKeyEvents(key))
                {
                  this.buffer.set();
                }
              }
            },
            checkKeyEvents: function(key)
            {
              var k = this.keyCode;
              var keys = [k.BACKSPACE, k.DELETE, k.ENTER, k.ESC, k.TAB, k.CTRL, k.META, k.ALT, k.SHIFT];
    
              return ($.inArray(key, keys) == -1) ? true : false;
    
            },
            addArrowsEvent: function(arrow)
            {
              if (!arrow) return;
    
              if ((this.core.getEvent() == 'click' || this.core.getEvent() == 'arrow'))
              {
                this.core.addEvent(false);
                return;
              }
    
                this.core.addEvent('arrow');
            },
            setupBuffer: function(e, key)
            {
              if (this.keydown.ctrl && key === 90 && !e.shiftKey && !e.altKey && this.opts.buffer.length) // z key
              {
                e.preventDefault();
                this.buffer.undo();
                return;
              }
              // undo
              else if (this.keydown.ctrl && key === 90 && e.shiftKey && !e.altKey && this.opts.rebuffer.length !== 0)
              {
                e.preventDefault();
                this.buffer.redo();
                return;
              }
              else if (!this.keydown.ctrl)
              {
                if (key == this.keyCode.BACKSPACE || key == this.keyCode.DELETE || (key == this.keyCode.ENTER && !e.ctrlKey && !e.shiftKey))
                {
                  this.buffer.set();
                }
              }
            },
            setupSelectAll: function(e, key)
            {
              if (this.keydown.ctrl && key === 65)
              {
                this.utils.enableSelectAll();
              }
              else if (key != this.keyCode.LEFT_WIN && !this.keydown.ctrl)
              {
                this.utils.disableSelectAll();
              }
            },
            onArrowDown: function()
            {
              var tags = [this.keydown.blockquote, this.keydown.pre, this.keydown.figcaption];
    
              for (var i = 0; i < tags.length; i++)
              {
                if (tags[i])
                {
                  this.keydown.insertAfterLastElement(tags[i]);
                  return false;
                }
              }
            },
            onShiftEnter: function(e)
            {
              this.buffer.set();
    
              if (this.utils.isEndOfElement())
              {
                return this.keydown.insertDblBreakLine(e);
              }
    
              return this.keydown.insertBreakLine(e);
            },
            onTab: function(e, key)
            {
              if (!this.opts.tabKey) return true;
              if (this.utils.isEmpty(this.code.get()) && this.opts.tabAsSpaces === false) return true;
    
              e.preventDefault();
    
              var node;
              if (this.keydown.pre && !e.shiftKey)
              {
                node = (this.opts.preSpaces) ? document.createTextNode(Array(this.opts.preSpaces + 1).join('\u00a0')) : document.createTextNode('\t');
                this.insert.node(node);
                this.code.sync();
              }
              else if (this.opts.tabAsSpaces !== false)
              {
                node = document.createTextNode(Array(this.opts.tabAsSpaces + 1).join('\u00a0'));
                this.insert.node(node);
                this.code.sync();
              }
              else
              {
                if (e.metaKey && key === 219) this.indent.decrease();
                else if (e.metaKey && key === 221) this.indent.increase();
                else if (!e.shiftKey) this.indent.increase();
                else this.indent.decrease();
              }
    
              return false;
            },
            replaceDivToBreakLine: function()
            {
              var blockElem = this.selection.getBlock();
              var blockHtml = blockElem.innerHTML.replace(/<br\s?\/?>/gi, '');
              if ((blockElem.tagName === 'DIV' || blockElem.tagName === 'P') && blockHtml === '' && !$(blockElem).hasClass('redactor-editor'))
              {
                var br = document.createElement('br');
    
                $(blockElem).replaceWith(br);
                this.caret.setBefore(br);
    
                this.code.sync();
    
                return false;
              }
            },
            replaceDivToParagraph: function()
            {
              var blockElem = this.selection.getBlock();
              var blockHtml = blockElem.innerHTML.replace(/<br\s?\/?>/gi, '');
              if (blockElem.tagName === 'DIV' && this.utils.isEmpty(blockHtml) && !$(blockElem).hasClass('redactor-editor'))
              {
                var p = document.createElement('p');
                p.innerHTML = this.opts.invisibleSpace;
    
                $(blockElem).replaceWith(p);
                this.caret.setStart(p);
    
                this.code.sync();
    
                return false;
              }
              else if (this.opts.cleanStyleOnEnter && blockElem.tagName == 'P')
              {
                $(blockElem).removeAttr('class').removeAttr('style');
              }
            },
            insertParagraph: function(e)
            {
              e.preventDefault();
    
              this.selection.get();
    
              var p = document.createElement('p');
              p.innerHTML = this.opts.invisibleSpace;
    
              this.range.deleteContents();
              this.range.insertNode(p);
    
              this.caret.setStart(p);
    
              this.code.sync();
    
              return false;
            },
            exitFromBlockquote: function(e)
            {
              if (!this.utils.isEndOfElement()) return;
    
              var tmp = $.trim($(this.keydown.block).html());
              if (tmp.search(/(<br\s?\/?>){2}$/i) != -1)
              {
                e.preventDefault();
    
                if (this.opts.linebreaks)
                {
                  var br = document.createElement('br');
                  $(this.keydown.blockquote).after(br);
    
                  this.caret.setBefore(br);
                  $(this.keydown.block).html(tmp.replace(/<br\s?\/?>$/i, ''));
                }
                else
                {
                  var node = $(this.opts.emptyHtml);
                  $(this.keydown.blockquote).after(node);
                  this.caret.setStart(node);
                }
    
                return true;
    
              }
    
              return;
    
            },
            insertAfterLastElement: function(element)
            {
              if (!this.utils.isEndOfElement()) return;
    
              this.buffer.set();
    
              if (this.opts.linebreaks)
              {
                var contents = $('<div>').append($.trim(this.$editor.html())).contents();
                var last = contents.last()[0];
                if (last.tagName == 'SPAN' && last.innerHTML === '')
                {
                  last = contents.prev()[0];
                }
    
                if (this.utils.getOuterHtml(last) != this.utils.getOuterHtml(element)) return;
    
                var br = document.createElement('br');
                $(element).after(br);
                this.caret.setAfter(br);
    
              }
              else
              {
                if (this.$editor.contents().last()[0] !== element) return;
    
                var node = $(this.opts.emptyHtml);
                $(element).after(node);
                this.caret.setStart(node);
              }
            },
            insertNewLine: function(e)
            {
              e.preventDefault();
    
              var node = document.createTextNode('\n');
    
              this.selection.get();
    
              this.range.deleteContents();
              this.range.insertNode(node);
    
              this.caret.setAfter(node);
    
              this.code.sync();
    
              return false;
            },
            insertBreakLine: function(e)
            {
              return this.keydown.insertBreakLineProcessing(e);
            },
            insertDblBreakLine: function(e)
            {
              return this.keydown.insertBreakLineProcessing(e, true);
            },
            insertBreakLineProcessing: function(e, dbl)
            {
              e.stopPropagation();
    
              this.selection.get();
    
              var br1 = document.createElement('br');
    
              if (this.utils.browser('msie'))
              {
                this.range.collapse(false);
                this.range.setEnd(this.range.endContainer, this.range.endOffset);
              }
              else
              {
                this.range.deleteContents();
              }
    
              this.range.insertNode(br1);
    
              // move br outside A tag
              var $parentA = $(br1).parent("a");
    
              if ($parentA.length > 0)
              {
                $parentA.find(br1).remove();
                $parentA.after(br1);
              }
    
              if (dbl === true)
              {
                var $next = $(br1).next();
                if ($next.length !== 0 && $next[0].tagName === 'BR' && this.utils.isEndOfEditor())
                {
                  this.caret.setAfter(br1);
                  this.code.sync();
                  return false;
                }
    
                var br2 = document.createElement('br');
    
                this.range.insertNode(br2);
                this.caret.setAfter(br2);
              }
              else
              {
                // caret does not move after the br visual
                if (this.utils.browser('msie'))
                {
                  var space = document.createElement('span');
                  space.innerHTML = '&#x200b;';
    
                  $(br1).after(space);
                  this.caret.setAfter(space);
                  $(space).remove();
                }
                else
                {
                  var range = document.createRange();
                  range.setStartAfter(br1);
                  range.collapse(true);
                  var selection = window.getSelection();
                  selection.removeAllRanges();
                  selection.addRange(range);
    
                }
              }
    
              this.code.sync();
              return false;
            },
            removeInvisibleSpace: function()
            {
              var $current = $(this.keydown.current);
              if ($current.text().search(/^\u200B$/g) === 0)
              {
                $current.remove();
              }
            },
            removeEmptyListInTable: function(e)
            {
              var $current = $(this.keydown.current);
              var $parent = $(this.keydown.parent);
              var td = $current.closest('td', this.$editor[0]);
    
              if (td.length !== 0 && $current.closest('li', this.$editor[0]) && $parent.children('li').length === 1)
              {
                if (!this.utils.isEmpty($current.text())) return;
    
                e.preventDefault();
    
                $current.remove();
                $parent.remove();
    
                this.caret.setStart(td);
              }
            }
          };
        },
        keyup: function()
        {
          return {
            init: function(e)
            {
    
              if (this.rtePaste) return;
    
              var key = e.which;
    
              this.keyup.current = this.selection.getCurrent();
              this.keyup.parent = this.selection.getParent();
              var $parent = this.utils.isRedactorParent($(this.keyup.parent).parent());
    
              // callback
              var keyupStop = this.core.setCallback('keyup', e);
              if (keyupStop === false)
              {
                e.preventDefault();
                return false;
              }
    
              // replace to p before / after the table or body
              if (!this.opts.linebreaks && this.keyup.current.nodeType === 3 && this.keyup.current.length <= 1 && (this.keyup.parent === false || this.keyup.parent.tagName == 'BODY'))
              {
                this.keyup.replaceToParagraph();
              }
    
              // replace div after lists
              if (!this.opts.linebreaks && this.utils.isRedactorParent(this.keyup.current) && this.keyup.current.tagName === 'DIV')
              {
                this.keyup.replaceToParagraph(false);
              }
    
    
              if (!this.opts.linebreaks && $(this.keyup.parent).hasClass('redactor-invisible-space') && ($parent === false || $parent[0].tagName == 'BODY'))
              {
                $(this.keyup.parent).contents().unwrap();
                this.keyup.replaceToParagraph();
              }
    
              // linkify
              if (this.linkify.isEnabled() && this.linkify.isKey(key)) this.linkify.format();
    
              if (key === this.keyCode.DELETE || key === this.keyCode.BACKSPACE)
              {
                if (this.utils.browser('mozilla'))
                {
                  var td = $(this.keydown.current).closest('td', this.$editor[0]);
                  if (td.size() !== 0 && td.text() !== '')
                  {
                    e.preventDefault();
                    return false;
                  }
                }
    
                // clear unverified
                this.clean.clearUnverified();
    
                if (this.observe.image)
                {
                  e.preventDefault();
    
                  this.image.hideResize();
    
                  this.buffer.set();
                  this.image.remove(this.observe.image);
                  this.observe.image = false;
    
                  return false;
                }
    
                // remove empty paragraphs
                this.$editor.find('p').each($.proxy(function(i, s)
                {
                  this.utils.removeEmpty(i, $(s).html());
                }, this));
    
                // remove invisible space
                if (this.opts.linebreaks && this.keyup.current && this.keyup.current.tagName == 'DIV' && this.utils.isEmpty(this.keyup.current.innerHTML))
                {
                  $(this.keyup.current).after(this.selection.getMarkerAsHtml());
                  this.selection.restore();
                  $(this.keyup.current).remove();
                }
    
                // if empty
                return this.keyup.formatEmpty(e);
              }
            },
            replaceToParagraph: function(clone)
            {
              var $current = $(this.keyup.current);
    
              var node;
              if (clone === false)
              {
                node = $('<p>').append($current.html());
              }
              else
              {
                node = $('<p>').append($current.clone());
              }
    
              $current.replaceWith(node);
              var next = $(node).next();
              if (typeof(next[0]) !== 'undefined' && next[0].tagName == 'BR')
              {
                next.remove();
              }
    
              this.caret.setEnd(node);
            },
            formatEmpty: function(e)
            {
              var html = $.trim(this.$editor.html());
    
              if (!this.utils.isEmpty(html)) return;
    
              e.preventDefault();
    
              if (this.opts.linebreaks)
              {
                this.$editor.html(this.selection.getMarkerAsHtml());
                this.selection.restore();
              }
              else
              {
                this.$editor.html(this.opts.emptyHtml);
                this.focus.setStart();
              }
    
              this.code.sync();
    
              return false;
            }
          };
        },
        lang: function()
        {
          return {
            load: function()
            {
              this.opts.curLang = this.opts.langs[this.opts.lang];
            },
            get: function(name)
            {
              return (typeof this.opts.curLang[name] != 'undefined') ? this.opts.curLang[name] : '';
            }
          };
        },
        line: function()
        {
          return {
            insert: function()
            {
              this.buffer.set();
    
              var blocks = this.selection.getBlocks();
              if (blocks[0] !== false && this.line.isExceptLastOrFirst(blocks))
              {
                if (!this.utils.browser('msie')) this.$editor.focus();
                return;
              }
    
              if (this.utils.browser('msie'))
              {
                this.line.insertInIe();
              }
              else
              {
                this.line.insertInOthersBrowsers();
              }
            },
            isExceptLastOrFirst: function(blocks)
            {
              var exceptTags = ['li', 'td', 'th', 'blockquote', 'figcaption', 'pre', 'dl', 'dt', 'dd'];
    
              var first = blocks[0].tagName.toLowerCase();
              var last = this.selection.getLastBlock();
    
              last = (typeof last == 'undefined') ? first : last.tagName.toLowerCase();
    
              var firstFound = $.inArray(first, exceptTags) != -1;
              var lastFound = $.inArray(last, exceptTags) != -1;
    
              if ((firstFound && lastFound) || firstFound)
              {
                return true;
              }
            },
            insertInIe: function()
            {
              this.utils.saveScroll();
              this.buffer.set();
    
              this.insert.node(document.createElement('hr'));
    
              this.utils.restoreScroll();
              this.code.sync();
            },
            insertInOthersBrowsers: function()
            {
              this.buffer.set();
    
              var extra = '<p id="redactor-insert-line"><br /></p>';
              if (this.opts.linebreaks) extra = '<br id="redactor-insert-line">';
    
              document.execCommand('insertHtml', false, '<hr>' + extra);
    
              this.line.setFocus();
              this.code.sync();
            },
            setFocus: function()
            {
              var node = this.$editor.find('#redactor-insert-line');
              var next = $(node).next()[0];
              var target = next;
              if (this.utils.browser('mozilla') && next && next.innerHTML === '')
              {
                target = $(next).next()[0];
                $(next).remove();
              }
    
              if (target)
              {
                node.remove();
    
                if (!this.opts.linebreaks)
                {
                  this.$editor.focus();
                  this.line.setStart(target);
                }
    
              }
              else
              {
    
                node.removeAttr('id');
                this.line.setStart(node[0]);
              }
            },
            setStart: function(node)
            {
              if (typeof node === 'undefined') return;
    
              var textNode = document.createTextNode('\u200B');
    
              this.selection.get();
              this.range.setStart(node, 0);
              this.range.insertNode(textNode);
              this.range.collapse(true);
              this.selection.addRange();
    
            }
          };
        },
        link: function()
        {
          return {
            show: function(e)
            {
              if (typeof e != 'undefined' && e.preventDefault) e.preventDefault();
    
              if (!this.observe.isCurrent('a'))
              {
                this.modal.load('link', this.lang.get('link_insert'), 600);
              }
              else
              {
                this.modal.load('link', this.lang.get('link_edit'), 600);
              }
    
              this.modal.createCancelButton();
    
              var buttonText = !this.observe.isCurrent('a') ? this.lang.get('insert') : this.lang.get('edit');
    
              this.link.buttonInsert = this.modal.createActionButton(buttonText);
    
              this.selection.get();
    
              this.link.getData();
              this.link.cleanUrl();
    
              if (this.link.target == '_blank') $('#redactor-link-blank').prop('checked', true);
    
              this.link.$inputUrl = $('#redactor-link-url');
              this.link.$inputText = $('#redactor-link-url-text');
    
              this.link.$inputText.val(this.link.text);
              this.link.$inputUrl.val(this.link.url);
    
              this.link.buttonInsert.on('click', $.proxy(this.link.insert, this));
    
              // hide link's tooltip
              $('.redactor-link-tooltip').remove();
    
              // show modal
              this.selection.save();
              this.modal.show();
              this.link.$inputUrl.focus();
            },
            cleanUrl: function()
            {
              var thref = self.location.href.replace(/\/$/i, '');
    
              if (typeof this.link.url !== "undefined")
              {
                this.link.url = this.link.url.replace(thref, '');
                this.link.url = this.link.url.replace(/^\/#/, '#');
                this.link.url = this.link.url.replace('mailto:', '');
    
                // remove host from href
                if (!this.opts.linkProtocol)
                {
                  var re = new RegExp('^(http|ftp|https)://' + self.location.host, 'i');
                  this.link.url = this.link.url.replace(re, '');
                }
              }
            },
            getData: function()
            {
              this.link.$node = false;
    
              var $el = $(this.selection.getCurrent()).closest('a', this.$editor[0]);
              if ($el.length !== 0 && $el[0].tagName === 'A')
              {
                this.link.$node = $el;
    
                this.link.url = $el.attr('href');
                this.link.text = $el.text();
                this.link.target = $el.attr('target');
              }
              else
              {
                this.link.text = this.sel.toString();
                this.link.url = '';
                this.link.target = '';
              }
    
            },
            insert: function()
            {
              this.placeholder.remove();
    
              var target = '';
              var link = this.link.$inputUrl.val();
              var text = this.link.$inputText.val().replace(/(<([^>]+)>)/ig,"");
    
              if ($.trim(link) === '')
              {
                this.link.$inputUrl.addClass('redactor-input-error').on('keyup', function()
                {
                  $(this).removeClass('redactor-input-error');
                  $(this).off('keyup');
    
                });
    
                return;
              }
    
              // mailto
              if (link.search('@') != -1 && /(http|ftp|https):\/\//i.test(link) === false)
              {
                link = 'mailto:' + link;
              }
              // url, not anchor
              else if (link.search('#') !== 0)
              {
                if ($('#redactor-link-blank').prop('checked'))
                {
                  target = '_blank';
                }
    
                // test url (add protocol)
                var pattern = '((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}';
                var re = new RegExp('^(http|ftp|https)://' + pattern, 'i');
                var re2 = new RegExp('^' + pattern, 'i');
                var re3 = new RegExp('\.(html|php)$', 'i');
                if (link.search(re) == -1 && link.search(re3) == -1 && link.search(re2) === 0 && this.opts.linkProtocol)
                {
                  link = this.opts.linkProtocol + '://' + link;
                }
              }
    
              this.link.set(text, link, target);
              this.modal.close();
            },
            set: function(text, link, target)
            {
              text = $.trim(text.replace(/<|>/g, ''));
    
              this.selection.restore();
              var blocks = this.selection.getBlocks();
    
              if (text === '' && link === '') return;
              if (text === '' && link !== '') text = link;
    
              if (this.link.$node)
              {
                this.buffer.set();
    
                var $link = this.link.$node,
                  $el   = $link.children();
    
                if ($el.length > 0)
                {
                  while ($el.length)
                  {
                    $el = $el.children();
                  }
    
                  $el = $el.end();
                }
                else
                {
                  $el = $link;
                }
    
                $link.attr('href', link);
                $el.text(text);
    
                if (target !== '')
                {
                  $link.attr('target', target);
                }
                else
                {
                  $link.removeAttr('target');
                }
    
                this.selection.selectElement($link);
    
                this.code.sync();
              }
              else
              {
                if (this.utils.browser('mozilla') && this.link.text === '')
                {
                  var $a = $('<a />').attr('href', link).text(text);
                  if (target !== '') $a.attr('target', target);
    
                  $a = $(this.insert.node($a));
    
                  if (this.opts.linebreaks)
                  {
                    $a.after('&nbsp;');
                  }
    
                  this.selection.selectElement($a);
                }
                else
                {
                  var $a;
                  if (this.utils.browser('msie'))
                  {
                    $a = $('<a href="' + link + '">').text(text);
                    if (target !== '') $a.attr('target', target);
    
                    $a = $(this.insert.node($a));
    
                    if (this.selection.getText().match(/\s$/))
                    {
                      $a.after(" ");
                    }
    
                    this.selection.selectElement($a);
                  }
                  else
                  {
                    document.execCommand('createLink', false, link);
    
                    $a = $(this.selection.getCurrent()).closest('a', this.$editor[0]);
                    if (this.utils.browser('mozilla'))
                    {
                      $a = $('a[_moz_dirty=""]');
                    }
    
                    if (target !== '') $a.attr('target', target);
                    $a.removeAttr('style').removeAttr('_moz_dirty');
    
                    if (this.selection.getText().match(/\s$/))
                    {
                      $a.after(" ");
                    }
    
                    if (this.link.text !== '' || this.link.text != text)
                    {
                      if (!this.opts.linebreaks && blocks && blocks.length <= 1)
                      {
                        $a.text(text);
                      }
                      else if (this.opts.linebreaks)
                      {
                        $a.text(text);
                      }
    
                      this.selection.selectElement($a);
                    }
                  }
                }
    
                this.code.sync();
                this.core.setCallback('insertedLink', $a);
    
              }
    
              // link tooltip
              setTimeout($.proxy(function()
              {
                this.observe.links();
    
              }, this), 5);
            },
            unlink: function(e)
            {
              if (typeof e != 'undefined' && e.preventDefault)
              {
                e.preventDefault();
              }
    
              var nodes = this.selection.getNodes();
              if (!nodes) return;
    
              this.buffer.set();
    
              var len = nodes.length;
              var links = [];
              for (var i = 0; i < len; i++)
              {
                if (nodes[i].tagName === 'A')
                {
                  links.push(nodes[i]);
                }
    
                var $node = $(nodes[i]).closest('a', this.$editor[0]);
                $node.replaceWith($node.contents());
              }
    
              this.core.setCallback('deletedLink', links);
    
              // hide link's tooltip
              $('.redactor-link-tooltip').remove();
    
              this.code.sync();
    
            },
            toggleClass: function(className)
            {
              this.link.setClass(className, 'toggleClass');
            },
            addClass: function(className)
            {
              this.link.setClass(className, 'addClass');
            },
            removeClass: function(className)
            {
              this.link.setClass(className, 'removeClass');
            },
            setClass: function(className, func)
            {
              var links = this.selection.getInlinesTags(['a']);
              if (links === false) return;
    
              $.each(links, function()
              {
                $(this)[func](className);
              });
            }
          };
        },
        linkify: function()
        {
          return {
            isKey: function(key)
            {
              return key == this.keyCode.ENTER || key == this.keyCode.SPACE;
            },
            isEnabled: function()
            {
              return this.opts.convertLinks && (this.opts.convertUrlLinks || this.opts.convertImageLinks || this.opts.convertVideoLinks) && !this.utils.isCurrentOrParent('PRE');
            },
            format: function()
            {
              var linkify = this.linkify,
                opts    = this.opts;
    
              this.$editor
                .find(":not(iframe,img,a,pre)")
                .addBack()
                .contents()
                .filter(function()
                {
                  return this.nodeType === 3 && $.trim(this.nodeValue) != "" && !$(this).parent().is("pre") && (this.nodeValue.match(opts.linkify.regexps.youtube) || this.nodeValue.match(opts.linkify.regexps.vimeo) || this.nodeValue.match(opts.linkify.regexps.image) || this.nodeValue.match(opts.linkify.regexps.url));
                })
                .each(function()
                {
                  var text = $(this).text(),
                    html = text;
    
                  if (opts.convertVideoLinks && (html.match(opts.linkify.regexps.youtube) || html.match(opts.linkify.regexps.vimeo)) )
                  {
                    html = linkify.convertVideoLinks(html);
                  }
                  else if (opts.convertImageLinks && html.match(opts.linkify.regexps.image))
                  {
                    html = linkify.convertImages(html);
                  }
                  else if (opts.convertUrlLinks)
                  {
                    html = linkify.convertLinks(html);
                  }
    
                  $(this).before(text.replace(text, html))
                       .remove();
                });
    
    
              var objects = this.$editor.find('.redactor-linkify-object').each(function()
              {
                var $el = $(this);
                $el.removeClass('redactor-linkify-object');
                if ($el.attr('class') === '') $el.removeAttr('class');
    
                return $el[0];
    
              });
    
              // callback
              setTimeout($.proxy(function()
              {
                this.observe.load();
                this.core.setCallback('linkify', objects);
              }, this), 100);
    
              // sync
              this.code.sync();
            },
            convertVideoLinks: function(html)
            {
              var iframeStart = '<iframe class="redactor-linkify-object" width="500" height="281" src="',
                iframeEnd = '" frameborder="0" allowfullscreen></iframe>';
    
              if (html.match(this.opts.linkify.regexps.youtube))
              {
                html = html.replace(this.opts.linkify.regexps.youtube, iframeStart + '//www.youtube.com/embed/$1' + iframeEnd);
              }
    
              if (html.match(this.opts.linkify.regexps.vimeo))
              {
                html = html.replace(this.opts.linkify.regexps.vimeo, iframeStart + '//player.vimeo.com/video/$2' + iframeEnd);
              }
    
              return html;
            },
            convertImages: function(html)
            {
              var matches = html.match(this.opts.linkify.regexps.image);
    
              if (matches)
              {
                html = html.replace(html, '<img src="' + matches + '" class="redactor-linkify-object" />');
    
                if (this.opts.linebreaks)
                {
                  if (!this.utils.isEmpty(this.code.get()))
                  {
                    html = '<br>' + html;
                  }
                }
    
                html += '<br>';
              }
    
              return html;
            },
            convertLinks: function(html)
            {
              var matches = html.match(this.opts.linkify.regexps.url);
    
              if (matches)
              {
                matches = $.grep(matches, function(v, k) { return $.inArray(v, matches) === k; });
    
                var length = matches.length;
    
                for (var i = 0; i < length; i++)
                {
                  var href = matches[i],
                    text = href,
                    linkProtocol = this.opts.linkProtocol + '://';
    
                  if (href.match(/(https?|ftp):\/\//i) !== null)
                  {
                    linkProtocol = "";
                  }
    
                  if (text.length > this.opts.linkSize)
                  {
                    text = text.substring(0, this.opts.linkSize) + '...';
                  }
    
                  if (text.search('%') === -1)
                  {
                    text = decodeURIComponent(text);
                  }
    
                  var regexB = "\\b";
    
                  if ($.inArray(href.slice(-1), ["/", "&", "="]) != -1)
                  {
                    regexB = "";
                  }
    
                  // escaping url
                  var regexp = new RegExp('(' + href.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + regexB + ')', 'g');
    
                  html = html.replace(regexp, '<a href="' + linkProtocol + $.trim(href) + '" class="redactor-linkify-object">' + $.trim(text) + '</a>');
                }
              }
    
              return html;
            }
          };
        },
        list: function()
        {
          return {
            toggle: function(cmd)
            {
              this.placeholder.remove();
              if (!this.utils.browser('msie')) this.$editor.focus();
    
              this.buffer.set();
              this.selection.save();
    
              var parent = this.selection.getParent();
              var $list = $(parent).closest('ol, ul', this.$editor[0]);
    
              if (!this.utils.isRedactorParent($list) && $list.length !== 0)
              {
                $list = false;
              }
    
              var isUnorderedCmdOrdered, isOrderedCmdUnordered;
              var remove = false;
              if ($list && $list.length)
              {
                remove = true;
                var listTag = $list[0].tagName;
    
                isUnorderedCmdOrdered = (cmd === 'orderedlist' && listTag === 'UL');
                isOrderedCmdUnordered = (cmd === 'unorderedlist' && listTag === 'OL');
              }
    
              if (isUnorderedCmdOrdered)
              {
                this.utils.replaceToTag($list, 'ol');
              }
              else if (isOrderedCmdUnordered)
              {
                this.utils.replaceToTag($list, 'ul');
              }
              else
              {
                if (remove)
                {
                  this.list.remove(cmd, $list);
                }
                else
                {
                  this.list.insert(cmd);
                }
              }
    
              this.selection.restore();
              this.code.sync();
    
            },
            insert: function(cmd)
            {
              var current = this.selection.getCurrent();
              var $td = $(current).closest('td, th', this.$editor[0]);
    
              if (this.utils.browser('msie') && this.opts.linebreaks)
              {
                this.list.insertInIe(cmd);
              }
              else
              {
                document.execCommand('insert' + cmd);
              }
    
              var parent = this.selection.getParent();
              var $list = $(parent).closest('ol, ul', this.$editor[0]);
              if ($td.length !== 0)
              {
                var newTd = $td.clone();
                $td.after(newTd).remove('');
              }
    
    
              if (this.utils.isEmpty($list.find('li').text()))
              {
                var $children = $list.children('li');
                $children.find('br').remove();
                $children.append(this.selection.getMarkerAsHtml());
    
                if (this.opts.linebreaks && this.utils.browser('mozilla') && $children.size() == 2 && this.utils.isEmpty($children.eq(1).text()))
                {
                  $children.eq(1).remove();
                }
              }
    
              if ($list.length)
              {
                // remove block-element list wrapper
                var $listParent = $list.parent();
                if (this.utils.isRedactorParent($listParent) && $listParent[0].tagName != 'LI' && this.utils.isBlock($listParent[0]))
                {
                  $listParent.replaceWith($listParent.contents());
                }
              }
    
              if (!this.utils.browser('msie'))
              {
                this.$editor.focus();
              }
    
    
              this.clean.clearUnverified();
            },
            insertInIe: function(cmd)
            {
              var wrapper = this.selection.wrap('div');
              var wrapperHtml = $(wrapper).html();
    
              var tmpList = (cmd == 'orderedlist') ? $('<ol>') : $('<ul>');
              var tmpLi = $('<li>');
    
              if ($.trim(wrapperHtml) === '')
              {
                tmpLi.append(this.selection.getMarkerAsHtml());
                tmpList.append(tmpLi);
                this.$editor.find('#selection-marker-1').replaceWith(tmpList);
              }
              else
              {
                var items = wrapperHtml.split(/<br\s?\/?>/gi);
                if (items)
                {
                  for (var i = 0; i < items.length; i++)
                  {
                    if ($.trim(items[i]) !== '')
                    {
                      tmpList.append($('<li>').html(items[i]));
                    }
                  }
                }
                else
                {
                  tmpLi.append(wrapperHtml);
                  tmpList.append(tmpLi);
                }
    
                $(wrapper).replaceWith(tmpList);
              }
            },
            remove: function(cmd, $list)
            {
              if ($.inArray('ul', this.selection.getBlocks())) cmd = 'unorderedlist';
    
              document.execCommand('insert' + cmd);
    
              var $current = $(this.selection.getCurrent());
              this.indent.fixEmptyIndent();
    
              if (!this.opts.linebreaks && $current.closest('li, th, td', this.$editor[0]).length === 0)
              {
                document.execCommand('formatblock', false, 'p');
                this.$editor.find('ul, ol, blockquote').each($.proxy(this.utils.removeEmpty, this));
              }
    
              var $table = $(this.selection.getCurrent()).closest('table', this.$editor[0]);
              var $prev = $table.prev();
              if (!this.opts.linebreaks && $table.length !== 0 && $prev.length !== 0 && $prev[0].tagName == 'BR')
              {
                $prev.remove();
              }
    
              this.clean.clearUnverified();
    
    
            }
          };
        },
        modal: function()
        {
          return {
            callbacks: {},
            loadTemplates: function()
            {
              this.opts.modal = {
                imageEdit: String()
                + '<section id="redactor-modal-image-edit">'
                  + '<label>' + this.lang.get('title') + '</label>'
                  + '<input type="text" id="redactor-image-title" />'
                  + '<label class="redactor-image-link-option">' + this.lang.get('link') + '</label>'
                  + '<input type="text" id="redactor-image-link" class="redactor-image-link-option" aria-label="' + this.lang.get('link') + '" />'
                  + '<label class="redactor-image-link-option"><input type="checkbox" id="redactor-image-link-blank" aria-label="' + this.lang.get('link_new_tab') + '"> ' + this.lang.get('link_new_tab') + '</label>'
                  + '<label class="redactor-image-position-option">' + this.lang.get('image_position') + '</label>'
                  + '<select class="redactor-image-position-option" id="redactor-image-align" aria-label="' + this.lang.get('image_position') + '">'
                    + '<option value="none">' + this.lang.get('none') + '</option>'
                    + '<option value="left">' + this.lang.get('left') + '</option>'
                    + '<option value="center">' + this.lang.get('center') + '</option>'
                    + '<option value="right">' + this.lang.get('right') + '</option>'
                  + '</select>'
                + '</section>',
    
                image: String()
                + '<section id="redactor-modal-image-insert">'
                  + '<div id="redactor-modal-image-droparea"></div>'
                + '</section>',
    
                file: String()
                + '<section id="redactor-modal-file-insert">'
                  + '<div id="redactor-modal-file-upload-box">'
                    + '<label>' + this.lang.get('filename') + '</label>'
                    + '<input type="text" id="redactor-filename" aria-label="' + this.lang.get('filename') + '" /><br><br>'
                    + '<div id="redactor-modal-file-upload"></div>'
                  + '</div>'
                + '</section>',
    
                link: String()
                + '<section id="redactor-modal-link-insert">'
                  + '<label>URL</label>'
                  + '<input type="url" id="redactor-link-url" aria-label="URL" />'
                  + '<label>' + this.lang.get('text') + '</label>'
                  + '<input type="text" id="redactor-link-url-text" aria-label="' + this.lang.get('text') + '" />'
                  + '<label><input type="checkbox" id="redactor-link-blank"> ' + this.lang.get('link_new_tab') + '</label>'
                + '</section>'
              };
    
    
              $.extend(this.opts, this.opts.modal);
    
            },
            addCallback: function(name, callback)
            {
              this.modal.callbacks[name] = callback;
            },
            createTabber: function($modal)
            {
              this.modal.$tabber = $('<div>').attr('id', 'redactor-modal-tabber');
    
              $modal.prepend(this.modal.$tabber);
            },
            addTab: function(id, name, active)
            {
              var $tab = $('<a href="#" rel="tab' + id + '">').text(name);
              if (active)
              {
                $tab.addClass('active');
              }
    
              var self = this;
              $tab.on('click', function(e)
              {
                e.preventDefault();
                $('.redactor-tab').hide();
                $('.redactor-' + $(this).attr('rel')).show();
    
                self.modal.$tabber.find('a').removeClass('active');
                $(this).addClass('active');
    
              });
    
              this.modal.$tabber.append($tab);
            },
            addTemplate: function(name, template)
            {
              this.opts.modal[name] = template;
            },
            getTemplate: function(name)
            {
              return this.opts.modal[name];
            },
            getModal: function()
            {
              return this.$modalBody.find('section');
            },
            load: function(templateName, title, width)
            {
              this.modal.templateName = templateName;
              this.modal.width = width;
    
              this.modal.build();
              this.modal.enableEvents();
              this.modal.setTitle(title);
              this.modal.setDraggable();
              this.modal.setContent();
    
              // callbacks
              if (typeof this.modal.callbacks[templateName] != 'undefined')
              {
                this.modal.callbacks[templateName].call(this);
              }
    
            },
            show: function()
            {
              this.utils.disableBodyScroll();
    
              if (this.utils.isMobile())
              {
                this.modal.showOnMobile();
              }
              else
              {
                this.modal.showOnDesktop();
              }
    
              if (this.opts.highContrast)
              {
                this.$modalBox.addClass("redactor-modal-contrast");
              }
    
              this.$modalOverlay.show();
              this.$modalBox.show();
    
              this.$modal.attr('tabindex', '-1');
              this.$modal.focus();
    
              this.modal.setButtonsWidth();
    
              this.utils.saveScroll();
    
              // resize
              if (!this.utils.isMobile())
              {
                setTimeout($.proxy(this.modal.showOnDesktop, this), 0);
                $(window).on('resize.redactor-modal', $.proxy(this.modal.resize, this));
              }
    
              // modal shown callback
              this.core.setCallback('modalOpened', this.modal.templateName, this.$modal);
    
              // fix bootstrap modal focus
              $(document).off('focusin.modal');
    
              // enter
              this.$modal.find('input[type=text],input[type=url],input[type=email]').on('keydown.redactor-modal', $.proxy(this.modal.setEnter, this));
            },
            showOnDesktop: function()
            {
              var height = this.$modal.outerHeight();
              var windowHeight = $(window).height();
              var windowWidth = $(window).width();
    
              if (this.modal.width > windowWidth)
              {
                this.$modal.css({
                  width: '96%',
                  marginTop: (windowHeight/2 - height/2) + 'px'
                });
                return;
              }
    
              if (height > windowHeight)
              {
                this.$modal.css({
                  width: this.modal.width + 'px',
                  marginTop: '20px'
                });
              }
              else
              {
                this.$modal.css({
                  width: this.modal.width + 'px',
                  marginTop: (windowHeight/2 - height/2) + 'px'
                });
              }
            },
            showOnMobile: function()
            {
              this.$modal.css({
                width: '96%',
                marginTop: '2%'
              });
    
            },
            resize: function()
            {
              if (this.utils.isMobile())
              {
                this.modal.showOnMobile();
              }
              else
              {
                this.modal.showOnDesktop();
              }
            },
            setTitle: function(title)
            {
              this.$modalHeader.html(title);
            },
            setContent: function()
            {
              this.$modalBody.html(this.modal.getTemplate(this.modal.templateName));
            },
            setDraggable: function()
            {
              if (typeof $.fn.draggable === 'undefined') return;
    
              this.$modal.draggable({ handle: this.$modalHeader });
              this.$modalHeader.css('cursor', 'move');
            },
            setEnter: function(e)
            {
              if (e.which != 13) return;
    
              e.preventDefault();
              this.$modal.find('button.redactor-modal-action-btn').click();
            },
            createCancelButton: function()
            {
              var button = $('<button>').addClass('redactor-modal-btn redactor-modal-close-btn').html(this.lang.get('cancel'));
              button.on('click', $.proxy(this.modal.close, this));
    
              this.$modalFooter.append(button);
            },
            createDeleteButton: function(label)
            {
              return this.modal.createButton(label, 'delete');
            },
            createActionButton: function(label)
            {
              return this.modal.createButton(label, 'action');
            },
            createButton: function(label, className)
            {
              var button = $('<button>').addClass('redactor-modal-btn').addClass('redactor-modal-' + className + '-btn').html(label);
              this.$modalFooter.append(button);
    
              return button;
            },
            setButtonsWidth: function()
            {
              var buttons = this.$modalFooter.find('button');
              var buttonsSize = buttons.length;
              if (buttonsSize === 0) return;
    
              buttons.css('width', (100/buttonsSize) + '%');
            },
            build: function()
            {
              this.modal.buildOverlay();
    
              this.$modalBox = $('<div id="redactor-modal-box"/>').hide();
              this.$modal = $('<div id="redactor-modal" role="dialog" aria-labelledby="redactor-modal-header" />');
              this.$modalHeader = $('<header id="redactor-modal-header"/>');
              this.$modalClose = $('<button type="button" id="redactor-modal-close" tabindex="1" aria-label="Close" />').html('&times;');
              this.$modalBody = $('<div id="redactor-modal-body" />');
              this.$modalFooter = $('<footer />');
    
              this.$modal.append(this.$modalHeader);
              this.$modal.append(this.$modalClose);
              this.$modal.append(this.$modalBody);
              this.$modal.append(this.$modalFooter);
              this.$modalBox.append(this.$modal);
              this.$modalBox.appendTo(document.body);
            },
            buildOverlay: function()
            {
              this.$modalOverlay = $('<div id="redactor-modal-overlay">').hide();
              $('body').prepend(this.$modalOverlay);
            },
            enableEvents: function()
            {
              this.$modalClose.on('click.redactor-modal', $.proxy(this.modal.close, this));
              $(document).on('keyup.redactor-modal', $.proxy(this.modal.closeHandler, this));
              this.$editor.on('keyup.redactor-modal', $.proxy(this.modal.closeHandler, this));
              this.$modalBox.on('click.redactor-modal', $.proxy(this.modal.close, this));
            },
            disableEvents: function()
            {
              this.$modalClose.off('click.redactor-modal');
              $(document).off('keyup.redactor-modal');
              this.$editor.off('keyup.redactor-modal');
              this.$modalBox.off('click.redactor-modal');
              $(window).off('resize.redactor-modal');
            },
            closeHandler: function(e)
            {
              if (e.which != this.keyCode.ESC) return;
    
              this.modal.close(false);
            },
            close: function(e)
            {
              if (e)
              {
                if (!$(e.target).hasClass('redactor-modal-close-btn') && e.target != this.$modalClose[0] && e.target != this.$modalBox[0])
                {
                  return;
                }
    
                e.preventDefault();
              }
    
              if (!this.$modalBox) return;
    
              this.modal.disableEvents();
              this.utils.enableBodyScroll();
    
              this.$modalOverlay.remove();
    
              this.$modalBox.fadeOut('fast', $.proxy(function()
              {
                this.$modalBox.remove();
    
                setTimeout($.proxy(this.utils.restoreScroll, this), 0);
    
                if (e !== undefined) this.selection.restore();
    
                $(document.body).css('overflow', this.modal.bodyOveflow);
                this.core.setCallback('modalClosed', this.modal.templateName);
    
              }, this));
    
            }
          };
        },
        observe: function()
        {
          return {
            load: function()
            {
              if (typeof this.opts.destroyed != "undefined") return;
    
              if (this.utils.browser('msie'))
              {
                var self = this;
                this.$editor.find('pre, code').on('mouseover',function()
                {
                  self.$editor.attr('contenteditable', false);
                  $(this).attr('contenteditable', true);
    
                }).on('mouseout',function()
                {
                  self.$editor.attr('contenteditable', true);
                  $(this).removeAttr('contenteditable');
    
                });
              }
    
              this.observe.images();
              this.observe.links();
            },
            toolbar: function(e, btnName)
            {
              this.observe.buttons(e, btnName);
              this.observe.dropdowns();
            },
            isCurrent: function($el, $current)
            {
              if (typeof $current == 'undefined')
              {
                var $current = $(this.selection.getCurrent());
              }
    
              return $current.is($el) || $current.parents($el).length > 0;
            },
            dropdowns: function()
            {
              var $current = $(this.selection.getCurrent());
    
              $.each(this.opts.observe.dropdowns, $.proxy(function(key, value)
              {
                var observe = value.observe,
                  element = observe.element,
                  $item   = value.item,
                  inValues = typeof observe['in'] != 'undefined' ? observe['in'] : false,
                  outValues = typeof observe['out'] != 'undefined' ? observe['out'] : false;
    
                if ($current.closest(element).size() > 0)
                {
                  this.observe.setDropdownProperties($item, inValues, outValues);
                }
                else
                {
                  this.observe.setDropdownProperties($item, outValues, inValues);
                }
              }, this));
            },
            setDropdownProperties: function($item, addProperties, deleteProperties)
            {
              if (deleteProperties && typeof deleteProperties['attr'] != 'undefined')
              {
                this.observe.setDropdownAttr($item, deleteProperties.attr, true);
              }
    
              if (typeof addProperties['attr'] != 'undefined')
              {
                this.observe.setDropdownAttr($item, addProperties.attr);
              }
    
              if (typeof addProperties['title'] != 'undefined')
              {
                $item.text(addProperties['title']);
              }
            },
            setDropdownAttr: function($item, properties, isDelete)
            {
              $.each(properties, function(key, value)
              {
                if (key == 'class')
                {
                  if (!isDelete)
                  {
                    $item.addClass(value);
                  }
                  else
                  {
                    $item.removeClass(value);
                  }
                }
                else
                {
                  if (!isDelete)
                  {
                    $item.attr(key, value);
                  }
                  else
                  {
                    $item.removeAttr(key);
                  }
                }
              });
            },
            addDropdown: function($item, btnName, btnObject)
            {
              if (typeof btnObject.observe == "undefined") return;
    
              btnObject.item = $item;
    
              this.opts.observe.dropdowns.push(btnObject);
            },
            buttons: function(e, btnName)
            {
              var current = this.selection.getCurrent();
              var parent = this.selection.getParent();
    
              if (e !== false)
              {
                this.button.setInactiveAll();
              }
              else
              {
                this.button.setInactiveAll(btnName);
              }
    
              if (e === false && btnName !== 'html')
              {
                if ($.inArray(btnName, this.opts.activeButtons) != -1) this.button.toggleActive(btnName);
                return;
              }
    
              //var linkButtonName = (this.utils.isCurrentOrParent('A')) ? this.lang.get('link_edit') : this.lang.get('link_insert');
              //$('body').find('a.redactor-dropdown-link').text(linkButtonName);
    
              $.each(this.opts.activeButtonsStates, $.proxy(function(key, value)
              {
                var parentEl = $(parent).closest(key, this.$editor[0]);
                var currentEl = $(current).closest(key, this.$editor[0]);
    
                if (parentEl.length !== 0 && !this.utils.isRedactorParent(parentEl)) return;
                if (!this.utils.isRedactorParent(currentEl)) return;
                if (parentEl.length !== 0 || currentEl.closest(key, this.$editor[0]).length !== 0)
                {
                  this.button.setActive(value);
                }
    
              }, this));
    
              var $parent = $(parent).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]);
              if (this.utils.isRedactorParent(parent) && $parent.length)
              {
                var align = ($parent.css('text-align') === '') ? 'left' : $parent.css('text-align');
                this.button.setActive('align' + align);
              }
            },
            addButton: function(tag, btnName)
            {
              this.opts.activeButtons.push(btnName);
              this.opts.activeButtonsStates[tag] = btnName;
            },
            images: function()
            {
              this.$editor.find('img').each($.proxy(function(i, img)
              {
                var $img = $(img);
    
                // IE fix (when we clicked on an image and then press backspace IE does goes to image's url)
                $img.closest('a', this.$editor[0]).on('click', function(e) { e.preventDefault(); });
    
                if (this.utils.browser('msie')) $img.attr('unselectable', 'on');
    
                this.image.setEditable($img);
    
              }, this));
    
              $(document).on('click.redactor-image-delete.' + this.uuid, $.proxy(function(e)
              {
                this.observe.image = false;
                if (e.target.tagName == 'IMG' && this.utils.isRedactorParent(e.target))
                {
                  this.observe.image = (this.observe.image && this.observe.image == e.target) ? false : e.target;
                }
    
              }, this));
    
            },
            links: function()
            {
              if (!this.opts.linkTooltip) return;
    
              this.$editor.find('a').on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.showTooltip, this));
              this.$editor.on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.closeTooltip, this));
              $(document).on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.closeTooltip, this));
            },
            getTooltipPosition: function($link)
            {
              return $link.offset();
            },
            showTooltip: function(e)
            {
              var $el = $(e.target);
    
              if ($el[0].tagName == 'IMG')
                return;
    
              if ($el[0].tagName !== 'A')
                $el = $el.closest('a', this.$editor[0]);
    
              if ($el[0].tagName !== 'A')
                return;
    
              var $link = $el;
    
              var pos = this.observe.getTooltipPosition($link);
              var tooltip = $('<span class="redactor-link-tooltip"></span>');
    
              var href = $link.attr('href');
              if (href === undefined)
              {
                href = '';
              }
    
              if (href.length > 24) href = href.substring(0, 24) + '...';
    
              var aLink = $('<a href="' + $link.attr('href') + '" target="_blank" />').html(href).addClass('redactor-link-tooltip-action');
              var aEdit = $('<a href="#" />').html(this.lang.get('edit')).on('click', $.proxy(this.link.show, this)).addClass('redactor-link-tooltip-action');
              var aUnlink = $('<a href="#" />').html(this.lang.get('unlink')).on('click', $.proxy(this.link.unlink, this)).addClass('redactor-link-tooltip-action');
    
              tooltip.append(aLink).append(' | ').append(aEdit).append(' | ').append(aUnlink);
              tooltip.css({
                top: (pos.top + parseInt($link.css('line-height'), 10)) + 'px',
                left: pos.left + 'px'
              });
    
              $('.redactor-link-tooltip').remove();
              $('body').append(tooltip);
            },
            closeTooltip: function(e)
            {
              e = e.originalEvent || e;
    
              var target = e.target;
              var $parent = $(target).closest('a', this.$editor[0]);
              if ($parent.length !== 0 && $parent[0].tagName === 'A' && target.tagName !== 'A')
              {
                return;
              }
              else if ((target.tagName === 'A' && this.utils.isRedactorParent(target)) || $(target).hasClass('redactor-link-tooltip-action'))
              {
                return;
              }
    
              $('.redactor-link-tooltip').remove();
            }
    
          };
        },
        paragraphize: function()
        {
          return {
            load: function(html)
            {
              if (this.opts.linebreaks) return html;
              if (html === '' || html === '<p></p>') return this.opts.emptyHtml;
    
              html = html + "\n";
    
              this.paragraphize.safes = [];
              this.paragraphize.z = 0;
    
              html = html.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, '</blockquote>');
    
              html = this.paragraphize.getSafes(html);
              html = this.paragraphize.getSafesComments(html);
              html = this.paragraphize.replaceBreaksToNewLines(html);
              html = this.paragraphize.replaceBreaksToParagraphs(html);
              html = this.paragraphize.clear(html);
              html = this.paragraphize.restoreSafes(html);
    
              html = html.replace(new RegExp('<br\\s?/?>\n?<(' + this.opts.paragraphizeBlocks.join('|') + ')(.*?[^>])>', 'gi'), '<p><br /></p>\n<$1$2>');
    
              return $.trim(html);
            },
            getSafes: function(html)
            {
              var $div = $('<div />').append(html);
    
              // remove paragraphs in blockquotes
              $div.find('blockquote p').replaceWith(function()
              {
                return $(this).append('<br />').contents();
              });
    
              html = $div.html();
    
              $div.find(this.opts.paragraphizeBlocks.join(', ')).each($.proxy(function(i,s)
              {
                this.paragraphize.z++;
                this.paragraphize.safes[this.paragraphize.z] = s.outerHTML;
                html = html.replace(s.outerHTML, '\n{replace' + this.paragraphize.z + '}');
    
              }, this));
    
              return html;
            },
            getSafesComments: function(html)
            {
              var commentsMatches = html.match(/<!--([\w\W]*?)-->/gi);
    
              if (!commentsMatches) return html;
    
              $.each(commentsMatches, $.proxy(function(i,s)
              {
                this.paragraphize.z++;
                this.paragraphize.safes[this.paragraphize.z] = s;
                html = html.replace(s, '\n{replace' + this.paragraphize.z + '}');
              }, this));
    
              return html;
            },
            restoreSafes: function(html)
            {
              $.each(this.paragraphize.safes, function(i,s)
              {
                s = (typeof s !== 'undefined') ? s.replace(/\$/g, '&#36;') : s;
                html = html.replace('{replace' + i + '}', s);
    
              });
    
              return html;
            },
            replaceBreaksToParagraphs: function(html)
            {
              var htmls = html.split(new RegExp('\n', 'g'), -1);
    
              html = '';
              if (htmls)
              {
                var len = htmls.length;
                for (var i = 0; i < len; i++)
                {
                  if (!htmls.hasOwnProperty(i)) return;
    
                  if (htmls[i].search('{replace') == -1)
                  {
                    htmls[i] = htmls[i].replace(/<p>\n\t?<\/p>/gi, '');
                    htmls[i] = htmls[i].replace(/<p><\/p>/gi, '');
    
                    if (htmls[i] !== '')
                    {
                      html += '<p>' +  htmls[i].replace(/^\n+|\n+$/g, "") + "</p>";
                    }
                  }
                  else html += htmls[i];
                }
              }
    
              return html;
            },
            replaceBreaksToNewLines: function(html)
            {
              html = html.replace(/<br \/>\s*<br \/>/gi, "\n\n");
              html = html.replace(/<br\s?\/?>\n?<br\s?\/?>/gi, "\n<br /><br />");
    
              html = html.replace(new RegExp("\r\n", 'g'), "\n");
              html = html.replace(new RegExp("\r", 'g'), "\n");
              html = html.replace(new RegExp("/\n\n+/"), 'g', "\n\n");
    
              return html;
            },
            clear: function(html)
            {
              html = html.replace(new RegExp('</blockquote></p>', 'gi'), '</blockquote>');
              html = html.replace(new RegExp('<p></blockquote>', 'gi'), '</blockquote>');
              html = html.replace(new RegExp('<p><blockquote>', 'gi'), '<blockquote>');
              html = html.replace(new RegExp('<blockquote></p>', 'gi'), '<blockquote>');
    
              html = html.replace(new RegExp('<p><p ', 'gi'), '<p ');
              html = html.replace(new RegExp('<p><p>', 'gi'), '<p>');
              html = html.replace(new RegExp('</p></p>', 'gi'), '</p>');
              html = html.replace(new RegExp('<p>\\s?</p>', 'gi'), '');
              html = html.replace(new RegExp("\n</p>", 'gi'), '</p>');
              html = html.replace(new RegExp('<p>\t?\t?\n?<p>', 'gi'), '<p>');
              html = html.replace(new RegExp('<p>\t*</p>', 'gi'), '');
    
              return html;
            }
          };
        },
        paste: function()
        {
          return {
            init: function(e)
            {
              if (!this.opts.cleanOnPaste)
              {
                setTimeout($.proxy(this.code.sync, this), 1);
                return;
              }
    
              this.rtePaste = true;
    
              this.buffer.set();
              this.selection.save();
              this.utils.saveScroll();
    
              this.paste.createPasteBox();
    
              $(window).on('scroll.redactor-freeze', $.proxy(function()
              {
                $(window).scrollTop(this.saveBodyScroll);
    
              }, this));
    
              setTimeout($.proxy(function()
              {
                var html = this.$pasteBox.html();
    
                this.$pasteBox.remove();
    
                this.selection.restore();
                this.utils.restoreScroll();
    
                this.paste.insert(html);
    
                $(window).off('scroll.redactor-freeze');
    
                if (this.linkify.isEnabled())
                {
                  this.linkify.format();
                }
    
              }, this), 1);
            },
            createPasteBox: function()
            {
              this.$pasteBox = $('<div>').html('').attr('contenteditable', 'true').css({ position: 'fixed', width: 0, top: 0, left: '-9999px' });
    
              if (this.utils.browser('msie'))
              {
                this.$box.append(this.$pasteBox);
              }
              else
              {
                // bootstrap modal
                if ($('.modal-body').length > 0)
                {
    
                  $('.modal.in .modal-body').append(this.$pasteBox);
                }
                else
                {
                  $('body').append(this.$pasteBox);
                }
    
              }
    
              this.$pasteBox.focus();
            },
            insert: function(html)
            {
              html = this.core.setCallback('pasteBefore', html);
    
              // clean
              html = (this.utils.isSelectAll()) ? this.clean.onPaste(html, false) : this.clean.onPaste(html);
    
              html = this.core.setCallback('paste', html);
    
              if (this.utils.isSelectAll())
              {
                this.insert.set(html, false);
              }
              else
              {
                this.insert.html(html, false);
              }
    
              this.utils.disableSelectAll();
              this.rtePaste = false;
    
              setTimeout($.proxy(this.clean.clearUnverified, this), 10);
    
              // clean empty spans
              setTimeout($.proxy(function()
              {
                var spans = this.$editor.find('span');
                $.each(spans, function(i,s)
                {
                  var html = s.innerHTML.replace(/\u200B/, '');
                  if (html === '' && s.attributes.length === 0) $(s).remove();
    
                });
    
              }, this), 10);
    
            }
          };
        },
        placeholder: function()
        {
          return {
            enable: function()
            {
              if (!this.placeholder.is()) return;
    
              this.$editor.attr('placeholder', this.$element.attr('placeholder'));
    
              this.placeholder.toggle();
              this.$editor.on('keydown.redactor-placeholder', $.proxy(this.placeholder.toggle, this));
            },
            toggle: function()
            {
              setTimeout($.proxy(function()
              {
                var func = this.utils.isEmpty(this.$editor.html(), false) ? 'addClass' : 'removeClass';
                this.$editor[func]('redactor-placeholder');
    
              }, this), 5);
            },
            remove: function()
            {
              this.$editor.removeClass('redactor-placeholder');
            },
            is: function()
            {
              if (this.opts.placeholder)
              {
                return this.$element.attr('placeholder', this.opts.placeholder);
              }
              else
              {
                return !(typeof this.$element.attr('placeholder') == 'undefined' || this.$element.attr('placeholder') === '');
              }
            }
          };
        },
        progress: function()
        {
          return {
            show: function()
            {
              $(document.body).append($('<div id="redactor-progress"><span></span></div>'));
              $('#redactor-progress').fadeIn();
            },
            hide: function()
            {
              $('#redactor-progress').fadeOut(1500, function()
              {
                $(this).remove();
              });
            }
    
          };
        },
        selection: function()
        {
          return {
            get: function()
            {
              this.sel = document.getSelection();
    
              if (document.getSelection && this.sel.getRangeAt && this.sel.rangeCount)
              {
                this.range = this.sel.getRangeAt(0);
              }
              else
              {
                this.range = document.createRange();
              }
            },
            addRange: function()
            {
              try {
                this.sel.removeAllRanges();
              } catch (e) {}
    
              this.sel.addRange(this.range);
            },
            getCurrent: function()
            {
              var el = false;
    
              this.selection.get();
    
              if (this.sel && this.sel.rangeCount > 0)
              {
                el = this.sel.getRangeAt(0).startContainer;
              }
    
              return this.utils.isRedactorParent(el);
            },
            getParent: function(elem)
            {
              elem = elem || this.selection.getCurrent();
              if (elem)
              {
                return this.utils.isRedactorParent($(elem).parent()[0]);
              }
    
              return false;
            },
            getPrev: function()
            {
              return  window.getSelection().anchorNode.previousSibling;
            },
            getNext: function()
            {
              return window.getSelection().anchorNode.nextSibling;
            },
            getBlock: function(node)
            {
              node = node || this.selection.getCurrent();
    
              while (node)
              {
                if (this.utils.isBlockTag(node.tagName))
                {
                  return ($(node).hasClass('redactor-editor')) ? false : node;
                }
    
                node = node.parentNode;
              }
    
              return false;
            },
            getInlines: function(nodes, tags)
            {
              this.selection.get();
    
              if (this.range && this.range.collapsed)
              {
                return false;
              }
    
              var inlines = [];
              nodes = (typeof nodes == 'undefined' || nodes === false) ? this.selection.getNodes() : nodes;
              var inlineTags = this.opts.inlineTags;
              inlineTags.push('span');
    
              if (typeof tags !== 'undefined')
              {
                for (var i = 0; i < tags.length; i++)
                {
                  inlineTags.push(tags[i]);
                }
              }
    
              $.each(nodes, $.proxy(function(i,node)
              {
                if ($.inArray(node.tagName.toLowerCase(), inlineTags) != -1)
                {
                  inlines.push(node);
                }
    
              }, this));
    
              return (inlines.length === 0) ? false : inlines;
            },
            getInlinesTags: function(tags)
            {
              this.selection.get();
    
              if (this.range && this.range.collapsed)
              {
                return false;
              }
    
              var inlines = [];
              var nodes =  this.selection.getNodes();
              $.each(nodes, $.proxy(function(i,node)
              {
                if ($.inArray(node.tagName.toLowerCase(), tags) != -1)
                {
                  inlines.push(node);
                }
    
              }, this));
    
              return (inlines.length === 0) ? false : inlines;
            },
            getBlocks: function(nodes)
            {
              this.selection.get();
    
              if (this.range && this.range.collapsed)
              {
                return [this.selection.getBlock()];
              }
    
              var blocks = [];
              nodes = (typeof nodes == 'undefined') ? this.selection.getNodes() : nodes;
              $.each(nodes, $.proxy(function(i,node)
              {
                if (this.utils.isBlock(node))
                {
                  this.selection.lastBlock = node;
                  blocks.push(node);
                }
    
              }, this));
    
              return (blocks.length === 0) ? [this.selection.getBlock()] : blocks;
            },
            getLastBlock: function()
            {
              return this.selection.lastBlock;
            },
            getNodes: function()
            {
              this.selection.get();
    
              var startNode = this.selection.getNodesMarker(1);
              var endNode = this.selection.getNodesMarker(2);
    
              if (this.range.collapsed === false)
              {
                 if (window.getSelection) {
                      var sel = window.getSelection();
                      if (sel.rangeCount > 0) {
    
                          var range = sel.getRangeAt(0);
                          var startPointNode = range.startContainer, startOffset = range.startOffset;
    
                          var boundaryRange = range.cloneRange();
                          boundaryRange.collapse(false);
                          boundaryRange.insertNode(endNode);
                          boundaryRange.setStart(startPointNode, startOffset);
                          boundaryRange.collapse(true);
                          boundaryRange.insertNode(startNode);
    
                          // Reselect the original text
                          range.setStartAfter(startNode);
                          range.setEndBefore(endNode);
                          sel.removeAllRanges();
                          sel.addRange(range);
                      }
                  }
              }
              else
              {
                this.selection.setNodesMarker(this.range, startNode, true);
                endNode = startNode;
              }
    
              var nodes = [];
              var counter = 0;
    
              var self = this;
              this.$editor.find('*').each(function()
              {
                if (this == startNode)
                {
                  var parent = $(this).parent();
                  if (parent.length !== 0 && parent[0].tagName != 'BODY' && self.utils.isRedactorParent(parent[0]))
                  {
                    nodes.push(parent[0]);
                  }
    
                  nodes.push(this);
                  counter = 1;
                }
                else
                {
                  if (counter > 0)
                  {
                    nodes.push(this);
                    counter = counter + 1;
                  }
                }
    
                if (this == endNode)
                {
                  return false;
                }
    
              });
    
              var finalNodes = [];
              var len = nodes.length;
              for (var i = 0; i < len; i++)
              {
                if (nodes[i].id != 'nodes-marker-1' && nodes[i].id != 'nodes-marker-2')
                {
                  finalNodes.push(nodes[i]);
                }
              }
    
              this.selection.removeNodesMarkers();
    
              return finalNodes;
    
            },
            getNodesMarker: function(num)
            {
              return $('<span id="nodes-marker-' + num + '" class="redactor-nodes-marker" data-verified="redactor">' + this.opts.invisibleSpace + '</span>')[0];
            },
            setNodesMarker: function(range, node, type)
            {
              var range = range.cloneRange();
    
              try {
                range.collapse(type);
                range.insertNode(node);
              }
              catch (e) {}
            },
            removeNodesMarkers: function()
            {
              $(document).find('span.redactor-nodes-marker').remove();
              this.$editor.find('span.redactor-nodes-marker').remove();
            },
            fromPoint: function(start, end)
            {
              this.caret.setOffset(start, end);
            },
            wrap: function(tag)
            {
              this.selection.get();
    
              if (this.range.collapsed) return false;
    
              var wrapper = document.createElement(tag);
              wrapper.appendChild(this.range.extractContents());
              this.range.insertNode(wrapper);
    
              return wrapper;
            },
            selectElement: function(node)
            {
              if (this.utils.browser('mozilla'))
              {
                node = node[0] || node;
    
                var range = document.createRange();
                range.selectNodeContents(node);
              }
              else
              {
                this.caret.set(node, 0, node, 1);
              }
            },
            selectAll: function()
            {
              this.selection.get();
              this.range.selectNodeContents(this.$editor[0]);
              this.selection.addRange();
            },
            remove: function()
            {
              this.selection.get();
              this.sel.removeAllRanges();
            },
            save: function()
            {
              this.selection.createMarkers();
            },
            createMarkers: function()
            {
              this.selection.get();
    
              var node1 = this.selection.getMarker(1);
    
              this.selection.setMarker(this.range, node1, true);
              if (this.range.collapsed === false)
              {
                var node2 = this.selection.getMarker(2);
                this.selection.setMarker(this.range, node2, false);
              }
    
              this.savedSel = this.$editor.html();
            },
            getMarker: function(num)
            {
              if (typeof num == 'undefined') num = 1;
    
              return $('<span id="selection-marker-' + num + '" class="redactor-selection-marker"  data-verified="redactor">' + this.opts.invisibleSpace + '</span>')[0];
            },
            getMarkerAsHtml: function(num)
            {
              return this.utils.getOuterHtml(this.selection.getMarker(num));
            },
            setMarker: function(range, node, type)
            {
              range = range.cloneRange();
    
              try {
                range.collapse(type);
                range.insertNode(node);
    
              }
              catch (e)
              {
                this.focus.setStart();
              }
    
            },
            restore: function()
            {
              var node1 = this.$editor.find('span#selection-marker-1');
              var node2 = this.$editor.find('span#selection-marker-2');
    
              if (this.utils.browser('mozilla'))
              {
                this.$editor.focus();
              }
    
              if (node1.length !== 0 && node2.length !== 0)
              {
                this.caret.set(node1, 0, node2, 0);
              }
              else if (node1.length !== 0)
              {
                this.caret.set(node1, 0, node1, 0);
              }
              else
              {
                this.$editor.focus();
              }
    
              this.selection.removeMarkers();
              this.savedSel = false;
    
            },
            removeMarkers: function()
            {
              this.$editor.find('span.redactor-selection-marker').each(function(i,s)
              {
                var text = $(s).text().replace(/\u200B/g, '');
                if (text === '') $(s).remove();
                else $(s).replaceWith(function() { return $(this).contents(); });
              });
            },
            getText: function()
            {
              this.selection.get();
    
              return this.sel.toString();
            },
            getHtml: function()
            {
              var html = '';
    
              this.selection.get();
              if (this.sel.rangeCount)
              {
                var container = document.createElement('div');
                var len = this.sel.rangeCount;
                for (var i = 0; i < len; ++i)
                {
                  container.appendChild(this.sel.getRangeAt(i).cloneContents());
                }
    
                html = container.innerHTML;
              }
    
              return this.clean.onSync(html);
            },
            replaceSelection: function(html)
            {
              this.selection.get();
              this.range.deleteContents();
              var div = document.createElement("div");
              div.innerHTML = html;
              var frag = document.createDocumentFragment(), child;
              while ((child = div.firstChild)) {
                frag.appendChild(child);
              }
    
              this.range.insertNode(frag);
            },
            replaceWithHtml: function(html)
            {
              html = this.selection.getMarkerAsHtml(1) + html + this.selection.getMarkerAsHtml(2);
    
              this.selection.get();
    
              if (window.getSelection && window.getSelection().getRangeAt)
              {
                this.selection.replaceSelection(html);
              }
              else if (document.selection && document.selection.createRange)
              {
                this.range.pasteHTML(html);
              }
    
              this.selection.restore();
              this.code.sync();
            }
          };
        },
        shortcuts: function()
        {
          return {
            init: function(e, key)
            {
              // disable browser's hot keys for bold and italic
              if (!this.opts.shortcuts)
              {
                if ((e.ctrlKey || e.metaKey) && (key === 66 || key === 73)) e.preventDefault();
                return false;
              }
    
              $.each(this.opts.shortcuts, $.proxy(function(str, command)
              {
                var keys = str.split(',');
                var len = keys.length;
                for (var i = 0; i < len; i++)
                {
                  if (typeof keys[i] === 'string')
                  {
                    this.shortcuts.handler(e, $.trim(keys[i]), $.proxy(function()
                    {
                      var func;
                      if (command.func.search(/\./) != '-1')
                      {
                        func = command.func.split('.');
                        if (typeof this[func[0]] != 'undefined')
                        {
                          this[func[0]][func[1]].apply(this, command.params);
                        }
                      }
                      else
                      {
                        this[command.func].apply(this, command.params);
                      }
    
                    }, this));
                  }
    
                }
    
              }, this));
            },
            handler: function(e, keys, origHandler)
            {
              // based on https://github.com/jeresig/jquery.hotkeys
              var hotkeysSpecialKeys =
              {
                8: "backspace", 9: "tab", 10: "return", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause",
                20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home",
                37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del", 59: ";", 61: "=",
                96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7",
                104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111 : "/",
                112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8",
                120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 173: "-", 186: ";", 187: "=",
                188: ",", 189: "-", 190: ".", 191: "/", 192: "`", 219: "[", 220: "\\", 221: "]", 222: "'"
              };
    
    
              var hotkeysShiftNums =
              {
                "`": "~", "1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&",
                "8": "*", "9": "(", "0": ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<",
                ".": ">",  "/": "?",  "\\": "|"
              };
    
              keys = keys.toLowerCase().split(" ");
              var special = hotkeysSpecialKeys[e.keyCode],
                character = String.fromCharCode( e.which ).toLowerCase(),
                modif = "", possible = {};
    
              $.each([ "alt", "ctrl", "meta", "shift"], function(index, specialKey)
              {
                if (e[specialKey + 'Key'] && special !== specialKey)
                {
                  modif += specialKey + '+';
                }
              });
    
    
              if (special) possible[modif + special] = true;
              if (character)
              {
                possible[modif + character] = true;
                possible[modif + hotkeysShiftNums[character]] = true;
    
                // "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
                if (modif === "shift+")
                {
                  possible[hotkeysShiftNums[character]] = true;
                }
              }
    
              for (var i = 0, len = keys.length; i < len; i++)
              {
                if (possible[keys[i]])
                {
                  e.preventDefault();
                  return origHandler.apply(this, arguments);
                }
              }
            }
          };
        },
        tabifier: function()
        {
          return {
            get: function(code)
            {
              if (!this.opts.tabifier) return code;
    
              // clean setup
              var ownLine = ['area', 'body', 'head', 'hr', 'i?frame', 'link', 'meta', 'noscript', 'style', 'script', 'table', 'tbody', 'thead', 'tfoot'];
              var contOwnLine = ['li', 'dt', 'dt', 'h[1-6]', 'option', 'script'];
              var newLevel = ['p', 'blockquote', 'div', 'dl', 'fieldset', 'form', 'frameset', 'map', 'ol', 'pre', 'select', 'td', 'th', 'tr', 'ul'];
    
              this.tabifier.lineBefore = new RegExp('^<(/?' + ownLine.join('|/?' ) + '|' + contOwnLine.join('|') + ')[ >]');
              this.tabifier.lineAfter = new RegExp('^<(br|/?' + ownLine.join('|/?' ) + '|/' + contOwnLine.join('|/') + ')[ >]');
              this.tabifier.newLevel = new RegExp('^</?(' + newLevel.join('|' ) + ')[ >]');
    
              var i = 0,
              codeLength = code.length,
              point = 0,
              start = null,
              end = null,
              tag = '',
              out = '',
              cont = '';
    
              this.tabifier.cleanlevel = 0;
    
              for (; i < codeLength; i++)
              {
                point = i;
    
                // if no more tags, copy and exit
                if (-1 == code.substr(i).indexOf( '<' ))
                {
                  out += code.substr(i);
    
                  return this.tabifier.finish(out);
                }
    
                // copy verbatim until a tag
                while (point < codeLength && code.charAt(point) != '<')
                {
                  point++;
                }
    
                if (i != point)
                {
                  cont = code.substr(i, point - i);
                  if (!cont.match(/^\s{2,}$/g))
                  {
                    if ('\n' == out.charAt(out.length - 1)) out += this.tabifier.getTabs();
                    else if ('\n' == cont.charAt(0))
                    {
                      out += '\n' + this.tabifier.getTabs();
                      cont = cont.replace(/^\s+/, '');
                    }
    
                    out += cont;
                  }
    
                  if (cont.match(/\n/)) out += '\n' + this.tabifier.getTabs();
                }
    
                start = point;
    
                // find the end of the tag
                while (point < codeLength && '>' != code.charAt(point))
                {
                  point++;
                }
    
                tag = code.substr(start, point - start);
                i = point;
    
                var t;
    
                if ('!--' == tag.substr(1, 3))
                {
                  if (!tag.match(/--$/))
                  {
                    while ('-->' != code.substr(point, 3))
                    {
                      point++;
                    }
                    point += 2;
                    tag = code.substr(start, point - start);
                    i = point;
                  }
    
                  if ('\n' != out.charAt(out.length - 1)) out += '\n';
    
                  out += this.tabifier.getTabs();
                  out += tag + '>\n';
                }
                else if ('!' == tag[1])
                {
                  out = this.tabifier.placeTag(tag + '>', out);
                }
                else if ('?' == tag[1])
                {
                  out += tag + '>\n';
                }
                else if (t = tag.match(/^<(script|style|pre)/i))
                {
                  t[1] = t[1].toLowerCase();
                  tag = this.tabifier.cleanTag(tag);
                  out = this.tabifier.placeTag(tag, out);
                  end = String(code.substr(i + 1)).toLowerCase().indexOf('</' + t[1]);
    
                  if (end)
                  {
                    cont = code.substr(i + 1, end);
                    i += end;
                    out += cont;
                  }
                }
                else
                {
                  tag = this.tabifier.cleanTag(tag);
                  out = this.tabifier.placeTag(tag, out);
                }
              }
    
              return this.tabifier.finish(out);
            },
            getTabs: function()
            {
              var s = '';
              for ( var j = 0; j < this.tabifier.cleanlevel; j++ )
              {
                s += '\t';
              }
    
              return s;
            },
            finish: function(code)
            {
              code = code.replace(/\n\s*\n/g, '\n');
              code = code.replace(/^[\s\n]*/, '');
              code = code.replace(/[\s\n]*$/, '');
              code = code.replace(/<script(.*?)>\n<\/script>/gi, '<script$1></script>');
    
              this.tabifier.cleanlevel = 0;
    
              return code;
            },
            cleanTag: function (tag)
            {
              var tagout = '';
              tag = tag.replace(/\n/g, ' ');
              tag = tag.replace(/\s{2,}/g, ' ');
              tag = tag.replace(/^\s+|\s+$/g, ' ');
    
              var suffix = '';
              if (tag.match(/\/$/))
              {
                suffix = '/';
                tag = tag.replace(/\/+$/, '');
              }
    
              var m;
              while (m = /\s*([^= ]+)(?:=((['"']).*?\3|[^ ]+))?/.exec(tag))
              {
                if (m[2]) tagout += m[1].toLowerCase() + '=' + m[2];
                else if (m[1]) tagout += m[1].toLowerCase();
    
                tagout += ' ';
                tag = tag.substr(m[0].length);
              }
    
              return tagout.replace(/\s*$/, '') + suffix + '>';
            },
            placeTag: function (tag, out)
            {
              var nl = tag.match(this.tabifier.newLevel);
    
              if (tag.match(this.tabifier.lineBefore) || nl)
              {
                out = out.replace(/\s*$/, '');
                out += '\n';
              }
    
              if (nl && '/' == tag.charAt(1)) this.tabifier.cleanlevel--;
              if ('\n' == out.charAt(out.length - 1)) out += this.tabifier.getTabs();
              if (nl && '/' != tag.charAt(1)) this.tabifier.cleanlevel++;
    
              out += tag;
    
              if (tag.match(this.tabifier.lineAfter) || tag.match(this.tabifier.newLevel))
              {
                out = out.replace(/ *$/, '');
                //out += '\n';
              }
    
              return out;
            }
          };
        },
        tidy: function()
        {
          return {
            setupAllowed: function()
            {
              var index = $.inArray('span', this.opts.removeEmpty);
              if (index !== -1)
              {
                this.opts.removeEmpty.splice(index, 1);
              }
    
              if (this.opts.allowedTags) this.opts.deniedTags = false;
              if (this.opts.allowedAttr) this.opts.removeAttr = false;
    
              if (this.opts.linebreaks) return;
    
              var tags = ['p', 'section'];
              if (this.opts.allowedTags) this.tidy.addToAllowed(tags);
              if (this.opts.deniedTags) this.tidy.removeFromDenied(tags);
    
            },
            addToAllowed: function(tags)
            {
              var len = tags.length;
              for (var i = 0; i < len; i++)
              {
                if ($.inArray(tags[i], this.opts.allowedTags) == -1)
                {
                  this.opts.allowedTags.push(tags[i]);
                }
              }
            },
            removeFromDenied: function(tags)
            {
              var len = tags.length;
              for (var i = 0; i < len; i++)
              {
                var pos = $.inArray(tags[i], this.opts.deniedTags);
                if (pos != -1)
                {
                  this.opts.deniedTags.splice(pos, 1);
                }
              }
            },
            load: function(html, options)
            {
              this.tidy.settings = {
                deniedTags: this.opts.deniedTags,
                allowedTags: this.opts.allowedTags,
                removeComments: this.opts.removeComments,
                replaceTags: this.opts.replaceTags,
                replaceStyles: this.opts.replaceStyles,
                removeDataAttr: this.opts.removeDataAttr,
                removeAttr: this.opts.removeAttr,
                allowedAttr: this.opts.allowedAttr,
                removeWithoutAttr: this.opts.removeWithoutAttr,
                removeEmpty: this.opts.removeEmpty
              };
    
              $.extend(this.tidy.settings, options);
    
              html = this.tidy.removeComments(html);
    
              // create container
              this.tidy.$div = $('<div />').append(html);
    
              // clean
              this.tidy.replaceTags();
              this.tidy.replaceStyles();
              this.tidy.removeTags();
    
              this.tidy.removeAttr();
              this.tidy.removeEmpty();
              this.tidy.removeParagraphsInLists();
              this.tidy.removeDataAttr();
              this.tidy.removeWithoutAttr();
    
              html = this.tidy.$div.html();
              this.tidy.$div.remove();
    
              return html;
            },
            removeComments: function(html)
            {
              if (!this.tidy.settings.removeComments) return html;
    
              return html.replace(/<!--[\s\S]*?-->/gi, '');
            },
            replaceTags: function(html)
            {
              if (!this.tidy.settings.replaceTags) return html;
    
              var len = this.tidy.settings.replaceTags.length;
              var replacement = [], rTags = [];
              for (var i = 0; i < len; i++)
              {
                rTags.push(this.tidy.settings.replaceTags[i][1]);
                replacement.push(this.tidy.settings.replaceTags[i][0]);
              }
    
              $.each(replacement, $.proxy(function(key, value)
              {
                this.tidy.$div.find(value).replaceWith(function()
                {
                  return $("<" + rTags[key] + " />", {html: $(this).html()});
                });
              }, this));
            },
            replaceStyles: function()
            {
              if (!this.tidy.settings.replaceStyles) return;
    
              var len = this.tidy.settings.replaceStyles.length;
              this.tidy.$div.find('span').each($.proxy(function(n,s)
              {
                var $el = $(s);
                var style = $el.attr('style');
                for (var i = 0; i < len; i++)
                {
                  if (style && style.match(new RegExp('^' + this.tidy.settings.replaceStyles[i][0], 'i')))
                  {
                    var tagName = this.tidy.settings.replaceStyles[i][1];
                    $el.replaceWith(function()
                    {
                      var tag = document.createElement(tagName);
                      return $(tag).append($(this).contents());
                    });
                  }
                }
    
              }, this));
    
            },
            removeTags: function()
            {
              if (!this.tidy.settings.deniedTags && this.tidy.settings.allowedTags)
              {
                this.tidy.$div.find('*').not(this.tidy.settings.allowedTags.join(',')).each(function(i, s)
                {
                  if (s.innerHTML === '') $(s).remove();
                  else $(s).contents().unwrap();
                });
              }
    
              if (this.tidy.settings.deniedTags)
              {
                this.tidy.$div.find(this.tidy.settings.deniedTags.join(',')).each(function(i, s)
                {
                  if ($(s).hasClass('redactor-script-tag') || $(s).hasClass('redactor-selection-marker')) return;
    
                  if (s.innerHTML === '') $(s).remove();
                  else $(s).contents().unwrap();
                });
              }
            },
            removeAttr: function()
            {
              var len;
              if (!this.tidy.settings.removeAttr && this.tidy.settings.allowedAttr)
              {
    
                var allowedAttrTags = [], allowedAttrData = [];
                len = this.tidy.settings.allowedAttr.length;
                for (var i = 0; i < len; i++)
                {
                  allowedAttrTags.push(this.tidy.settings.allowedAttr[i][0]);
                  allowedAttrData.push(this.tidy.settings.allowedAttr[i][1]);
                }
    
    
                this.tidy.$div.find('*').each($.proxy(function(n,s)
                {
                  var $el = $(s);
                  var pos = $.inArray($el[0].tagName.toLowerCase(), allowedAttrTags);
                  var attributesRemove = this.tidy.removeAttrGetRemoves(pos, allowedAttrData, $el);
    
                  if (attributesRemove)
                  {
                    $.each(attributesRemove, function(z,f) {
                      $el.removeAttr(f);
                    });
                  }
                }, this));
              }
    
              if (this.tidy.settings.removeAttr)
              {
                len = this.tidy.settings.removeAttr.length;
                for (var i = 0; i < len; i++)
                {
                  var attrs = this.tidy.settings.removeAttr[i][1];
                  if ($.isArray(attrs)) attrs = attrs.join(' ');
    
                  this.tidy.$div.find(this.tidy.settings.removeAttr[i][0]).removeAttr(attrs);
                }
              }
    
            },
            removeAttrGetRemoves: function(pos, allowed, $el)
            {
              var attributesRemove = [];
    
              // remove all attrs
              if (pos == -1)
              {
                $.each($el[0].attributes, function(i, item)
                {
                  attributesRemove.push(item.name);
                });
    
              }
              // allow all attrs
              else if (allowed[pos] == '*')
              {
                attributesRemove = [];
              }
              // allow specific attrs
              else
              {
                $.each($el[0].attributes, function(i, item)
                {
                  if ($.isArray(allowed[pos]))
                  {
                    if ($.inArray(item.name, allowed[pos]) == -1)
                    {
                      attributesRemove.push(item.name);
                    }
                  }
                  else if (allowed[pos] != item.name)
                  {
                    attributesRemove.push(item.name);
                  }
    
                });
              }
    
              return attributesRemove;
            },
            removeAttrs: function (el, regex)
            {
              regex = new RegExp(regex, "g");
              return el.each(function()
              {
                var self = $(this);
                var len = this.attributes.length - 1;
                for (var i = len; i >= 0; i--)
                {
                  var item = this.attributes[i];
                  if (item && item.specified && item.name.search(regex)>=0)
                  {
                    self.removeAttr(item.name);
                  }
                }
              });
            },
            removeEmpty: function()
            {
              if (!this.tidy.settings.removeEmpty) return;
    
              this.tidy.$div.find(this.tidy.settings.removeEmpty.join(',')).each(function()
              {
                var $el = $(this);
                var text = $el.text();
                text = text.replace(/\u200B/g, '');
                text = text.replace(/&nbsp;/gi, '');
                text = text.replace(/\s/g, '');
    
                    if (text === '' && $el.children().length === 0)
                    {
                      $el.remove();
                    }
              });
            },
            removeParagraphsInLists: function()
            {
              this.tidy.$div.find('li p').contents().unwrap();
            },
            removeDataAttr: function()
            {
              if (!this.tidy.settings.removeDataAttr) return;
    
              var tags = this.tidy.settings.removeDataAttr;
              if ($.isArray(this.tidy.settings.removeDataAttr)) tags = this.tidy.settings.removeDataAttr.join(',');
    
              this.tidy.removeAttrs(this.tidy.$div.find(tags), '^(data-)');
    
            },
            removeWithoutAttr: function()
            {
              if (!this.tidy.settings.removeWithoutAttr) return;
    
              this.tidy.$div.find(this.tidy.settings.removeWithoutAttr.join(',')).each(function()
              {
                if (this.attributes.length === 0)
                {
                  $(this).contents().unwrap();
                }
              });
            }
          };
        },
        toolbar: function()
        {
          return {
            init: function()
            {
              return {
                html:
                {
                  title: this.lang.get('html'),
                  func: 'code.toggle'
                },
                formatting:
                {
                  title: this.lang.get('formatting'),
                  dropdown:
                  {
                    p:
                    {
                      title: this.lang.get('paragraph'),
                      func: 'block.format'
                    },
                    blockquote:
                    {
                      title: this.lang.get('quote'),
                      func: 'block.format'
                    },
                    pre:
                    {
                      title: this.lang.get('code'),
                      func: 'block.format'
                    },
                    h1:
                    {
                      title: this.lang.get('header1'),
                      func: 'block.format'
                    },
                    h2:
                    {
                      title: this.lang.get('header2'),
                      func: 'block.format'
                    },
                    h3:
                    {
                      title: this.lang.get('header3'),
                      func: 'block.format'
                    },
                    h4:
                    {
                      title: this.lang.get('header4'),
                      func: 'block.format'
                    },
                    h5:
                    {
                      title: this.lang.get('header5'),
                      func: 'block.format'
                    }
                  }
                },
                bold:
                {
                  title: this.lang.get('bold'),
                  func: 'inline.format'
                },
                italic:
                {
                  title: this.lang.get('italic'),
                  func: 'inline.format'
                },
                deleted:
                {
                  title: this.lang.get('deleted'),
                  func: 'inline.format'
                },
                underline:
                {
                  title: this.lang.get('underline'),
                  func: 'inline.format'
                },
                unorderedlist:
                {
                  title: '&bull; ' + this.lang.get('unorderedlist'),
                  func: 'list.toggle'
                },
                orderedlist:
                {
                  title: '1. ' + this.lang.get('orderedlist'),
                  func: 'list.toggle'
                },
                outdent:
                {
                  title: '< ' + this.lang.get('outdent'),
                  func: 'indent.decrease'
                },
                indent:
                {
                  title: '> ' + this.lang.get('indent'),
                  func: 'indent.increase'
                },
                image:
                {
                  title: this.lang.get('image'),
                  func: 'image.show'
                },
                file:
                {
                  title: this.lang.get('file'),
                  func: 'file.show'
                },
                link:
                {
                  title: this.lang.get('link'),
                  dropdown:
                  {
                    link:
                    {
                      title: this.lang.get('link_insert'),
                      func: 'link.show',
                      observe: {
                        element: 'a',
                        in: {
                          title: this.lang.get('link_edit'),
                        },
                        out: {
                          title: this.lang.get('link_insert')
                        }
                      }
                    },
                    unlink:
                    {
                      title: this.lang.get('unlink'),
                      func: 'link.unlink',
                      observe: {
                        element: 'a',
                        out: {
                          attr: {
                            'class': 'redactor-dropdown-link-inactive',
                            'aria-disabled': true
                          }
                        }
                      }
                    }
                  }
                },
                alignment:
                {
                  title: this.lang.get('alignment'),
                  dropdown:
                  {
                    left:
                    {
                      title: this.lang.get('align_left'),
                      func: 'alignment.left'
                    },
                    center:
                    {
                      title: this.lang.get('align_center'),
                      func: 'alignment.center'
                    },
                    right:
                    {
                      title: this.lang.get('align_right'),
                      func: 'alignment.right'
                    },
                    justify:
                    {
                      title: this.lang.get('align_justify'),
                      func: 'alignment.justify'
                    }
                  }
                },
                horizontalrule:
                {
                  title: this.lang.get('horizontalrule'),
                  func: 'line.insert'
                }
              };
            },
            build: function()
            {
              this.toolbar.hideButtons();
              this.toolbar.hideButtonsOnMobile();
              this.toolbar.isButtonSourceNeeded();
    
              if (this.opts.buttons.length === 0) return;
    
              this.$toolbar = this.toolbar.createContainer();
    
              this.toolbar.setOverflow();
              this.toolbar.append();
              this.toolbar.setFormattingTags();
              this.toolbar.loadButtons();
              this.toolbar.setFixed();
    
              // buttons response
              if (this.opts.activeButtons)
              {
                this.$editor.on('mouseup.redactor keyup.redactor focus.redactor', $.proxy(this.observe.toolbar, this));
              }
    
            },
            createContainer: function()
            {
              return $('<ul>').addClass('redactor-toolbar').attr({'id': 'redactor-toolbar-' + this.uuid, 'role': 'toolbar'});
            },
            setFormattingTags: function()
            {
              $.each(this.opts.toolbar.formatting.dropdown, $.proxy(function (i, s)
              {
                if ($.inArray(i, this.opts.formatting) == -1) delete this.opts.toolbar.formatting.dropdown[i];
              }, this));
    
            },
            loadButtons: function()
            {
              $.each(this.opts.buttons, $.proxy(function(i, btnName)
              {
                if (!this.opts.toolbar[btnName]) return;
    
                if (btnName === 'file')
                {
                   if (this.opts.fileUpload === false) return;
                   else if (!this.opts.fileUpload && this.opts.s3 === false) return;
                }
    
                if (btnName === 'image')
                {
                   if (this.opts.imageUpload === false) return;
                   else if (!this.opts.imageUpload && this.opts.s3 === false) return;
                }
    
                var btnObject = this.opts.toolbar[btnName];
                this.$toolbar.append($('<li>').append(this.button.build(btnName, btnObject)));
    
              }, this));
            },
            append: function()
            {
              if (this.opts.toolbarExternal)
              {
                this.$toolbar.addClass('redactor-toolbar-external');
                $(this.opts.toolbarExternal).html(this.$toolbar);
              }
              else
              {
                this.$box.prepend(this.$toolbar);
              }
            },
            setFixed: function()
            {
              if (!this.utils.isDesktop()) return;
              if (this.opts.toolbarExternal) return;
              if (!this.opts.toolbarFixed) return;
    
              this.toolbar.observeScroll();
              $(this.opts.toolbarFixedTarget).on('scroll.redactor.' + this.uuid, $.proxy(this.toolbar.observeScroll, this));
    
            },
            setOverflow: function()
            {
              if (this.utils.isMobile() && this.opts.toolbarOverflow)
              {
                this.$toolbar.addClass('redactor-toolbar-overflow');
              }
            },
            isButtonSourceNeeded: function()
            {
              if (this.opts.source) return;
    
              var index = this.opts.buttons.indexOf('html');
              if (index !== -1)
              {
                this.opts.buttons.splice(index, 1);
              }
            },
            hideButtons: function()
            {
              if (this.opts.buttonsHide.length === 0) return;
    
              $.each(this.opts.buttonsHide, $.proxy(function(i, s)
              {
                var index = this.opts.buttons.indexOf(s);
                this.opts.buttons.splice(index, 1);
    
              }, this));
            },
            hideButtonsOnMobile: function()
            {
              if (!this.utils.isMobile() || this.opts.buttonsHideOnMobile.length === 0) return;
    
              $.each(this.opts.buttonsHideOnMobile, $.proxy(function(i, s)
              {
                var index = this.opts.buttons.indexOf(s);
                this.opts.buttons.splice(index, 1);
    
              }, this));
            },
            observeScroll: function()
            {
              var scrollTop = $(this.opts.toolbarFixedTarget).scrollTop();
              var boxTop = 1;
    
              if (this.opts.toolbarFixedTarget === document)
              {
                boxTop = this.$box.offset().top;
              }
    
              if ((scrollTop + this.opts.toolbarFixedTopOffset) > boxTop)
              {
                this.toolbar.observeScrollEnable(scrollTop, boxTop);
              }
              else
              {
                this.toolbar.observeScrollDisable();
              }
            },
            observeScrollEnable: function(scrollTop, boxTop)
            {
              var top = this.opts.toolbarFixedTopOffset + scrollTop - boxTop;
              var left = 0;
              var end = boxTop + this.$box.height() - 32;
              var width = this.$box.innerWidth();
    
              this.$toolbar.addClass('toolbar-fixed-box');
              this.$toolbar.css({
                position: 'absolute',
                width: width,
                top: top + 'px',
                left: left
              });
    
              if (scrollTop > end)
                $('.redactor-dropdown-' + this.uuid + ':visible').hide();
    
              this.toolbar.setDropdownsFixed();
              this.$toolbar.css('visibility', (scrollTop < end) ? 'visible' : 'hidden');
            },
            observeScrollDisable: function()
            {
              this.$toolbar.css({
                position: 'relative',
                width: 'auto',
                top: 0,
                left: 0,
                visibility: 'visible'
              });
    
              this.toolbar.unsetDropdownsFixed();
              this.$toolbar.removeClass('toolbar-fixed-box');
            },
            setDropdownsFixed: function()
            {
              var top = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset;
              var position = 'fixed';
              if (this.opts.toolbarFixedTarget !== document)
              {
                top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top) + this.opts.toolbarFixedTopOffset;
                position = 'absolute';
              }
    
              $('.redactor-dropdown-' + this.uuid).each(function()
              {
                $(this).css({ position: position, top: top + 'px' });
              });
            },
            unsetDropdownsFixed: function()
            {
              var top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top);
              $('.redactor-dropdown-' + this.uuid).each(function()
              {
                $(this).css({ position: 'absolute', top: top + 'px' });
              });
            }
          };
        },
        upload: function()
        {
          return {
            init: function(id, url, callback)
            {
              this.upload.direct = false;
              this.upload.callback = callback;
              this.upload.url = url;
              this.upload.$el = $(id);
              this.upload.$droparea = $('<div id="redactor-droparea" />');
    
              this.upload.$placeholdler = $('<div id="redactor-droparea-placeholder" />').text(this.lang.get('upload_label'));
              this.upload.$input = $('<input type="file" name="file" />');
    
              this.upload.$placeholdler.append(this.upload.$input);
              this.upload.$droparea.append(this.upload.$placeholdler);
              this.upload.$el.append(this.upload.$droparea);
    
              this.upload.$droparea.off('redactor.upload');
              this.upload.$input.off('redactor.upload');
    
              this.upload.$droparea.on('dragover.redactor.upload', $.proxy(this.upload.onDrag, this));
              this.upload.$droparea.on('dragleave.redactor.upload', $.proxy(this.upload.onDragLeave, this));
    
              // change
              this.upload.$input.on('change.redactor.upload', $.proxy(function(e)
              {
                e = e.originalEvent || e;
                this.upload.traverseFile(this.upload.$input[0].files[0], e);
              }, this));
    
              // drop
              this.upload.$droparea.on('drop.redactor.upload', $.proxy(function(e)
              {
                e.preventDefault();
    
                this.upload.$droparea.removeClass('drag-hover').addClass('drag-drop');
                this.upload.onDrop(e);
    
              }, this));
            },
            directUpload: function(file, e)
            {
              this.upload.direct = true;
              this.upload.traverseFile(file, e);
            },
            onDrop: function(e)
            {
              e = e.originalEvent || e;
              var files = e.dataTransfer.files;
    
              this.upload.traverseFile(files[0], e);
            },
            traverseFile: function(file, e)
            {
              if (this.opts.s3)
              {
                this.upload.setConfig(file);
                this.upload.s3uploadFile(file);
                return;
              }
    
              var formData = !!window.FormData ? new FormData() : null;
              if (window.FormData)
              {
                this.upload.setConfig(file);
    
                var name = (this.upload.type == 'image') ? this.opts.imageUploadParam : this.opts.fileUploadParam;
                formData.append(name, file);
              }
    
              this.progress.show();
              this.core.setCallback('uploadStart', e, formData);
              this.upload.sendData(formData, e);
            },
            setConfig: function(file)
            {
              this.upload.getType(file);
    
              if (this.upload.direct)
              {
                this.upload.url = (this.upload.type == 'image') ? this.opts.imageUpload : this.opts.fileUpload;
                this.upload.callback = (this.upload.type == 'image') ? this.image.insert : this.file.insert;
              }
            },
            getType: function(file)
            {
              this.upload.type = 'image';
              if (this.opts.imageTypes.indexOf(file.type) == -1)
              {
                this.upload.type = 'file';
              }
            },
            getHiddenFields: function(obj, fd)
            {
              if (obj === false || typeof obj !== 'object') return fd;
    
              $.each(obj, $.proxy(function(k, v)
              {
                if (v !== null && v.toString().indexOf('#') === 0) v = $(v).val();
                fd.append(k, v);
    
              }, this));
    
              return fd;
    
            },
            sendData: function(formData, e)
            {
              // append hidden fields
              if (this.upload.type == 'image')
              {
                formData = this.upload.getHiddenFields(this.opts.uploadImageFields, formData);
                formData = this.upload.getHiddenFields(this.upload.imageFields, formData);
              }
              else
              {
                formData = this.upload.getHiddenFields(this.opts.uploadFileFields, formData);
                formData = this.upload.getHiddenFields(this.upload.fileFields, formData);
              }
    
              var xhr = new XMLHttpRequest();
              xhr.open('POST', this.upload.url);
              xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    
              // complete
              xhr.onreadystatechange = $.proxy(function()
              {
                  if (xhr.readyState == 4)
                  {
                      var data = xhr.responseText;
    
                  data = data.replace(/^\[/, '');
                  data = data.replace(/\]$/, '');
    
                  var json;
                  try
                  {
                    json = (typeof data === 'string' ? $.parseJSON(data) : data);
                  }
                  catch(err)
                  {
                    json = {
                      error: true
                    };
                  }
    
    
                  this.progress.hide();
    
                  if (!this.upload.direct)
                  {
                    this.upload.$droparea.removeClass('drag-drop');
                  }
    
                  this.upload.callback(json, this.upload.direct, e);
                  }
              }, this);
    
    
              /*
              xhr.upload.onprogress = $.proxy(function(e)
              {
                if (e.lengthComputable)
                {
                  var complete = (e.loaded / e.total * 100 | 0);
                  //progress.value = progress.innerHTML = complete;
                }
    
              }, this);
              */
    
    
              xhr.send(formData);
            },
            onDrag: function(e)
            {
              e.preventDefault();
              this.upload.$droparea.addClass('drag-hover');
            },
            onDragLeave: function(e)
            {
              e.preventDefault();
              this.upload.$droparea.removeClass('drag-hover');
            },
            clearImageFields: function()
            {
              this.upload.imageFields = {};
            },
            addImageFields: function(name, value)
            {
              this.upload.imageFields[name] = value;
            },
            removeImageFields: function(name)
            {
              delete this.upload.imageFields[name];
            },
            clearFileFields: function()
            {
              this.upload.fileFields = {};
            },
            addFileFields: function(name, value)
            {
              this.upload.fileFields[name] = value;
            },
            removeFileFields: function(name)
            {
              delete this.upload.fileFields[name];
            },
    
    
            // S3
            s3uploadFile: function(file)
            {
              this.upload.s3executeOnSignedUrl(file, $.proxy(function(signedURL)
              {
                this.upload.s3uploadToS3(file, signedURL);
              }, this));
            },
            s3executeOnSignedUrl: function(file, callback)
            {
              var xhr = new XMLHttpRequest();
              var mark = (this.opts.s3.search(/\?/) !== '-1') ? '?' : '&';
    
              xhr.open('GET', this.opts.s3 + mark + 'name=' + file.name + '&type=' + file.type, true);
    
              // Hack to pass bytes through unprocessed.
              if (xhr.overrideMimeType) xhr.overrideMimeType('text/plain; charset=x-user-defined');
    
              var that = this;
              xhr.onreadystatechange = function(e)
              {
                if (this.readyState == 4 && this.status == 200)
                {
                  that.progress.show();
                  callback(decodeURIComponent(this.responseText));
                }
                else if (this.readyState == 4 && this.status != 200)
                {
                  //setProgress(0, 'Could not contact signing script. Status = ' + this.status);
                }
              };
    
              xhr.send();
            },
            s3createCORSRequest: function(method, url)
            {
              var xhr = new XMLHttpRequest();
              if ("withCredentials" in xhr)
              {
                xhr.open(method, url, true);
              }
              else if (typeof XDomainRequest != "undefined")
              {
                xhr = new XDomainRequest();
                xhr.open(method, url);
              }
              else
              {
                xhr = null;
              }
    
              return xhr;
            },
            s3uploadToS3: function(file, url)
            {
              var xhr = this.upload.s3createCORSRequest('PUT', url);
              if (!xhr)
              {
                //setProgress(0, 'CORS not supported');
              }
              else
              {
                xhr.onload = $.proxy(function()
                {
                  if (xhr.status == 200)
                  {
                    //setProgress(100, 'Upload completed.');
    
                    this.progress.hide();
    
                    var s3file = url.split('?');
    
                    if (!s3file[0])
                    {
                       // url parsing is fail
                       return false;
                    }
    
    
                    if (!this.upload.direct)
                    {
                      this.upload.$droparea.removeClass('drag-drop');
                    }
    
                    var json = { filelink: s3file[0] };
                    if (this.upload.type == 'file')
                    {
                      var arr = s3file[0].split('/');
                      json.filename = arr[arr.length-1];
                    }
    
                    this.upload.callback(json, this.upload.direct, false);
    
    
                  }
                  else
                  {
                    //setProgress(0, 'Upload error: ' + xhr.status);
                  }
                }, this);
    
                xhr.onerror = function() {};
    
                xhr.upload.onprogress = function(e) {};
    
                xhr.setRequestHeader('Content-Type', file.type);
                xhr.setRequestHeader('x-amz-acl', 'public-read');
    
                xhr.send(file);
              }
            }
          };
        },
        utils: function()
        {
          return {
            isMobile: function()
            {
              return /(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent);
            },
            isDesktop: function()
            {
              return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(navigator.userAgent);
            },
            isString: function(obj)
            {
              return Object.prototype.toString.call(obj) == '[object String]';
            },
            isEmpty: function(html, removeEmptyTags)
            {
              html = html.replace(/[\u200B-\u200D\uFEFF]/g, '');
              html = html.replace(/&nbsp;/gi, '');
              html = html.replace(/<\/?br\s?\/?>/g, '');
              html = html.replace(/\s/g, '');
              html = html.replace(/^<p>[^\W\w\D\d]*?<\/p>$/i, '');
              html = html.replace(/<iframe(.*?[^>])>$/i, 'iframe');
              html = html.replace(/<source(.*?[^>])>$/i, 'source');
    
              // remove empty tags
              if (removeEmptyTags !== false)
              {
                html = html.replace(/<[^\/>][^>]*><\/[^>]+>/gi, '');
                html = html.replace(/<[^\/>][^>]*><\/[^>]+>/gi, '');
              }
    
              html = $.trim(html);
    
              return html === '';
            },
            normalize: function(str)
            {
              if (typeof(str) === 'undefined') return 0;
              return parseInt(str.replace('px',''), 10);
            },
            hexToRgb: function(hex)
            {
              if (typeof hex == 'undefined') return;
              if (hex.search(/^#/) == -1) return hex;
    
              var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
              hex = hex.replace(shorthandRegex, function(m, r, g, b)
              {
                return r + r + g + g + b + b;
              });
    
              var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
              return 'rgb(' + parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) + ')';
            },
            getOuterHtml: function(el)
            {
              return $('<div>').append($(el).eq(0).clone()).html();
            },
            getAlignmentElement: function(el)
            {
              if ($.inArray(el.tagName, this.opts.alignmentTags) !== -1)
              {
                return $(el);
              }
              else
              {
                return $(el).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]);
              }
            },
            removeEmptyAttr: function(el, attr)
            {
              var $el = $(el);
              if (typeof $el.attr(attr) == 'undefined')
              {
                return true;
              }
    
              if ($el.attr(attr) === '')
              {
                $el.removeAttr(attr);
                return true;
              }
    
              return false;
            },
            removeEmpty: function(i, s)
            {
              var $s = $($.parseHTML(s));
    
              $s.find('.redactor-invisible-space').removeAttr('style').removeAttr('class');
    
              if ($s.find('hr, br, img, iframe, source').length !== 0) return;
              var text = $.trim($s.text());
    
              if (this.utils.isEmpty(text, false))
              {
                $s.remove();
              }
            },
    
            // save and restore scroll
            saveScroll: function()
            {
              this.saveEditorScroll = this.$editor.scrollTop();
              this.saveBodyScroll = $(window).scrollTop();
    
              if (this.opts.scrollTarget) this.saveTargetScroll = $(this.opts.scrollTarget).scrollTop();
            },
            restoreScroll: function()
            {
              if (typeof this.saveScroll === 'undefined' && typeof this.saveBodyScroll === 'undefined') return;
    
              $(window).scrollTop(this.saveBodyScroll);
              this.$editor.scrollTop(this.saveEditorScroll);
    
              if (this.opts.scrollTarget) $(this.opts.scrollTarget).scrollTop(this.saveTargetScroll);
            },
    
            // get invisible space element
            createSpaceElement: function()
            {
              var space = document.createElement('span');
              space.className = 'redactor-invisible-space';
              space.innerHTML = this.opts.invisibleSpace;
    
              return space;
            },
    
            // replace
            removeInlineTags: function(node)
            {
              var tags = this.opts.inlineTags;
              tags.push('span');
    
              if (node.tagName == 'PRE') tags.push('a');
    
              $(node).find(tags.join(',')).not('span.redactor-selection-marker').contents().unwrap();
            },
            replaceWithContents: function(node, removeInlineTags)
            {
              var self = this;
              $(node).replaceWith(function()
              {
                if (removeInlineTags === true) self.utils.removeInlineTags(this);
    
                return $(this).contents();
              });
    
              return $(node);
            },
            replaceToTag: function(node, tag, removeInlineTags)
            {
              var replacement;
              var self = this;
              $(node).replaceWith(function()
              {
                replacement = $('<' + tag + ' />').append($(this).contents());
    
                for (var i = 0; i < this.attributes.length; i++)
                {
                  replacement.attr(this.attributes[i].name, this.attributes[i].value);
                }
    
                if (removeInlineTags === true) self.utils.removeInlineTags(replacement);
    
                return replacement;
              });
    
              return replacement;
            },
    
            // start and end of element
            isStartOfElement: function()
            {
              var block = this.selection.getBlock();
              if (!block) return false;
    
              var offset = this.caret.getOffsetOfElement(block);
    
              return (offset === 0) ? true : false;
            },
            isEndOfElement: function(element)
            {
              if (typeof element == 'undefined')
              {
                var element = this.selection.getBlock();
                if (!element) return false;
              }
    
              var offset = this.caret.getOffsetOfElement(element);
              var text = $.trim($(element).text()).replace(/\n\r\n/g, '');
    
              return (offset == text.length) ? true : false;
            },
            isStartOfEditor: function()
            {
              var offset = this.caret.getOffsetOfElement(this.$editor[0]);
    
              return (offset === 0) ? true : false;
            },
            isEndOfEditor: function()
            {
              var block = this.$editor[0];
    
              var offset = this.caret.getOffsetOfElement(block);
              var text = $.trim($(block).html().replace(/(<([^>]+)>)/gi,''));
    
              return (offset == text.length) ? true : false;
            },
    
            // test blocks
            isBlock: function(block)
            {
              block = block[0] || block;
    
              return block && this.utils.isBlockTag(block.tagName);
            },
            isBlockTag: function(tag)
            {
              if (typeof tag == 'undefined') return false;
    
              return this.reIsBlock.test(tag);
            },
    
            // tag detection
            isTag: function(current, tag)
            {
              var element = $(current).closest(tag, this.$editor[0]);
              if (element.length == 1)
              {
                return element[0];
              }
    
              return false;
            },
    
            // select all
            isSelectAll: function()
            {
              return this.selectAll;
            },
            enableSelectAll: function()
            {
              this.selectAll = true;
            },
            disableSelectAll: function()
            {
              this.selectAll = false;
            },
    
            // parents detection
            isRedactorParent: function(el)
            {
              if (!el)
              {
                return false;
              }
    
              if ($(el).parents('.redactor-editor').length === 0 || $(el).hasClass('redactor-editor'))
              {
                return false;
              }
    
              return el;
            },
            isCurrentOrParentHeader: function()
            {
              return this.utils.isCurrentOrParent(['H1', 'H2', 'H3', 'H4', 'H5', 'H6']);
            },
            isCurrentOrParent: function(tagName)
            {
              var parent = this.selection.getParent();
              var current = this.selection.getCurrent();
    
              if ($.isArray(tagName))
              {
                var matched = 0;
                $.each(tagName, $.proxy(function(i, s)
                {
                  if (this.utils.isCurrentOrParentOne(current, parent, s))
                  {
                    matched++;
                  }
                }, this));
    
                return (matched === 0) ? false : true;
              }
              else
              {
                return this.utils.isCurrentOrParentOne(current, parent, tagName);
              }
            },
            isCurrentOrParentOne: function(current, parent, tagName)
            {
              tagName = tagName.toUpperCase();
    
              return parent && parent.tagName === tagName ? parent : current && current.tagName === tagName ? current : false;
            },
    
    
            // browsers detection
            isOldIe: function()
            {
              return (this.utils.browser('msie') && parseInt(this.utils.browser('version'), 10) < 9) ? true : false;
            },
            isLessIe10: function()
            {
              return (this.utils.browser('msie') && parseInt(this.utils.browser('version'), 10) < 10) ? true : false;
            },
            isIe11: function()
            {
              return !!navigator.userAgent.match(/Trident\/7\./);
            },
            browser: function(browser)
            {
              var ua = navigator.userAgent.toLowerCase();
              var match = /(opr)[\/]([\w.]+)/.exec( ua ) ||
                    /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
                    /(webkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) ||
                    /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
                    /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
                    /(msie) ([\w.]+)/.exec( ua ) ||
                    ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec( ua ) ||
                    ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
                    [];
    
              if (browser == 'safari') return (typeof match[3] != 'undefined') ? match[3] == 'safari' : false;
              if (browser == 'version') return match[2];
              if (browser == 'webkit') return (match[1] == 'chrome' || match[1] == 'opr' || match[1] == 'webkit');
              if (match[1] == 'rv') return browser == 'msie';
              if (match[1] == 'opr') return browser == 'webkit';
    
              return browser == match[1];
            },
            strpos: function(haystack, needle, offset)
            {
              var i = haystack.indexOf(needle, offset);
              return i >= 0 ? i : false;
            },
            disableBodyScroll: function()
            {
    
              var $body = $('html');
              var windowWidth = window.innerWidth;
              if (!windowWidth)
              {
                var documentElementRect = document.documentElement.getBoundingClientRect();
                windowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
              }
    
              var isOverflowing = document.body.clientWidth < windowWidth;
              var scrollbarWidth = this.utils.measureScrollbar();
    
              $body.css('overflow', 'hidden');
              if (isOverflowing) $body.css('padding-right', scrollbarWidth);
    
    
            },
            measureScrollbar: function()
            {
              var $body = $('body');
              var scrollDiv = document.createElement('div');
              scrollDiv.className = 'redactor-scrollbar-measure';
    
              $body.append(scrollDiv);
              var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
              $body[0].removeChild(scrollDiv);
              return scrollbarWidth;
            },
            enableBodyScroll: function()
            {
              $('html').css({ 'overflow': '', 'padding-right': '' });
              $('body').remove('redactor-scrollbar-measure');
            }
          };
        }
      };
    
      $(window).on('load.tools.redactor', function()
      {
        $('[data-tools="redactor"]').redactor();
      });
    
      // constructor
      Redactor.prototype.init.prototype = Redactor.prototype;
    
    })(jQuery);
    (function ($) {
    $.Redactor.opts.langs['ru'] = {
      html: 'Код',
      video: 'Видео',
      image: 'Изображение',
      table: 'Таблица',
      link: 'Ссылка',
      link_insert: 'Вставить ссылку ...',
      link_edit: 'Изменить ссылку',
      unlink: 'Удалить ссылку',
      formatting: 'Форматирование',
      paragraph: 'Обычный текст',
      quote: 'Цитата',
      code: 'Код',
      header1: 'Заголовок 1',
      header2: 'Заголовок 2',
      header3: 'Заголовок 3',
      header4: 'Заголовок 4',
      header5: 'Заголовок 5',
      bold:  'Полужирный',
      italic: 'Наклонный',
      fontcolor: 'Цвет текста',
      backcolor: 'Заливка текста',
      unorderedlist: 'Обычный список',
      orderedlist: 'Нумерованный список',
      outdent: 'Уменьшить отступ',
      indent: 'Увеличить отступ',
      cancel: 'Отменить',
      insert: 'Вставить',
      save: 'Сохранить',
      _delete: 'Удалить',
      insert_table: 'Вставить таблицу',
      insert_row_above: 'Добавить строку сверху',
      insert_row_below: 'Добавить строку снизу',
      insert_column_left: 'Добавить столбец слева',
      insert_column_right: 'Добавить столбец справа',
      delete_column: 'Удалить столбец',
      delete_row: 'Удалить строку',
      delete_table: 'Удалить таблицу',
      rows: 'Строки',
      columns: 'Столбцы',
      add_head: 'Добавить заголовок',
      delete_head: 'Удалить заголовок',
      title: 'Подсказка',
      image_position: 'Обтекание текстом',
      none: 'Нет',
      left: 'Cлева',
      right: 'Cправа',
      image_web_link: 'Cсылка на изображение',
      text: 'Текст',
      mailto: 'Эл. почта',
      web: 'URL',
      video_html_code: 'Код видео ролика',
      file: 'Файл',
      upload: 'Загрузить',
      download: 'Скачать',
      choose: 'Выбрать',
      or_choose: 'Или выберите',
      drop_file_here: 'Перетащите файл сюда',
      align_left: 'По левому краю',
      align_center: 'По центру',
      align_right: 'По правому краю',
      align_justify: 'Выровнять текст по ширине',
      horizontalrule: 'Горизонтальная линейка',
      fullscreen: 'Во весь экран',
      deleted: 'Зачеркнутый',
      anchor: 'Якорь',
      link_new_tab: 'Открывать в новой вкладке',
      underline: 'Подчеркнутый',
      alignment: 'Выравнивание',
      filename: 'Название (необязательно)',
      edit: 'Ред.',
      center: 'По центру',
      upload_label: 'Drop file here or '
    };
    })( jQuery );
    /*! jQuery UI - v1.11.4+CommonJS - 2015-08-28
    * http://jqueryui.com
    * Includes: widget.js
    * Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */
    
    
    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define([ "jquery" ], factory );
    
        } else if ( typeof exports === "object" ) {
    
            // Node/CommonJS
            factory( require( "jquery" ) );
    
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    /*!
     * jQuery UI Widget 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/jQuery.widget/
     */
    
    
    var widget_uuid = 0,
        widget_slice = Array.prototype.slice;
    
    $.cleanData = (function( orig ) {
        return function( elems ) {
            var events, elem, i;
            for ( i = 0; (elem = elems[i]) != null; i++ ) {
                try {
    
                    // Only trigger remove when necessary to save time
                    events = $._data( elem, "events" );
                    if ( events && events.remove ) {
                        $( elem ).triggerHandler( "remove" );
                    }
    
                // http://bugs.jquery.com/ticket/8235
                } catch ( e ) {}
            }
            orig( elems );
        };
    })( $.cleanData );
    
    $.widget = function( name, base, prototype ) {
        var fullName, existingConstructor, constructor, basePrototype,
            // proxiedPrototype allows the provided prototype to remain unmodified
            // so that it can be used as a mixin for multiple widgets (#8876)
            proxiedPrototype = {},
            namespace = name.split( "." )[ 0 ];
    
        name = name.split( "." )[ 1 ];
        fullName = namespace + "-" + name;
    
        if ( !prototype ) {
            prototype = base;
            base = $.Widget;
        }
    
        // create selector for plugin
        $.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
            return !!$.data( elem, fullName );
        };
    
        $[ namespace ] = $[ namespace ] || {};
        existingConstructor = $[ namespace ][ name ];
        constructor = $[ namespace ][ name ] = function( options, element ) {
            // allow instantiation without "new" keyword
            if ( !this._createWidget ) {
                return new constructor( options, element );
            }
    
            // allow instantiation without initializing for simple inheritance
            // must use "new" keyword (the code above always passes args)
            if ( arguments.length ) {
                this._createWidget( options, element );
            }
        };
        // extend with the existing constructor to carry over any static properties
        $.extend( constructor, existingConstructor, {
            version: prototype.version,
            // copy the object used to create the prototype in case we need to
            // redefine the widget later
            _proto: $.extend( {}, prototype ),
            // track widgets that inherit from this widget in case this widget is
            // redefined after a widget inherits from it
            _childConstructors: []
        });
    
        basePrototype = new base();
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
        basePrototype.options = $.widget.extend( {}, basePrototype.options );
        $.each( prototype, function( prop, value ) {
            if ( !$.isFunction( value ) ) {
                proxiedPrototype[ prop ] = value;
                return;
            }
            proxiedPrototype[ prop ] = (function() {
                var _super = function() {
                        return base.prototype[ prop ].apply( this, arguments );
                    },
                    _superApply = function( args ) {
                        return base.prototype[ prop ].apply( this, args );
                    };
                return function() {
                    var __super = this._super,
                        __superApply = this._superApply,
                        returnValue;
    
                    this._super = _super;
                    this._superApply = _superApply;
    
                    returnValue = value.apply( this, arguments );
    
                    this._super = __super;
                    this._superApply = __superApply;
    
                    return returnValue;
                };
            })();
        });
        constructor.prototype = $.widget.extend( basePrototype, {
            // TODO: remove support for widgetEventPrefix
            // always use the name + a colon as the prefix, e.g., draggable:start
            // don't prefix for widgets that aren't DOM-based
            widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
    
        // If this widget is being redefined then we need to find all widgets that
        // are inheriting from it and redefine all of them so that they inherit from
        // the new version of this widget. We're essentially trying to replace one
        // level in the prototype chain.
        if ( existingConstructor ) {
            $.each( existingConstructor._childConstructors, function( i, child ) {
                var childPrototype = child.prototype;
    
                // redefine the child widget using the same prototype that was
                // originally used, but inherit from the new version of the base
                $.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
            });
            // remove the list of existing child constructors from the old constructor
            // so the old child constructors can be garbage collected
            delete existingConstructor._childConstructors;
        } else {
            base._childConstructors.push( constructor );
        }
    
        $.widget.bridge( name, constructor );
    
        return constructor;
    };
    
    $.widget.extend = function( target ) {
        var input = widget_slice.call( arguments, 1 ),
            inputIndex = 0,
            inputLength = input.length,
            key,
            value;
        for ( ; inputIndex < inputLength; inputIndex++ ) {
            for ( key in input[ inputIndex ] ) {
                value = input[ inputIndex ][ key ];
                if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
                    // Clone objects
                    if ( $.isPlainObject( value ) ) {
                        target[ key ] = $.isPlainObject( target[ key ] ) ?
                            $.widget.extend( {}, target[ key ], value ) :
                            // Don't extend strings, arrays, etc. with objects
                            $.widget.extend( {}, value );
                    // Copy everything else by reference
                    } else {
                        target[ key ] = value;
                    }
                }
            }
        }
        return target;
    };
    
    $.widget.bridge = function( name, object ) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[ name ] = function( options ) {
            var isMethodCall = typeof options === "string",
                args = widget_slice.call( arguments, 1 ),
                returnValue = this;
    
            if ( isMethodCall ) {
                this.each(function() {
                    var methodValue,
                        instance = $.data( this, fullName );
                    if ( options === "instance" ) {
                        returnValue = instance;
                        return false;
                    }
                    if ( !instance ) {
                        return $.error( "cannot call methods on " + name + " prior to initialization; " +
                            "attempted to call method '" + options + "'" );
                    }
                    if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
                        return $.error( "no such method '" + options + "' for " + name + " widget instance" );
                    }
                    methodValue = instance[ options ].apply( instance, args );
                    if ( methodValue !== instance && methodValue !== undefined ) {
                        returnValue = methodValue && methodValue.jquery ?
                            returnValue.pushStack( methodValue.get() ) :
                            methodValue;
                        return false;
                    }
                });
            } else {
    
                // Allow multiple hashes to be passed on init
                if ( args.length ) {
                    options = $.widget.extend.apply( null, [ options ].concat(args) );
                }
    
                this.each(function() {
                    var instance = $.data( this, fullName );
                    if ( instance ) {
                        instance.option( options || {} );
                        if ( instance._init ) {
                            instance._init();
                        }
                    } else {
                        $.data( this, fullName, new object( options, this ) );
                    }
                });
            }
    
            return returnValue;
        };
    };
    
    $.Widget = function( /* options, element */ ) {};
    $.Widget._childConstructors = [];
    
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: false,
    
            // callbacks
            create: null
        },
        _createWidget: function( options, element ) {
            element = $( element || this.defaultElement || this )[ 0 ];
            this.element = $( element );
            this.uuid = widget_uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
    
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
    
            if ( element !== this ) {
                $.data( element, this.widgetFullName, this );
                this._on( true, this.element, {
                    remove: function( event ) {
                        if ( event.target === element ) {
                            this.destroy();
                        }
                    }
                });
                this.document = $( element.style ?
                    // element within the document
                    element.ownerDocument :
                    // element is window or document
                    element.document || element );
                this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
            }
    
            this.options = $.widget.extend( {},
                this.options,
                this._getCreateOptions(),
                options );
    
            this._create();
            this._trigger( "create", null, this._getCreateEventData() );
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
    
        destroy: function() {
            this._destroy();
            // we can probably remove the unbind calls in 2.0
            // all event bindings should go through this._on()
            this.element
                .unbind( this.eventNamespace )
                .removeData( this.widgetFullName )
                // support: jquery <1.6.3
                // http://bugs.jquery.com/ticket/9413
                .removeData( $.camelCase( this.widgetFullName ) );
            this.widget()
                .unbind( this.eventNamespace )
                .removeAttr( "aria-disabled" )
                .removeClass(
                    this.widgetFullName + "-disabled " +
                    "ui-state-disabled" );
    
            // clean up events and states
            this.bindings.unbind( this.eventNamespace );
            this.hoverable.removeClass( "ui-state-hover" );
            this.focusable.removeClass( "ui-state-focus" );
        },
        _destroy: $.noop,
    
        widget: function() {
            return this.element;
        },
    
        option: function( key, value ) {
            var options = key,
                parts,
                curOption,
                i;
    
            if ( arguments.length === 0 ) {
                // don't return a reference to the internal hash
                return $.widget.extend( {}, this.options );
            }
    
            if ( typeof key === "string" ) {
                // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                options = {};
                parts = key.split( "." );
                key = parts.shift();
                if ( parts.length ) {
                    curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
                    for ( i = 0; i < parts.length - 1; i++ ) {
                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
                        curOption = curOption[ parts[ i ] ];
                    }
                    key = parts.pop();
                    if ( arguments.length === 1 ) {
                        return curOption[ key ] === undefined ? null : curOption[ key ];
                    }
                    curOption[ key ] = value;
                } else {
                    if ( arguments.length === 1 ) {
                        return this.options[ key ] === undefined ? null : this.options[ key ];
                    }
                    options[ key ] = value;
                }
            }
    
            this._setOptions( options );
    
            return this;
        },
        _setOptions: function( options ) {
            var key;
    
            for ( key in options ) {
                this._setOption( key, options[ key ] );
            }
    
            return this;
        },
        _setOption: function( key, value ) {
            this.options[ key ] = value;
    
            if ( key === "disabled" ) {
                this.widget()
                    .toggleClass( this.widgetFullName + "-disabled", !!value );
    
                // If the widget is becoming disabled, then nothing is interactive
                if ( value ) {
                    this.hoverable.removeClass( "ui-state-hover" );
                    this.focusable.removeClass( "ui-state-focus" );
                }
            }
    
            return this;
        },
    
        enable: function() {
            return this._setOptions({ disabled: false });
        },
        disable: function() {
            return this._setOptions({ disabled: true });
        },
    
        _on: function( suppressDisabledCheck, element, handlers ) {
            var delegateElement,
                instance = this;
    
            // no suppressDisabledCheck flag, shuffle arguments
            if ( typeof suppressDisabledCheck !== "boolean" ) {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
    
            // no element argument, shuffle and use this.element
            if ( !handlers ) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $( element );
                this.bindings = this.bindings.add( element );
            }
    
            $.each( handlers, function( event, handler ) {
                function handlerProxy() {
                    // allow widgets to customize the disabled handling
                    // - disabled as an array instead of boolean
                    // - disabled class as method for disabling individual parts
                    if ( !suppressDisabledCheck &&
                            ( instance.options.disabled === true ||
                                $( this ).hasClass( "ui-state-disabled" ) ) ) {
                        return;
                    }
                    return ( typeof handler === "string" ? instance[ handler ] : handler )
                        .apply( instance, arguments );
                }
    
                // copy the guid so direct unbinding works
                if ( typeof handler !== "string" ) {
                    handlerProxy.guid = handler.guid =
                        handler.guid || handlerProxy.guid || $.guid++;
                }
    
                var match = event.match( /^([\w:-]*)\s*(.*)$/ ),
                    eventName = match[1] + instance.eventNamespace,
                    selector = match[2];
                if ( selector ) {
                    delegateElement.delegate( selector, eventName, handlerProxy );
                } else {
                    element.bind( eventName, handlerProxy );
                }
            });
        },
    
        _off: function( element, eventName ) {
            eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) +
                this.eventNamespace;
            element.unbind( eventName ).undelegate( eventName );
    
            // Clear the stack to avoid memory leaks (#10056)
            this.bindings = $( this.bindings.not( element ).get() );
            this.focusable = $( this.focusable.not( element ).get() );
            this.hoverable = $( this.hoverable.not( element ).get() );
        },
    
        _delay: function( handler, delay ) {
            function handlerProxy() {
                return ( typeof handler === "string" ? instance[ handler ] : handler )
                    .apply( instance, arguments );
            }
            var instance = this;
            return setTimeout( handlerProxy, delay || 0 );
        },
    
        _hoverable: function( element ) {
            this.hoverable = this.hoverable.add( element );
            this._on( element, {
                mouseenter: function( event ) {
                    $( event.currentTarget ).addClass( "ui-state-hover" );
                },
                mouseleave: function( event ) {
                    $( event.currentTarget ).removeClass( "ui-state-hover" );
                }
            });
        },
    
        _focusable: function( element ) {
            this.focusable = this.focusable.add( element );
            this._on( element, {
                focusin: function( event ) {
                    $( event.currentTarget ).addClass( "ui-state-focus" );
                },
                focusout: function( event ) {
                    $( event.currentTarget ).removeClass( "ui-state-focus" );
                }
            });
        },
    
        _trigger: function( type, event, data ) {
            var prop, orig,
                callback = this.options[ type ];
    
            data = data || {};
            event = $.Event( event );
            event.type = ( type === this.widgetEventPrefix ?
                type :
                this.widgetEventPrefix + type ).toLowerCase();
            // the original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[ 0 ];
    
            // copy original event properties over to the new event
            orig = event.originalEvent;
            if ( orig ) {
                for ( prop in orig ) {
                    if ( !( prop in event ) ) {
                        event[ prop ] = orig[ prop ];
                    }
                }
            }
    
            this.element.trigger( event, data );
            return !( $.isFunction( callback ) &&
                callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
                event.isDefaultPrevented() );
        }
    };
    
    $.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
        $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
            if ( typeof options === "string" ) {
                options = { effect: options };
            }
            var hasOptions,
                effectName = !options ?
                    method :
                    options === true || typeof options === "number" ?
                        defaultEffect :
                        options.effect || defaultEffect;
            options = options || {};
            if ( typeof options === "number" ) {
                options = { duration: options };
            }
            hasOptions = !$.isEmptyObject( options );
            options.complete = callback;
            if ( options.delay ) {
                element.delay( options.delay );
            }
            if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
                element[ method ]( options );
            } else if ( effectName !== method && element[ effectName ] ) {
                element[ effectName ]( options.duration, options.easing, callback );
            } else {
                element.queue(function( next ) {
                    $( this )[ method ]();
                    if ( callback ) {
                        callback.call( element[ 0 ] );
                    }
                    next();
                });
            }
        };
    });
    
    var widget = $.widget;
    
    
    
    }));
    /*
     * jQuery Iframe Transport Plugin
     * https://github.com/blueimp/jQuery-File-Upload
     *
     * Copyright 2011, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * http://www.opensource.org/licenses/MIT
     */
    
    /* global define, require, window, document */
    
    
    (function (factory) {
        'use strict';
        if (typeof define === 'function' && define.amd) {
            // Register as an anonymous AMD module:
            define(['jquery'], factory);
        } else if (typeof exports === 'object') {
            // Node/CommonJS:
            factory(require('jquery'));
        } else {
            // Browser globals:
            factory(window.jQuery);
        }
    }(function ($) {
        'use strict';
    
        // Helper variable to create unique names for the transport iframes:
        var counter = 0;
    
        // The iframe transport accepts four additional options:
        // options.fileInput: a jQuery collection of file input fields
        // options.paramName: the parameter name for the file form data,
        //  overrides the name property of the file input field(s),
        //  can be a string or an array of strings.
        // options.formData: an array of objects with name and value properties,
        //  equivalent to the return data of .serializeArray(), e.g.:
        //  [{name: 'a', value: 1}, {name: 'b', value: 2}]
        // options.initialIframeSrc: the URL of the initial iframe src,
        //  by default set to "javascript:false;"
        $.ajaxTransport('iframe', function (options) {
            if (options.async) {
                // javascript:false as initial iframe src
                // prevents warning popups on HTTPS in IE6:
                /*jshint scripturl: true */
                var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',
                /*jshint scripturl: false */
                    form,
                    iframe,
                    addParamChar;
                return {
                    send: function (_, completeCallback) {
                        form = $('<form style="display:none;"></form>');
                        form.attr('accept-charset', options.formAcceptCharset);
                        addParamChar = /\?/.test(options.url) ? '&' : '?';
                        // XDomainRequest only supports GET and POST:
                        if (options.type === 'DELETE') {
                            options.url = options.url + addParamChar + '_method=DELETE';
                            options.type = 'POST';
                        } else if (options.type === 'PUT') {
                            options.url = options.url + addParamChar + '_method=PUT';
                            options.type = 'POST';
                        } else if (options.type === 'PATCH') {
                            options.url = options.url + addParamChar + '_method=PATCH';
                            options.type = 'POST';
                        }
                        // IE versions below IE8 cannot set the name property of
                        // elements that have already been added to the DOM,
                        // so we set the name along with the iframe HTML markup:
                        counter += 1;
                        iframe = $(
                            '<iframe src="' + initialIframeSrc +
                                '" name="iframe-transport-' + counter + '"></iframe>'
                        ).bind('load', function () {
                            var fileInputClones,
                                paramNames = $.isArray(options.paramName) ?
                                        options.paramName : [options.paramName];
                            iframe
                                .unbind('load')
                                .bind('load', function () {
                                    var response;
                                    // Wrap in a try/catch block to catch exceptions thrown
                                    // when trying to access cross-domain iframe contents:
                                    try {
                                        response = iframe.contents();
                                        // Google Chrome and Firefox do not throw an
                                        // exception when calling iframe.contents() on
                                        // cross-domain requests, so we unify the response:
                                        if (!response.length || !response[0].firstChild) {
                                            throw new Error();
                                        }
                                    } catch (e) {
                                        response = undefined;
                                    }
                                    // The complete callback returns the
                                    // iframe content document as response object:
                                    completeCallback(
                                        200,
                                        'success',
                                        {'iframe': response}
                                    );
                                    // Fix for IE endless progress bar activity bug
                                    // (happens on form submits to iframe targets):
                                    $('<iframe src="' + initialIframeSrc + '"></iframe>')
                                        .appendTo(form);
                                    window.setTimeout(function () {
                                        // Removing the form in a setTimeout call
                                        // allows Chrome's developer tools to display
                                        // the response result
                                        form.remove();
                                    }, 0);
                                });
                            form
                                .prop('target', iframe.prop('name'))
                                .prop('action', options.url)
                                .prop('method', options.type);
                            if (options.formData) {
                                $.each(options.formData, function (index, field) {
                                    $('<input type="hidden"/>')
                                        .prop('name', field.name)
                                        .val(field.value)
                                        .appendTo(form);
                                });
                            }
                            if (options.fileInput && options.fileInput.length &&
                                    options.type === 'POST') {
                                fileInputClones = options.fileInput.clone();
                                // Insert a clone for each file input field:
                                options.fileInput.after(function (index) {
                                    return fileInputClones[index];
                                });
                                if (options.paramName) {
                                    options.fileInput.each(function (index) {
                                        $(this).prop(
                                            'name',
                                            paramNames[index] || options.paramName
                                        );
                                    });
                                }
                                // Appending the file input fields to the hidden form
                                // removes them from their original location:
                                form
                                    .append(options.fileInput)
                                    .prop('enctype', 'multipart/form-data')
                                    // enctype must be set as encoding for IE:
                                    .prop('encoding', 'multipart/form-data');
                                // Remove the HTML5 form attribute from the input(s):
                                options.fileInput.removeAttr('form');
                            }
                            form.submit();
                            // Insert the file input fields at their original location
                            // by replacing the clones with the originals:
                            if (fileInputClones && fileInputClones.length) {
                                options.fileInput.each(function (index, input) {
                                    var clone = $(fileInputClones[index]);
                                    // Restore the original name and form properties:
                                    $(input)
                                        .prop('name', clone.prop('name'))
                                        .attr('form', clone.attr('form'));
                                    clone.replaceWith(input);
                                });
                            }
                        });
                        form.append(iframe).appendTo(document.body);
                    },
                    abort: function () {
                        if (iframe) {
                            // javascript:false as iframe src aborts the request
                            // and prevents warning popups on HTTPS in IE6.
                            // concat is used to avoid the "Script URL" JSLint error:
                            iframe
                                .unbind('load')
                                .prop('src', initialIframeSrc);
                        }
                        if (form) {
                            form.remove();
                        }
                    }
                };
            }
        });
    
        // The iframe transport returns the iframe content document as response.
        // The following adds converters from iframe to text, json, html, xml
        // and script.
        // Please note that the Content-Type for JSON responses has to be text/plain
        // or text/html, if the browser doesn't include application/json in the
        // Accept header, else IE will show a download dialog.
        // The Content-Type for XML responses on the other hand has to be always
        // application/xml or text/xml, so IE properly parses the XML response.
        // See also
        // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation
        $.ajaxSetup({
            converters: {
                'iframe text': function (iframe) {
                    return iframe && $(iframe[0].body).text();
                },
                'iframe json': function (iframe) {
                    return iframe && $.parseJSON($(iframe[0].body).text());
                },
                'iframe html': function (iframe) {
                    return iframe && $(iframe[0].body).html();
                },
                'iframe xml': function (iframe) {
                    var xmlDoc = iframe && iframe[0];
                    return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc :
                            $.parseXML((xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml) ||
                                $(xmlDoc.body).html());
                },
                'iframe script': function (iframe) {
                    return iframe && $.globalEval($(iframe[0].body).text());
                }
            }
        });
    
    }));
    /*
     * jQuery File Upload Plugin
     * https://github.com/blueimp/jQuery-File-Upload
     *
     * Copyright 2010, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * http://www.opensource.org/licenses/MIT
     */
    
    /* jshint nomen:false */
    /* global define, require, window, document, location, Blob, FormData */
    
    
    (function (factory) {
        'use strict';
        if (typeof define === 'function' && define.amd) {
            // Register as an anonymous AMD module:
            define([
                'jquery',
                'jquery.ui.widget'
            ], factory);
        } else if (typeof exports === 'object') {
            // Node/CommonJS:
            factory(
                require('jquery'),
                require('./vendor/jquery.ui.widget')
            );
        } else {
            // Browser globals:
            factory(window.jQuery);
        }
    }(function ($) {
        'use strict';
    
        // Detect file input support, based on
        // http://viljamis.com/blog/2012/file-upload-support-on-mobile/
        $.support.fileInput = !(new RegExp(
            // Handle devices which give false positives for the feature detection:
            '(Android (1\\.[0156]|2\\.[01]))' +
                '|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +
                '|(w(eb)?OSBrowser)|(webOS)' +
                '|(Kindle/(1\\.0|2\\.[05]|3\\.0))'
        ).test(window.navigator.userAgent) ||
            // Feature detection for all other devices:
            $('<input type="file">').prop('disabled'));
    
        // The FileReader API is not actually used, but works as feature detection,
        // as some Safari versions (5?) support XHR file uploads via the FormData API,
        // but not non-multipart XHR file uploads.
        // window.XMLHttpRequestUpload is not available on IE10, so we check for
        // window.ProgressEvent instead to detect XHR2 file upload capability:
        $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);
        $.support.xhrFormDataFileUpload = !!window.FormData;
    
        // Detect support for Blob slicing (required for chunked uploads):
        $.support.blobSlice = window.Blob && (Blob.prototype.slice ||
            Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
    
        // Helper function to create drag handlers for dragover/dragenter/dragleave:
        function getDragHandler(type) {
            var isDragOver = type === 'dragover';
            return function (e) {
                e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
                var dataTransfer = e.dataTransfer;
                if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&
                        this._trigger(
                            type,
                            $.Event(type, {delegatedEvent: e})
                        ) !== false) {
                    e.preventDefault();
                    if (isDragOver) {
                        dataTransfer.dropEffect = 'copy';
                    }
                }
            };
        }
    
        // The fileupload widget listens for change events on file input fields defined
        // via fileInput setting and paste or drop events of the given dropZone.
        // In addition to the default jQuery Widget methods, the fileupload widget
        // exposes the "add" and "send" methods, to add or directly send files using
        // the fileupload API.
        // By default, files added via file input selection, paste, drag & drop or
        // "add" method are uploaded immediately, but it is possible to override
        // the "add" callback option to queue file uploads.
        $.widget('blueimp.fileupload', {
    
            options: {
                // The drop target element(s), by the default the complete document.
                // Set to null to disable drag & drop support:
                dropZone: $(document),
                // The paste target element(s), by the default undefined.
                // Set to a DOM node or jQuery object to enable file pasting:
                pasteZone: undefined,
                // The file input field(s), that are listened to for change events.
                // If undefined, it is set to the file input fields inside
                // of the widget element on plugin initialization.
                // Set to null to disable the change listener.
                fileInput: undefined,
                // By default, the file input field is replaced with a clone after
                // each input field change event. This is required for iframe transport
                // queues and allows change events to be fired for the same file
                // selection, but can be disabled by setting the following option to false:
                replaceFileInput: true,
                // The parameter name for the file form data (the request argument name).
                // If undefined or empty, the name property of the file input field is
                // used, or "files[]" if the file input name property is also empty,
                // can be a string or an array of strings:
                paramName: undefined,
                // By default, each file of a selection is uploaded using an individual
                // request for XHR type uploads. Set to false to upload file
                // selections in one request each:
                singleFileUploads: true,
                // To limit the number of files uploaded with one XHR request,
                // set the following option to an integer greater than 0:
                limitMultiFileUploads: undefined,
                // The following option limits the number of files uploaded with one
                // XHR request to keep the request size under or equal to the defined
                // limit in bytes:
                limitMultiFileUploadSize: undefined,
                // Multipart file uploads add a number of bytes to each uploaded file,
                // therefore the following option adds an overhead for each file used
                // in the limitMultiFileUploadSize configuration:
                limitMultiFileUploadSizeOverhead: 512,
                // Set the following option to true to issue all file upload requests
                // in a sequential order:
                sequentialUploads: false,
                // To limit the number of concurrent uploads,
                // set the following option to an integer greater than 0:
                limitConcurrentUploads: undefined,
                // Set the following option to true to force iframe transport uploads:
                forceIframeTransport: false,
                // Set the following option to the location of a redirect url on the
                // origin server, for cross-domain iframe transport uploads:
                redirect: undefined,
                // The parameter name for the redirect url, sent as part of the form
                // data and set to 'redirect' if this option is empty:
                redirectParamName: undefined,
                // Set the following option to the location of a postMessage window,
                // to enable postMessage transport uploads:
                postMessage: undefined,
                // By default, XHR file uploads are sent as multipart/form-data.
                // The iframe transport is always using multipart/form-data.
                // Set to false to enable non-multipart XHR uploads:
                multipart: true,
                // To upload large files in smaller chunks, set the following option
                // to a preferred maximum chunk size. If set to 0, null or undefined,
                // or the browser does not support the required Blob API, files will
                // be uploaded as a whole.
                maxChunkSize: undefined,
                // When a non-multipart upload or a chunked multipart upload has been
                // aborted, this option can be used to resume the upload by setting
                // it to the size of the already uploaded bytes. This option is most
                // useful when modifying the options object inside of the "add" or
                // "send" callbacks, as the options are cloned for each file upload.
                uploadedBytes: undefined,
                // By default, failed (abort or error) file uploads are removed from the
                // global progress calculation. Set the following option to false to
                // prevent recalculating the global progress data:
                recalculateProgress: true,
                // Interval in milliseconds to calculate and trigger progress events:
                progressInterval: 100,
                // Interval in milliseconds to calculate progress bitrate:
                bitrateInterval: 500,
                // By default, uploads are started automatically when adding files:
                autoUpload: true,
    
                // Error and info messages:
                messages: {
                    uploadedBytes: 'Uploaded bytes exceed file size'
                },
    
                // Translation function, gets the message key to be translated
                // and an object with context specific data as arguments:
                i18n: function (message, context) {
                    message = this.messages[message] || message.toString();
                    if (context) {
                        $.each(context, function (key, value) {
                            message = message.replace('{' + key + '}', value);
                        });
                    }
                    return message;
                },
    
                // Additional form data to be sent along with the file uploads can be set
                // using this option, which accepts an array of objects with name and
                // value properties, a function returning such an array, a FormData
                // object (for XHR file uploads), or a simple object.
                // The form of the first fileInput is given as parameter to the function:
                formData: function (form) {
                    return form.serializeArray();
                },
    
                // The add callback is invoked as soon as files are added to the fileupload
                // widget (via file input selection, drag & drop, paste or add API call).
                // If the singleFileUploads option is enabled, this callback will be
                // called once for each file in the selection for XHR file uploads, else
                // once for each file selection.
                //
                // The upload starts when the submit method is invoked on the data parameter.
                // The data object contains a files property holding the added files
                // and allows you to override plugin options as well as define ajax settings.
                //
                // Listeners for this callback can also be bound the following way:
                // .bind('fileuploadadd', func);
                //
                // data.submit() returns a Promise object and allows to attach additional
                // handlers using jQuery's Deferred callbacks:
                // data.submit().done(func).fail(func).always(func);
                add: function (e, data) {
                    if (e.isDefaultPrevented()) {
                        return false;
                    }
                    if (data.autoUpload || (data.autoUpload !== false &&
                            $(this).fileupload('option', 'autoUpload'))) {
                        data.process().done(function () {
                            data.submit();
                        });
                    }
                },
    
                // Other callbacks:
    
                // Callback for the submit event of each file upload:
                // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);
    
                // Callback for the start of each file upload request:
                // send: function (e, data) {}, // .bind('fileuploadsend', func);
    
                // Callback for successful uploads:
                // done: function (e, data) {}, // .bind('fileuploaddone', func);
    
                // Callback for failed (abort or error) uploads:
                // fail: function (e, data) {}, // .bind('fileuploadfail', func);
    
                // Callback for completed (success, abort or error) requests:
                // always: function (e, data) {}, // .bind('fileuploadalways', func);
    
                // Callback for upload progress events:
                // progress: function (e, data) {}, // .bind('fileuploadprogress', func);
    
                // Callback for global upload progress events:
                // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);
    
                // Callback for uploads start, equivalent to the global ajaxStart event:
                // start: function (e) {}, // .bind('fileuploadstart', func);
    
                // Callback for uploads stop, equivalent to the global ajaxStop event:
                // stop: function (e) {}, // .bind('fileuploadstop', func);
    
                // Callback for change events of the fileInput(s):
                // change: function (e, data) {}, // .bind('fileuploadchange', func);
    
                // Callback for paste events to the pasteZone(s):
                // paste: function (e, data) {}, // .bind('fileuploadpaste', func);
    
                // Callback for drop events of the dropZone(s):
                // drop: function (e, data) {}, // .bind('fileuploaddrop', func);
    
                // Callback for dragover events of the dropZone(s):
                // dragover: function (e) {}, // .bind('fileuploaddragover', func);
    
                // Callback for the start of each chunk upload request:
                // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);
    
                // Callback for successful chunk uploads:
                // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);
    
                // Callback for failed (abort or error) chunk uploads:
                // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);
    
                // Callback for completed (success, abort or error) chunk upload requests:
                // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);
    
                // The plugin options are used as settings object for the ajax calls.
                // The following are jQuery ajax settings required for the file uploads:
                processData: false,
                contentType: false,
                cache: false,
                timeout: 0
            },
    
            // A list of options that require reinitializing event listeners and/or
            // special initialization code:
            _specialOptions: [
                'fileInput',
                'dropZone',
                'pasteZone',
                'multipart',
                'forceIframeTransport'
            ],
    
            _blobSlice: $.support.blobSlice && function () {
                var slice = this.slice || this.webkitSlice || this.mozSlice;
                return slice.apply(this, arguments);
            },
    
            _BitrateTimer: function () {
                this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());
                this.loaded = 0;
                this.bitrate = 0;
                this.getBitrate = function (now, loaded, interval) {
                    var timeDiff = now - this.timestamp;
                    if (!this.bitrate || !interval || timeDiff > interval) {
                        this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
                        this.loaded = loaded;
                        this.timestamp = now;
                    }
                    return this.bitrate;
                };
            },
    
            _isXHRUpload: function (options) {
                return !options.forceIframeTransport &&
                    ((!options.multipart && $.support.xhrFileUpload) ||
                    $.support.xhrFormDataFileUpload);
            },
    
            _getFormData: function (options) {
                var formData;
                if ($.type(options.formData) === 'function') {
                    return options.formData(options.form);
                }
                if ($.isArray(options.formData)) {
                    return options.formData;
                }
                if ($.type(options.formData) === 'object') {
                    formData = [];
                    $.each(options.formData, function (name, value) {
                        formData.push({name: name, value: value});
                    });
                    return formData;
                }
                return [];
            },
    
            _getTotal: function (files) {
                var total = 0;
                $.each(files, function (index, file) {
                    total += file.size || 1;
                });
                return total;
            },
    
            _initProgressObject: function (obj) {
                var progress = {
                    loaded: 0,
                    total: 0,
                    bitrate: 0
                };
                if (obj._progress) {
                    $.extend(obj._progress, progress);
                } else {
                    obj._progress = progress;
                }
            },
    
            _initResponseObject: function (obj) {
                var prop;
                if (obj._response) {
                    for (prop in obj._response) {
                        if (obj._response.hasOwnProperty(prop)) {
                            delete obj._response[prop];
                        }
                    }
                } else {
                    obj._response = {};
                }
            },
    
            _onProgress: function (e, data) {
                if (e.lengthComputable) {
                    var now = ((Date.now) ? Date.now() : (new Date()).getTime()),
                        loaded;
                    if (data._time && data.progressInterval &&
                            (now - data._time < data.progressInterval) &&
                            e.loaded !== e.total) {
                        return;
                    }
                    data._time = now;
                    loaded = Math.floor(
                        e.loaded / e.total * (data.chunkSize || data._progress.total)
                    ) + (data.uploadedBytes || 0);
                    // Add the difference from the previously loaded state
                    // to the global loaded counter:
                    this._progress.loaded += (loaded - data._progress.loaded);
                    this._progress.bitrate = this._bitrateTimer.getBitrate(
                        now,
                        this._progress.loaded,
                        data.bitrateInterval
                    );
                    data._progress.loaded = data.loaded = loaded;
                    data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(
                        now,
                        loaded,
                        data.bitrateInterval
                    );
                    // Trigger a custom progress event with a total data property set
                    // to the file size(s) of the current upload and a loaded data
                    // property calculated accordingly:
                    this._trigger(
                        'progress',
                        $.Event('progress', {delegatedEvent: e}),
                        data
                    );
                    // Trigger a global progress event for all current file uploads,
                    // including ajax calls queued for sequential file uploads:
                    this._trigger(
                        'progressall',
                        $.Event('progressall', {delegatedEvent: e}),
                        this._progress
                    );
                }
            },
    
            _initProgressListener: function (options) {
                var that = this,
                    xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
                // Accesss to the native XHR object is required to add event listeners
                // for the upload progress event:
                if (xhr.upload) {
                    $(xhr.upload).bind('progress', function (e) {
                        var oe = e.originalEvent;
                        // Make sure the progress event properties get copied over:
                        e.lengthComputable = oe.lengthComputable;
                        e.loaded = oe.loaded;
                        e.total = oe.total;
                        that._onProgress(e, options);
                    });
                    options.xhr = function () {
                        return xhr;
                    };
                }
            },
    
            _isInstanceOf: function (type, obj) {
                // Cross-frame instanceof check
                return Object.prototype.toString.call(obj) === '[object ' + type + ']';
            },
    
            _initXHRData: function (options) {
                var that = this,
                    formData,
                    file = options.files[0],
                    // Ignore non-multipart setting if not supported:
                    multipart = options.multipart || !$.support.xhrFileUpload,
                    paramName = $.type(options.paramName) === 'array' ?
                        options.paramName[0] : options.paramName;
                options.headers = $.extend({}, options.headers);
                if (options.contentRange) {
                    options.headers['Content-Range'] = options.contentRange;
                }
                if (!multipart || options.blob || !this._isInstanceOf('File', file)) {
                    options.headers['Content-Disposition'] = 'attachment; filename="' +
                        encodeURI(file.name) + '"';
                }
                if (!multipart) {
                    options.contentType = file.type || 'application/octet-stream';
                    options.data = options.blob || file;
                } else if ($.support.xhrFormDataFileUpload) {
                    if (options.postMessage) {
                        // window.postMessage does not allow sending FormData
                        // objects, so we just add the File/Blob objects to
                        // the formData array and let the postMessage window
                        // create the FormData object out of this array:
                        formData = this._getFormData(options);
                        if (options.blob) {
                            formData.push({
                                name: paramName,
                                value: options.blob
                            });
                        } else {
                            $.each(options.files, function (index, file) {
                                formData.push({
                                    name: ($.type(options.paramName) === 'array' &&
                                        options.paramName[index]) || paramName,
                                    value: file
                                });
                            });
                        }
                    } else {
                        if (that._isInstanceOf('FormData', options.formData)) {
                            formData = options.formData;
                        } else {
                            formData = new FormData();
                            $.each(this._getFormData(options), function (index, field) {
                                formData.append(field.name, field.value);
                            });
                        }
                        if (options.blob) {
                            formData.append(paramName, options.blob, file.name);
                        } else {
                            $.each(options.files, function (index, file) {
                                // This check allows the tests to run with
                                // dummy objects:
                                if (that._isInstanceOf('File', file) ||
                                        that._isInstanceOf('Blob', file)) {
                                    formData.append(
                                        ($.type(options.paramName) === 'array' &&
                                            options.paramName[index]) || paramName,
                                        file,
                                        file.uploadName || file.name
                                    );
                                }
                            });
                        }
                    }
                    options.data = formData;
                }
                // Blob reference is not needed anymore, free memory:
                options.blob = null;
            },
    
            _initIframeSettings: function (options) {
                var targetHost = $('<a></a>').prop('href', options.url).prop('host');
                // Setting the dataType to iframe enables the iframe transport:
                options.dataType = 'iframe ' + (options.dataType || '');
                // The iframe transport accepts a serialized array as form data:
                options.formData = this._getFormData(options);
                // Add redirect url to form data on cross-domain uploads:
                if (options.redirect && targetHost && targetHost !== location.host) {
                    options.formData.push({
                        name: options.redirectParamName || 'redirect',
                        value: options.redirect
                    });
                }
            },
    
            _initDataSettings: function (options) {
                if (this._isXHRUpload(options)) {
                    if (!this._chunkedUpload(options, true)) {
                        if (!options.data) {
                            this._initXHRData(options);
                        }
                        this._initProgressListener(options);
                    }
                    if (options.postMessage) {
                        // Setting the dataType to postmessage enables the
                        // postMessage transport:
                        options.dataType = 'postmessage ' + (options.dataType || '');
                    }
                } else {
                    this._initIframeSettings(options);
                }
            },
    
            _getParamName: function (options) {
                var fileInput = $(options.fileInput),
                    paramName = options.paramName;
                if (!paramName) {
                    paramName = [];
                    fileInput.each(function () {
                        var input = $(this),
                            name = input.prop('name') || 'files[]',
                            i = (input.prop('files') || [1]).length;
                        while (i) {
                            paramName.push(name);
                            i -= 1;
                        }
                    });
                    if (!paramName.length) {
                        paramName = [fileInput.prop('name') || 'files[]'];
                    }
                } else if (!$.isArray(paramName)) {
                    paramName = [paramName];
                }
                return paramName;
            },
    
            _initFormSettings: function (options) {
                // Retrieve missing options from the input field and the
                // associated form, if available:
                if (!options.form || !options.form.length) {
                    options.form = $(options.fileInput.prop('form'));
                    // If the given file input doesn't have an associated form,
                    // use the default widget file input's form:
                    if (!options.form.length) {
                        options.form = $(this.options.fileInput.prop('form'));
                    }
                }
                options.paramName = this._getParamName(options);
                if (!options.url) {
                    options.url = options.form.prop('action') || location.href;
                }
                // The HTTP request method must be "POST" or "PUT":
                options.type = (options.type ||
                    ($.type(options.form.prop('method')) === 'string' &&
                        options.form.prop('method')) || ''
                    ).toUpperCase();
                if (options.type !== 'POST' && options.type !== 'PUT' &&
                        options.type !== 'PATCH') {
                    options.type = 'POST';
                }
                if (!options.formAcceptCharset) {
                    options.formAcceptCharset = options.form.attr('accept-charset');
                }
            },
    
            _getAJAXSettings: function (data) {
                var options = $.extend({}, this.options, data);
                this._initFormSettings(options);
                this._initDataSettings(options);
                return options;
            },
    
            // jQuery 1.6 doesn't provide .state(),
            // while jQuery 1.8+ removed .isRejected() and .isResolved():
            _getDeferredState: function (deferred) {
                if (deferred.state) {
                    return deferred.state();
                }
                if (deferred.isResolved()) {
                    return 'resolved';
                }
                if (deferred.isRejected()) {
                    return 'rejected';
                }
                return 'pending';
            },
    
            // Maps jqXHR callbacks to the equivalent
            // methods of the given Promise object:
            _enhancePromise: function (promise) {
                promise.success = promise.done;
                promise.error = promise.fail;
                promise.complete = promise.always;
                return promise;
            },
    
            // Creates and returns a Promise object enhanced with
            // the jqXHR methods abort, success, error and complete:
            _getXHRPromise: function (resolveOrReject, context, args) {
                var dfd = $.Deferred(),
                    promise = dfd.promise();
                context = context || this.options.context || promise;
                if (resolveOrReject === true) {
                    dfd.resolveWith(context, args);
                } else if (resolveOrReject === false) {
                    dfd.rejectWith(context, args);
                }
                promise.abort = dfd.promise;
                return this._enhancePromise(promise);
            },
    
            // Adds convenience methods to the data callback argument:
            _addConvenienceMethods: function (e, data) {
                var that = this,
                    getPromise = function (args) {
                        return $.Deferred().resolveWith(that, args).promise();
                    };
                data.process = function (resolveFunc, rejectFunc) {
                    if (resolveFunc || rejectFunc) {
                        data._processQueue = this._processQueue =
                            (this._processQueue || getPromise([this])).pipe(
                                function () {
                                    if (data.errorThrown) {
                                        return $.Deferred()
                                            .rejectWith(that, [data]).promise();
                                    }
                                    return getPromise(arguments);
                                }
                            ).pipe(resolveFunc, rejectFunc);
                    }
                    return this._processQueue || getPromise([this]);
                };
                data.submit = function () {
                    if (this.state() !== 'pending') {
                        data.jqXHR = this.jqXHR =
                            (that._trigger(
                                'submit',
                                $.Event('submit', {delegatedEvent: e}),
                                this
                            ) !== false) && that._onSend(e, this);
                    }
                    return this.jqXHR || that._getXHRPromise();
                };
                data.abort = function () {
                    if (this.jqXHR) {
                        return this.jqXHR.abort();
                    }
                    this.errorThrown = 'abort';
                    that._trigger('fail', null, this);
                    return that._getXHRPromise(false);
                };
                data.state = function () {
                    if (this.jqXHR) {
                        return that._getDeferredState(this.jqXHR);
                    }
                    if (this._processQueue) {
                        return that._getDeferredState(this._processQueue);
                    }
                };
                data.processing = function () {
                    return !this.jqXHR && this._processQueue && that
                        ._getDeferredState(this._processQueue) === 'pending';
                };
                data.progress = function () {
                    return this._progress;
                };
                data.response = function () {
                    return this._response;
                };
            },
    
            // Parses the Range header from the server response
            // and returns the uploaded bytes:
            _getUploadedBytes: function (jqXHR) {
                var range = jqXHR.getResponseHeader('Range'),
                    parts = range && range.split('-'),
                    upperBytesPos = parts && parts.length > 1 &&
                        parseInt(parts[1], 10);
                return upperBytesPos && upperBytesPos + 1;
            },
    
            // Uploads a file in multiple, sequential requests
            // by splitting the file up in multiple blob chunks.
            // If the second parameter is true, only tests if the file
            // should be uploaded in chunks, but does not invoke any
            // upload requests:
            _chunkedUpload: function (options, testOnly) {
                options.uploadedBytes = options.uploadedBytes || 0;
                var that = this,
                    file = options.files[0],
                    fs = file.size,
                    ub = options.uploadedBytes,
                    mcs = options.maxChunkSize || fs,
                    slice = this._blobSlice,
                    dfd = $.Deferred(),
                    promise = dfd.promise(),
                    jqXHR,
                    upload;
                if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||
                        options.data) {
                    return false;
                }
                if (testOnly) {
                    return true;
                }
                if (ub >= fs) {
                    file.error = options.i18n('uploadedBytes');
                    return this._getXHRPromise(
                        false,
                        options.context,
                        [null, 'error', file.error]
                    );
                }
                // The chunk upload method:
                upload = function () {
                    // Clone the options object for each chunk upload:
                    var o = $.extend({}, options),
                        currentLoaded = o._progress.loaded;
                    o.blob = slice.call(
                        file,
                        ub,
                        ub + mcs,
                        file.type
                    );
                    // Store the current chunk size, as the blob itself
                    // will be dereferenced after data processing:
                    o.chunkSize = o.blob.size;
                    // Expose the chunk bytes position range:
                    o.contentRange = 'bytes ' + ub + '-' +
                        (ub + o.chunkSize - 1) + '/' + fs;
                    // Process the upload data (the blob and potential form data):
                    that._initXHRData(o);
                    // Add progress listeners for this chunk upload:
                    that._initProgressListener(o);
                    jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||
                            that._getXHRPromise(false, o.context))
                        .done(function (result, textStatus, jqXHR) {
                            ub = that._getUploadedBytes(jqXHR) ||
                                (ub + o.chunkSize);
                            // Create a progress event if no final progress event
                            // with loaded equaling total has been triggered
                            // for this chunk:
                            if (currentLoaded + o.chunkSize - o._progress.loaded) {
                                that._onProgress($.Event('progress', {
                                    lengthComputable: true,
                                    loaded: ub - o.uploadedBytes,
                                    total: ub - o.uploadedBytes
                                }), o);
                            }
                            options.uploadedBytes = o.uploadedBytes = ub;
                            o.result = result;
                            o.textStatus = textStatus;
                            o.jqXHR = jqXHR;
                            that._trigger('chunkdone', null, o);
                            that._trigger('chunkalways', null, o);
                            if (ub < fs) {
                                // File upload not yet complete,
                                // continue with the next chunk:
                                upload();
                            } else {
                                dfd.resolveWith(
                                    o.context,
                                    [result, textStatus, jqXHR]
                                );
                            }
                        })
                        .fail(function (jqXHR, textStatus, errorThrown) {
                            o.jqXHR = jqXHR;
                            o.textStatus = textStatus;
                            o.errorThrown = errorThrown;
                            that._trigger('chunkfail', null, o);
                            that._trigger('chunkalways', null, o);
                            dfd.rejectWith(
                                o.context,
                                [jqXHR, textStatus, errorThrown]
                            );
                        });
                };
                this._enhancePromise(promise);
                promise.abort = function () {
                    return jqXHR.abort();
                };
                upload();
                return promise;
            },
    
            _beforeSend: function (e, data) {
                if (this._active === 0) {
                    // the start callback is triggered when an upload starts
                    // and no other uploads are currently running,
                    // equivalent to the global ajaxStart event:
                    this._trigger('start');
                    // Set timer for global bitrate progress calculation:
                    this._bitrateTimer = new this._BitrateTimer();
                    // Reset the global progress values:
                    this._progress.loaded = this._progress.total = 0;
                    this._progress.bitrate = 0;
                }
                // Make sure the container objects for the .response() and
                // .progress() methods on the data object are available
                // and reset to their initial state:
                this._initResponseObject(data);
                this._initProgressObject(data);
                data._progress.loaded = data.loaded = data.uploadedBytes || 0;
                data._progress.total = data.total = this._getTotal(data.files) || 1;
                data._progress.bitrate = data.bitrate = 0;
                this._active += 1;
                // Initialize the global progress values:
                this._progress.loaded += data.loaded;
                this._progress.total += data.total;
            },
    
            _onDone: function (result, textStatus, jqXHR, options) {
                var total = options._progress.total,
                    response = options._response;
                if (options._progress.loaded < total) {
                    // Create a progress event if no final progress event
                    // with loaded equaling total has been triggered:
                    this._onProgress($.Event('progress', {
                        lengthComputable: true,
                        loaded: total,
                        total: total
                    }), options);
                }
                response.result = options.result = result;
                response.textStatus = options.textStatus = textStatus;
                response.jqXHR = options.jqXHR = jqXHR;
                this._trigger('done', null, options);
            },
    
            _onFail: function (jqXHR, textStatus, errorThrown, options) {
                var response = options._response;
                if (options.recalculateProgress) {
                    // Remove the failed (error or abort) file upload from
                    // the global progress calculation:
                    this._progress.loaded -= options._progress.loaded;
                    this._progress.total -= options._progress.total;
                }
                response.jqXHR = options.jqXHR = jqXHR;
                response.textStatus = options.textStatus = textStatus;
                response.errorThrown = options.errorThrown = errorThrown;
                this._trigger('fail', null, options);
            },
    
            _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {
                // jqXHRorResult, textStatus and jqXHRorError are added to the
                // options object via done and fail callbacks
                this._trigger('always', null, options);
            },
    
            _onSend: function (e, data) {
                if (!data.submit) {
                    this._addConvenienceMethods(e, data);
                }
                var that = this,
                    jqXHR,
                    aborted,
                    slot,
                    pipe,
                    options = that._getAJAXSettings(data),
                    send = function () {
                        that._sending += 1;
                        // Set timer for bitrate progress calculation:
                        options._bitrateTimer = new that._BitrateTimer();
                        jqXHR = jqXHR || (
                            ((aborted || that._trigger(
                                'send',
                                $.Event('send', {delegatedEvent: e}),
                                options
                            ) === false) &&
                            that._getXHRPromise(false, options.context, aborted)) ||
                            that._chunkedUpload(options) || $.ajax(options)
                        ).done(function (result, textStatus, jqXHR) {
                            that._onDone(result, textStatus, jqXHR, options);
                        }).fail(function (jqXHR, textStatus, errorThrown) {
                            that._onFail(jqXHR, textStatus, errorThrown, options);
                        }).always(function (jqXHRorResult, textStatus, jqXHRorError) {
                            that._onAlways(
                                jqXHRorResult,
                                textStatus,
                                jqXHRorError,
                                options
                            );
                            that._sending -= 1;
                            that._active -= 1;
                            if (options.limitConcurrentUploads &&
                                    options.limitConcurrentUploads > that._sending) {
                                // Start the next queued upload,
                                // that has not been aborted:
                                var nextSlot = that._slots.shift();
                                while (nextSlot) {
                                    if (that._getDeferredState(nextSlot) === 'pending') {
                                        nextSlot.resolve();
                                        break;
                                    }
                                    nextSlot = that._slots.shift();
                                }
                            }
                            if (that._active === 0) {
                                // The stop callback is triggered when all uploads have
                                // been completed, equivalent to the global ajaxStop event:
                                that._trigger('stop');
                            }
                        });
                        return jqXHR;
                    };
                this._beforeSend(e, options);
                if (this.options.sequentialUploads ||
                        (this.options.limitConcurrentUploads &&
                        this.options.limitConcurrentUploads <= this._sending)) {
                    if (this.options.limitConcurrentUploads > 1) {
                        slot = $.Deferred();
                        this._slots.push(slot);
                        pipe = slot.pipe(send);
                    } else {
                        this._sequence = this._sequence.pipe(send, send);
                        pipe = this._sequence;
                    }
                    // Return the piped Promise object, enhanced with an abort method,
                    // which is delegated to the jqXHR object of the current upload,
                    // and jqXHR callbacks mapped to the equivalent Promise methods:
                    pipe.abort = function () {
                        aborted = [undefined, 'abort', 'abort'];
                        if (!jqXHR) {
                            if (slot) {
                                slot.rejectWith(options.context, aborted);
                            }
                            return send();
                        }
                        return jqXHR.abort();
                    };
                    return this._enhancePromise(pipe);
                }
                return send();
            },
    
            _onAdd: function (e, data) {
                var that = this,
                    result = true,
                    options = $.extend({}, this.options, data),
                    files = data.files,
                    filesLength = files.length,
                    limit = options.limitMultiFileUploads,
                    limitSize = options.limitMultiFileUploadSize,
                    overhead = options.limitMultiFileUploadSizeOverhead,
                    batchSize = 0,
                    paramName = this._getParamName(options),
                    paramNameSet,
                    paramNameSlice,
                    fileSet,
                    i,
                    j = 0;
                if (!filesLength) {
                    return false;
                }
                if (limitSize && files[0].size === undefined) {
                    limitSize = undefined;
                }
                if (!(options.singleFileUploads || limit || limitSize) ||
                        !this._isXHRUpload(options)) {
                    fileSet = [files];
                    paramNameSet = [paramName];
                } else if (!(options.singleFileUploads || limitSize) && limit) {
                    fileSet = [];
                    paramNameSet = [];
                    for (i = 0; i < filesLength; i += limit) {
                        fileSet.push(files.slice(i, i + limit));
                        paramNameSlice = paramName.slice(i, i + limit);
                        if (!paramNameSlice.length) {
                            paramNameSlice = paramName;
                        }
                        paramNameSet.push(paramNameSlice);
                    }
                } else if (!options.singleFileUploads && limitSize) {
                    fileSet = [];
                    paramNameSet = [];
                    for (i = 0; i < filesLength; i = i + 1) {
                        batchSize += files[i].size + overhead;
                        if (i + 1 === filesLength ||
                                ((batchSize + files[i + 1].size + overhead) > limitSize) ||
                                (limit && i + 1 - j >= limit)) {
                            fileSet.push(files.slice(j, i + 1));
                            paramNameSlice = paramName.slice(j, i + 1);
                            if (!paramNameSlice.length) {
                                paramNameSlice = paramName;
                            }
                            paramNameSet.push(paramNameSlice);
                            j = i + 1;
                            batchSize = 0;
                        }
                    }
                } else {
                    paramNameSet = paramName;
                }
                data.originalFiles = files;
                $.each(fileSet || files, function (index, element) {
                    var newData = $.extend({}, data);
                    newData.files = fileSet ? element : [element];
                    newData.paramName = paramNameSet[index];
                    that._initResponseObject(newData);
                    that._initProgressObject(newData);
                    that._addConvenienceMethods(e, newData);
                    result = that._trigger(
                        'add',
                        $.Event('add', {delegatedEvent: e}),
                        newData
                    );
                    return result;
                });
                return result;
            },
    
            _replaceFileInput: function (data) {
                var input = data.fileInput,
                    inputClone = input.clone(true),
                    restoreFocus = input.is(document.activeElement);
                // Add a reference for the new cloned file input to the data argument:
                data.fileInputClone = inputClone;
                $('<form></form>').append(inputClone)[0].reset();
                // Detaching allows to insert the fileInput on another form
                // without loosing the file input value:
                input.after(inputClone).detach();
                // If the fileInput had focus before it was detached,
                // restore focus to the inputClone.
                if (restoreFocus) {
                    inputClone.focus();
                }
                // Avoid memory leaks with the detached file input:
                $.cleanData(input.unbind('remove'));
                // Replace the original file input element in the fileInput
                // elements set with the clone, which has been copied including
                // event handlers:
                this.options.fileInput = this.options.fileInput.map(function (i, el) {
                    if (el === input[0]) {
                        return inputClone[0];
                    }
                    return el;
                });
                // If the widget has been initialized on the file input itself,
                // override this.element with the file input clone:
                if (input[0] === this.element[0]) {
                    this.element = inputClone;
                }
            },
    
            _handleFileTreeEntry: function (entry, path) {
                var that = this,
                    dfd = $.Deferred(),
                    errorHandler = function (e) {
                        if (e && !e.entry) {
                            e.entry = entry;
                        }
                        // Since $.when returns immediately if one
                        // Deferred is rejected, we use resolve instead.
                        // This allows valid files and invalid items
                        // to be returned together in one set:
                        dfd.resolve([e]);
                    },
                    successHandler = function (entries) {
                        that._handleFileTreeEntries(
                            entries,
                            path + entry.name + '/'
                        ).done(function (files) {
                            dfd.resolve(files);
                        }).fail(errorHandler);
                    },
                    readEntries = function () {
                        dirReader.readEntries(function (results) {
                            if (!results.length) {
                                successHandler(entries);
                            } else {
                                entries = entries.concat(results);
                                readEntries();
                            }
                        }, errorHandler);
                    },
                    dirReader, entries = [];
                path = path || '';
                if (entry.isFile) {
                    if (entry._file) {
                        // Workaround for Chrome bug #149735
                        entry._file.relativePath = path;
                        dfd.resolve(entry._file);
                    } else {
                        entry.file(function (file) {
                            file.relativePath = path;
                            dfd.resolve(file);
                        }, errorHandler);
                    }
                } else if (entry.isDirectory) {
                    dirReader = entry.createReader();
                    readEntries();
                } else {
                    // Return an empy list for file system items
                    // other than files or directories:
                    dfd.resolve([]);
                }
                return dfd.promise();
            },
    
            _handleFileTreeEntries: function (entries, path) {
                var that = this;
                return $.when.apply(
                    $,
                    $.map(entries, function (entry) {
                        return that._handleFileTreeEntry(entry, path);
                    })
                ).pipe(function () {
                    return Array.prototype.concat.apply(
                        [],
                        arguments
                    );
                });
            },
    
            _getDroppedFiles: function (dataTransfer) {
                dataTransfer = dataTransfer || {};
                var items = dataTransfer.items;
                if (items && items.length && (items[0].webkitGetAsEntry ||
                        items[0].getAsEntry)) {
                    return this._handleFileTreeEntries(
                        $.map(items, function (item) {
                            var entry;
                            if (item.webkitGetAsEntry) {
                                entry = item.webkitGetAsEntry();
                                if (entry) {
                                    // Workaround for Chrome bug #149735:
                                    entry._file = item.getAsFile();
                                }
                                return entry;
                            }
                            return item.getAsEntry();
                        })
                    );
                }
                return $.Deferred().resolve(
                    $.makeArray(dataTransfer.files)
                ).promise();
            },
    
            _getSingleFileInputFiles: function (fileInput) {
                fileInput = $(fileInput);
                var entries = fileInput.prop('webkitEntries') ||
                        fileInput.prop('entries'),
                    files,
                    value;
                if (entries && entries.length) {
                    return this._handleFileTreeEntries(entries);
                }
                files = $.makeArray(fileInput.prop('files'));
                if (!files.length) {
                    value = fileInput.prop('value');
                    if (!value) {
                        return $.Deferred().resolve([]).promise();
                    }
                    // If the files property is not available, the browser does not
                    // support the File API and we add a pseudo File object with
                    // the input value as name with path information removed:
                    files = [{name: value.replace(/^.*\\/, '')}];
                } else if (files[0].name === undefined && files[0].fileName) {
                    // File normalization for Safari 4 and Firefox 3:
                    $.each(files, function (index, file) {
                        file.name = file.fileName;
                        file.size = file.fileSize;
                    });
                }
                return $.Deferred().resolve(files).promise();
            },
    
            _getFileInputFiles: function (fileInput) {
                if (!(fileInput instanceof $) || fileInput.length === 1) {
                    return this._getSingleFileInputFiles(fileInput);
                }
                return $.when.apply(
                    $,
                    $.map(fileInput, this._getSingleFileInputFiles)
                ).pipe(function () {
                    return Array.prototype.concat.apply(
                        [],
                        arguments
                    );
                });
            },
    
            _onChange: function (e) {
                var that = this,
                    data = {
                        fileInput: $(e.target),
                        form: $(e.target.form)
                    };
                this._getFileInputFiles(data.fileInput).always(function (files) {
                    data.files = files;
                    if (that.options.replaceFileInput) {
                        that._replaceFileInput(data);
                    }
                    if (that._trigger(
                            'change',
                            $.Event('change', {delegatedEvent: e}),
                            data
                        ) !== false) {
                        that._onAdd(e, data);
                    }
                });
            },
    
            _onPaste: function (e) {
                var items = e.originalEvent && e.originalEvent.clipboardData &&
                        e.originalEvent.clipboardData.items,
                    data = {files: []};
                if (items && items.length) {
                    $.each(items, function (index, item) {
                        var file = item.getAsFile && item.getAsFile();
                        if (file) {
                            data.files.push(file);
                        }
                    });
                    if (this._trigger(
                            'paste',
                            $.Event('paste', {delegatedEvent: e}),
                            data
                        ) !== false) {
                        this._onAdd(e, data);
                    }
                }
            },
    
            _onDrop: function (e) {
                e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
                var that = this,
                    dataTransfer = e.dataTransfer,
                    data = {};
                if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
                    e.preventDefault();
                    this._getDroppedFiles(dataTransfer).always(function (files) {
                        data.files = files;
                        if (that._trigger(
                                'drop',
                                $.Event('drop', {delegatedEvent: e}),
                                data
                            ) !== false) {
                            that._onAdd(e, data);
                        }
                    });
                }
            },
    
            _onDragOver: getDragHandler('dragover'),
    
            _onDragEnter: getDragHandler('dragenter'),
    
            _onDragLeave: getDragHandler('dragleave'),
    
            _initEventHandlers: function () {
                if (this._isXHRUpload(this.options)) {
                    this._on(this.options.dropZone, {
                        dragover: this._onDragOver,
                        drop: this._onDrop,
                        // event.preventDefault() on dragenter is required for IE10+:
                        dragenter: this._onDragEnter,
                        // dragleave is not required, but added for completeness:
                        dragleave: this._onDragLeave
                    });
                    this._on(this.options.pasteZone, {
                        paste: this._onPaste
                    });
                }
                if ($.support.fileInput) {
                    this._on(this.options.fileInput, {
                        change: this._onChange
                    });
                }
            },
    
            _destroyEventHandlers: function () {
                this._off(this.options.dropZone, 'dragenter dragleave dragover drop');
                this._off(this.options.pasteZone, 'paste');
                this._off(this.options.fileInput, 'change');
            },
    
            _setOption: function (key, value) {
                var reinit = $.inArray(key, this._specialOptions) !== -1;
                if (reinit) {
                    this._destroyEventHandlers();
                }
                this._super(key, value);
                if (reinit) {
                    this._initSpecialOptions();
                    this._initEventHandlers();
                }
            },
    
            _initSpecialOptions: function () {
                var options = this.options;
                if (options.fileInput === undefined) {
                    options.fileInput = this.element.is('input[type="file"]') ?
                            this.element : this.element.find('input[type="file"]');
                } else if (!(options.fileInput instanceof $)) {
                    options.fileInput = $(options.fileInput);
                }
                if (!(options.dropZone instanceof $)) {
                    options.dropZone = $(options.dropZone);
                }
                if (!(options.pasteZone instanceof $)) {
                    options.pasteZone = $(options.pasteZone);
                }
            },
    
            _getRegExp: function (str) {
                var parts = str.split('/'),
                    modifiers = parts.pop();
                parts.shift();
                return new RegExp(parts.join('/'), modifiers);
            },
    
            _isRegExpOption: function (key, value) {
                return key !== 'url' && $.type(value) === 'string' &&
                    /^\/.*\/[igm]{0,3}$/.test(value);
            },
    
            _initDataAttributes: function () {
                var that = this,
                    options = this.options,
                    data = this.element.data();
                // Initialize options set via HTML5 data-attributes:
                $.each(
                    this.element[0].attributes,
                    function (index, attr) {
                        var key = attr.name.toLowerCase(),
                            value;
                        if (/^data-/.test(key)) {
                            // Convert hyphen-ated key to camelCase:
                            key = key.slice(5).replace(/-[a-z]/g, function (str) {
                                return str.charAt(1).toUpperCase();
                            });
                            value = data[key];
                            if (that._isRegExpOption(key, value)) {
                                value = that._getRegExp(value);
                            }
                            options[key] = value;
                        }
                    }
                );
            },
    
            _create: function () {
                this._initDataAttributes();
                this._initSpecialOptions();
                this._slots = [];
                this._sequence = this._getXHRPromise(true);
                this._sending = this._active = 0;
                this._initProgressObject(this);
                this._initEventHandlers();
            },
    
            // This method is exposed to the widget API and allows to query
            // the number of active uploads:
            active: function () {
                return this._active;
            },
    
            // This method is exposed to the widget API and allows to query
            // the widget upload progress.
            // It returns an object with loaded, total and bitrate properties
            // for the running uploads:
            progress: function () {
                return this._progress;
            },
    
            // This method is exposed to the widget API and allows adding files
            // using the fileupload API. The data parameter accepts an object which
            // must have a files property and can contain additional options:
            // .fileupload('add', {files: filesList});
            add: function (data) {
                var that = this;
                if (!data || this.options.disabled) {
                    return;
                }
                if (data.fileInput && !data.files) {
                    this._getFileInputFiles(data.fileInput).always(function (files) {
                        data.files = files;
                        that._onAdd(null, data);
                    });
                } else {
                    data.files = $.makeArray(data.files);
                    this._onAdd(null, data);
                }
            },
    
            // This method is exposed to the widget API and allows sending files
            // using the fileupload API. The data parameter accepts an object which
            // must have a files or fileInput property and can contain additional options:
            // .fileupload('send', {files: filesList});
            // The method returns a Promise object for the file upload call.
            send: function (data) {
                if (data && !this.options.disabled) {
                    if (data.fileInput && !data.files) {
                        var that = this,
                            dfd = $.Deferred(),
                            promise = dfd.promise(),
                            jqXHR,
                            aborted;
                        promise.abort = function () {
                            aborted = true;
                            if (jqXHR) {
                                return jqXHR.abort();
                            }
                            dfd.reject(null, 'abort', 'abort');
                            return promise;
                        };
                        this._getFileInputFiles(data.fileInput).always(
                            function (files) {
                                if (aborted) {
                                    return;
                                }
                                if (!files.length) {
                                    dfd.reject();
                                    return;
                                }
                                data.files = files;
                                jqXHR = that._onSend(null, data);
                                jqXHR.then(
                                    function (result, textStatus, jqXHR) {
                                        dfd.resolve(result, textStatus, jqXHR);
                                    },
                                    function (jqXHR, textStatus, errorThrown) {
                                        dfd.reject(jqXHR, textStatus, errorThrown);
                                    }
                                );
                            }
                        );
                        return this._enhancePromise(promise);
                    }
                    data.files = $.makeArray(data.files);
                    if (data.files.length) {
                        return this._onSend(null, data);
                    }
                }
                return this._getXHRPromise(false, data && data.context);
            }
    
        });
    
    }));
    
    
    
    /*
     * JavaScript Templates 2.4.1
     * https://github.com/blueimp/JavaScript-Templates
     *
     * Copyright 2011, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * http://www.opensource.org/licenses/MIT
     *
     * Inspired by John Resig's JavaScript Micro-Templating:
     * http://ejohn.org/blog/javascript-micro-templating/
     */
    
    /*jslint evil: true, regexp: true, unparam: true */
    /*global document, define */
    
    
    (function ($) {
        "use strict";
        var tmpl = function (str, data) {
            var f = !/[^\w\-\.:]/.test(str) ? tmpl.cache[str] = tmpl.cache[str] ||
                    tmpl(tmpl.load(str)) :
                        new Function(
                            tmpl.arg + ',tmpl',
                            "var _e=tmpl.encode" + tmpl.helper + ",_s='" +
                                str.replace(tmpl.regexp, tmpl.func) +
                                "';return _s;"
                        );
            return data ? f(data, tmpl) : function (data) {
                return f(data, tmpl);
            };
        };
        tmpl.cache = {};
        tmpl.load = function (id) {
            return document.getElementById(id).innerHTML;
        };
        tmpl.regexp = /([\s'\\])(?!(?:[^{]|\{(?!%))*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g;
        tmpl.func = function (s, p1, p2, p3, p4, p5) {
            if (p1) { // whitespace, quote and backspace in HTML context
                return {
                    "\n": "\\n",
                    "\r": "\\r",
                    "\t": "\\t",
                    " " : " "
                }[p1] || "\\" + p1;
            }
            if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}
                if (p2 === "=") {
                    return "'+_e(" + p3 + ")+'";
                }
                return "'+(" + p3 + "==null?'':" + p3 + ")+'";
            }
            if (p4) { // evaluation start tag: {%
                return "';";
            }
            if (p5) { // evaluation end tag: %}
                return "_s+='";
            }
        };
        tmpl.encReg = /[<>&"'\x00]/g;
        tmpl.encMap = {
            "<"   : "&lt;",
            ">"   : "&gt;",
            "&"   : "&amp;",
            "\""  : "&quot;",
            "'"   : "&#39;"
        };
        tmpl.encode = function (s) {
            /*jshint eqnull:true */
            return (s == null ? "" : "" + s).replace(
                tmpl.encReg,
                function (c) {
                    return tmpl.encMap[c] || "";
                }
            );
        };
        tmpl.arg = "o";
        tmpl.helper = ",print=function(s,e){_s+=e?(s==null?'':s):_e(s);}" +
            ",include=function(s,d){_s+=tmpl(s,d);}";
        if (typeof define === "function" && define.amd) {
            define(function () {
                return tmpl;
            });
        } else {
            $.tmpl = tmpl;
        }
    }(this));
    jQuery(function() {
        return $('#new_anyfile').fileupload({
            dataType: 'json',
            //acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
            //previewSourceFileTypes: /^image\/(gif|jpeg|png)$/,
            limitMultiFileUploads: 3,
            limitConcurrentUploads: 3,
            dropZone: $('#dropzone'),
            add: function(e, data) {
                var file, types;
                //console.log('add', data, e);
                //types = /(\.|\/)(gif|jpe?g|png|dmg)$/i;
                file = data.files[0];
    
                if (file.size < 26214400 ) {
                    data.context = $(tmpl("template-upload", file));
                    $('#files_list').append(data.context);
                    return data.submit();
                } else {
                    file.error_text = 'Файл больше 25 Mb'
                    data.context = $(tmpl("template-fail", file));
                    $('#files_list').append(data.context);
                    return false;
                }
            },
            progress: function(e, data) {
                var progress;
                if (data.context) {
                    progress = parseInt(data.loaded / data.total * 100, 10);
                    return data.context.find('.bar').css('width', progress + '%');
                }
            },
            done: function(e, data) {
                //console.log('DONE', data)
                if (data.result.status == 'success'){
                    data.result.name = data.files[0].name;
                    data.context.replaceWith(tmpl("template-success", data.result));
                }else{
                    data.result.name = data.files[0].name;
                    data.context.replaceWith(tmpl("template-fail", data.result));
                }
            },
            fail: function(e, data) {
                var file = data.files[0];
                data.context.replaceWith(tmpl("template-fail", file));
                //return console.log('fail', data, e);
            }
        });
    });
    
    $(document).on('drop dragover', '#new_anyfile #dropzone', function(e) {
        return e.preventDefault();
    });
    
    $(document).on('dragover',  '#new_anyfile #dropzone', function(e) {
        var dropZone = $(this);
        var timeout = window.dropZoneTimeout;
        if (!timeout) {
            dropZone.addClass('in');
        } else {
            clearTimeout(timeout);
        }
        if (e.target === dropZone[0]) {
            dropZone.addClass('hover');
        } else {
            dropZone.removeClass('hover');
        }
        return window.dropZoneTimeout = setTimeout(function() {
            window.dropZoneTimeout = null;
            return dropZone.removeClass('in hover');
        }, 100);
    });
    /* Chosen v1.0.0 | (c) 2011-2013 by Harvest | MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md */
    
    !function(){var a,AbstractChosen,Chosen,SelectParser,b,c={}.hasOwnProperty,d=function(a,b){function d(){this.constructor=a}for(var e in b)c.call(b,e)&&(a[e]=b[e]);return d.prototype=b.prototype,a.prototype=new d,a.__super__=b.prototype,a};SelectParser=function(){function SelectParser(){this.options_index=0,this.parsed=[]}return SelectParser.prototype.add_node=function(a){return"OPTGROUP"===a.nodeName.toUpperCase()?this.add_group(a):this.add_option(a)},SelectParser.prototype.add_group=function(a){var b,c,d,e,f,g;for(b=this.parsed.length,this.parsed.push({array_index:b,group:!0,label:this.escapeExpression(a.label),children:0,disabled:a.disabled}),f=a.childNodes,g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(this.add_option(c,b,a.disabled));return g},SelectParser.prototype.add_option=function(a,b,c){return"OPTION"===a.nodeName.toUpperCase()?(""!==a.text?(null!=b&&(this.parsed[b].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:a.value,text:a.text,html:a.innerHTML,selected:a.selected,disabled:c===!0?c:a.disabled,group_array_index:b,classes:a.className,style:a.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1):void 0},SelectParser.prototype.escapeExpression=function(a){var b,c;return null==a||a===!1?"":/[\&\<\>\"\'\`]/.test(a)?(b={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},c=/&(?!\w+;)|[\<\>\"\'\`]/g,a.replace(c,function(a){return b[a]||"&amp;"})):a},SelectParser}(),SelectParser.select_to_array=function(a){var b,c,d,e,f;for(c=new SelectParser,f=a.childNodes,d=0,e=f.length;e>d;d++)b=f[d],c.add_node(b);return c.parsed},AbstractChosen=function(){function AbstractChosen(a,b){this.form_field=a,this.options=null!=b?b:{},AbstractChosen.browser_is_supported()&&(this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers())}return AbstractChosen.prototype.set_default_values=function(){var a=this;return this.click_test_action=function(b){return a.test_active_click(b)},this.activate_action=function(b){return a.activate_field(b)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.result_single_selected=null,this.allow_single_deselect=null!=this.options.allow_single_deselect&&null!=this.form_field.options[0]&&""===this.form_field.options[0].text?this.options.allow_single_deselect:!1,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=null!=this.options.enable_split_word_search?this.options.enable_split_word_search:!0,this.group_search=null!=this.options.group_search?this.options.group_search:!0,this.search_contains=this.options.search_contains||!1,this.single_backstroke_delete=null!=this.options.single_backstroke_delete?this.options.single_backstroke_delete:!0,this.max_selected_options=this.options.max_selected_options||1/0,this.inherit_select_classes=this.options.inherit_select_classes||!1,this.display_selected_options=null!=this.options.display_selected_options?this.options.display_selected_options:!0,this.display_disabled_options=null!=this.options.display_disabled_options?this.options.display_disabled_options:!0},AbstractChosen.prototype.set_default_text=function(){return this.default_text=this.form_field.getAttribute("data-placeholder")?this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.options.placeholder_text_multiple||this.options.placeholder_text||AbstractChosen.default_multiple_text:this.options.placeholder_text_single||this.options.placeholder_text||AbstractChosen.default_single_text,this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||AbstractChosen.default_no_result_text},AbstractChosen.prototype.mouse_enter=function(){return this.mouse_on_container=!0},AbstractChosen.prototype.mouse_leave=function(){return this.mouse_on_container=!1},AbstractChosen.prototype.input_focus=function(){var a=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return a.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},AbstractChosen.prototype.input_blur=function(){var a=this;return this.mouse_on_container?void 0:(this.active_field=!1,setTimeout(function(){return a.blur_test()},100))},AbstractChosen.prototype.results_option_build=function(a){var b,c,d,e,f;for(b="",f=this.results_data,d=0,e=f.length;e>d;d++)c=f[d],b+=c.group?this.result_add_group(c):this.result_add_option(c),(null!=a?a.first:void 0)&&(c.selected&&this.is_multiple?this.choice_build(c):c.selected&&!this.is_multiple&&this.single_set_selected_text(c.text));return b},AbstractChosen.prototype.result_add_option=function(a){var b,c;return a.search_match?this.include_option_in_results(a)?(b=[],a.disabled||a.selected&&this.is_multiple||b.push("active-result"),!a.disabled||a.selected&&this.is_multiple||b.push("disabled-result"),a.selected&&b.push("result-selected"),null!=a.group_array_index&&b.push("group-option"),""!==a.classes&&b.push(a.classes),c=""!==a.style.cssText?' style="'+a.style+'"':"",'<li class="'+b.join(" ")+'"'+c+' data-option-array-index="'+a.array_index+'">'+a.search_text+"</li>"):"":""},AbstractChosen.prototype.result_add_group=function(a){return a.search_match||a.group_match?a.active_options>0?'<li class="group-result">'+a.search_text+"</li>":"":""},AbstractChosen.prototype.results_update_field=function(){return this.set_default_text(),this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.result_single_selected=null,this.results_build(),this.results_showing?this.winnow_results():void 0},AbstractChosen.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},AbstractChosen.prototype.results_search=function(){return this.results_showing?this.winnow_results():this.results_show()},AbstractChosen.prototype.winnow_results=function(){var a,b,c,d,e,f,g,h,i,j,k,l,m;for(this.no_results_clear(),e=0,g=this.get_search_text(),a=g.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),d=this.search_contains?"":"^",c=new RegExp(d+a,"i"),j=new RegExp(a,"i"),m=this.results_data,k=0,l=m.length;l>k;k++)b=m[k],b.search_match=!1,f=null,this.include_option_in_results(b)&&(b.group&&(b.group_match=!1,b.active_options=0),null!=b.group_array_index&&this.results_data[b.group_array_index]&&(f=this.results_data[b.group_array_index],0===f.active_options&&f.search_match&&(e+=1),f.active_options+=1),(!b.group||this.group_search)&&(b.search_text=b.group?b.label:b.html,b.search_match=this.search_string_match(b.search_text,c),b.search_match&&!b.group&&(e+=1),b.search_match?(g.length&&(h=b.search_text.search(j),i=b.search_text.substr(0,h+g.length)+"</em>"+b.search_text.substr(h+g.length),b.search_text=i.substr(0,h)+"<em>"+i.substr(h)),null!=f&&(f.group_match=!0)):null!=b.group_array_index&&this.results_data[b.group_array_index].search_match&&(b.search_match=!0)));return this.result_clear_highlight(),1>e&&g.length?(this.update_results_content(""),this.no_results(g)):(this.update_results_content(this.results_option_build()),this.winnow_results_set_highlight())},AbstractChosen.prototype.search_string_match=function(a,b){var c,d,e,f;if(b.test(a))return!0;if(this.enable_split_word_search&&(a.indexOf(" ")>=0||0===a.indexOf("["))&&(d=a.replace(/\[|\]/g,"").split(" "),d.length))for(e=0,f=d.length;f>e;e++)if(c=d[e],b.test(c))return!0},AbstractChosen.prototype.choices_count=function(){var a,b,c,d;if(null!=this.selected_option_count)return this.selected_option_count;for(this.selected_option_count=0,d=this.form_field.options,b=0,c=d.length;c>b;b++)a=d[b],a.selected&&(this.selected_option_count+=1);return this.selected_option_count},AbstractChosen.prototype.choices_click=function(a){return a.preventDefault(),this.results_showing||this.is_disabled?void 0:this.results_show()},AbstractChosen.prototype.keyup_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),b){case 8:if(this.is_multiple&&this.backstroke_length<1&&this.choices_count()>0)return this.keydown_backstroke();if(!this.pending_backstroke)return this.result_clear_highlight(),this.results_search();break;case 13:if(a.preventDefault(),this.results_showing)return this.result_select(a);break;case 27:return this.results_showing&&this.results_hide(),!0;case 9:case 38:case 40:case 16:case 91:case 17:break;default:return this.results_search()}},AbstractChosen.prototype.container_width=function(){return null!=this.options.width?this.options.width:""+this.form_field.offsetWidth+"px"},AbstractChosen.prototype.include_option_in_results=function(a){return this.is_multiple&&!this.display_selected_options&&a.selected?!1:!this.display_disabled_options&&a.disabled?!1:a.empty?!1:!0},AbstractChosen.browser_is_supported=function(){return"Microsoft Internet Explorer"===window.navigator.appName?document.documentMode>=8:/iP(od|hone)/i.test(window.navigator.userAgent)?!1:/Android/i.test(window.navigator.userAgent)&&/Mobile/i.test(window.navigator.userAgent)?!1:!0},AbstractChosen.default_multiple_text="Select Some Options",AbstractChosen.default_single_text="Select an Option",AbstractChosen.default_no_result_text="No results match",AbstractChosen}(),a=jQuery,a.fn.extend({chosen:function(b){return AbstractChosen.browser_is_supported()?this.each(function(){var c,d;c=a(this),d=c.data("chosen"),"destroy"===b&&d?d.destroy():d||c.data("chosen",new Chosen(this,b))}):this}}),Chosen=function(c){function Chosen(){return b=Chosen.__super__.constructor.apply(this,arguments)}return d(Chosen,c),Chosen.prototype.setup=function(){return this.form_field_jq=a(this.form_field),this.current_selectedIndex=this.form_field.selectedIndex,this.is_rtl=this.form_field_jq.hasClass("chosen-rtl")},Chosen.prototype.set_up_html=function(){var b,c;return b=["chosen-container"],b.push("chosen-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&b.push(this.form_field.className),this.is_rtl&&b.push("chosen-rtl"),c={"class":b.join(" "),style:"width: "+this.container_width()+";",title:this.form_field.title},this.form_field.id.length&&(c.id=this.form_field.id.replace(/[^\w]/g,"_")+"_chosen"),this.container=a("<div />",c),this.is_multiple?this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="'+this.default_text+'" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>'):this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>'+this.default_text+'</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'),this.form_field_jq.hide().after(this.container),this.dropdown=this.container.find("div.chosen-drop").first(),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chosen-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chosen-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chosen-search").first(),this.selected_item=this.container.find(".chosen-single").first()),this.results_build(),this.set_tab_index(),this.set_label_behavior(),this.form_field_jq.trigger("chosen:ready",{chosen:this})},Chosen.prototype.register_observers=function(){var a=this;return this.container.bind("mousedown.chosen",function(b){a.container_mousedown(b)}),this.container.bind("mouseup.chosen",function(b){a.container_mouseup(b)}),this.container.bind("mouseenter.chosen",function(b){a.mouse_enter(b)}),this.container.bind("mouseleave.chosen",function(b){a.mouse_leave(b)}),this.search_results.bind("mouseup.chosen",function(b){a.search_results_mouseup(b)}),this.search_results.bind("mouseover.chosen",function(b){a.search_results_mouseover(b)}),this.search_results.bind("mouseout.chosen",function(b){a.search_results_mouseout(b)}),this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen",function(b){a.search_results_mousewheel(b)}),this.form_field_jq.bind("chosen:updated.chosen",function(b){a.results_update_field(b)}),this.form_field_jq.bind("chosen:activate.chosen",function(b){a.activate_field(b)}),this.form_field_jq.bind("chosen:open.chosen",function(b){a.container_mousedown(b)}),this.search_field.bind("blur.chosen",function(b){a.input_blur(b)}),this.search_field.bind("keyup.chosen",function(b){a.keyup_checker(b)}),this.search_field.bind("keydown.chosen",function(b){a.keydown_checker(b)}),this.search_field.bind("focus.chosen",function(b){a.input_focus(b)}),this.is_multiple?this.search_choices.bind("click.chosen",function(b){a.choices_click(b)}):this.container.bind("click.chosen",function(a){a.preventDefault()})},Chosen.prototype.destroy=function(){return a(document).unbind("click.chosen",this.click_test_action),this.search_field[0].tabIndex&&(this.form_field_jq[0].tabIndex=this.search_field[0].tabIndex),this.container.remove(),this.form_field_jq.removeData("chosen"),this.form_field_jq.show()},Chosen.prototype.search_field_disabled=function(){return this.is_disabled=this.form_field_jq[0].disabled,this.is_disabled?(this.container.addClass("chosen-disabled"),this.search_field[0].disabled=!0,this.is_multiple||this.selected_item.unbind("focus.chosen",this.activate_action),this.close_field()):(this.container.removeClass("chosen-disabled"),this.search_field[0].disabled=!1,this.is_multiple?void 0:this.selected_item.bind("focus.chosen",this.activate_action))},Chosen.prototype.container_mousedown=function(b){return this.is_disabled||(b&&"mousedown"===b.type&&!this.results_showing&&b.preventDefault(),null!=b&&a(b.target).hasClass("search-choice-close"))?void 0:(this.active_field?this.is_multiple||!b||a(b.target)[0]!==this.selected_item[0]&&!a(b.target).parents("a.chosen-single").length||(b.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),a(document).bind("click.chosen",this.click_test_action),this.results_show()),this.activate_field())},Chosen.prototype.container_mouseup=function(a){return"ABBR"!==a.target.nodeName||this.is_disabled?void 0:this.results_reset(a)},Chosen.prototype.search_results_mousewheel=function(a){var b,c,d;return b=-(null!=(c=a.originalEvent)?c.wheelDelta:void 0)||(null!=(d=a.originialEvent)?d.detail:void 0),null!=b?(a.preventDefault(),"DOMMouseScroll"===a.type&&(b=40*b),this.search_results.scrollTop(b+this.search_results.scrollTop())):void 0},Chosen.prototype.blur_test=function(){return!this.active_field&&this.container.hasClass("chosen-container-active")?this.close_field():void 0},Chosen.prototype.close_field=function(){return a(document).unbind("click.chosen",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chosen-container-active"),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale()},Chosen.prototype.activate_field=function(){return this.container.addClass("chosen-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},Chosen.prototype.test_active_click=function(b){return this.container.is(a(b.target).closest(".chosen-container"))?this.active_field=!0:this.close_field()},Chosen.prototype.results_build=function(){return this.parsing=!0,this.selected_option_count=null,this.results_data=SelectParser.select_to_array(this.form_field),this.is_multiple?this.search_choices.find("li.search-choice").remove():this.is_multiple||(this.single_set_selected_text(),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?(this.search_field[0].readOnly=!0,this.container.addClass("chosen-container-single-nosearch")):(this.search_field[0].readOnly=!1,this.container.removeClass("chosen-container-single-nosearch"))),this.update_results_content(this.results_option_build({first:!0})),this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.parsing=!1},Chosen.prototype.result_do_highlight=function(a){var b,c,d,e,f;if(a.length){if(this.result_clear_highlight(),this.result_highlight=a,this.result_highlight.addClass("highlighted"),d=parseInt(this.search_results.css("maxHeight"),10),f=this.search_results.scrollTop(),e=d+f,c=this.result_highlight.position().top+this.search_results.scrollTop(),b=c+this.result_highlight.outerHeight(),b>=e)return this.search_results.scrollTop(b-d>0?b-d:0);if(f>c)return this.search_results.scrollTop(c)}},Chosen.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},Chosen.prototype.results_show=function(){return this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.container.addClass("chosen-with-drop"),this.form_field_jq.trigger("chosen:showing_dropdown",{chosen:this}),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.search_field.val()),this.winnow_results())},Chosen.prototype.update_results_content=function(a){return this.search_results.html(a)},Chosen.prototype.results_hide=function(){return this.results_showing&&(this.result_clear_highlight(),this.container.removeClass("chosen-with-drop"),this.form_field_jq.trigger("chosen:hiding_dropdown",{chosen:this})),this.results_showing=!1},Chosen.prototype.set_tab_index=function(){var a;return this.form_field.tabIndex?(a=this.form_field.tabIndex,this.form_field.tabIndex=-1,this.search_field[0].tabIndex=a):void 0},Chosen.prototype.set_label_behavior=function(){var b=this;return this.form_field_label=this.form_field_jq.parents("label"),!this.form_field_label.length&&this.form_field.id.length&&(this.form_field_label=a("label[for='"+this.form_field.id+"']")),this.form_field_label.length>0?this.form_field_label.bind("click.chosen",function(a){return b.is_multiple?b.container_mousedown(a):b.activate_field()}):void 0},Chosen.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices_count()<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},Chosen.prototype.search_results_mouseup=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c.length?(this.result_highlight=c,this.result_select(b),this.search_field.focus()):void 0},Chosen.prototype.search_results_mouseover=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c?this.result_do_highlight(c):void 0},Chosen.prototype.search_results_mouseout=function(b){return a(b.target).hasClass("active-result")?this.result_clear_highlight():void 0},Chosen.prototype.choice_build=function(b){var c,d,e=this;return c=a("<li />",{"class":"search-choice"}).html("<span>"+b.html+"</span>"),b.disabled?c.addClass("search-choice-disabled"):(d=a("<a />",{"class":"search-choice-close","data-option-array-index":b.array_index}),d.bind("click.chosen",function(a){return e.choice_destroy_link_click(a)}),c.append(d)),this.search_container.before(c)},Chosen.prototype.choice_destroy_link_click=function(b){return b.preventDefault(),b.stopPropagation(),this.is_disabled?void 0:this.choice_destroy(a(b.target))},Chosen.prototype.choice_destroy=function(a){return this.result_deselect(a[0].getAttribute("data-option-array-index"))?(this.show_search_field_default(),this.is_multiple&&this.choices_count()>0&&this.search_field.val().length<1&&this.results_hide(),a.parents("li").first().remove(),this.search_field_scale()):void 0},Chosen.prototype.results_reset=function(){return this.form_field.options[0].selected=!0,this.selected_option_count=null,this.single_set_selected_text(),this.show_search_field_default(),this.results_reset_cleanup(),this.form_field_jq.trigger("change"),this.active_field?this.results_hide():void 0},Chosen.prototype.results_reset_cleanup=function(){return this.current_selectedIndex=this.form_field.selectedIndex,this.selected_item.find("abbr").remove()},Chosen.prototype.result_select=function(a){var b,c,d;return this.result_highlight?(b=this.result_highlight,this.result_clear_highlight(),this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.is_multiple?b.removeClass("active-result"):(this.result_single_selected&&(this.result_single_selected.removeClass("result-selected"),d=this.result_single_selected[0].getAttribute("data-option-array-index"),this.results_data[d].selected=!1),this.result_single_selected=b),b.addClass("result-selected"),c=this.results_data[b[0].getAttribute("data-option-array-index")],c.selected=!0,this.form_field.options[c.options_index].selected=!0,this.selected_option_count=null,this.is_multiple?this.choice_build(c):this.single_set_selected_text(c.text),(a.metaKey||a.ctrlKey)&&this.is_multiple||this.results_hide(),this.search_field.val(""),(this.is_multiple||this.form_field.selectedIndex!==this.current_selectedIndex)&&this.form_field_jq.trigger("change",{selected:this.form_field.options[c.options_index].value}),this.current_selectedIndex=this.form_field.selectedIndex,this.search_field_scale())):void 0},Chosen.prototype.single_set_selected_text=function(a){return null==a&&(a=this.default_text),a===this.default_text?this.selected_item.addClass("chosen-default"):(this.single_deselect_control_build(),this.selected_item.removeClass("chosen-default")),this.selected_item.find("span").text(a)},Chosen.prototype.result_deselect=function(a){var b;return b=this.results_data[a],this.form_field.options[b.options_index].disabled?!1:(b.selected=!1,this.form_field.options[b.options_index].selected=!1,this.selected_option_count=null,this.result_clear_highlight(),this.results_showing&&this.winnow_results(),this.form_field_jq.trigger("change",{deselected:this.form_field.options[b.options_index].value}),this.search_field_scale(),!0)},Chosen.prototype.single_deselect_control_build=function(){return this.allow_single_deselect?(this.selected_item.find("abbr").length||this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'),this.selected_item.addClass("chosen-single-with-deselect")):void 0},Chosen.prototype.get_search_text=function(){return this.search_field.val()===this.default_text?"":a("<div/>").text(a.trim(this.search_field.val())).html()},Chosen.prototype.winnow_results_set_highlight=function(){var a,b;return b=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),a=b.length?b.first():this.search_results.find(".active-result").first(),null!=a?this.result_do_highlight(a):void 0},Chosen.prototype.no_results=function(b){var c;return c=a('<li class="no-results">'+this.results_none_found+' "<span></span>"</li>'),c.find("span").first().html(b),this.search_results.append(c)},Chosen.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},Chosen.prototype.keydown_arrow=function(){var a;return this.results_showing&&this.result_highlight?(a=this.result_highlight.nextAll("li.active-result").first())?this.result_do_highlight(a):void 0:this.results_show()},Chosen.prototype.keyup_arrow=function(){var a;return this.results_showing||this.is_multiple?this.result_highlight?(a=this.result_highlight.prevAll("li.active-result"),a.length?this.result_do_highlight(a.first()):(this.choices_count()>0&&this.results_hide(),this.result_clear_highlight())):void 0:this.results_show()},Chosen.prototype.keydown_backstroke=function(){var a;return this.pending_backstroke?(this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke()):(a=this.search_container.siblings("li.search-choice").last(),a.length&&!a.hasClass("search-choice-disabled")?(this.pending_backstroke=a,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")):void 0)},Chosen.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},Chosen.prototype.keydown_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),8!==b&&this.pending_backstroke&&this.clear_backstroke(),b){case 8:this.backstroke_length=this.search_field.val().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(a),this.mouse_on_container=!1;break;case 13:a.preventDefault();break;case 38:a.preventDefault(),this.keyup_arrow();break;case 40:a.preventDefault(),this.keydown_arrow()}},Chosen.prototype.search_field_scale=function(){var b,c,d,e,f,g,h,i,j;if(this.is_multiple){for(d=0,h=0,f="position:absolute; left: -1000px; top: -1000px; display:none;",g=["font-size","font-style","font-weight","font-family","line-height","text-transform","letter-spacing"],i=0,j=g.length;j>i;i++)e=g[i],f+=e+":"+this.search_field.css(e)+";";return b=a("<div />",{style:f}),b.text(this.search_field.val()),a("body").append(b),h=b.width()+25,b.remove(),c=this.container.outerWidth(),h>c-10&&(h=c-10),this.search_field.css({width:h+"px"})}},Chosen}(AbstractChosen)}.call(this);
    /**
     * jGrowl 1.2.12
     *
     * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
     * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
     *
     * Written by Stan Lemon <stosh1985@gmail.com>
     * Last updated: 2013.02.14
     *
     * jGrowl is a jQuery plugin implementing unobtrusive userland notifications.  These
     * notifications function similarly to the Growl Framework available for
     * Mac OS X (http://growl.info).
     *
     * To Do:
     * - Move library settings to containers and allow them to be changed per container
     *
     * Changes in 1.2.13
     * - Fixed clearing interval when the container shuts down
     *
     * Changes in 1.2.12
     * - Added compressed versions using UglifyJS and Sqwish
     * - Improved README with configuration options explanation
     * - Added a source map
     *
     * Changes in 1.2.11
     * - Fix artifacts left behind by the shutdown method and text-cleanup
     *
     * Changes in 1.2.10
     * - Fix beforeClose to be called in click event
     *
     * Changes in 1.2.9
     * - Fixed BC break in jQuery 2.0 beta
     *
     * Changes in 1.2.8
     * - Fixes for jQuery 1.9 and the MSIE6 check, note that with jQuery 2.0 support
     *   jGrowl intends to drop support for IE6 altogether
     *
     * Changes in 1.2.6
     * - Fixed js error when a notification is opening and closing at the same time
     *
     * Changes in 1.2.5
     * - Changed wrapper jGrowl's options usage to "o" instead of $.jGrowl.defaults
     * - Added themeState option to control 'highlight' or 'error' for jQuery UI
     * - Ammended some CSS to provide default positioning for nested usage.
     * - Changed some CSS to be prefixed with jGrowl- to prevent namespacing issues
     * - Added two new options - openDuration and closeDuration to allow
     *   better control of notification open and close speeds, respectively
     *   Patch contributed by Jesse Vincet.
     * - Added afterOpen callback.  Patch contributed by Russel Branca.
     *
     * Changes in 1.2.4
     * - Fixed IE bug with the close-all button
     * - Fixed IE bug with the filter CSS attribute (special thanks to gotwic)
     * - Update IE opacity CSS
     * - Changed font sizes to use "em", and only set the base style
     *
     * Changes in 1.2.3
     * - The callbacks no longer use the container as context, instead they use the actual notification
     * - The callbacks now receive the container as a parameter after the options parameter
     * - beforeOpen and beforeClose now check the return value, if it's false - the notification does
     *   not continue.  The open callback will also halt execution if it returns false.
     * - Fixed bug where containers would get confused
     * - Expanded the pause functionality to pause an entire container.
     *
     * Changes in 1.2.2
     * - Notification can now be theme rolled for jQuery UI, special thanks to Jeff Chan!
     *
     * Changes in 1.2.1
     * - Fixed instance where the interval would fire the close method multiple times.
     * - Added CSS to hide from print media
     * - Fixed issue with closer button when div { position: relative } is set
     * - Fixed leaking issue with multiple containers.  Special thanks to Matthew Hanlon!
     *
     * Changes in 1.2.0
     * - Added message pooling to limit the number of messages appearing at a given time.
     * - Closing a notification is now bound to the notification object and triggered by the close button.
     *
     * Changes in 1.1.2
     * - Added iPhone styled example
     * - Fixed possible IE7 bug when determining if the ie6 class shoudl be applied.
     * - Added template for the close button, so that it's content could be customized.
     *
     * Changes in 1.1.1
     * - Fixed CSS styling bug for ie6 caused by a mispelling
     * - Changes height restriction on default notifications to min-height
     * - Added skinned examples using a variety of images
     * - Added the ability to customize the content of the [close all] box
     * - Added jTweet, an example of using jGrowl + Twitter
     *
     * Changes in 1.1.0
     * - Multiple container and instances.
     * - Standard $.jGrowl() now wraps $.fn.jGrowl() by first establishing a generic jGrowl container.
     * - Instance methods of a jGrowl container can be called by $.fn.jGrowl(methodName)
     * - Added glue preferenced, which allows notifications to be inserted before or after nodes in the container
     * - Added new log callback which is called before anything is done for the notification
     * - Corner's attribute are now applied on an individual notification basis.
     *
     * Changes in 1.0.4
     * - Various CSS fixes so that jGrowl renders correctly in IE6.
     *
     * Changes in 1.0.3
     * - Fixed bug with options persisting across notifications
     * - Fixed theme application bug
     * - Simplified some selectors and manipulations.
     * - Added beforeOpen and beforeClose callbacks
     * - Reorganized some lines of code to be more readable
     * - Removed unnecessary this.defaults context
     * - If corners plugin is present, it's now customizable.
     * - Customizable open animation.
     * - Customizable close animation.
     * - Customizable animation easing.
     * - Added customizable positioning (top-left, top-right, bottom-left, bottom-right, center)
     *
     * Changes in 1.0.2
     * - All CSS styling is now external.
     * - Added a theme parameter which specifies a secondary class for styling, such
     *   that notifications can be customized in appearance on a per message basis.
     * - Notification life span is now customizable on a per message basis.
     * - Added the ability to disable the global closer, enabled by default.
     * - Added callbacks for when a notification is opened or closed.
     * - Added callback for the global closer.
     * - Customizable animation speed.
     * - jGrowl now set itself up and tears itself down.
     *
     * Changes in 1.0.1:
     * - Removed dependency on metadata plugin in favor of .data()
     * - Namespaced all events
     */
    
    (function($) {
        /** Compatibility holdover for 1.9 to check IE6 **/
        var $ie6 = (function(){
            return false === $.support.boxModel && $.support.objectAll && $.support.leadingWhitespace;
        })();
    
        /** jGrowl Wrapper - Establish a base jGrowl Container for compatibility with older releases. **/
        $.jGrowl = function( m , o ) {
            // To maintain compatibility with older version that only supported one instance we'll create the base container.
            if ( $('#jGrowl').size() == 0 )
                $('<div id="jGrowl"></div>').addClass( (o && o.position) ? o.position : $.jGrowl.defaults.position ).appendTo('body');
    
            // Create a notification on the container.
            $('#jGrowl').jGrowl(m,o);
        };
    
    
        /** Raise jGrowl Notification on a jGrowl Container **/
        $.fn.jGrowl = function( m , o ) {
            if ( $.isFunction(this.each) ) {
                var args = arguments;
    
                return this.each(function() {
                    /** Create a jGrowl Instance on the Container if it does not exist **/
                    if ( $(this).data('jGrowl.instance') == undefined ) {
                        $(this).data('jGrowl.instance', $.extend( new $.fn.jGrowl(), { notifications: [], element: null, interval: null } ));
                        $(this).data('jGrowl.instance').startup( this );
                    }
    
                    /** Optionally call jGrowl instance methods, or just raise a normal notification **/
                    if ( $.isFunction($(this).data('jGrowl.instance')[m]) ) {
                        $(this).data('jGrowl.instance')[m].apply( $(this).data('jGrowl.instance') , $.makeArray(args).slice(1) );
                    } else {
                        $(this).data('jGrowl.instance').create( m , o );
                    }
                });
            };
        };
    
        $.extend( $.fn.jGrowl.prototype , {
    
            /** Default JGrowl Settings **/
            defaults: {
                pool:				0,
                header:				'',
                group:				'',
                sticky:				false,
                position: 			'top-right',
                glue:				'after',
                theme:				'default',
                themeState:			'highlight',
                corners:			'10px',
                check:				250,
                life:				3000,
                closeDuration: 		'normal',
                openDuration: 		'normal',
                easing: 			'swing',
                closer: 			true,
                closeTemplate: 		'&times;',
                closerTemplate: 	'<div>Закрыть все</div>',
                log:				function() {},
                beforeOpen:			function() {},
                afterOpen:			function() {},
                open:				function() {},
                beforeClose: 		function() {},
                close:				function() {},
                animateOpen: 		{
                    opacity:	 'show'
                },
                animateClose: 		{
                    opacity:	 'hide'
                }
            },
    
            notifications: [],
    
            /** jGrowl Container Node **/
            element:	 null,
    
            /** Interval Function **/
            interval:   null,
    
            /** Create a Notification **/
            create:	 function( message , o ) {
                var o = $.extend({}, this.defaults, o);
    
                /* To keep backward compatibility with 1.24 and earlier, honor 'speed' if the user has set it */
                if (typeof o.speed !== 'undefined') {
                    o.openDuration = o.speed;
                    o.closeDuration = o.speed;
                }
    
                this.notifications.push({ message: message , options: o });
    
                o.log.apply( this.element , [this.element,message,o] );
            },
    
            render:		 function( notification ) {
                var self = this;
                var message = notification.message;
                var o = notification.options;
    
                // Support for jQuery theme-states, if this is not used it displays a widget header
                o.themeState = (o.themeState == '') ? '' : 'ui-state-' + o.themeState;
    
                var notification = $('<div/>')
                    .addClass('jGrowl-notification ' + o.themeState + ' ui-corner-all' + ((o.group != undefined && o.group != '') ? ' ' + o.group : ''))
                    .append($('<div/>').addClass('jGrowl-close').html(o.closeTemplate))
                    .append($('<div/>').addClass('jGrowl-header').html(o.header))
                    .append($('<div/>').addClass('jGrowl-message').html(message))
                    .data("jGrowl", o).addClass(o.theme).children('div.jGrowl-close').bind("click.jGrowl", function() {
                        $(this).parent().trigger('jGrowl.beforeClose');
                    })
                    .parent();
    
    
                /** Notification Actions **/
                $(notification).bind("mouseover.jGrowl", function() {
                    $('div.jGrowl-notification', self.element).data("jGrowl.pause", true);
                }).bind("mouseout.jGrowl", function() {
                    $('div.jGrowl-notification', self.element).data("jGrowl.pause", false);
                }).bind('jGrowl.beforeOpen', function() {
                    if ( o.beforeOpen.apply( notification , [notification,message,o,self.element] ) !== false ) {
                        $(this).trigger('jGrowl.open');
                    }
                }).bind('jGrowl.open', function() {
                    if ( o.open.apply( notification , [notification,message,o,self.element] ) !== false ) {
                        if ( o.glue == 'after' ) {
                            $('div.jGrowl-notification:last', self.element).after(notification);
                        } else {
                            $('div.jGrowl-notification:first', self.element).before(notification);
                        }
    
                        $(this).animate(o.animateOpen, o.openDuration, o.easing, function() {
                            // Fixes some anti-aliasing issues with IE filters.
                            if ($.support.opacity === false)
                                this.style.removeAttribute('filter');
    
                            if ( $(this).data("jGrowl") !== null ) // Happens when a notification is closing before it's open.
                                $(this).data("jGrowl").created = new Date();
    
                            $(this).trigger('jGrowl.afterOpen');
                        });
                    }
                }).bind('jGrowl.afterOpen', function() {
                    o.afterOpen.apply( notification , [notification,message,o,self.element] );
                }).bind('jGrowl.beforeClose', function() {
                    if ( o.beforeClose.apply( notification , [notification,message,o,self.element] ) !== false )
                        $(this).trigger('jGrowl.close');
                }).bind('jGrowl.close', function() {
                    // Pause the notification, lest during the course of animation another close event gets called.
                    $(this).data('jGrowl.pause', true);
                    $(this).animate(o.animateClose, o.closeDuration, o.easing, function() {
                        if ( $.isFunction(o.close) ) {
                            if ( o.close.apply( notification , [notification,message,o,self.element] ) !== false )
                                $(this).remove();
                        } else {
                            $(this).remove();
                        }
                    });
                }).trigger('jGrowl.beforeOpen');
    
                /** Optional Corners Plugin **/
                if ( o.corners != '' && $.fn.corner != undefined ) $(notification).corner( o.corners );
    
                /** Add a Global Closer if more than one notification exists **/
                if ( $('div.jGrowl-notification:parent', self.element).size() > 1 &&
                     $('div.jGrowl-closer', self.element).size() == 0 && this.defaults.closer !== false ) {
                    $(this.defaults.closerTemplate).addClass('jGrowl-closer ' + this.defaults.themeState + ' ui-corner-all').addClass(this.defaults.theme)
                        .appendTo(self.element).animate(this.defaults.animateOpen, this.defaults.speed, this.defaults.easing)
                        .bind("click.jGrowl", function() {
                            $(this).siblings().trigger("jGrowl.beforeClose");
    
                            if ( $.isFunction( self.defaults.closer ) ) {
                                self.defaults.closer.apply( $(this).parent()[0] , [$(this).parent()[0]] );
                            }
                        });
                };
            },
    
            /** Update the jGrowl Container, removing old jGrowl notifications **/
            update:	 function() {
                $(this.element).find('div.jGrowl-notification:parent').each( function() {
                    if ( $(this).data("jGrowl") != undefined && $(this).data("jGrowl").created !== undefined &&
                         ($(this).data("jGrowl").created.getTime() + parseInt($(this).data("jGrowl").life))  < (new Date()).getTime() &&
                         $(this).data("jGrowl").sticky !== true &&
                         ($(this).data("jGrowl.pause") == undefined || $(this).data("jGrowl.pause") !== true) ) {
    
                        // Pause the notification, lest during the course of animation another close event gets called.
                        $(this).trigger('jGrowl.beforeClose');
                    }
                });
    
                if ( this.notifications.length > 0 &&
                     (this.defaults.pool == 0 || $(this.element).find('div.jGrowl-notification:parent').size() < this.defaults.pool) )
                    this.render( this.notifications.shift() );
    
                if ( $(this.element).find('div.jGrowl-notification:parent').size() < 2 ) {
                    $(this.element).find('div.jGrowl-closer').animate(this.defaults.animateClose, this.defaults.speed, this.defaults.easing, function() {
                        $(this).remove();
                    });
                }
            },
    
            /** Setup the jGrowl Notification Container **/
            startup:	function(e) {
                this.element = $(e).addClass('jGrowl').append('<div class="jGrowl-notification"></div>');
                this.interval = setInterval( function() {
                    $(e).data('jGrowl.instance').update();
                }, parseInt(this.defaults.check));
    
                if ($ie6) {
                    $(this.element).addClass('ie6');
                }
            },
    
            /** Shutdown jGrowl, removing it and clearing the interval **/
            shutdown:   function() {
                $(this.element).removeClass('jGrowl')
                    .find('div.jGrowl-notification').trigger('jGrowl.close')
                    .parent().empty()
    
                clearInterval(this.interval);
            },
    
            close:	 function() {
                $(this.element).find('div.jGrowl-notification').each(function(){
                    $(this).trigger('jGrowl.beforeClose');
                });
            }
        });
    
        /** Reference the Defaults Object for compatibility with older versions of jGrowl **/
        $.jGrowl.defaults = $.fn.jGrowl.prototype.defaults;
    
    })(jQuery);
    /*!
        Autosize v1.18.1 - 2013-11-05
        Automatically adjust textarea height based on user input.
        (c) 2013 Jack Moore - http://www.jacklmoore.com/autosize
        license: http://www.opensource.org/licenses/mit-license.php
    */
    
    (function(e){var t,o={className:"autosizejs",append:"",callback:!1,resizeDelay:10},i='<textarea tabindex="-1" style="position:absolute; top:-999px; left:0; right:auto; bottom:auto; border:0; padding: 0; -moz-box-sizing:content-box; -webkit-box-sizing:content-box; box-sizing:content-box; word-wrap:break-word; height:0 !important; min-height:0 !important; overflow:hidden; transition:none; -webkit-transition:none; -moz-transition:none;"/>',n=["fontFamily","fontSize","fontWeight","fontStyle","letterSpacing","textTransform","wordSpacing","textIndent"],s=e(i).data("autosize",!0)[0];s.style.lineHeight="99px","99px"===e(s).css("lineHeight")&&n.push("lineHeight"),s.style.lineHeight="",e.fn.autosize=function(i){return this.length?(i=e.extend({},o,i||{}),s.parentNode!==document.body&&e(document.body).append(s),this.each(function(){function o(){var t,o;"getComputedStyle"in window?(t=window.getComputedStyle(u,null),o=u.getBoundingClientRect().width,e.each(["paddingLeft","paddingRight","borderLeftWidth","borderRightWidth"],function(e,i){o-=parseInt(t[i],10)}),s.style.width=o+"px"):s.style.width=Math.max(p.width(),0)+"px"}function a(){var a={};if(t=u,s.className=i.className,d=parseInt(p.css("maxHeight"),10),e.each(n,function(e,t){a[t]=p.css(t)}),e(s).css(a),o(),window.chrome){var r=u.style.width;u.style.width="0px",u.offsetWidth,u.style.width=r}}function r(){var e,n;t!==u?a():o(),s.value=u.value+i.append,s.style.overflowY=u.style.overflowY,n=parseInt(u.style.height,10),s.scrollTop=0,s.scrollTop=9e4,e=s.scrollTop,d&&e>d?(u.style.overflowY="scroll",e=d):(u.style.overflowY="hidden",c>e&&(e=c)),e+=w,n!==e&&(u.style.height=e+"px",f&&i.callback.call(u,u))}function l(){clearTimeout(h),h=setTimeout(function(){var e=p.width();e!==g&&(g=e,r())},parseInt(i.resizeDelay,10))}var d,c,h,u=this,p=e(u),w=0,f=e.isFunction(i.callback),z={height:u.style.height,overflow:u.style.overflow,overflowY:u.style.overflowY,wordWrap:u.style.wordWrap,resize:u.style.resize},g=p.width();p.data("autosize")||(p.data("autosize",!0),("border-box"===p.css("box-sizing")||"border-box"===p.css("-moz-box-sizing")||"border-box"===p.css("-webkit-box-sizing"))&&(w=p.outerHeight()-p.height()),c=Math.max(parseInt(p.css("minHeight"),10)-w||0,p.height()),p.css({overflow:"hidden",overflowY:"hidden",wordWrap:"break-word",resize:"none"===p.css("resize")||"vertical"===p.css("resize")?"none":"horizontal"}),"onpropertychange"in u?"oninput"in u?p.on("input.autosize keyup.autosize",r):p.on("propertychange.autosize",function(){"value"===event.propertyName&&r()}):p.on("input.autosize",r),i.resizeDelay!==!1&&e(window).on("resize.autosize",l),p.on("autosize.resize",r),p.on("autosize.resizeIncludeStyle",function(){t=null,r()}),p.on("autosize.destroy",function(){t=null,clearTimeout(h),e(window).off("resize",l),p.off("autosize").off(".autosize").css(z).removeData("autosize")}),r())})):this}})(window.jQuery||window.$);
    /*
     * jQuery Textarea Characters Counter Plugin v 2.0
     * Examples and documentation at: http://roy-jin.appspot.com/jsp/textareaCounter.jsp
     * Copyright (c) 2010 Roy Jin
     * Version: 2.0 (11-JUN-2010)
     * Dual licensed under the MIT and GPL licenses:
     * http://www.opensource.org/licenses/mit-license.php
     * http://www.gnu.org/licenses/gpl.html
     * Requires: jQuery v1.4.2 or later
     */
    
    
    (function($){
        $.fn.textareaCount = function(options, fn) {
            var defaults = {
                maxCharacterSize: -1,
                originalStyle: ' ',
                warningStyle: 'warningTextareaInfo',
                warningNumber: 20,
                displayFormat: '#input characters | #words words'
            };
            var options = $.extend(defaults, options);
    
            var container = $(this);
    
            $("<small class='field__counter'>&nbsp;</small>").insertAfter(container);
    
            //create charleft css
            var charLeftCss = {
                'visibility' : 'visible'
            };
    
            var charLeftInfo = getNextCharLeftInformation(container);
            charLeftInfo.addClass(options.originalStyle);
    
            var numInput = 0;
            var maxCharacters = options.maxCharacterSize;
            var numLeft = 0;
            var numWords = 0;
    
            $(document).on('keyup', container, function(event){limitTextAreaByCharacterCount(); charLeftInfo.css(charLeftCss);})
                     .on('mouseover', container, function(event){setTimeout(function(){limitTextAreaByCharacterCount();}, 10);})
                     .on('paste', container, function(event){setTimeout(function(){limitTextAreaByCharacterCount();}, 10); charLeftInfo.css(charLeftCss);});
    
    
            function limitTextAreaByCharacterCount(){
                charLeftInfo.html(countByCharacters());
                //function call back
                if(typeof fn != 'undefined'){
                    fn.call(this, getInfo());
                }
                return true;
            }
    
            function countByCharacters(){
                var content = container.val();
                var contentLength = content.length;
    
                //Start Cut
                if(options.maxCharacterSize > 0){
                    //If copied content is already more than maxCharacterSize, chop it to maxCharacterSize.
                    if(contentLength >= options.maxCharacterSize) {
                        content = content.substring(0, options.maxCharacterSize);
                    }
    
                    var newlineCount = getNewlineCount(content);
    
                    // newlineCount new line character. For windows, it occupies 2 characters
                    var systemmaxCharacterSize = options.maxCharacterSize - newlineCount;
                    if (!isWin()){
                         systemmaxCharacterSize = options.maxCharacterSize
                    }
                    if(contentLength > systemmaxCharacterSize){
                        //avoid scroll bar moving
                        var originalScrollTopPosition = this.scrollTop;
                        container.val(content.substring(0, systemmaxCharacterSize));
                        this.scrollTop = originalScrollTopPosition;
                    }
                    charLeftInfo.removeClass(options.warningStyle);
                    if(systemmaxCharacterSize - contentLength <= options.warningNumber){
                        charLeftInfo.addClass(options.warningStyle);
                    }
    
                    numInput = container.val().length + newlineCount;
    
                    if(!isWin()){
                        numInput = container.val().length;
                    }
    
                    numWords = countWord(getCleanedWordString(container.val()));
    
                    numLeft = maxCharacters - numInput;
                } else {
                    //normal count, no cut
                    var newlineCount = getNewlineCount(content);
                    numInput = container.val().length + newlineCount;
                    if(!isWin()){
                        numInput = container.val().length;
                    }
                    numWords = countWord(getCleanedWordString(container.val()));
                }
    
                return formatDisplayInfo();
            }
    
            function formatDisplayInfo(){
                var format = options.displayFormat;
                format = format.replace('#input', numInput);
                format = format.replace('#words', numWords);
                //When maxCharacters <= 0, #max, #left cannot be substituted.
                if(maxCharacters > 0){
                    format = format.replace('#max', maxCharacters);
                    format = format.replace('#left', numLeft);
                }
                return format;
            }
    
            function getInfo(){
                var info = {
                    input: numInput,
                    max: maxCharacters,
                    left: numLeft,
                    words: numWords
                };
                return info;
            }
    
            function getNextCharLeftInformation(container){
                    return container.next('.field__counter');
            }
    
            function isWin(){
                var strOS = navigator.appVersion;
                if (strOS.toLowerCase().indexOf('win') != -1){
                    return true;
                }
                return false;
            }
    
            function getNewlineCount(content){
                var newlineCount = 0;
                for(var i=0; i<content.length;i++){
                    if(content.charAt(i) == '\n'){
                        newlineCount++;
                    }
                }
                return newlineCount;
            }
    
            function getCleanedWordString(content){
                var fullStr = content + " ";
                var initial_whitespace_rExp = /^[^A-Za-z0-9]+/gi;
                var left_trimmedStr = fullStr.replace(initial_whitespace_rExp, "");
                var non_alphanumerics_rExp = rExp = /[^A-Za-z0-9]+/gi;
                var cleanedStr = left_trimmedStr.replace(non_alphanumerics_rExp, " ");
                var splitString = cleanedStr.split(" ");
                return splitString;
            }
    
            function countWord(cleanedWordString){
                var word_count = cleanedWordString.length-1;
                return word_count;
            }
        };
    })(jQuery);
    jQuery(function() {
    
      return $('#new_project_item').fileupload({
        dataType: 'json',
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
        previewSourceFileTypes: /^image\/(gif|jpeg|png)$/,
        limitMultiFileUploads: 3,
        limitConcurrentUploads: 3,
        dropZone: $('#project_project_attachments'),
        add: function(e, data) {
          var file, types;
          //console.log('add', data, e);
          //types = /(\.|\/)(gif|jpe?g|png|dmg)$/i;
          file = data.files[0];
    
          if (file.size < 26214400 ) {
            data.context = $(tmpl("template-upload", file));
            $('#files_list').append(data.context);
            return data.submit();
          } else {
            file.error_text = 'Файл больше 25 Mb'
            data.context = $(tmpl("template-fail", file));
            $('#files_list').append(data.context);
            return false;
          }
        },
        progress: function(e, data) {
          var progress;
          if (data.context) {
            progress = parseInt(data.loaded / data.total * 100, 10);
            return data.context.find('.bar').css('width', progress + '%');
          }
        },
        done: function(e, data) {
          //console.log('DONE', data)
          if (data.result.status == 'success'){
            data.result.name = data.files[0].name;
            data.context.replaceWith(tmpl("template-success", data.result));
          }else{
            data.result.name = data.files[0].name;
            data.context.replaceWith(tmpl("template-fail", data.result));
          }
          updateProjectImagesPosition()
        },
        fail: function(e, data) {
          var file = data.files[0];
          data.context.replaceWith(tmpl("template-fail", file));
          //return console.log('fail', data, e);
          updateProjectImagesPosition()
        }
      });
    });
    
    function updateProjectImagesPosition () {
      var ids = getProjectImagePosition()
      var hiddenFileds = ids.map(function (id){
        return $('<input type="hidden" name="project[project_attachment_ids][]">').val(id)
      })
      $('.items_position_hidden_fields').html(hiddenFileds)
    }
    function getProjectImagePosition () {
      var ids = $('.project_attachments .files-list__item_project').map(function(item) {
        return $(this).attr('data-id')
      })
      return $.makeArray( ids )
    }
    
    $(document).on('ready', function(){
      if ($('.files-list_project_images').length === 0) return
    
      updateProjectImagesPosition()
    
      $('.files-list_project_images').sortable({
        items: '> .files-list__item_project',
        cancel: "a,button",
        containment: "parent",
        forceHelperSize: true,
        forcePlaceholderSize: true,
        helper: "clone",
        update: function ( event, ui ) {
          updateProjectImagesPosition()
        }
      });
    })
    
    function updateProjectsPositions(id) {
      var ids = getProjectsPositions(id);
      var url = $('#' + id).data('url');
      if (!url) { return false; }
    
      clearTimeout(window.projectUpdatesTimeout);
    
      window.projectUpdatesTimeout = setTimeout(function() {
        $.ajax({
          method: 'post',
          url: url,
          data: {ids: ids},
          dataType: 'script'
        })
      }, 1000);
    }
    function getProjectsPositions (id) {
      var ids = $('#' + id).find('.project_item').map(function(item) {
        return $(this).attr('data-id')
      })
      return $.makeArray( ids )
    }
    $(document).on('ready', function(){
      if ($('.sortable_container').length === 0) return
      window.projectUpdatesTimeout;
    
      $('.sortable_container .projects_grid').map(function (i, el) {
        new Sortable($(el)[0], {
          filter: ".project_item_more",
          dragClass: "ui-sortable-helper",
          onStart: function (evt) {
            var wrapper = $(evt.to);
            wrapper.find('.projects_grid .project_item').addClass('sortable-active');
            wrapper.find('.project_item_more').addClass('hidden');
          },
          onEnd: function (evt) {
            var wrapper = $(evt.to);
            wrapper.find('.projects_grid .project_item').removeClass('sortable-active');
            wrapper.find('.project_item_more').appendTo($('.project_item_more').parent());
            wrapper.find('.project_item_more').removeClass('hidden');
          },
          onUpdate: function (evt) {
            var wrapper = $(evt.to).closest('.sortable_container');
            updateProjectsPositions(wrapper.attr('id'));
          }
        });
      });
    })
    
    $(document).on('drop dragover', '#new_project_item #project_project_attachments', function(e) {
      return e.preventDefault();
    });
    
    $(document).on('dragover', '#new_project_item #project_project_attachments', function(e) {
      var dropZone = $(this);
      var timeout = window.dropZoneTimeout;
      if (!timeout) {
        dropZone.addClass('in');
      } else {
        clearTimeout(timeout);
      }
      if (e.target === dropZone[0]) {
        dropZone.addClass('hover');
      } else {
        dropZone.removeClass('hover');
      }
      return window.dropZoneTimeout = setTimeout(function() {
        window.dropZoneTimeout = null;
        return dropZone.removeClass('in hover');
      }, 100);
    });
    
    
    
    /// thumbnail
    jQuery(function() {
    
      return $('#new_project_thumbnail').fileupload({
        dataType: 'json',
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
        previewSourceFileTypes: /^image\/(gif|jpeg|png)$/,
        limitMultiFileUploads: 1,
        limitConcurrentUploads: 1,
        dropZone: $('#project_project_thumbnail'),
        add: function(e, data) {
          var file, types;
          //console.log('add', data, e);
          //types = /(\.|\/)(gif|jpe?g|png|dmg)$/i;
          file = data.files[0];
    
          if (file.size < 26214400 ) {
            data.context = $(tmpl("template-upload-thumbnail", file));
            $('#thumbnails_list').html(data.context);
            return data.submit();
          } else {
            file.error_text = 'Файл больше 25 Mb'
            data.context = $(tmpl("template-fail-thumbnail", file));
            $('#thumbnails_list').html(data.context);
            return false;
          }
        },
        progress: function(e, data) {
          var progress;
          if (data.context) {
            progress = parseInt(data.loaded / data.total * 100, 10);
            return data.context.find('.bar').css('width', progress + '%');
          }
        },
        done: function(e, data) {
          if (data.result.status == 'success'){
            data.result.name = data.files[0].name;
            data.context.replaceWith(tmpl("template-success-thumbnail", data.result));
    
            $('#project_project_preview_attachment_id').val(data.result.file_id);
            $('#blog_post_blog_post_attachment_id').val(data.result.file_id);
          }else{
            data.result.name = data.files[0].name;
            data.context.replaceWith(tmpl("template-fail-thumbnail", data.result));
          }
        },
        fail: function(e, data) {
          var file = data.files[0];
          data.context.replaceWith(tmpl("template-fail-thumbnail", file));
        }
      });
    });
    
    
    $(document).on('drop dragover', '#new_project_thumbnail #project_project_thumbnail', function(e) {
      return e.preventDefault();
    });
    
    $(document).on('dragover', '#new_project_thumbnail #project_project_thumbnail', function(e) {
      var dropZone = $(this);
      var timeout = window.dropZoneTimeout;
      if (!timeout) {
        dropZone.addClass('in');
      } else {
        clearTimeout(timeout);
      }
      if (e.target === dropZone[0]) {
        dropZone.addClass('hover');
      } else {
        dropZone.removeClass('hover');
      }
      return window.dropZoneTimeout = setTimeout(function() {
        window.dropZoneTimeout = null;
        return dropZone.removeClass('in hover');
      }, 100);
    });
    $(document).ready(function(){
    
    
      // Отправка задисейбленной формы
      $(document).on('keyup change blur', '.form_response textarea', toggleSubmitButton)
      $(document).on('keyup change blur', '.form_response-comments textarea', toggleSubmitButton)
    
      function toggleSubmitButton () {
    
        var textarea = $(this)
        var form = $(this).closest('form')
        var button = form.find('button')
        var disabled = !textarea.val().length
    
        console.log('disabled: ', disabled)
    
        button.attr('disabled', disabled)
      }
    
      // чекер
      $('.comments_list .title_center .checker').click(function(){
        if( $(this).hasClass('checked') ){
          $(this).removeClass('checked').attr('title', 'Показать только отмеченные отклики')
          $('#task_comments_list .comments .comment').show()
          $('#task_comments_list .comments .empty').remove()
        }else{
          $(this).addClass('checked').attr('title', 'Показать все отклики')
          $('#task_comments_list .comments .comment').hide()
          $('#task_comments_list .comments .comment.favorited').show()
          if( $('#task_comments_list .comments .comment.favorited').size() == 0){
            $('#task_comments_list .comments').append('<div class="empty">У вас нет отмеченных откликов в этом заказе</div>');
          }
    
        }
      })
    })
    
    
    function edit_comment(task_comment_id){
    
      var comment_form = $('.js-form_response')
    
      // скрыть форму
      $('button.cancel', comment_form).on('click', function(){
        $('#task_comment_'+task_comment_id).show();
        comment_form.remove();
      })
    
      // счетчик кол-ва символов
      $(document).on('keyup change blur', 'textarea', comment_form, function(){
        var limit = parseInt($(this).attr('maxlength')) - $(this).val().length;
        $('.count', comment_form).html( limit )
      })
    
      // new OEmbedInput($('textarea', comment_form), /^(?:http?:\/\/)?brainstorage.me\/works\/(\d+)$/i, 'input', 'paste', 'sync');
    }
    
    function  strip_tags(str, allowed_tags) {
        var key = '', allowed = false;
        var matches = [];
        var allowed_array = [];
        var allowed_tag = '';
        var i = 0;
        var k = '';
        var html = '';
    
        var replacer = function(search, replace, str) {
            return str.split(search).join(replace);
        };
    
        // Build allowes tags associative array
        if (allowed_tags) {
            allowed_array = allowed_tags.match(/([a-zA-Z]+)/gi);
        }
    
        str += '';
    
        // Match tags
        matches = str.match(/(<\/?[\S][^>]*>)/gi);
    
        // Go through all HTML tags
        for (key in matches) {
            if (isNaN(key)) {
                // IE7 Hack
                continue;
            }
    
            // Save HTML tag
            html = matches[key].toString();
    
            // Is tag not in allowed list? Remove from str!
            allowed = false;
    
            // Go through all allowed tags
            for (k in allowed_array) {
                // Init
                allowed_tag = allowed_array[k];
                i = -1;
    
                if (i != 0) { i = html.toLowerCase().indexOf('<'+allowed_tag+'>');}
                if (i != 0) { i = html.toLowerCase().indexOf('<'+allowed_tag+' ');}
                if (i != 0) { i = html.toLowerCase().indexOf('</'+allowed_tag)   ;}
    
                // Determine
                if (i == 0) {
                    allowed = true;
                    break;
                }
            }
    
            if (!allowed) {
                str = replacer(html, "", str); // Custom replace. No regexing
            }
        }
    
        return str;
    }
    
    
    
    
    ;
    $(document).ready(function(){
    
      $('body').on('change', '.form_user_remove input[type="radio"]', function(e){
        var button = $('.form_user_remove .next');
        button.removeClass('hidden');
      });
    
      $('body').on('click', '.form_user_remove .next', function(e){
        $('.form_user_remove .step1').addClass('hidden');
        $('.form_user_remove .step2').removeClass('hidden');
      });
    
      $('body').on('click', '.form_user_remove .prev', function(e){
        $('.form_user_remove .step2').addClass('hidden');
        $('.form_user_remove .step1').removeClass('hidden');
      });
    
      /* на странрице фрилансера - надо расшифровать email */
      $('#js-contacts .link_mail').each(function(i, link){
        var name = $(link).data('mail-name')
        var host = $(link).data('mail-host')
        $(link).prop('href', 'mailto:'+name+'@'+host).html(name+'@'+host)
      })
    
      /* на странрице фрилансера - надо расшифровать телефон */
      $('#js-contacts #phone').each(function(i, link){
        var phone = $(link).data('phone')
        $(link).html(phone)
      })
    
      /**
       * Функция определяет какую галочку поставить в чекбоксе группы категорий
       */
      function category_group_checked_status(category){
    
        var $category = $(category)
        var checked = $category.find('input:checked').size()
        var all = $category.find('input').size()
    
        $category.removeClass('part').removeClass('full');
        if ( checked > 0 ){
          // есть хотя бы одна отмеченная
          if ( all == checked ) {
            // отмечены все
            $category.addClass('full')
          } else {
            // отмечены хотя бы одна
            $category.addClass('part')
          }
        }else{
          // нет вообще ни одной отмеченой
        }
      }
    
      /**
       * Функция запускает поиск фрилансеров
       */
      var search_items = function(){
    
        var search_items = $('#search_items');
    
        var query = $('input[name="q"]', search_items).val();
            query = query.replace(/#/g, '!sharp').replace(/\+/g, '!plus');
    
        var onlyfree = $('input[name="only_free"]').prop('checked')
        var onlycontacts = $('input[name="only_with_contacts"]').prop('checked')
        var onlyfolio = $('input[name="only_portfolio"]').prop('checked')
        var onlyreviews = $('input[name="only_reviews"]').prop('checked')
    
        var only_verified = $('input[name="only_verified"]').prop('checked')
        var only_mentioned = $('input[name="only_mentioned"]').prop('checked')
        var only_with_price = $('input[name="only_with_price"]').prop('checked')
        var only_urgent = $('input[name="only_urgent"]').prop('checked')
        var only_sd = $('input[name="safe_deal"]').prop('checked')
        var by_relevance = $('input[name="by_relevance"]').prop('checked')
    
        var fieldNames = ['tags', 'title', 'description'];
        var fields = [];
        fieldNames.forEach(function(name){
          var el = $('input[name="fields[' + name + ']"]:checked');
          if (el.length > 0){ fields.push(name) };
        });
    
        var categories = [];
        $('ul.category-group input[name="category[]"]:checked').each(function(i, checkbox){
          categories.push($(checkbox).val());
        })
    
        var params = {};
        if( query !== '' ) params.q = query;
        if( onlyfree ) params.onlyfree = true;
        if( onlyfolio ) params.onlyfolio = true;
        if( onlyreviews ) params.onlyreviews = true;
        if( onlycontacts ) params.onlycontacts = true;
        if( only_verified ) params.only_verified = true;
        if( only_mentioned ) params.only_mentioned = true;
        if( only_with_price ) params.only_with_price = true;
        if( only_urgent ) params.only_urgent = true;
        if( only_sd ) params.safe_deal = true;
        if( by_relevance ) params.by_relevance = true;
        if( categories.length > 0 ) params.categories = categories.join(',');
        if( fields.length > 0 ) params.fields = fields.join(',');
    
    
        var url = search_items.prop('action')+'?'+decodeURIComponent(jQuery.param(params));
    
        // console.log('search items', url, params)
    
    
        $.ajax({
          url: url,
          dataType: 'script',
          success: function(data){
            console.log('success')
            if( typeof(history.pushState) != 'undefined' ) history.pushState(null, null, url);
          }
        })
      }
    
      // обработка поисковой формы на странице поиска фрилансеров
    
      $('#search_items').on('submit', function(){ return false; })
      $('input[name="only_free"]').on('change', search_items)
      $('input[name="only_portfolio"]').on('change', search_items)
      $('input[name="only_with_contacts"]').on('change', search_items)
      $('input[name="only_reviews"]').on('change', search_items)
    
      var fieldNames = ['tags', 'title', 'description'];
      fieldNames.forEach(function(name){
        $('input[name="fields[' + name + ']"]').on('change', function() {
          trackEvent('tasks_fields_filter', $(this).attr('name'), $(this).prop('checked').toString());
          search_items();
        });
      });
    
      $('#search_items input[name="q"]').on('keyup', function(){
        var len = $(this).val().length;
        if (len > 0) {
          $('input[name="by_relevance"]').closest('.sub-categories__item').removeClass('hidden');
        } else {
          $('input[name="by_relevance"]').prop('checked', false);
          $('input[name="by_relevance"]').closest('.sub-categories__item').addClass('hidden');
        }
        search_items();
      });
    
      $('.ga_posts_sidebar a').on('click', function(ev) {
        trackEvent('widget_posts', 'click', $(this).data('galabel').toString());
      });
    
      $('input[name="only_verified"], input[name="only_mentioned"], input[name="only_with_price"], input[name="only_urgent"], input[name="safe_deal"], input[name="by_relevance"]').on('change', function() {
        if ($(this).attr('name') != 'only_verified') {
          trackEvent('tasks_filter', $(this).attr('name'), $(this).prop('checked').toString());
        }
        search_items();
      });
    
      var category_group = $('ul.category-group')
    
      // обработка списка категорий в правой части сайта
      $('li',category_group).each(function(i, category){
    
        // при первой загрузке страницы - надо проставить галочки для чекбоксов группы категорий
        category_group_checked_status(category);
    
        // раскривашка :)
        $('.js-toggle', category).on('click', function(){
          if( $(category).hasClass('category-group__folder_open') ){
            $('.category-group__folder_open',category_group).removeClass('category-group__folder_open')
          }else{
            $('.category-group__folder_open',category_group).removeClass('category-group__folder_open')
            $(category).addClass('category-group__folder_open')
          }
        })
    
        $('.js-toggle', category).on('selectstart', function (event) {
          event.preventDefault();
        });
    
        // клик по чекбоксу группы категорий
        $('.js-checkbox_group', category).on('click', function(){
    
          // если нажали на частично выделенный чекбокс, то выделим его полностью
          if( $(category).hasClass('part') ) {
            $(category).removeClass('part')
            $(category).addClass('full')
            $('ul.sub-categories li input[type="checkbox"]', category).prop('checked', true)
    
          // если нажали на полностью выделенный чекбокс, то снимем выделение
          }else if( $(category).hasClass('full') ) {
            $(category).removeClass('full')
            $('ul.sub-categories li input[type="checkbox"]', category).prop('checked', false)
    
          // если нажали на не выделенный чекбокс, то поставим выделение
          }else {
            $(category).addClass('full')
            $('ul.sub-categories li input[type="checkbox"]', category).prop('checked', true)
          }
    
          // запустим поиск
          search_items();
    
        })
    
        // клик по чекбоксу категории
        $('ul.sub-categories li input[type="checkbox"]', category).on('click', function(){
    
          // изменим чекбокс группы категорий
          category_group_checked_status(category);
    
          // запустим поиск
          search_items();
        })
      })
    
      // проставляем доп категории
      $('input[name="only_free"]').prop('checked')
      $('input[name="only_with_contacts"]').prop('checked')
      $('input[name="only_portfolio"]').prop('checked')
      $('input[name="only_reviews"]').prop('checked')
      $('input[name="only_verified"]').prop('checked')
    
      // клик по кнопке "очистить"
      $('#cancel').click(function(){
        $('.category-group__folder').removeClass('full')
        $('.category-group__folder').removeClass('part')
        $('.sub-categories__item label input[type="checkbox"]').prop('checked', false)
    
        // запустим поиск
        search_items();
    
        return false
      })
    
      // автокомплит для выбора города
      if ($( "#freelancer_location" ).size()){
    
        var last_value='';
        $( "#freelancer_location" ).autocomplete({
          autoFocus: true,
          minLength: 0,
          source: "/geo/search",
          select: function( event, ui ) {
            if( typeof(ui.item.type) != 'undefined' &&  ui.item.type == 'not_found' ){
              $( "#freelancer_location" ).val( '' );
              $( "#freelancer_city_id" ).val( '' );
              $( "#freelancer_country_id" ).val( '' );
              if( typeof(ui.item.region_id) != 'undefined' ) $( "#freelancer_region_id" ).val( '' );
              last_value = '';
            }else{
              $( "#freelancer_location" ).val( ui.item.title );
              $( "#freelancer_city_id" ).val( ui.item.id );
              $( "#freelancer_country_id" ).val( ui.item.country_id );
              if( typeof(ui.item.region_id) != 'undefined' ) $( "#freelancer_region_id" ).val( ui.item.region_id );
              last_value = ui.item.title
            }
            return false;
          }
        }).on('keyup', function(e){
          if( last_value != $(this).val()){
            $( "#freelancer_city_id" ).val('');
            $( "#freelancer_country_id" ).val('');
            $( "#freelancer_region_id" ).val('');
          }
        }).on('blur', function(){
          if( $( "#freelancer_location" ).val() == '' ) {
            $( "#freelancer_location" ).val( "" );
            $( "#freelancer_city_id" ).val('');
            $( "#freelancer_country_id" ).val('');
            $( "#freelancer_region_id" ).val('');
          }
        }).data( "ui-autocomplete" )._renderItem = function( ul, item ) {
          if( typeof(item.type) != 'undefined' &&  item.type == 'not_found' ){
            return $( "<li>" )
              .addClass('not_found_li')
              .append( "<a href='/feedback?title_id=10'><span class='not_found_title'>Предложить новый город</span><span class='not_found_string'>Город не найден</span></a>" )
              .appendTo( ul );
          }else{
            return $( "<li>" )
              .addClass('location_li')
              .append( "<a><span class='location_title'>" + item.title + "</span><span class='location_string'>" + item.location + "</span></a>" )
              .appendTo( ul );
          }
        };
    
        $("#freelancer_location").autocomplete( "widget" ).addClass( "location_select" );
      }
    
    })
    
    function note_init(id){
    
      var note = $('#freelancer_comment_'+ id);
      var count = $('.count', note)
      var textarea = $('textarea', note)
      var max_letters = textarea.data('maxlength')
      var count_letters = max_letters - textarea.val().replace(/(\r\n|\n|\r)/gm, '').length
      count.html(count_letters)
    
      if( $('textarea', note).val().length > 0 ){
        $('.btn_save', note).attr('disabled', false)
      }else{
        $('.btn_save', note).attr('disabled', true)
      }
    
      // счетчик кол-ва символов
      $(document).on('keyup keypress change blur', 'textarea', note, function(){
        var count_letters = max_letters - textarea.val().replace(/(\r\n|\n|\r)/gm, '').length
        count.html( count_letters ).css("color", "#A5ADB5");
        if( count_letters <= 0){
          count.html( count_letters ).css("color", "#ea7e5d");
          return false;
        }
        if( $('textarea', note).val().length > 0 ){
          $('.btn_save', note).attr('disabled', false)
        }else{
          $('.btn_save', note).attr('disabled', true)
        }
      })
    }
    ;
    /* мои заказы */
    
    function init_tasks () {
      $('.my_tasks_table tr').each(function(i, task){
        var checkbox = $('.select_checkbox input', task);
        var mark = $('.table__cell_select input', task);
        var price = $('.table__cell_price .price', task);
        var publish = $('#publish_it', task);
        var up = $('.table__cell_catch-up input', task);
    
        // выбор задачи
        checkbox.change(function(e){
          if( checkbox.prop('checked') ){
            mark.attr('disabled', false).prop('checked', false)
          }else{
            mark.attr('disabled', true).prop('checked', false)
          }
          calculate_total();
        })
    
        // выделить задачу
        mark.change(calculate_total)
    
        // поднять задачу
        up.click(calculate_total)
    
        // на сайте
        publish.change(function(e){
          if( publish.prop('checked') ){
            $('.js-publish').removeClass('task-status_notpublish')
            if( !(mark.prop('checked') && mark.attr('disabled')) ) mark.attr('disabled', false)
            if( !(up.prop('checked') && up.attr('disabled')) ) up.attr('disabled', false)
          }else{
            $('.js-publish').addClass('task-status_notpublish')
            if( !(mark.prop('checked') && mark.attr('disabled')) ) mark.attr('disabled', true).prop('checked', false)
            if( !(up.prop('checked') && up.attr('disabled')) ) up.attr('disabled', true).prop('checked', false)
            price.html( '0' )
          }
          // $.post(publish.data('url'))
          calculate_total();
        })
    
        if( mark.prop('checked') ){
          $(".checkbox_select .checkbox__label", task).html("Выделен");
        }
    
        if( up.prop('checked') ){
          $(".checkbox_up .checkbox__label", task).html("Поднят");
        }
    
        if( mark.prop('checked') ){
          $("@form_orders_services .checkbox_select .checkbox__label", task).html("Выделена");
        }
    
        if( up.prop('checked') ){
          $("@form_orders_services .checkbox_up .checkbox__label", task).html("Поднята");
        }
    
      })
    }
    
    /* функция подсчета общей стоимости всех отмеченных заказов */
    var calculate_total = function (){
      var total = 0;
    
      $('.my_tasks_table tr').each(function(i, tr){
        var tr_summ = 0;
        $('input[data-price]:checked:not(:disabled)', tr).each(function(index, input){
          tr_summ += parseInt($(input).data('price'));
        })
        $('.price', tr).text(tr_summ);
        total += tr_summ;
      });
    
      $('#total_price').text(total >= 0 ? total : 0 ) ;
    
      // console.log('total', total)
    
      if( total ){
        $('#payment_btn').attr('disabled', false);
      }else{
        $('#payment_btn').attr('disabled', true);
      }
    
      return total
    }
    
    $(window).load(function(){
      if( $('.my_tasks_table').size() > 0 ) calculate_total()
    
      // $('.my_tasks_table .archive_button').on('click', function(event){
      //   $('#on-confirm-archive').show();ww
      //   $('body').append('<div class="overlayed"></div>');
      //   $('#on-confirm-archive .confirm').attr('href', $(this).data('delete-link'));
      //   $('#on-confirm-archive .confirm').data('method', $(this).data('method'));
    
      //   $(document).on('click', '.overlayed', function(){
      //     $(this).remove();
      //     $('#on-confirm-archive').hide();
      //   });
    
      //   $('#on-confirm-archive').on('click', '.hide_popup', function(){
      //     $('.overlayed').click();
      //   });
    
      //   return false;
      // })
    });
    
    $(document).ready(function(){
    
      init_tasks()
    
      $(function() {
    
        if($(".response-list_tasks").length) {
    
          if($('@tabs_sub').prev().hasClass('link_active')){
            $('@tabs').addClass('tabs-menu_sub_open');
          }
    
          $(document).on('click', '@tabs_link_sub', function(event){
            event.preventDefault();
            $(".js-form_response").remove();
    
            target = $(event.currentTarget).data('target');
            container = $('.content-list_responses');
            items = container.find('.content-list__item');
            items.filter(':hidden').show();
    
            $('@tabs_link_sub').removeClass('link_active');
            $(event.currentTarget).addClass('link_active');
    
            if (target == 'all') {
              container.removeClass('new favorite')
              container.addClass('all')
            }else if (target == 'new'){
              container.removeClass('all favorite')
              container.addClass('new')
            }else if (target == 'favorite'){
              container.removeClass('new all')
              container.addClass('favorite')
            }
    
            if (target == 'all') {
              items.removeClass('hidden');
            } else {
              items.addClass('hidden').filter(function() { return $(this).data(target) !== undefined; }).removeClass('hidden').show();
            }
    
            $('.content-list_responses').parent().find('.empty-block_holder').addClass('hidden');
            if ($('.content-list_responses.' + target +' .content-list__item').filter(':visible').length == 0){
              $('.content-list_responses.' + target).parent().find('.empty-block_holder').removeClass('hidden');
            }
          })
    
          $('.content-list_responses .content-list__item[data-favorite]').addClass('favorited');
    
          var tabCountNew = $('.content-list_responses .content-list__item[data-new]').length;
          $('.tabs-menu__link[data-target="new"] .tabs-menu__count').html(tabCountNew);
    
        }
      });
    
      active_tab = function(active_id){
        $('@tabs @tabs_link').removeClass("link_active");
        $('@tabs').find(active_id).children('@tabs_link').addClass('link_active');
    
        if($('@tabs_sub').prev().hasClass('link_active')){
          $('@tabs').addClass('tabs-menu_sub_open');
        }else{
          $('@tabs').removeClass('tabs-menu_sub_open');
        }
      };
    
      //decrement/increment tabs
      tab_counter_refresh = function(increment_id, decrement_id){
        $('@tabs').find(increment_id).find('@tab_counter').html(function(i, val){
          return ++val;
        });
    
        $('@tabs').find(decrement_id).find('@tab_counter').html(function(i, val){
          return --val;
        });
      };
    
      empty_task_comments_block = function(){
      if ($('#response-list .content-list .content-list__item').length == 0){
        $('.response-list .empty-block_holder').removeClass('hidden');
        };
      };
    
    
      // подсвечивание отклика на странице заказа
      if( document.location.hash.indexOf('task_comment_')  !== -1 ){
        $(document.location.hash).addClass('highlighted')
        setTimeout(function(){
          $(document.location.hash).removeClass('highlighted')
        },1000)
      }
    
      // попап для кнопки "восстановить заказ"
      $(document).on("ajax:beforeSend", '.js-revert_task', function(e) {
        var revert_task = $(this)
        var has_executor = revert_task.attr('data-has_executor');
    
        if (has_executor !== 'true') return true;
    
        $('#on-confirm-executor').show()
        $('body').append('<div class="overlayed"></div>');
    
        $('#on-confirm-executor button').on('click', function () {
          var role = $(this).attr('data-role')
          if (role === 'confirm') {
            // return true
            revert_task.attr('data-has_executor', 'false').click()
          }
          // close popup
          $('.overlayed').click()
          return false
        })
    
        $(document).on('click', '.overlayed', function(){
          $(this).remove();
          $('#on-confirm-executor').hide();
        });
    
        return false;
      })
    
      // попап удаления заказа
      $('#delete_popup').on("click", function() {
        $('#on-confirm-delete').show()
        $('body').append('<div class="overlayed"></div>');
    
        $(document).on('click', '.overlayed', function(){
          $(this).remove();
          $('#on-confirm-delete').hide();
        });
    
        return false;
      })
    
      // попап сабмита формы со списком заказов
      $('#payment_btn').on("click", function() {
        $('#on-confirm-payment').show()
        $('body').append('<div class="overlayed"></div>');
    
        $('#on-confirm-payment button').on('click', function () {
          var role = $(this).attr('data-role')
          if (role === 'confirm') {
            $('.form_orders').submit()
          } else {
            // close popup
            $('.overlayed').click()
          }
        })
    
        $(document).on('click', '.overlayed', function(){
          $(this).remove();
          $('#on-confirm-payment').hide();
        });
    
        return false;
      })
    
      // дизейблим, раздизейблим кнопку
      $('.form_task_remove input[type="checkbox"]').change(function(e){
        var checked = $('.form_task_remove').find('input:checked').size()
        var button = $('.form_task_remove .btn_red')
    
        if( checked > 0 ){
          button.attr('disabled', false)
        }else{
          button.attr('disabled', true)
        }
      })
    
      // штука отслеживает точку в конце заголовка заказа
      $(document).on('keyup', 'input[name="task[title]"]',  function(){
    
        var str = $.trim($(this).val());
        var re = /\.$/i
        if( re.test(str) ){
    
          var form_element = $("#task_title")
          form_element.closest(".field").addClass("field_error");
          form_element.addClass("form-control_error");
          form_element.closest(".field").find('.js-error').remove();
          form_element.closest(".field").append('<small class="field__help js-error">По правилам русского языка в конце названия ставить точку не нужно</small>')
    
        }else{
          var form_element = $("#task_title")
          form_element.closest(".field").removeClass("field_error");
          form_element.removeClass("form-control_error");
          form_element.closest(".field").find('.field__help').remove();
    
        }
      })
    
      $('#show_subscriptions_modal').on("click", function() {
        $('body').append('<div class="overlayed"></div>');
        $('#subscribe-modal').show()
    
        $(document).on('click', '.overlayed, .modal__close', function(){
          $('.overlayed').remove();
          $('#subscribe-modal').hide();
        });
    
        return false;
      })
    
      $('#show_reponse_modal').on("click", function() {
        $('body').append('<div class="overlayed"></div>');
        $('#response-modal').show()
    
        $(document).on('click', '.overlayed, .modal__close', function(){
          $('.overlayed').remove();
          $('#response-modal').hide();
        });
    
        return false;
      })
    
      // автокомплит для выбора города
      if ($( "#task_location" ).size()){
    
        var last_value='';
    
        $( "#task_location" ).autocomplete({
          autoFocus: true,
          minLength: 0,
          source: "/geo/search",
          select: function( event, ui ) {
            if( typeof(ui.item.type) != 'undefined' &&  ui.item.type == 'not_found' ){
              $( "#task_location" ).val( '' );
              $( "#task_city_id" ).val( '' );
              $( "#task_country_id" ).val( '' );
              if( typeof(ui.item.region_id) != 'undefined' ) $( "#task_region_id" ).val( '' );
              last_value = '';
            }else{
              $( "#task_location" ).val( ui.item.title );
              $( "#task_city_id" ).val( ui.item.id );
              $( "#task_country_id" ).val( ui.item.country_id );
              if( typeof(ui.item.region_id) != 'undefined' ) $( "#task_region_id" ).val( ui.item.region_id );
              last_value = ui.item.title
            }
            return false;
          }
        }).on('keyup', function(e){
          if( last_value != $(this).val()){
            $( "#task_city_id" ).val('');
            $( "#task_country_id" ).val('');
            $( "#task_region_id" ).val('');
          }
        }).on('blur', function(){
          if( $( "#profile_city_id" ).val() == '' ) {
            $( "#task_location" ).val( "" );
            $( "#task_city_id" ).val('');
            $( "#task_country_id" ).val('');
            $( "#task_region_id" ).val('');
          }
        }).data( "ui-autocomplete" )._renderItem = function( ul, item ) {
          if( typeof(item.type) != 'undefined' &&  item.type == 'not_found' ){
            return $( "<li>" )
              .addClass('not_found_li')
              .append( "<a href='/feedback?title_id=10'><span class='not_found_title'>Предложить новый город</span><span class='not_found_string'>Город не найден</span></a>" )
              .appendTo( ul );
          }else{
            return $( "<li>" )
              .addClass('location_li')
              .append( "<a><span class='location_title'>" + item.title + "</span><span class='location_string'>" + item.location + "</span></a>" )
              .appendTo( ul );
          }
        };
    
        $("#task_location").autocomplete( "widget" ).addClass( "location_select" );
      }
    
    })
    
    $(function(){
      if( $('.js-vacancies-search-dropdown').length === 0 ) return;
    
      $('.js-vacancies-search-dropdown input').on('change', function(){
        var form = $('.js-resumes-search-filter-form')
        form.find('.js-hidden-filters').remove()
        $('.js-resumes-search-dropdown input:checked').map(function (i, val) {
          var hiddenField = $('<input>')
            .addClass('js-hidden-filters')
            .attr('type', 'hidden')
            .attr('name', val.name)
            .val(1)
          form.prepend(hiddenField)
        })
        form.trigger('change')
      });
    
      function showDropdownLabelForResumesSearch () {
        var checked = $('.js-vacancies-search-dropdown input:checked').map(function (i, val) {
          var wrapper = $(val).closest('.checkbox_flat')
          var text = wrapper.find('.checkbox__label').text()
          return text
        }).toArray()
        var togglerText = checked.length > 0
          ? ('Искать ' + checked.join(', '))
          : 'Искать везде'
        var toggler = $('.js-vacancies-search-dropdown .toggler');
        var icon = $('<span class="icon-Arrow icon icon-expand_more"></span>');
        toggler.text(togglerText);
        toggler.append(icon);
      }
    
      showDropdownLabelForResumesSearch()
    
      $(document).on('change', '.js-vacancies-search-dropdown input', showDropdownLabelForResumesSearch)
    
      $('.js-new-task-button').on('click', function(ev) {
        trackEvent('button_tasks', 'click', 'create_task');
      });
    
      $('.js-subscribe-tasks-btn').on('click', function(ev) {
        trackEvent('button_tasks', 'click', 'subscribe_on_tasks');
      });
    });
    
    $(function(){
      if( $('#contract_form').length === 0 ) return;
    
      $('#contract_form #contract_money').on('keyup', function(){
        var full_price;
        var comission = parseInt($('#contract_comission').data('comission'), 10);
        var value = parseInt($(this).val().split(' ').join(''), 10);
        if (value && value > 0) {
          full_price = Math.ceil((value * (1 + (comission / 100))));
        } else {
          full_price = 0;
        }
        $('#contract_full_price').val(full_price);
      });
    
      $('#contract_form #contract_kind_cd').on('change', function(){
        if ($(this).prop('checked')) {
          $('#contract_form .safe_only').removeClass('hidden');
        } else {
          $('#contract_form .safe_only').addClass('hidden');
        }
      });
    
      $('.payment_cards .payment_card.selectable').on('click', function(){
        $('.payment_card.selectable').removeClass('selected');
        $('.form-fields_card-select').find('.validation-error').remove();
        $(this).addClass('selected');
        var card_id = $(this).data('id');
        $('#contract_card_id').val(card_id);
      });
    
      $('.service_toggle_link').on('click', function(ev) {
        var sum = 0,
            balance = parseInt($('.balance').data('balance')),
            $service = $(this).closest('.service');
        $service.toggleClass('disabled');
        var $input = $service.find('input[type=hidden]');
        var isDisabled = $service.hasClass('disabled');
        var _inputName = $input.attr('name');
        var inputName = isDisabled ? '_' + _inputName : _inputName.replace('_', '');
        $input.attr('name', inputName);
    
        $('.task_services .service:not(.disabled)').each(function(index, service){
          sum += parseInt($(service).data('price'));
        });
        $('.order .value').text(sum + ' кр.');
    
        var total = sum - balance;
    
        if (total > 0) {
          $('.total .value').text(total + ' кр.');
          $('.total').show();
          $('[data-role=form-submit]').show();
          $('[data-skip-link]').show();
          $('[data-skip-button]').hide();
        } else {
          $('.total').hide();
          $('[data-role=form-submit]').hide();
          $('[data-skip-link]').hide();
          $('[data-skip-button]').show();
        }
      });
    
      $('.task_services input[type="checkbox"]').on('change', function(ev){
        var sum = 0;
        $('.task_services input[type="checkbox"]:checked').each(function(index, el){
          var price = $(this).closest('.service').data('price');
          sum += price;
        })
        if (sum > 0) {
          $('.task_services .total').removeClass('hidden');
          $('.task_services .total .count').text(sum + ' кр.');
        } else {
          $('.task_services .total').addClass('hidden');
        }
      });
    });
    $(document).ready(function(){
    
      $('#company_request_money').on('change', function () {
        var min = parseInt($(this).attr('data-min-value'), 10)
        var val = parseInt($(this).val(), 10)
        var validate = $(this).data('validate');
        var error = $(this).data('error');
    
        if (val < min) {
          $(this).val(min)
    
          if (validate) {
            var wrapper = $(this).closest('td');
            wrapper.append('<span class="validation_error">' + error + '<span>');
            $(this).addClass('input_with_error');
          }
        }
    
      })
    
      $('#company_request_money').on('focus', function () {
        var validate = $(this).data('validate');
    
        if (!validate) return false;
    
        $(this).removeClass('input_with_error');
        var validation = $(this).closest('td').find('.validation_error').remove();
      });
    
      $('#yandex_form').submit();
    
      //Default Action
      $("@payment_tabs @tabs_pane").hide(); //Hide all content
      var activeTab = $("@payment_tabs_item input:checked").val();
      $("#" + activeTab).show();
    
      //On Click Event
      $("@payment_tabs_item").click(function() {
        $("@payment_tabs_item").find("label input:radio").prop("checked", "");
        $(this).find("label input:radio").prop("checked", "checked");
        $("@payment_tabs @tabs_pane").hide(); //Hide all tab content
        var activeTab = $("@payment_tabs_item input:checked").val();
        $('#' + activeTab).show();
      });
    
      // Галки "я принимаю соглашение"
    
      $('#i_agree, #i_agree_1, #i_agree_yandex').prop('checked', false);
    
      $(document).on('change', '#i_agree, #i_agree_1, #i_agree_yandex', function(){
        var form = $(this).closest('form');
        var btn = form.find('button[type="submit"]');
        btn.attr('disabled', !$(this).prop('checked'));
        if (btn.hasClass('toggle-green')) {
          btn.toggleClass('btn_green');
        }
      });
    
      $(document).on('change', '#i_agree_yandex', function(){
        var form = $(this).closest('form');
        var btn = form.find('#confirm_payment');
        btn.attr('disabled', !$(this).prop('checked'));
        if (btn.hasClass('toggle-green')) {
          btn.toggleClass('btn_green');
        }
      });
    
      $(document).on('click', 'button#confirm_payment', function(e){
        var form = $(this).closest('form');
        var input = form.find('#yandex_payment_transaction_money');
        var amount = parseInt(input.val());
        var modal = form.find('.confirmation-modal');
    
        if (amount >= 3000) {
          e.preventDefault();
          e.stopPropagation();
          modal.find('.amount').html(amount);
          $('body').append('<div class="overlayed"></div>');
          $('.confirmation-modal').show()
    
          $(document).on('click', '.overlayed, .modal__close', function(){
            $('.overlayed').remove();
            $('.confirmation-modal').hide();
            $('button#confirm_payment').attr('disabled', false).removeClass('loading');
          });
        }
      });
    
      // пополнение организацией
      $('.form_payment-company').each(function () {
        var form = $(this);
        var count = $('.form-control_money', form);
        var money_price = $('#money_price');
    
        count.on('change keydown keyup', function(){
          var total_price = parseInt(count.val()) * parseInt(money_price.val())  || 0;
          $('.payment-price', form).text(addCommas(total_price) + ' руб.');
        })
    
        function showCompanyFields() {
          var selected = $('#company_request_kind input[type="radio"]:checked').val();
          $('#company_about_fields').attr('class', selected);
          return false;
        }
    
        $(document).on('change', '#company_request_kind input[type="radio"]', showCompanyFields);
        $(document).on('ready', showCompanyFields);
      });
    
      // пополнение робокассой
      $('.form_payment-person').each(function () {
        var form = $(this);
        var count = $('.form-control_money', form);
        var money_price = $('#money_price');
    
        count.on('change keydown keyup', function(){
          var total_price = parseInt(count.val()) * parseInt(money_price.val())  || 0;
          $('.payment-price', form).text(addCommas(total_price) + ' руб.');
        })
      });
    
      // смена тарифного плана
      $('#plan_id').on('change', function(){
        var price = $(this).find('option:selected').data('price')
        var expired = $(this).find('option:selected').data('expired')
    
        $('.payment-price').text(price + ' ' );
        $('.payment-duration').text('до ' + expired);
      })
    
      $('.payment_plan').on('click', function(){
        $('.payment_plan').removeClass('active');
        $('.response_option').removeClass('active');
        $(this).addClass('active');
    
        var form = $(this).closest('form');
        var id = $(this).data('id');
        var price = $(this).data('price');
        var expired = $(this).data('expired');
        var not_enough_money = parseInt($(this).data('not-enough-money'));
        var not_enough_count = parseInt($(this).data('not-enough-count'));
        var target = '#' + form.data('target');
    
        $('.bind_target').addClass('hidden');
        $(target).removeClass('hidden');
        $('#plan_id').val(id);
        form.find('.table_payment.target .payment-price').text(price + ' ');
        form.find('.payment-duration').text('до ' + expired);
        if (not_enough_money > 0) {
          form.find('.not-enough-money .count').text(not_enough_count + ' ');
          form.find('.not-enough-money').removeClass('hidden');
          if (form.hasClass('popup')) {
            form.find('button.control-btn').removeClass('btn_green');
            form.find('button.control-btn').attr('disabled', true);
            form.find('button.control-btn').attr('data-balloon', 'Пополните баланс');
            form.find('button.control-btn').attr('data-balloon-pos', 'up');
            form.find('button.control-btn').prop('type', 'button');
          }
        } else {
          form.find('.not-enough-money').addClass('hidden');
          if (form.hasClass('popup')) {
            if (form.find('#i_agree').prop('checked')) {
              form.find('button.control-btn').addClass('btn_green');
            }
            form.find('button.control-btn').attr('disabled', false);
            form.find('button.control-btn').removeAttr('data-balloon');
            form.find('button.control-btn').removeAttr('data-balloon-pos');
            form.find('button.control-btn').prop('type', 'submit');
          }
        }
      })
    
      $('.response_option').on('click', function(){
        $('.payment_plan').removeClass('active');
        $(this).addClass('active');
    
        var form = $(this).closest('form');
        var target = '#' + form.data('target');
    
        $('.bind_target').addClass('hidden');
        $(target).removeClass('hidden');
    
        $('.not-enough-money').addClass('hidden');
        $(target).find('.not-enough-money').removeClass('hidden');
      })
    
      /* форматирование суммы */
      function addCommas(nStr){
        nStr += '';
        x = nStr.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
          x1 = x1.replace(rgx, '$1' + ' ' + '$2');
        }
        return x1 + x2;
      }
    })
    ;
    var shortcuts_enabled = true
    
    $(document).ready(function(){
    
    //	if(!document.on_hot_key) return;
    
        /**
         * Если пользователь установил фокус на инпут или текстовое поле, то необходимо отключить хоткей, что бы он спокойно мог вводить текст.
         */
    
        $(document).on('focus', 'input, textarea, select', function(){
            shortcuts_enabled = false
        })
        $(document).on('blur', 'input, textarea, select', function(){
            shortcuts_enabled = true
        })
      
        
        /**
         * Горячие кнопки, нажатые в инпутах, текстовых полях и тд.
         */
        $(document).on('keydown', 'input, textarea', function (e) {
            if ( (e.altKey || e.ctrlKey || e.metaKey) && e.keyCode == 13) {
                e.preventDefault();
                var form = $(this).parents('form')
                $(document).trigger('shortcuts.submit_form', form) // Сабмит формы при нажатии ctrl || cmd || alt + Enter
            }else{
                if(shortcuts_enabled){
                    shortcuts_enabled = false
                }
            }
        })
    
    
      //	$(document).on('keyup', function (e) {
      //
      //		// нужно учитывать что в сочетании ctr + f событие не должно срабатывать.
      //		var not_meta_key = (!e.altKey && !e.ctrlKey && !e.metaKey  )
      //
      //
      //
      //		if(shortcuts_enabled){
      //
      //			/**
      //			 * Навигация по страницам. Используется на страницах с постраничным навигатором. (пагинатором)
      //			 */
      //			if ( (e.altKey || e.ctrlKey || e.metaKey) && e.which == 37) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.to_prev_page') // ctrl || cmd || alt + Left arrow - переход к предыдущей странице
      //			}
      //			if ( (e.altKey || e.ctrlKey || e.metaKey) && e.which == 39) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.to_next_page') // ctrl || cmd || alt + Right arrow - переход к следующей странице
      //			}
      //		}
      //	})
    
      //	/**
      //	 * Горячие кнопки нажатые на странице.
      //	 */
      //	$(document).on('keypress', function (e) {
      //	
      //
      //
      //		// нужно учитывать что в сочетании ctr + f событие не должно срабатывать.
      //		var not_meta_key = (!e.altKey && !e.ctrlKey && !e.metaKey  )
      //
      //
      //
      //		if(shortcuts_enabled){
      //
      //
      //			/**
      //			 * Фокус на инпут поиска в шапке сайта
      //			 */
      //			if( e.which == 47 && not_meta_key ) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.focus_to_search')
      //			}
      //
      //
      //			/**
      //			 * Страницы со списком постов/вопросов/событий/хабов/результатов поиска и т.д.
      //			 */
      //			if( (e.which == 104 || e.which == 1088)  && not_meta_key ) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.to_first_post')                // 72 - h - скрол на самый верх страницы, если мы уже вверху - переход к предыдущей странице
      //			}
      //			if( (e.which == 108 || e.which == 1076) && not_meta_key ) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.to_last_post')                 // 76 - l - скрол на самый низ страницы, если мы уже внизу - переход к следующей странице
      //			}
      //			if( (e.which == 106 || e.which == 1086) && not_meta_key ) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.to_next_post')                 // 74 - j - переход к следующему элементу списка. если элемент последний - переход к следующей странице
      //			}
      //			if( (e.which == 107 || e.which == 1083) && not_meta_key ) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.to_prev_post')                 // 75 - k - переход к предыдущему элементу списка. если элемент последний - переход к предыдущей странице
      //			}
      //			if( (e.which == 111 || e.which == 1097 ) && not_meta_key ) {
      //				e.preventDefault()
      //				$(document).trigger('shortcuts.open_post') // 79/13 - o - открыть текущий пост/вопрос/событие
      //			}
      //
      //
      //		}
      //
      //	});
    
      //	/**
      //	 * Событие "фокус на инпут в форме поиска в шапке сайта".
      //	 * Срабатывает на всех страницах, где есть поисковая форма.
      //	 * Для инициализации надо нажать '/' в английской раскладке клавиатуры.
      //	 */
      //	$(document).bind('shortcuts.focus_to_search', function(event, form){
      //		//if($('.search_field').size()){
      //		//	$('.search_field').focus()
      //		//}
      //	})
    
        /**
         * Событие "сабмит формы".
         * Срабатывает на страницах, на которых есть формы.
         * Для инициализации надо нажать 'ctrl || cmd || alt + Enter' в английской раскладке клавиатуры.
         * Необходимо для отправки коммента по нажатия горячих клавиш.
         */
    
        $(document).bind('shortcuts.submit_form', function(event, form){
           if($(form).hasClass('no_ctrl_enter_submit')){
             // не надо сабмитить - если есть класс .no_ctrl_enter_submit
           }else{
             $('input[type="submit"],button[type="submit"],input.submit', form).click()
           }
        })
    
    //	/**
    //	 * Событие "перейти к следующей странице".
    //	 * Срабатывает на страницах, на которых есть пагинатор.
    //	 * Для инициализации надо нажать 'ctrl || cmd || alt + Right arrow' в английской раскладке клавиатуры.
    //	 */
    //	$(document).bind('shortcuts.to_next_page', function(){
    //		var url = $('.pagination .next_page').attr('href')
    //		if(typeof(url) !== 'undefined'){
    //			document.location.href = url
    //		}
    //	})
    //
    //
    //	/**
    //	 * Событие "перейти к предыдущей странице".
    //	 * Срабатывает на страницах, на которых есть пагинатор.
    //	 * Для инициализации надо нажать 'ctrl || cmd || alt + Left arrow' в английской раскладке клавиатуры.
    //	 */
    //	$(document).bind('shortcuts.to_prev_page', function(){
    //		var url = $('.pagination .previous_page').attr('href')
    //		if(typeof(url) !== 'undefined'){
    //			document.location.href = url
    //		}
    //	})
    //
    //
    //
    //
    //	/**
    //	 * Событие "перейти к первому посту".
    //	 * Срабатывает на страницах, на которых есть список постов, вопросов или событий.
    //	 * Для инициализации надо нажать 'h' в английской раскладке клавиатуры.
    //	 * Сдвигает экран к первому посту или переходит на предыдущую страницу (если вы находитесь на первом посте).
    //	 */
    //	$(document).bind('shortcuts.to_first_post', function(){
    //		var shortcuts_items = $('.shortcuts_items')
    //		if(shortcuts_items.size()){
    //			if( $('.shortcuts_item', shortcuts_items).first().hasClass('focus') ){
    //				$(document).trigger('shortcuts.to_prev_page');
    //			}else{
    //				$('.shortcuts_item.focus', shortcuts_items).removeClass('focus')
    //				$('.shortcuts_item', shortcuts_items).first().addClass('focus')
    //			}
    //			$.scrollTo( $('.shortcuts_item.focus', shortcuts_items) , 200,	{ axis: 'y' } );
    //		}
    //	})
    //	/**
    //	 * Событие "перейти к последнему посту".
    //	 * Срабатывает на страницах, на которых есть список постов, вопросов или событий.
    //	 * Для инициализации надо нажать 'l' в английской раскладке клавиатуры.
    //	 * Сдвигает экран к последнему посту или переходит на следующую страницу (если вы находитесь на последнем посте).
    //	 */
    //	$(document).bind('shortcuts.to_last_post', function(){
    //		var shortcuts_items = $('.shortcuts_items')
    //		if(shortcuts_items.size()){
    //			if( $('.shortcuts_item', shortcuts_items).last().hasClass('focus') ){
    //				$(document).trigger('shortcuts.to_next_page');
    //			}else{
    //				$('.shortcuts_item.focus', shortcuts_items).removeClass('focus')
    //				$('.shortcuts_item', shortcuts_items).last().addClass('focus')
    //			}
    //			$.scrollTo( $('.shortcuts_item.focus', shortcuts_items) , 200,	{ axis: 'y' } )
    //		}
    //	})
    //
    //	/**
    //	 * Событие "перейти к следующему посту".
    //	 * Срабатывает на страницах, на которых есть список постов, вопросов или событий.
    //	 * Для инициализации надо нажать 'j' в английской раскладке клавиатуры.
    //	 * Сдвигает экран к следующему посту или переходит на следующюю страницу (если вы находитесь на последнем посте).
    //	 */
    //	$(document).bind('shortcuts.to_next_post', function(){
    //		var shortcuts_items = $('.shortcuts_items')
    //		if(shortcuts_items.size()){
    //			if( $('.shortcuts_item.focus', shortcuts_items).size() == 0){
    //				$('.shortcuts_item', shortcuts_items).first().addClass('focus')
    //			}else{
    //				var shortcuts_item = $('.shortcuts_item.focus', shortcuts_items)
    //				var next_shortcuts_item = shortcuts_item.next()
    //				if( next_shortcuts_item.size() == 0 ){
    //					$(document).trigger('shortcuts.to_next_page');
    //				}else{
    //					shortcuts_item.removeClass('focus')
    //					next_shortcuts_item.addClass('focus')
    //				}
    //			}
    //			$.scrollTo( $('.shortcuts_item.focus', shortcuts_items) , 200,	{ axis: 'y' } )
    //		}
    //	})
    //
    //	/**
    //	 * Событие "перейти к предыдущему посту".
    //	 * Срабатывает на страницах, на которых есть список постов, вопросов или событий.
    //	 * Для инициализации надо нажать 'k' в английской раскладке клавиатуры.
    //	 * Сдвигает экран к предыдущему посту или переходит на предыдущую страницу (если вы находитесь на первом посте).
    //	 */
    //	$(document).bind('shortcuts.to_prev_post', function(){
    //		var shortcuts_items = $('.shortcuts_items')
    //		if(shortcuts_items.size()){
    //			if( $('.shortcuts_item.focus', shortcuts_items).size() == 0){
    //				$('.shortcuts_item', shortcuts_items).last().addClass('focus')
    //			}else{
    //				var shortcuts_item = $('.shortcuts_item.focus', shortcuts_items)
    //				var prev_shortcuts_item = shortcuts_item.prev()
    //				if( prev_shortcuts_item.size() == 0 ){
    //					$(document).trigger('shortcuts.to_prev_page');
    //				}else{
    //					shortcuts_item.removeClass('focus')
    //					prev_shortcuts_item.addClass('focus')
    //				}
    //			}
    //			$.scrollTo( $('.shortcuts_item.focus', shortcuts_items) , 200,	{ axis: 'y' } )
    //		}
    //	})
    //
    //	/**
    //	 * Событие "открыть текущий пост"
    //	 * Срабатывает на страницах, на которых есть список постов, вопросов или событий.
    //	 * Для инициализации нужно нажать 'o' в английской раскладке клавиатуры или 'enter'.
    //	 * Открывает страницу с постом, вопросом или событием.
    //	 */
    //	$(document).bind('shortcuts.open_post', function(){
    //		if( $('.shortcuts_items').size() ){
    //			var url = $('.shortcuts_items .shortcuts_item.focus .title a').attr('href')
    //			if(url) document.location.href = url
    //		}
    //	})
    
    
    
    
    })
    ;
    (function() {
      var SubscriptionBlock,
        bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
    
      SubscriptionBlock = (function() {
        function SubscriptionBlock(container) {
          this.container = container;
          this.onCheckboxesChange = bind(this.onCheckboxesChange, this);
          this.onToggleAllCheckboxChange = bind(this.onToggleAllCheckboxChange, this);
          this.toggleAllCheckbox = this.container.find('@toggle-all input[type=checkbox]');
          this.checkboxes = this.container.find('@toggle input[type=checkbox]');
          this.counter = this.container.find('@counter');
          this.form = this.container.parents('form[data-remote=true]');
          this.addEventListeners();
          this.updateCounters();
          this.switchToggleAll();
          this.setTransitiveClass();
        }
    
        SubscriptionBlock.prototype.addEventListeners = function() {
          this.toggleAllCheckbox.on('change', this.onToggleAllCheckboxChange);
          return this.checkboxes.on('change', this.onCheckboxesChange);
        };
    
        SubscriptionBlock.prototype.onToggleAllCheckboxChange = function(event) {
          var target;
          target = $(event.currentTarget);
          this.toggleAll(target.is(':checked'));
          this.updateCounters();
          this.form.submit();
          return this.setTransitiveClass();
        };
    
        SubscriptionBlock.prototype.toggleAll = function(checked) {
          return this.checkboxes.prop('checked', checked);
        };
    
        SubscriptionBlock.prototype.onCheckboxesChange = function(event) {
          this.updateCounters();
          this.form.submit();
          this.switchToggleAll();
          return this.setTransitiveClass();
        };
    
        SubscriptionBlock.prototype.updateCounters = function() {
          return this.counter.html(this.checkedCount());
        };
    
        SubscriptionBlock.prototype.checkedCount = function() {
          return _.size(this.checkboxes.filter(':checked'));
        };
    
        SubscriptionBlock.prototype.allChecked = function() {
          return (_.size(this.checkboxes)) === this.checkedCount();
        };
    
        SubscriptionBlock.prototype.switchToggleAll = function() {
          return this.toggleAllCheckbox.prop('checked', this.allChecked());
        };
    
        SubscriptionBlock.prototype.setTransitiveClass = function() {
          if (this.checkedCount() > 0 && !this.allChecked()) {
            return this.toggleAllCheckbox.addClass('checked_half');
          } else {
            return this.toggleAllCheckbox.removeClass('checked_half');
          }
        };
    
        return SubscriptionBlock;
    
      })();
    
      $(function() {
        return _.each($('@subscription-block'), function(element) {
          return new SubscriptionBlock($(element));
        });
      });
    
    }).call(this);
    $(function() {
    
        $('.advices :checkbox.advice_check').on('click', function(e) {
    
            if ($(this).prop('disabled')) {
                return;
            };
    
            var a = $(this);
            var next = a.closest('.advice').nextAll('.advice');
            
            if( next.size() > 0 ){
              if (!a.prop('checked')) {
                  next.find('.advice_check').prop('checked', false).prop('disabled', true).removeClass('loading');
                  next.addClass('disabled');
      
              }else{
                next.first().find('.advice_check').addClass('loading');
                next.first().removeClass('disabled');          
              }
            }else{
              check_all();
            }
            
            
            
            setTimeout(function() {
                if (a.prop('checked')) {
                    next.first().find('.advice_check').prop('disabled', false).removeClass('loading');
                };
                
                check_all()
            }, 5000);
            
            function check_all() {
                var all_checked = ($('.advices input[type="checkbox"].advice_check').size() > 0) && 
                                  ($('.advices input[type="checkbox"].advice_check').size() == $('.advices input[type="checkbox"].advice_check:checked').size()) 
                $('#advice_check_button').attr('disabled', !all_checked );
            }
        });
    
    });
    $(document).ready(function() {
      if ( $('.questions').length === 0) return false
    
      var check_url_hash = function(hash){
        if( hash )  $(hash).toggleClass('open')
        else $('#q1.1').toggleClass('open')
      }
    
      $(document).on('ready', function(){
        check_url_hash(document.location.hash)
      })
    
      $('.question .title a').on('click', function(){
        var hash = $(this).attr('href')
        check_url_hash(hash)
      });
    
      $('.submenu a.menu__link').on('click', function(){
        var hash = $(this).attr('href');
        if( hash ) {
          var el = $(hash);
          if (!el.hasClass('open')) el.addClass('open');
          $(window).scrollTo(el.offset().top, 100, { axis: 'y', offset: +30 } );
        }
      });
    })
    ;
    $(document).ready(function(){
      // попап для кнопки "разместить заказ"
      $('.js-new_service').on("click", function() {
        var limit = $(this).attr('data-limit')
    
        if (limit === 'false') return true
    
        $('#on-confirm-new_service').show()
        $('body').append('<div class="overlayed"></div>');
    
        $(document).on('click', '.overlayed', function(){
          $(this).remove();
          $('#on-confirm-new_service').hide();
        });
    
        $('#on-confirm-new_service button').on('click', function () {
          // close popup
          $('.overlayed').click()
        })
    
        return false;
      })
    })
    
    function updateServicesPositions() {
      var ids = getServicesPositions();
    
      clearTimeout(window.serviceUpdatesTimeout);
    
      window.serviceUpdatesTimeout = setTimeout(function() {
        $.ajax({
          method: 'post',
          url: '/services/update_positions',
          data: {ids: ids},
          dataType: 'script'
        })
      }, 1000);
    }
    function getServicesPositions() {
      var ids = $('.services_sortable_container').find('.sort_target').map(function(item) {
        return $(this).attr('data-id')
      })
      return $.makeArray( ids )
    }
    $(document).on('ready', function(){
      if ($('.services_sortable_container').length === 0) return
      window.serviceUpdatesTimeout;
    
      $('.services_sortable_container').map(function (i, el) {
        new Sortable($(el)[0], {
          dragClass: "ui-sortable-helper",
          onUpdate: function (evt) {
            updateServicesPositions();
          }
        });
      });
    })
    ;
    /* global $ */
    
    
    $(document).on('change', '.form_position input[type="checkbox"]', function calcPrice () {
      var total = 0
    
      $('.form_position input[type="checkbox"]:checked:not(:disabled)').each(function () {
        var checkbox = $(this)
        var price = checkbox.attr('data-price')
        total += parseInt(price)
      })
    
      $('.js-total-price').text(total)
    
      $('#payment_position_btn').attr('disabled', !total)
    })
    
    // попап сабмита формы со списком заказов
    $(document).on('click', '#payment_position_btn', function onFormPositionSubmit () {
      var total = 0,
          available = parseInt($(this).data('available'));
      $('.form_position input[type="checkbox"]:checked:not(:disabled)').each(function () {
        var checkbox = $(this)
        var price = checkbox.attr('data-price')
        total += parseInt(price)
      })
    
      if (total < available) {
        $('#on-confirm-payment').show()
        $('body').append('<div class="overlayed"></div>')
    
        $('#on-confirm-payment button').on('click', function () {
          var role = $(this).attr('data-role')
          if (role === 'confirm') {
            $('.form_position').submit()
          } else {
            // close popup
            $('.overlayed').click()
          }
        })
    
        $(document).one('click', '.overlayed', function () {
          $(this).remove()
          $('#on-confirm-payment').hide()
        })
    
        return false
      } else {
        $('.form_position').submit()
      }
    })
    ;
    $(function () {
      if(!$('#payment_type_person_form').length) return;
    
      // Меняем URL формы в зависимости от выбраннной платежной системы
      $(document).on('change', '#payment_type_person_form input[type="radio"]', function () {
        var radio = $(this)
        var form = radio.closest('form')
        var url = radio.attr('data-url')
        form.attr('action', url)
      });
    
    });
    
    
    // Выбор платных услуг в заказах
    function initTaskPaymentsForm() {
      if(!$('.form-fields.task_services').length) return;
    
      $('.task_services input[type="checkbox"]').on('change', function(ev){
        var sum = 0;
        $('.task_services input[type="checkbox"]:checked').each(function(index, el){
          var price = $(this).closest('.service').data('price');
          sum += price;
        })
        if (sum > 0) {
          $('.task_services .total').removeClass('hidden');
          $('.task_services .total .count').text(sum + ' кр.');
          $('.pay_modal_button').removeClass('btn-grey').addClass('btn_green').removeAttr('disabled');
        } else {
          $('.task_services .total').addClass('hidden');
          $('.pay_modal_button').removeClass('btn_green').addClass('btn-grey').attr('disabled', 'disabled');
        }
      });
    }
    
    $(function () {
      if(!$('#task_form').length) return;
    
      initTaskPaymentsForm()
    });
    
    
    $(function () {
      if(!$('#order_form').length) return;
    
      $('.service_toggle_link').on('click', function(ev) {
        var sum = 0,
            balance = parseInt($('.balance').data('balance')),
            $service = $(this).closest('.service');
        $service.toggleClass('disabled');
        var $input = $service.find('input[type=hidden]');
        var isDisabled = $service.hasClass('disabled');
        var _inputName = $input.attr('name');
        var inputName = isDisabled ? '_' + _inputName : _inputName.replace('_', '');
        $input.attr('name', inputName);
    
        $('.task_services .service:not(.disabled)').each(function(index, service){
          sum += parseInt($(service).data('price'));
        });
        $('.order .value').text(sum + ' кр.');
    
        var total = sum - balance;
    
        if (total > 0) {
          $('.total .value').text(total + ' кр.');
          $('.total').show();
          $('.pay_types').removeClass('hidden');
          $('[data-role=form-submit]').show();
          $('[data-skip-link]').show();
          $('[data-skip-button]').hide();
        } else if (sum > 0) {
          $('.total').hide();
          $('.pay_types').addClass('hidden');
          $('[data-role=form-submit]').show();
          $('[data-skip-link]').show();
          $('[data-skip-button]').hide();
        } else {
          $('.total').hide();
          $('.pay_types').addClass('hidden');
          $('[data-role=form-submit]').hide();
          $('[data-skip-link]').hide();
          $('[data-skip-button]').show();
        }
      });
    });
    $(document).ready(function() {
      if ( $('#post_title_source').length === 0) return false
    
      $('#post_title_source').on('change', function(){
        $('#blog_post_title').val($(this).val());
      })
    })
    ;
    (function() {
      var NodeTypes, ParameterMissing, Utils, defaults,
        __hasProp = {}.hasOwnProperty;
    
      ParameterMissing = function(message) {
        this.message = message;
      };
    
      ParameterMissing.prototype = new Error();
    
      defaults = {
        prefix: "",
        default_url_options: {}
      };
    
      NodeTypes = {"GROUP":1,"CAT":2,"SYMBOL":3,"OR":4,"STAR":5,"LITERAL":6,"SLASH":7,"DOT":8};
    
      Utils = {
        serialize: function(object, prefix) {
          var element, i, key, prop, result, s, _i, _len;
    
          if (prefix == null) {
            prefix = null;
          }
          if (!object) {
            return "";
          }
          if (!prefix && !(this.get_object_type(object) === "object")) {
            throw new Error("Url parameters should be a javascript hash");
          }
          if (window.jQuery) {
            result = window.jQuery.param(object);
            return (!result ? "" : result);
          }
          s = [];
          switch (this.get_object_type(object)) {
            case "array":
              for (i = _i = 0, _len = object.length; _i < _len; i = ++_i) {
                element = object[i];
                s.push(this.serialize(element, prefix + "[]"));
              }
              break;
            case "object":
              for (key in object) {
                if (!__hasProp.call(object, key)) continue;
                prop = object[key];
                if (!(prop != null)) {
                  continue;
                }
                if (prefix != null) {
                  key = "" + prefix + "[" + key + "]";
                }
                s.push(this.serialize(prop, key));
              }
              break;
            default:
              if (object) {
                s.push("" + (encodeURIComponent(prefix.toString())) + "=" + (encodeURIComponent(object.toString())));
              }
          }
          if (!s.length) {
            return "";
          }
          return s.join("&");
        },
        clean_path: function(path) {
          var last_index;
    
          path = path.split("://");
          last_index = path.length - 1;
          path[last_index] = path[last_index].replace(/\/+/g, "/");
          return path.join("://");
        },
        set_default_url_options: function(optional_parts, options) {
          var i, part, _i, _len, _results;
    
          _results = [];
          for (i = _i = 0, _len = optional_parts.length; _i < _len; i = ++_i) {
            part = optional_parts[i];
            if (!options.hasOwnProperty(part) && defaults.default_url_options.hasOwnProperty(part)) {
              _results.push(options[part] = defaults.default_url_options[part]);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        },
        extract_anchor: function(options) {
          var anchor;
    
          anchor = "";
          if (options.hasOwnProperty("anchor")) {
            anchor = "#" + options.anchor;
            delete options.anchor;
          }
          return anchor;
        },
        extract_options: function(number_of_params, args) {
          var last_argument, type;
    
          last_argument = args[args.length - 1];
          type = this.get_object_type(last_argument);
          if (args.length > number_of_params || (type === "object" && !this.look_like_serialized_model(last_argument))) {
            return args.pop();
          } else {
            return {};
          }
        },
        look_like_serialized_model: function(object) {
          return "id" in object || "to_param" in object;
        },
        path_identifier: function(object) {
          var property;
    
          if (object === 0) {
            return "0";
          }
          if (!object) {
            return "";
          }
          property = object;
          if (this.get_object_type(object) === "object") {
            property = object.to_param || object.id || object;
            if (this.get_object_type(property) === "function") {
              property = property.call(object);
            }
          }
          return property.toString();
        },
        clone: function(obj) {
          var attr, copy, key;
    
          if ((obj == null) || "object" !== this.get_object_type(obj)) {
            return obj;
          }
          copy = obj.constructor();
          for (key in obj) {
            if (!__hasProp.call(obj, key)) continue;
            attr = obj[key];
            copy[key] = attr;
          }
          return copy;
        },
        prepare_parameters: function(required_parameters, actual_parameters, options) {
          var i, result, val, _i, _len;
    
          result = this.clone(options) || {};
          for (i = _i = 0, _len = required_parameters.length; _i < _len; i = ++_i) {
            val = required_parameters[i];
            if (i < actual_parameters.length) {
              result[val] = actual_parameters[i];
            }
          }
          return result;
        },
        build_path: function(required_parameters, optional_parts, route, args) {
          var anchor, opts, parameters, result, url, url_params;
    
          args = Array.prototype.slice.call(args);
          opts = this.extract_options(required_parameters.length, args);
          if (args.length > required_parameters.length) {
            throw new Error("Too many parameters provided for path");
          }
          parameters = this.prepare_parameters(required_parameters, args, opts);
          this.set_default_url_options(optional_parts, parameters);
          anchor = this.extract_anchor(parameters);
          result = "" + (this.get_prefix()) + (this.visit(route, parameters));
          url = Utils.clean_path("" + result);
          if ((url_params = this.serialize(parameters)).length) {
            url += "?" + url_params;
          }
          url += anchor;
          return url;
        },
        visit: function(route, parameters, optional) {
          var left, left_part, right, right_part, type, value;
    
          if (optional == null) {
            optional = false;
          }
          type = route[0], left = route[1], right = route[2];
          switch (type) {
            case NodeTypes.GROUP:
              return this.visit(left, parameters, true);
            case NodeTypes.STAR:
              return this.visit_globbing(left, parameters, true);
            case NodeTypes.LITERAL:
            case NodeTypes.SLASH:
            case NodeTypes.DOT:
              return left;
            case NodeTypes.CAT:
              left_part = this.visit(left, parameters, optional);
              right_part = this.visit(right, parameters, optional);
              if (optional && !(left_part && right_part)) {
                return "";
              }
              return "" + left_part + right_part;
            case NodeTypes.SYMBOL:
              value = parameters[left];
              if (value != null) {
                delete parameters[left];
                return this.path_identifier(value);
              }
              if (optional) {
                return "";
              } else {
                throw new ParameterMissing("Route parameter missing: " + left);
              }
              break;
            default:
              throw new Error("Unknown Rails node type");
          }
        },
        visit_globbing: function(route, parameters, optional) {
          var left, right, type, value;
    
          type = route[0], left = route[1], right = route[2];
          if (left.replace(/^\*/i, "") !== left) {
            route[1] = left = left.replace(/^\*/i, "");
          }
          value = parameters[left];
          if (value == null) {
            return this.visit(route, parameters, optional);
          }
          parameters[left] = (function() {
            switch (this.get_object_type(value)) {
              case "array":
                return value.join("/");
              default:
                return value;
            }
          }).call(this);
          return this.visit(route, parameters, optional);
        },
        get_prefix: function() {
          var prefix;
    
          prefix = defaults.prefix;
          if (prefix !== "") {
            prefix = (prefix.match("/$") ? prefix : "" + prefix + "/");
          }
          return prefix;
        },
        _classToTypeCache: null,
        _classToType: function() {
          var name, _i, _len, _ref;
    
          if (this._classToTypeCache != null) {
            return this._classToTypeCache;
          }
          this._classToTypeCache = {};
          _ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            this._classToTypeCache["[object " + name + "]"] = name.toLowerCase();
          }
          return this._classToTypeCache;
        },
        get_object_type: function(obj) {
          var strType;
    
          if (window.jQuery && (window.jQuery.type != null)) {
            return window.jQuery.type(obj);
          }
          strType = Object.prototype.toString.call(obj);
          return this._classToType()[strType] || "object";
        },
        namespace: function(root, namespaceString) {
          var current, parts;
    
          parts = (namespaceString ? namespaceString.split(".") : []);
          if (!parts.length) {
            return;
          }
          current = parts.shift();
          root[current] = root[current] || {};
          return Utils.namespace(root[current], parts.join("."));
        }
      };
    
      Utils.namespace(window, "Routes");
    
      window.Routes = {
    // accept_contract => /contracts/:id/accept(.:format)
      accept_contract_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"accept",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // account_my_settings => /my/settings/account(.:format)
      account_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"account",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // actions_my_events => /my/events/actions(.:format)
      actions_my_events_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"events",false],[2,[7,"/",false],[2,[6,"actions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_ad_banner => /admin/ad_banners/:id(.:format)
      admin_ad_banner_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"ad_banners",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_ad_banners => /admin/ad_banners(.:format)
      admin_ad_banners_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"ad_banners",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_arbitrary_verification => /admin/arbitrary_verifications/:id(.:format)
      admin_arbitrary_verification_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verifications",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_arbitrary_verification_type => /admin/arbitrary_verification_types/:id(.:format)
      admin_arbitrary_verification_type_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verification_types",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_arbitrary_verification_types => /admin/arbitrary_verification_types(.:format)
      admin_arbitrary_verification_types_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verification_types",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_arbitrary_verifications => /admin/arbitrary_verifications(.:format)
      admin_arbitrary_verifications_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verifications",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_billing => /admin/billing(.:format)
      admin_billing_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"billing",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_billing_stats => /admin/billing_stats(.:format)
      admin_billing_stats_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"billing_stats",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_blog_post_type => /admin/blog_post_types/:id(.:format)
      admin_blog_post_type_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"blog_post_types",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_blog_post_types => /admin/blog_post_types(.:format)
      admin_blog_post_types_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"blog_post_types",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_blog_posts => /admin/blog_posts(.:format)
      admin_blog_posts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"blog_posts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_card_binding_transactions => /admin/card_binding_transactions(.:format)
      admin_card_binding_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"card_binding_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_categories => /admin/categories(.:format)
      admin_categories_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"categories",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_category => /admin/categories/:id(.:format)
      admin_category_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"categories",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_category_group => /admin/category_groups/:id(.:format)
      admin_category_group_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"category_groups",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_category_groups => /admin/category_groups(.:format)
      admin_category_groups_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"category_groups",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_comment => /admin/comments/:id(.:format)
      admin_comment_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"comments",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_comments => /admin/comments(.:format)
      admin_comments_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"comments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_company_request => /admin/company_requests/:id(.:format)
      admin_company_request_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"company_requests",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_company_requests => /admin/company_requests(.:format)
      admin_company_requests_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"company_requests",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_complaint => /admin/complaints/:id(.:format)
      admin_complaint_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"complaints",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_complaints => /admin/complaints(.:format)
      admin_complaints_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_contract_complaint => /admin/contract_complaints/:id(.:format)
      admin_contract_complaint_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contract_complaints",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_contract_complaints => /admin/contract_complaints(.:format)
      admin_contract_complaints_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contract_complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_contracts => /admin/contracts(.:format)
      admin_contracts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contracts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_delivered_email => /admin/delivered_emails/:id(.:format)
      admin_delivered_email_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"delivered_emails",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_delivered_emails => /admin/delivered_emails(.:format)
      admin_delivered_emails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"delivered_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_disallowed_domain => /admin/disallowed_domains/:id(.:format)
      admin_disallowed_domain_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"disallowed_domains",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_disallowed_domains => /admin/disallowed_domains(.:format)
      admin_disallowed_domains_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"disallowed_domains",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_executor_tasks => /admin/executor_tasks(.:format)
      admin_executor_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"executor_tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_news_announcement => /admin/news_announcements/:id(.:format)
      admin_news_announcement_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"news_announcements",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_news_announcements => /admin/news_announcements(.:format)
      admin_news_announcements_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"news_announcements",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_payment_code => /admin/payment_codes/:id(.:format)
      admin_payment_code_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"payment_codes",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_payment_codes => /admin/payment_codes(.:format)
      admin_payment_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"payment_codes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_payment_transactions => /admin/payment_transactions(.:format)
      admin_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"payment_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_paypal_transactions => /admin/paypal_transactions(.:format)
      admin_paypal_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"paypal_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_promo_code => /admin/promo_codes/:id(.:format)
      admin_promo_code_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"promo_codes",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_promo_codes => /admin/promo_codes(.:format)
      admin_promo_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"promo_codes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_root => /admin(.:format)
      admin_root_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // admin_safe_deal_payment_transactions => /admin/safe_deal_payment_transactions(.:format)
      admin_safe_deal_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"safe_deal_payment_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_safe_deal_payout_transactions => /admin/safe_deal_payout_transactions(.:format)
      admin_safe_deal_payout_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"safe_deal_payout_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_safe_deal_tasks => /admin/safe_deal_tasks(.:format)
      admin_safe_deal_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"safe_deal_tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_service => /admin/services/:id(.:format)
      admin_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_services => /admin/services(.:format)
      admin_services_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_system_variable => /admin/system_variables/:id(.:format)
      admin_system_variable_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"system_variables",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_task => /admin/tasks/:id(.:format)
      admin_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_tasks => /admin/tasks(.:format)
      admin_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_test_emails => /admin/test_emails(.:format)
      admin_test_emails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"test_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_test_emails_send_email => /admin/test_emails/send_email(.:format)
      admin_test_emails_send_email_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"test_emails",false],[2,[7,"/",false],[2,[6,"send_email",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_tinkoff_promo_contact => /admin/tinkoff_promo_contacts/:id(.:format)
      admin_tinkoff_promo_contact_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tinkoff_promo_contacts",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_tinkoff_promo_contacts => /admin/tinkoff_promo_contacts(.:format)
      admin_tinkoff_promo_contacts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tinkoff_promo_contacts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_tinkoff_requests => /admin/tinkoff_requests(.:format)
      admin_tinkoff_requests_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tinkoff_requests",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_user => /admin/users/:id(.:format)
      admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_user_announcement => /admin/user_announcements/:id(.:format)
      admin_user_announcement_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_announcements",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // admin_user_announcements => /admin/user_announcements(.:format)
      admin_user_announcements_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_announcements",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_user_payment_cards => /admin/user_payment_cards(.:format)
      admin_user_payment_cards_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_payment_cards",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_user_rating_events => /admin/user_rating_events(.:format)
      admin_user_rating_events_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_rating_events",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_users => /admin/users(.:format)
      admin_users_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_variables => /admin/variables(.:format)
      admin_variables_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"variables",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // admin_yandex_payment_transactions => /admin/yandex_payment_transactions(.:format)
      admin_yandex_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"yandex_payment_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // agreement => /agreement(.:format)
      agreement_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"agreement",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // announcement => /announcements/:id(.:format)
      announcement_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"announcements",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // anyfile => /anyfiles/:id(.:format)
      anyfile_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"anyfiles",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // anyfiles => /anyfiles(.:format)
      anyfiles_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"anyfiles",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // api_v1_categories => /api/v1/categories(.:format)
      api_v1_categories_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"categories",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // api_v1_category_groups => /api/v1/category_groups(.:format)
      api_v1_category_groups_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"category_groups",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // api_v1_stat => /api/v1/stat(.:format)
      api_v1_stat_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"stat",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // api_v1_tasks => /api/v1/tasks(.:format)
      api_v1_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // arbitrage_task => /tasks/:id/arbitrage(.:format)
      arbitrage_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"arbitrage",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // archive_my_tasks => /my/tasks/archive(.:format)
      archive_my_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // archive_service_response => /services/:service_id/responses/:id/archive(.:format)
      archive_service_response_path: function(_service_id, _id, options) {
      return Utils.build_path(["service_id","id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // archive_task => /tasks/:id/archive(.:format)
      archive_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // archive_task_task_comment => /tasks/:task_id/task_comments/:id/archive(.:format)
      archive_task_task_comment_path: function(_task_id, _id, options) {
      return Utils.build_path(["task_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // attachment => /attachments/:id(.:format)
      attachment_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"attachments",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // attachments => /attachments(.:format)
      attachments_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"attachments",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // auth_tmid => /auth/tmid(.:format)
      auth_tmid_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[6,"tmid",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // auto_pay_my_mail_subscription => /my/mail_subscription/auto_pay(.:format)
      auto_pay_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"auto_pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_checkout => /balance/checkout(.:format)
      balance_checkout_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"checkout",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // balance_code => /balance/code/:id(.:format)
      balance_code_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"code",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_codes => /balance/code(.:format)
      balance_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"code",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // balance_company_success => /balance/company/success(.:format)
      balance_company_success_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"company",false],[2,[7,"/",false],[2,[6,"success",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_main => /balance/new(.:format)
      balance_main_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // balance_paypals => /balance/paypals(.:format)
      balance_paypals_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"paypals",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // balance_robokassa => /balance/robokassa/:id(.:format)
      balance_robokassa_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"robokassa",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_robokassa_fail => /balance/robokassa/fail(.:format)
      balance_robokassa_fail_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"robokassa",false],[2,[7,"/",false],[2,[6,"fail",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_robokassa_result => /balance/robokassa/result(.:format)
      balance_robokassa_result_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"robokassa",false],[2,[7,"/",false],[2,[6,"result",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_robokassa_success => /balance/robokassa/success(.:format)
      balance_robokassa_success_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"robokassa",false],[2,[7,"/",false],[2,[6,"success",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_robokassas => /balance/robokassa(.:format)
      balance_robokassas_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"robokassa",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // balance_yandex_money => /balance/yandex_money/:id(.:format)
      balance_yandex_money_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"yandex_money",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // balance_yandex_moneys => /balance/yandex_money(.:format)
      balance_yandex_moneys_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"yandex_money",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // banner => /banners/:id(.:format)
      banner_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"banners",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // batch_action_admin_ad_banners => /admin/ad_banners/batch_action(.:format)
      batch_action_admin_ad_banners_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"ad_banners",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_blog_post_types => /admin/blog_post_types/batch_action(.:format)
      batch_action_admin_blog_post_types_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"blog_post_types",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_blog_posts => /admin/blog_posts/batch_action(.:format)
      batch_action_admin_blog_posts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"blog_posts",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_card_binding_transactions => /admin/card_binding_transactions/batch_action(.:format)
      batch_action_admin_card_binding_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"card_binding_transactions",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_company_requests => /admin/company_requests/batch_action(.:format)
      batch_action_admin_company_requests_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"company_requests",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_complaints => /admin/complaints/batch_action(.:format)
      batch_action_admin_complaints_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"complaints",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_contract_complaints => /admin/contract_complaints/batch_action(.:format)
      batch_action_admin_contract_complaints_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contract_complaints",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_contracts => /admin/contracts/batch_action(.:format)
      batch_action_admin_contracts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_delivered_emails => /admin/delivered_emails/batch_action(.:format)
      batch_action_admin_delivered_emails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"delivered_emails",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_disallowed_domains => /admin/disallowed_domains/batch_action(.:format)
      batch_action_admin_disallowed_domains_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"disallowed_domains",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_executor_tasks => /admin/executor_tasks/batch_action(.:format)
      batch_action_admin_executor_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"executor_tasks",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_news_announcements => /admin/news_announcements/batch_action(.:format)
      batch_action_admin_news_announcements_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"news_announcements",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_payment_codes => /admin/payment_codes/batch_action(.:format)
      batch_action_admin_payment_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"payment_codes",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_payment_transactions => /admin/payment_transactions/batch_action(.:format)
      batch_action_admin_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"payment_transactions",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_paypal_transactions => /admin/paypal_transactions/batch_action(.:format)
      batch_action_admin_paypal_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"paypal_transactions",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_promo_codes => /admin/promo_codes/batch_action(.:format)
      batch_action_admin_promo_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"promo_codes",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_safe_deal_payment_transactions => /admin/safe_deal_payment_transactions/batch_action(.:format)
      batch_action_admin_safe_deal_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"safe_deal_payment_transactions",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_safe_deal_payout_transactions => /admin/safe_deal_payout_transactions/batch_action(.:format)
      batch_action_admin_safe_deal_payout_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"safe_deal_payout_transactions",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_safe_deal_tasks => /admin/safe_deal_tasks/batch_action(.:format)
      batch_action_admin_safe_deal_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"safe_deal_tasks",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_services => /admin/services/batch_action(.:format)
      batch_action_admin_services_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_system_variables => /admin/system_variables/batch_action(.:format)
      batch_action_admin_system_variables_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"system_variables",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_tasks => /admin/tasks/batch_action(.:format)
      batch_action_admin_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_tinkoff_promo_contacts => /admin/tinkoff_promo_contacts/batch_action(.:format)
      batch_action_admin_tinkoff_promo_contacts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tinkoff_promo_contacts",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_tinkoff_requests => /admin/tinkoff_requests/batch_action(.:format)
      batch_action_admin_tinkoff_requests_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tinkoff_requests",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_user_announcements => /admin/user_announcements/batch_action(.:format)
      batch_action_admin_user_announcements_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_announcements",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_user_payment_cards => /admin/user_payment_cards/batch_action(.:format)
      batch_action_admin_user_payment_cards_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_payment_cards",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_user_rating_events => /admin/user_rating_events/batch_action(.:format)
      batch_action_admin_user_rating_events_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_rating_events",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_users => /admin/users/batch_action(.:format)
      batch_action_admin_users_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_action_admin_yandex_payment_transactions => /admin/yandex_payment_transactions/batch_action(.:format)
      batch_action_admin_yandex_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"yandex_payment_transactions",false],[2,[7,"/",false],[2,[6,"batch_action",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // batch_anyfiles => /anyfiles/batch(.:format)
      batch_anyfiles_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"anyfiles",false],[2,[7,"/",false],[2,[6,"batch",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // blog_image_anyfiles => /anyfiles/blog_image(.:format)
      blog_image_anyfiles_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"anyfiles",false],[2,[7,"/",false],[2,[6,"blog_image",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // blog_post_response_comments => /blog_posts/responses/:id/comments(.:format)
      blog_post_response_comments_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"blog_posts",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"comments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // blog_post_responses => /blog_posts/:post_id/responses(.:format)
      blog_post_responses_path: function(_post_id, options) {
      return Utils.build_path(["post_id"], ["format"], [2,[7,"/",false],[2,[6,"blog_posts",false],[2,[7,"/",false],[2,[3,"post_id",false],[2,[7,"/",false],[2,[6,"responses",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // brainstorage_recommendation => /brainstorage/recommendations/:id(.:format)
      brainstorage_recommendation_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"recommendations",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // brainstorage_recommendations => /brainstorage/recommendations(.:format)
      brainstorage_recommendations_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"recommendations",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // brainstorage_signature => /brainstorage/signature(.:format)
      brainstorage_signature_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"signature",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // brainstorage_work => /brainstorage/works/:id(.:format)
      brainstorage_work_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"works",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // brainstorage_works => /brainstorage/works(.:format)
      brainstorage_works_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"works",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // buy_contacts_access_my_payments_account => /my/billing/buy_contacts_access(.:format)
      buy_contacts_access_my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"buy_contacts_access",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // buy_response_my_payments_account => /my/billing/buy_response(.:format)
      buy_response_my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"buy_response",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // cancel_omniauth => /users/auth/cancel(.:format)
      cancel_omniauth_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[6,"cancel",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // cancel_task => /tasks/:id/cancel(.:format)
      cancel_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"cancel",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // cancel_user_registration => /users/cancel(.:format)
      cancel_user_registration_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"cancel",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // cart_task => /tasks/:id/cart(.:format)
      cart_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"cart",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // categories_filters => /filters/categories(.:format)
      categories_filters_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"filters",false],[2,[7,"/",false],[2,[6,"categories",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // categories_freelancer_projects => /freelancers/:freelancer_id/projects/categories(.:format)
      categories_freelancer_projects_path: function(_freelancer_id, options) {
      return Utils.build_path(["freelancer_id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[6,"categories",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // category_freelancer_projects => /freelancers/:freelancer_id/projects/category/:category_id(.:format)
      category_freelancer_projects_path: function(_freelancer_id, _category_id, options) {
      return Utils.build_path(["freelancer_id","category_id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[6,"category",false],[2,[7,"/",false],[2,[3,"category_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // change_design_my_settings => /my/settings/change_design(.:format)
      change_design_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"change_design",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // change_email_my_settings => /my/settings/change_email(.:format)
      change_email_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"change_email",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // change_password_my_settings => /my/settings/change_password(.:format)
      change_password_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"change_password",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // change_state_freelancer => /freelancers/:id/change_state(.:format)
      change_state_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"change_state",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // checkout_hirer_subscription_my_payments_account => /my/billing/checkout_hirer_subscription(.:format)
      checkout_hirer_subscription_my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"checkout_hirer_subscription",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // checkout_profile_services_my_payments_account => /my/billing/checkout_profile_services(.:format)
      checkout_profile_services_my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"checkout_profile_services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // checkout_subscription_my_payments_account => /my/billing/checkout_subscription(.:format)
      checkout_subscription_my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"checkout_subscription",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // checkout_task => /tasks/:id/checkout(.:format)
      checkout_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"checkout",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // cities_geo => /geo/cities(.:format)
      cities_geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"cities",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // click_email_tracking_message => /email_tracking/messages/:id/click(.:format)
      click_email_tracking_message_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"email_tracking",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"click",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // comment_user_freelancer => /users/:user_id/freelancers/:id/comment(.:format)
      comment_user_freelancer_path: function(_user_id, _id, options) {
      return Utils.build_path(["user_id","id"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"comment",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // comments_my_events => /my/events/comments(.:format)
      comments_my_events_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"events",false],[2,[7,"/",false],[2,[6,"comments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // complaint_contract => /contracts/:id/complaint(.:format)
      complaint_contract_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"complaint",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // complaints => /complaints(.:format)
      complaints_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // complaints_freelancer => /freelancers/:id/complaints(.:format)
      complaints_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // complaints_my_tasks => /my/tasks/complaints(.:format)
      complaints_my_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // completed_my_tasks => /my/tasks/completed(.:format)
      completed_my_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"completed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // components => /components(.:format)
      components_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"components",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // confirm_hq_user => /hq/users/:id/confirm(.:format)
      confirm_hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"confirm",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // contacts_freelancer => /freelancers/:id/contacts(.:format)
      contacts_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"contacts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // contract => /contracts/:id(.:format)
      contract_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // contract_complaints => /contract_complaints(.:format)
      contract_complaints_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"contract_complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // contract_task => /tasks/:id/contract(.:format)
      contract_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"contract",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // contracts => /contracts(.:format)
      contracts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // countries_geo => /geo/countries(.:format)
      countries_geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"countries",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // csv_admin_delivered_emails => /admin/delivered_emails/csv(.:format)
      csv_admin_delivered_emails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"delivered_emails",false],[2,[7,"/",false],[2,[6,"csv",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // delete_admin_user => /admin/users/:id/delete(.:format)
      delete_admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"delete",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // delete_avatar_user_branding => /users/:user_id/branding/delete_avatar(.:format)
      delete_avatar_user_branding_path: function(_user_id, options) {
      return Utils.build_path(["user_id"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"branding",false],[2,[7,"/",false],[2,[6,"delete_avatar",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // delete_banner_user_branding => /users/:user_id/branding/delete_banner(.:format)
      delete_banner_user_branding_path: function(_user_id, options) {
      return Utils.build_path(["user_id"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"branding",false],[2,[7,"/",false],[2,[6,"delete_banner",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // delete_comment_user_freelancer => /users/:user_id/freelancers/:id/delete_comment(.:format)
      delete_comment_user_freelancer_path: function(_user_id, _id, options) {
      return Utils.build_path(["user_id","id"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"delete_comment",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // delete_info_admin_user => /admin/users/:id/delete_info(.:format)
      delete_info_admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"delete_info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // delete_info_freelancer => /freelancers/:id/delete_info(.:format)
      delete_info_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"delete_info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // design_my_settings => /my/settings/design(.:format)
      design_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"design",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // destroy_user_session => /users/sign_out(.:format)
      destroy_user_session_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_out",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // dismiss_announcement => /announcements/:id/dismiss(.:format)
      dismiss_announcement_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"announcements",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"dismiss",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // dismiss_banner => /banners/:id/dismiss(.:format)
      dismiss_banner_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"banners",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"dismiss",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // dismiss_guest_announcement => /announcements/:id/dismiss_guest(.:format)
      dismiss_guest_announcement_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"announcements",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"dismiss_guest",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // draft_service => /services/:id/draft(.:format)
      draft_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"draft",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // draw_admin_contract_complaint => /admin/contract_complaints/:id/draw(.:format)
      draw_admin_contract_complaint_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contract_complaints",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"draw",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_ad_banner => /admin/ad_banners/:id/edit(.:format)
      edit_admin_ad_banner_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"ad_banners",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_arbitrary_verification => /admin/arbitrary_verifications/:id/edit(.:format)
      edit_admin_arbitrary_verification_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verifications",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_arbitrary_verification_type => /admin/arbitrary_verification_types/:id/edit(.:format)
      edit_admin_arbitrary_verification_type_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verification_types",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_blog_post_type => /admin/blog_post_types/:id/edit(.:format)
      edit_admin_blog_post_type_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"blog_post_types",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_category => /admin/categories/:id/edit(.:format)
      edit_admin_category_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"categories",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_category_group => /admin/category_groups/:id/edit(.:format)
      edit_admin_category_group_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"category_groups",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_comment_hq_user => /hq/users/:id/edit_admin_comment(.:format)
      edit_admin_comment_hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit_admin_comment",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_company_request => /admin/company_requests/:id/edit(.:format)
      edit_admin_company_request_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"company_requests",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_delivered_email => /admin/delivered_emails/:id/edit(.:format)
      edit_admin_delivered_email_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"delivered_emails",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_disallowed_domain => /admin/disallowed_domains/:id/edit(.:format)
      edit_admin_disallowed_domain_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"disallowed_domains",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_news_announcement => /admin/news_announcements/:id/edit(.:format)
      edit_admin_news_announcement_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"news_announcements",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_service => /admin/services/:id/edit(.:format)
      edit_admin_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_task => /admin/tasks/:id/edit(.:format)
      edit_admin_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_user => /admin/users/:id/edit(.:format)
      edit_admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_admin_user_announcement => /admin/user_announcements/:id/edit(.:format)
      edit_admin_user_announcement_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_announcements",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_anyfile => /anyfiles/:id/edit(.:format)
      edit_anyfile_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"anyfiles",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_balance_code => /balance/code/:id/edit(.:format)
      edit_balance_code_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"code",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_balance_robokassa => /balance/robokassa/:id/edit(.:format)
      edit_balance_robokassa_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"robokassa",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_balance_yandex_money => /balance/yandex_money/:id/edit(.:format)
      edit_balance_yandex_money_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"yandex_money",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_brainstorage_recommendations => /brainstorage/recommendations/edit(.:format)
      edit_brainstorage_recommendations_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"recommendations",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_brainstorage_works => /brainstorage/works/edit(.:format)
      edit_brainstorage_works_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"works",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_contract => /contracts/:id/edit(.:format)
      edit_contract_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_email_hq_user => /hq/users/:id/edit_email(.:format)
      edit_email_hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit_email",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_filter => /filters/:id/edit(.:format)
      edit_filter_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"filters",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_freelancer_opinion => /freelancers/:freelancer_id/opinions/:id/edit(.:format)
      edit_freelancer_opinion_path: function(_freelancer_id, _id, options) {
      return Utils.build_path(["freelancer_id","id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"opinions",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_geo => /geo/edit(.:format)
      edit_geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // edit_hq_analytic => /hq/analytics/:id/edit(.:format)
      edit_hq_analytic_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_hq_billing_company_request => /hq/billing/company_requests/:id/edit(.:format)
      edit_hq_billing_company_request_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"company_requests",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_hq_billing_payment_transaction => /hq/billing/payment_transactions/:id/edit(.:format)
      edit_hq_billing_payment_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"payment_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_hq_billing_robokassa_payment_transaction => /hq/billing/robokassa_payment_transactions/:id/edit(.:format)
      edit_hq_billing_robokassa_payment_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"robokassa_payment_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_hq_billing_yandex_payment_transaction => /hq/billing/yandex_payment_transactions/:id/edit(.:format)
      edit_hq_billing_yandex_payment_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"yandex_payment_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_introduction => /introduction/:id/edit(.:format)
      edit_introduction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"introduction",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_login_hq_user => /hq/users/:id/edit_login(.:format)
      edit_login_hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit_login",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_my_mail_subscription => /my/mail_subscription/edit(.:format)
      edit_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_my_payments_account => /my/billing/edit(.:format)
      edit_my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_my_task => /my/tasks/:id/edit(.:format)
      edit_my_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // edit_onboard => /onboard/:id/edit(.:format)
      edit_onboard_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"onboard",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_payment_card => /payment_cards/:id/edit(.:format)
      edit_payment_card_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"payment_cards",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_post => /posts/:id/edit(.:format)
      edit_post_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_post_response => /posts/:post_id/responses/:id/edit(.:format)
      edit_post_response_path: function(_post_id, _id, options) {
      return Utils.build_path(["post_id","id"], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[3,"post_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_project => /projects/:id/edit(.:format)
      edit_project_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_response_comment => /responses/:response_id/comments/:id/edit(.:format)
      edit_response_comment_path: function(_response_id, _id, options) {
      return Utils.build_path(["response_id","id"], ["format"], [2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"response_id",false],[2,[7,"/",false],[2,[6,"comments",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_service => /services/:id/edit(.:format)
      edit_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_service_response => /services/:service_id/responses/:id/edit(.:format)
      edit_service_response_path: function(_service_id, _id, options) {
      return Utils.build_path(["service_id","id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_task => /tasks/:id/edit(.:format)
      edit_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_task_task_comment => /tasks/:task_id/task_comments/:id/edit(.:format)
      edit_task_task_comment_path: function(_task_id, _id, options) {
      return Utils.build_path(["task_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // edit_user_password => /users/password/edit(.:format)
      edit_user_password_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // edit_user_registration => /users/edit(.:format)
      edit_user_registration_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // email_my_settings => /my/settings/email(.:format)
      email_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"email",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // email_recovery_email => /email_recovery/emails/:id(.:format)
      email_recovery_email_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"emails",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // email_recovery_emails => /email_recovery/emails(.:format)
      email_recovery_emails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // email_recovery_gmail => /email_recovery/gmails/:id(.:format)
      email_recovery_gmail_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"gmails",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // email_recovery_gmails => /email_recovery/gmails(.:format)
      email_recovery_gmails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"gmails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // employer_admin_contract_complaint => /admin/contract_complaints/:id/employer(.:format)
      employer_admin_contract_complaint_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contract_complaints",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"employer",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // employer_freelancer => /freelancers/:id/employer(.:format)
      employer_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"employer",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // employer_freelancer_opinions => /freelancers/:freelancer_id/opinions/employer(.:format)
      employer_freelancer_opinions_path: function(_freelancer_id, options) {
      return Utils.build_path(["freelancer_id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"opinions",false],[2,[7,"/",false],[2,[6,"employer",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // executor_admin_contract_complaint => /admin/contract_complaints/:id/executor(.:format)
      executor_admin_contract_complaint_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"contract_complaints",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"executor",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // executor_found_task => /tasks/:id/executor_found(.:format)
      executor_found_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"executor_found",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // failure_paypal => /paypal/failure(.:format)
      failure_paypal_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"paypal",false],[2,[7,"/",false],[2,[6,"failure",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // fav_freelancer => /freelancers/:id/fav(.:format)
      fav_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"fav",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // favorite_add_or_remove_freelancer => /freelancers/:id/favorite_add_or_remove(.:format)
      favorite_add_or_remove_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"favorite_add_or_remove",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // favorite_add_or_remove_task_task_comment => /tasks/:task_id/task_comments/:id/favorite_add_or_remove(.:format)
      favorite_add_or_remove_task_task_comment_path: function(_task_id, _id, options) {
      return Utils.build_path(["task_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"favorite_add_or_remove",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // favorites_user_freelancers => /users/:user_id/freelancers/favorites(.:format)
      favorites_user_freelancers_path: function(_user_id, options) {
      return Utils.build_path(["user_id"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[6,"favorites",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // feedback => /feedback(.:format)
      feedback_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"feedback",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // filter => /filters/:id(.:format)
      filter_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"filters",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // filters => /filters(.:format)
      filters_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"filters",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // finish_task => /tasks/:id/finish(.:format)
      finish_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"finish",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // freelancer => /freelancers/:id(.:format)
      freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // freelancer_inquiry => /freelancers/:freelancer_id/inquiry(.:format)
      freelancer_inquiry_path: function(_freelancer_id, options) {
      return Utils.build_path(["freelancer_id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"inquiry",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // freelancer_opinion => /freelancers/:freelancer_id/opinions/:id(.:format)
      freelancer_opinion_path: function(_freelancer_id, _id, options) {
      return Utils.build_path(["freelancer_id","id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"opinions",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // freelancer_opinions => /freelancers/:freelancer_id/opinions(.:format)
      freelancer_opinions_path: function(_freelancer_id, options) {
      return Utils.build_path(["freelancer_id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"opinions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // freelancer_projects => /freelancers/:freelancer_id/projects(.:format)
      freelancer_projects_path: function(_freelancer_id, options) {
      return Utils.build_path(["freelancer_id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"projects",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // freelancers => /freelancers(.:format)
      freelancers_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // freelancers_subscribe_notification => /freelancers/subscribe/:notification/:signature(.:format)
      freelancers_subscribe_notification_path: function(_notification, _signature, options) {
      return Utils.build_path(["notification","signature"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[6,"subscribe",false],[2,[7,"/",false],[2,[3,"notification",false],[2,[7,"/",false],[2,[3,"signature",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // freelancers_unsubscribe_notification => /freelancers/unsubscribe/:notification/:signature(.:format)
      freelancers_unsubscribe_notification_path: function(_notification, _signature, options) {
      return Utils.build_path(["notification","signature"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[6,"unsubscribe",false],[2,[7,"/",false],[2,[3,"notification",false],[2,[7,"/",false],[2,[3,"signature",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // from_archive_task_task_comment => /tasks/:task_id/task_comments/:id/from_archive(.:format)
      from_archive_task_task_comment_path: function(_task_id, _id, options) {
      return Utils.build_path(["task_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"from_archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // generate_hq_codes => /hq/codes/generate(.:format)
      generate_hq_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"codes",false],[2,[7,"/",false],[2,[6,"generate",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // geo => /geo(.:format)
      geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // help => /help/:help_part(.:format)
      help_path: function(_help_part, options) {
      return Utils.build_path(["help_part"], ["format"], [2,[7,"/",false],[2,[6,"help",false],[2,[7,"/",false],[2,[3,"help_part",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // help_club_page => /help/club/:constraint(.:format)
      help_club_page_path: function(_constraint, options) {
      return Utils.build_path(["constraint"], ["format"], [2,[7,"/",false],[2,[6,"help",false],[2,[7,"/",false],[2,[6,"club",false],[2,[7,"/",false],[2,[3,"constraint",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // help_customer_page => /help/customer/:constraint(.:format)
      help_customer_page_path: function(_constraint, options) {
      return Utils.build_path(["constraint"], ["format"], [2,[7,"/",false],[2,[6,"help",false],[2,[7,"/",false],[2,[6,"customer",false],[2,[7,"/",false],[2,[3,"constraint",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // help_freelancer_page => /help/freelancer/:constraint(.:format)
      help_freelancer_page_path: function(_constraint, options) {
      return Utils.build_path(["constraint"], ["format"], [2,[7,"/",false],[2,[6,"help",false],[2,[7,"/",false],[2,[6,"freelancer",false],[2,[7,"/",false],[2,[3,"constraint",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // help_payments_page => /help/payments/:constraint(.:format)
      help_payments_page_path: function(_constraint, options) {
      return Utils.build_path(["constraint"], ["format"], [2,[7,"/",false],[2,[6,"help",false],[2,[7,"/",false],[2,[6,"payments",false],[2,[7,"/",false],[2,[3,"constraint",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // help_safe_deals_page => /help/safe_deals/:constraint(.:format)
      help_safe_deals_page_path: function(_constraint, options) {
      return Utils.build_path(["constraint"], ["format"], [2,[7,"/",false],[2,[6,"help",false],[2,[7,"/",false],[2,[6,"safe_deals",false],[2,[7,"/",false],[2,[3,"constraint",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hide_admin_service => /admin/services/:id/hide(.:format)
      hide_admin_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"hide",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hide_admin_task => /admin/tasks/:id/hide(.:format)
      hide_admin_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"hide",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hide_news_notice => /hide_news_notice(.:format)
      hide_news_notice_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hide_news_notice",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // hide_notice_email_recovery_emails => /email_recovery/emails/hide_notice(.:format)
      hide_notice_email_recovery_emails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"emails",false],[2,[7,"/",false],[2,[6,"hide_notice",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hide_notice_email_recovery_gmails => /email_recovery/gmails/hide_notice(.:format)
      hide_notice_email_recovery_gmails_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"gmails",false],[2,[7,"/",false],[2,[6,"hide_notice",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hold_task => /tasks/:id/hold(.:format)
      hold_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"hold",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_analytic => /hq/analytics/:id(.:format)
      hq_analytic_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_analytics => /hq/analytics(.:format)
      hq_analytics_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // hq_billing_billing_payment_code => /hq/billing/billing_payment_codes/:id(.:format)
      hq_billing_billing_payment_code_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"billing_payment_codes",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hq_billing_billing_payment_codes => /hq/billing/billing_payment_codes(.:format)
      hq_billing_billing_payment_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"billing_payment_codes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_billing_company_request => /hq/billing/company_requests/:id(.:format)
      hq_billing_company_request_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"company_requests",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hq_billing_company_requests => /hq/billing/company_requests(.:format)
      hq_billing_company_requests_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"company_requests",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_billing_payment_code => /hq/billing/payment_codes/:id(.:format)
      hq_billing_payment_code_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"payment_codes",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hq_billing_payment_codes => /hq/billing/payment_codes(.:format)
      hq_billing_payment_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"payment_codes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_billing_payment_transaction => /hq/billing/payment_transactions/:id(.:format)
      hq_billing_payment_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"payment_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hq_billing_payment_transactions => /hq/billing/payment_transactions(.:format)
      hq_billing_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"payment_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_billing_robokassa_payment_transaction => /hq/billing/robokassa_payment_transactions/:id(.:format)
      hq_billing_robokassa_payment_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"robokassa_payment_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hq_billing_robokassa_payment_transactions => /hq/billing/robokassa_payment_transactions(.:format)
      hq_billing_robokassa_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"robokassa_payment_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_billing_yandex_payment_transaction => /hq/billing/yandex_payment_transactions/:id(.:format)
      hq_billing_yandex_payment_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"yandex_payment_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hq_billing_yandex_payment_transactions => /hq/billing/yandex_payment_transactions(.:format)
      hq_billing_yandex_payment_transactions_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"yandex_payment_transactions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_queue_admins => /hq/queue_admins(.:format)
      hq_queue_admins_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"queue_admins",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // hq_stats => /hq/stats(.:format)
      hq_stats_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"stats",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // hq_user => /hq/users/:id(.:format)
      hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // hq_user_toggle_admin => /hq/users/:user_id/toggle_admin(.:format)
      hq_user_toggle_admin_path: function(_user_id, options) {
      return Utils.build_path(["user_id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"toggle_admin",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // hq_users => /hq/users(.:format)
      hq_users_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // import_brainstorage_recommendations => /brainstorage/recommendations/import(.:format)
      import_brainstorage_recommendations_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"recommendations",false],[2,[7,"/",false],[2,[6,"import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // import_brainstorage_works => /brainstorage/works/import(.:format)
      import_brainstorage_works_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"works",false],[2,[7,"/",false],[2,[6,"import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // in_progress_my_tasks => /my/tasks/in_progress(.:format)
      in_progress_my_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"in_progress",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // info_about => /info/about(.:format)
      info_about_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"about",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_agreement => /info/agreement(.:format)
      info_agreement_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"agreement",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_agreement_old => /info/agreement_old(.:format)
      info_agreement_old_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"agreement_old",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_changelog => /info/changelog(.:format)
      info_changelog_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"changelog",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_club => /info/club(.:format)
      info_club_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"club",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_club_rules => /info/club_rules(.:format)
      info_club_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"club_rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_common_rules => /info/common_rules(.:format)
      info_common_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"common_rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_confidential => /info/confidential(.:format)
      info_confidential_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"confidential",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_faq => /info/faq(.:format)
      info_faq_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"faq",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_for_customers => /info/for_customers(.:format)
      info_for_customers_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"for_customers",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_for_freelancers => /info/for_freelancers(.:format)
      info_for_freelancers_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"for_freelancers",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_legal => /info/legal(.:format)
      info_legal_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"legal",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_legal_agreement => /info/legal/agreement(.:format)
      info_legal_agreement_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"legal",false],[2,[7,"/",false],[2,[6,"agreement",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // info_legal_info => /info/legal_info(.:format)
      info_legal_info_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"legal_info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_legal_pp => /info/legal/pp(.:format)
      info_legal_pp_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"legal",false],[2,[7,"/",false],[2,[6,"pp",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // info_legal_rules => /info/legal/rules(.:format)
      info_legal_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"legal",false],[2,[7,"/",false],[2,[6,"rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // info_legal_tos => /info/legal/tos(.:format)
      info_legal_tos_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"legal",false],[2,[7,"/",false],[2,[6,"tos",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // info_offer => /info/offer(.:format)
      info_offer_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"offer",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_pricing => /info/pricing(.:format)
      info_pricing_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"pricing",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_responses_rules => /info/responses_rules(.:format)
      info_responses_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"responses_rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_rules => /info/rules(.:format)
      info_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_safe_deals_offer => /info/safe_deals/offer_and_acceptance(.:format)
      info_safe_deals_offer_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"safe_deals",false],[2,[7,"/",false],[2,[6,"offer_and_acceptance",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // info_safe_deals_rules => /info/safe_deals/rules(.:format)
      info_safe_deals_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"safe_deals",false],[2,[7,"/",false],[2,[6,"rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // info_services => /info/services(.:format)
      info_services_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_tasks_rules => /info/tasks_rules(.:format)
      info_tasks_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"tasks_rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // info_user_rules => /info/user_rules(.:format)
      info_user_rules_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"user_rules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // init_payment_cards => /payment_cards/init(.:format)
      init_payment_cards_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"payment_cards",false],[2,[7,"/",false],[2,[6,"init",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // initiate_task_conversations => /tasks/:task_id/conversations/initiate(.:format)
      initiate_task_conversations_path: function(_task_id, options) {
      return Utils.build_path(["task_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"conversations",false],[2,[7,"/",false],[2,[6,"initiate",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // instantly_activate_my_mail_subscription => /my/mail_subscription/instantly_activate(.:format)
      instantly_activate_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"instantly_activate",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // instantly_deactivate_my_mail_subscription => /my/mail_subscription/instantly_deactivate(.:format)
      instantly_deactivate_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"instantly_deactivate",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // instantly_pay_my_mail_subscription => /my/mail_subscription/instantly_pay(.:format)
      instantly_pay_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"instantly_pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // intro => /intro(.:format)
      intro_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"intro",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // introduction => /introduction/:id(.:format)
      introduction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"introduction",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // introduction_index => /introduction(.:format)
      introduction_index_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"introduction",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // like_post => /posts/:id/like(.:format)
      like_post_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"like",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // lock_admin_user => /admin/users/:id/lock(.:format)
      lock_admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"lock",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // lock_hq_user => /hq/users/:id/lock(.:format)
      lock_hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"lock",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // lock_info_admin_user => /admin/users/:id/lock_info(.:format)
      lock_info_admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"lock_info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // lock_info_freelancer => /freelancers/:id/lock_info(.:format)
      lock_info_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"lock_info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // login_admin_user => /admin/users/:id/login(.:format)
      login_admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"login",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // login_hq_user => /hq/users/:id/login(.:format)
      login_hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"login",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // mark_freelancer => /freelancers/:id/mark(.:format)
      mark_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"mark",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // mark_service_response => /services/:service_id/responses/:id/mark(.:format)
      mark_service_response_path: function(_service_id, _id, options) {
      return Utils.build_path(["service_id","id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"mark",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // money_in_hq_analytics => /hq/analytics/money_in(.:format)
      money_in_hq_analytics_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[6,"money_in",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // money_in_yandex_hq_analytics => /hq/analytics/money_in_yandex(.:format)
      money_in_yandex_hq_analytics_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[6,"money_in_yandex",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // money_out_hq_analytics => /hq/analytics/money_out(.:format)
      money_out_hq_analytics_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[6,"money_out",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_archive_responses => /my/responses/archive(.:format)
      my_archive_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_archived_responses => /my/responses/archived(.:format)
      my_archived_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"archived",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_check_code => /my/check_code(.:format)
      my_check_code_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"check_code",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_complaints_responses => /my/responses/complaints(.:format)
      my_complaints_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_completed_responses => /my/responses/completed(.:format)
      my_completed_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"completed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_contacts => /my/contacts(.:format)
      my_contacts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"contacts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_current_responses => /my/responses/current(.:format)
      my_current_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"current",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_customer_payments => /my/customer_payments(.:format)
      my_customer_payments_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"customer_payments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_events => /my/events(.:format)
      my_events_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"events",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_freelancer_payments => /my/freelancer_payments(.:format)
      my_freelancer_payments_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"freelancer_payments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_invites_responses => /my/responses/invites(.:format)
      my_invites_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"invites",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_mail_subscription => /my/mail_subscription(.:format)
      my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_payments_account => /my/billing(.:format)
      my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_payments_transaction => /my/receipts/:id(.:format)
      my_payments_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"receipts",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_personal => /my/personal(.:format)
      my_personal_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"personal",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_position => /my/position(.:format)
      my_position_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"position",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_profile_payments => /my/profile_payments(.:format)
      my_profile_payments_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"profile_payments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_responses => /my/responses(.:format)
      my_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_service_responses => /my/responses/services(.:format)
      my_service_responses_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_services => /my/services(.:format)
      my_services_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_social => /my/socials/:id(.:format)
      my_social_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"socials",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_socials => /my/socials(.:format)
      my_socials_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"socials",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_specialization => /my/specialization(.:format)
      my_specialization_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"specialization",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_task => /my/tasks/:id(.:format)
      my_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // my_tasks => /my/tasks(.:format)
      my_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // my_toggle_role => /my/toggle_role(.:format)
      my_toggle_role_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"toggle_role",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_admin_ad_banner => /admin/ad_banners/new(.:format)
      new_admin_ad_banner_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"ad_banners",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_arbitrary_verification => /admin/arbitrary_verifications/new(.:format)
      new_admin_arbitrary_verification_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verifications",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_arbitrary_verification_type => /admin/arbitrary_verification_types/new(.:format)
      new_admin_arbitrary_verification_type_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"arbitrary_verification_types",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_blog_post_type => /admin/blog_post_types/new(.:format)
      new_admin_blog_post_type_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"blog_post_types",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_company_request => /admin/company_requests/new(.:format)
      new_admin_company_request_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"company_requests",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_delivered_email => /admin/delivered_emails/new(.:format)
      new_admin_delivered_email_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"delivered_emails",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_disallowed_domain => /admin/disallowed_domains/new(.:format)
      new_admin_disallowed_domain_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"disallowed_domains",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_news_announcement => /admin/news_announcements/new(.:format)
      new_admin_news_announcement_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"news_announcements",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_payment_code => /admin/payment_codes/new(.:format)
      new_admin_payment_code_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"payment_codes",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_promo_code => /admin/promo_codes/new(.:format)
      new_admin_promo_code_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"promo_codes",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_admin_user_announcement => /admin/user_announcements/new(.:format)
      new_admin_user_announcement_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"user_announcements",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_agreement => /agreement/new(.:format)
      new_agreement_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"agreement",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_anyfile => /anyfiles/new(.:format)
      new_anyfile_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"anyfiles",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_balance_code => /balance/code/new(.:format)
      new_balance_code_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"code",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_balance_robokassa => /balance/robokassa/new(.:format)
      new_balance_robokassa_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"robokassa",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_balance_yandex_money => /balance/yandex_money/new(.:format)
      new_balance_yandex_money_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"balance",false],[2,[7,"/",false],[2,[6,"yandex_money",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_complaint => /complaints/new(.:format)
      new_complaint_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"complaints",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_email_recovery_email => /email_recovery/emails/new(.:format)
      new_email_recovery_email_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"emails",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_email_recovery_gmail => /email_recovery/gmails/new(.:format)
      new_email_recovery_gmail_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"email_recovery",false],[2,[7,"/",false],[2,[6,"gmails",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_filter => /filters/new(.:format)
      new_filter_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"filters",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_freelancer => /freelancers/new(.:format)
      new_freelancer_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_freelancer_opinion => /freelancers/:freelancer_id/opinions/new(.:format)
      new_freelancer_opinion_path: function(_freelancer_id, options) {
      return Utils.build_path(["freelancer_id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"freelancer_id",false],[2,[7,"/",false],[2,[6,"opinions",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_geo => /geo/new(.:format)
      new_geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_hq_analytic => /hq/analytics/new(.:format)
      new_hq_analytic_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_hq_billing_company_request => /hq/billing/company_requests/new(.:format)
      new_hq_billing_company_request_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"company_requests",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_hq_billing_payment_transaction => /hq/billing/payment_transactions/new(.:format)
      new_hq_billing_payment_transaction_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"payment_transactions",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_hq_billing_robokassa_payment_transaction => /hq/billing/robokassa_payment_transactions/new(.:format)
      new_hq_billing_robokassa_payment_transaction_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"robokassa_payment_transactions",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_hq_billing_yandex_payment_transaction => /hq/billing/yandex_payment_transactions/new(.:format)
      new_hq_billing_yandex_payment_transaction_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"yandex_payment_transactions",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_introduction => /introduction/new(.:format)
      new_introduction_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"introduction",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_my_mail_subscription => /my/mail_subscription/new(.:format)
      new_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_my_payments_account => /my/billing/new(.:format)
      new_my_payments_account_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"billing",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_my_task => /my/tasks/new(.:format)
      new_my_task_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_onboard => /onboard/new(.:format)
      new_onboard_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"onboard",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_payment_card => /payment_cards/new(.:format)
      new_payment_card_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"payment_cards",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_post => /posts/new(.:format)
      new_post_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_post_response => /posts/:post_id/responses/new(.:format)
      new_post_response_path: function(_post_id, options) {
      return Utils.build_path(["post_id"], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[3,"post_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_project => /projects/new(.:format)
      new_project_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_service => /services/new(.:format)
      new_service_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_service_feedback => /services/:service_id/feedback/new(.:format)
      new_service_feedback_path: function(_service_id, options) {
      return Utils.build_path(["service_id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"feedback",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_service_response => /services/:service_id/responses/new(.:format)
      new_service_response_path: function(_service_id, options) {
      return Utils.build_path(["service_id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_sms_verification => /sms_verifications/new(.:format)
      new_sms_verification_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"sms_verifications",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_task => /tasks/new(.:format)
      new_task_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_task_contract => /tasks/:task_id/contracts/new(.:format)
      new_task_contract_path: function(_task_id, options) {
      return Utils.build_path(["task_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_task_opinion => /tasks/:task_id/opinions/new(.:format)
      new_task_opinion_path: function(_task_id, options) {
      return Utils.build_path(["task_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"opinions",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_task_task_comment => /tasks/:task_id/task_comments/new(.:format)
      new_task_task_comment_path: function(_task_id, options) {
      return Utils.build_path(["task_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // new_tinkoff_promo_contact => /tinkoff(.:format)
      new_tinkoff_promo_contact_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoff",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // new_user_confirmation => /users/confirmation/new(.:format)
      new_user_confirmation_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"confirmation",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_user_password => /users/password/new(.:format)
      new_user_password_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // new_user_registration => /users/sign_up(.:format)
      new_user_registration_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_up",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // new_user_session => /users/sign_in(.:format)
      new_user_session_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_in",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // notifications_my_events => /my/events/notifications(.:format)
      notifications_my_events_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"events",false],[2,[7,"/",false],[2,[6,"notifications",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // notifications_my_settings => /my/settings/notifications(.:format)
      notifications_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"notifications",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // oembed => /oembed(.:format)
      oembed_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"oembed",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // onboard => /onboard/:id(.:format)
      onboard_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"onboard",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // onboard_index => /onboard(.:format)
      onboard_index_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"onboard",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // open_email_tracking_message => /email_tracking/messages/:id/open(.:format)
      open_email_tracking_message_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"email_tracking",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"open",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // other_hq_analytics => /hq/analytics/other(.:format)
      other_hq_analytics_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[6,"other",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // pay_admin_paypal_transaction => /admin/paypal_transactions/:id/pay(.:format)
      pay_admin_paypal_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"paypal_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // pay_admin_yandex_payment_transaction => /admin/yandex_payment_transactions/:id/pay(.:format)
      pay_admin_yandex_payment_transaction_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"yandex_payment_transactions",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // pay_freelancer => /freelancers/:id/pay(.:format)
      pay_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // pay_my_services => /my/services/pay(.:format)
      pay_my_services_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // pay_my_tasks => /my/tasks/pay(.:format)
      pay_my_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // pay_task => /tasks/:id/pay(.:format)
      pay_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // payment_card => /payment_cards/:id(.:format)
      payment_card_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"payment_cards",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // payment_cards => /payment_cards(.:format)
      payment_cards_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"payment_cards",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // payout_task => /tasks/:id/payout(.:format)
      payout_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"payout",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // personal_freelancer => /freelancers/:id/personal(.:format)
      personal_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"personal",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // post => /posts/:id(.:format)
      post_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // post_response => /posts/:post_id/responses/:id(.:format)
      post_response_path: function(_post_id, _id, options) {
      return Utils.build_path(["post_id","id"], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[3,"post_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // post_responses => /posts/:post_id/responses(.:format)
      post_responses_path: function(_post_id, options) {
      return Utils.build_path(["post_id"], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[2,[7,"/",false],[2,[3,"post_id",false],[2,[7,"/",false],[2,[6,"responses",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // posts => /posts(.:format)
      posts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"posts",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // ppg => /intro(.:format)
      ppg_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"intro",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // ppg_freelancer => /freelancers/:id/ppg(.:format)
      ppg_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"ppg",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // privacy_my_settings => /my/settings/privacy(.:format)
      privacy_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"privacy",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // progress_task => /tasks/:id/progress(.:format)
      progress_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"progress",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // project => /projects/:id(.:format)
      project_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // projects => /projects(.:format)
      projects_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"projects",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // promo_tinkoff_partner_contacts => /promo/tinkoff_partner_contacts(.:format)
      promo_tinkoff_partner_contacts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"promo",false],[2,[7,"/",false],[2,[6,"tinkoff_partner_contacts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // promotion_task => /tasks/:id/promotion(.:format)
      promotion_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"promotion",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // publish_service => /services/:id/publish(.:format)
      publish_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"publish",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // publish_service_response => /services/:service_id/responses/:id/publish(.:format)
      publish_service_response_path: function(_service_id, _id, options) {
      return Utils.build_path(["service_id","id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"publish",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // publish_task => /tasks/:id/publish(.:format)
      publish_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"publish",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // redir_links => /link/r(.:format)
      redir_links_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"link",false],[2,[7,"/",false],[2,[6,"r",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // referer_links_hq_analytics => /hq/analytics/referer_links(.:format)
      referer_links_hq_analytics_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"analytics",false],[2,[7,"/",false],[2,[6,"referer_links",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // regions_geo => /geo/regions(.:format)
      regions_geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"regions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // reject_contract => /contracts/:id/reject(.:format)
      reject_contract_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"reject",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // reject_omniauth => /users/auth/reject(.:format)
      reject_omniauth_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[6,"reject",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // reject_task => /tasks/:id/reject(.:format)
      reject_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"reject",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // resend_sms_verifications => /sms_verifications/resend(.:format)
      resend_sms_verifications_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"sms_verifications",false],[2,[7,"/",false],[2,[6,"resend",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // response_comment => /responses/:response_id/comments/:id(.:format)
      response_comment_path: function(_response_id, _id, options) {
      return Utils.build_path(["response_id","id"], ["format"], [2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"response_id",false],[2,[7,"/",false],[2,[6,"comments",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // response_comments => /responses/:response_id/comments(.:format)
      response_comments_path: function(_response_id, options) {
      return Utils.build_path(["response_id"], ["format"], [2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"response_id",false],[2,[7,"/",false],[2,[6,"comments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // responses_my_events => /my/events/responses(.:format)
      responses_my_events_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"events",false],[2,[7,"/",false],[2,[6,"responses",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // restore_admin_service => /admin/services/:id/restore(.:format)
      restore_admin_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"restore",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // restore_admin_task => /admin/tasks/:id/restore(.:format)
      restore_admin_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"restore",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // reveal_admin_service => /admin/services/:id/reveal(.:format)
      reveal_admin_service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"reveal",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // reveal_admin_task => /admin/tasks/:id/reveal(.:format)
      reveal_admin_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"reveal",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // reviews_task => /tasks/:id/reviews(.:format)
      reviews_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"reviews",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // root => /
      root_path: function(options) {
      return Utils.build_path([], [], [7,"/",false], arguments);
      },
    // safe_deals_callback => /sd/callback(.:format)
      safe_deals_callback_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"sd",false],[2,[7,"/",false],[2,[6,"callback",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // safe_deals_test_callback => /sd/test_callback(.:format)
      safe_deals_test_callback_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"sd",false],[2,[7,"/",false],[2,[6,"test_callback",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // save_task_filter_my_settings => /my/settings/save_task_filter(.:format)
      save_task_filter_my_settings_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"save_task_filter",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // schedule_pay_task => /tasks/:id/schedule_pay(.:format)
      schedule_pay_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"schedule_pay",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // search_geo => /geo/search(.:format)
      search_geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"search",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // search_tasks => /tasks/search(.:format)
      search_tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"search",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // service => /services/:id(.:format)
      service_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // service_feedback_index => /services/:service_id/feedback(.:format)
      service_feedback_index_path: function(_service_id, options) {
      return Utils.build_path(["service_id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"feedback",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // service_response => /services/:service_id/responses/:id(.:format)
      service_response_path: function(_service_id, _id, options) {
      return Utils.build_path(["service_id","id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // service_responses => /services/:service_id/responses(.:format)
      service_responses_path: function(_service_id, options) {
      return Utils.build_path(["service_id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // services => /services(.:format)
      services_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // sidekiq_web => /sidekiq
      sidekiq_web_path: function(options) {
      return Utils.build_path([], [], [2,[7,"/",false],[6,"sidekiq",false]], arguments);
      },
    // simple_activate_my_mail_subscription => /my/mail_subscription/simple_activate(.:format)
      simple_activate_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"simple_activate",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // simple_deactivate_my_mail_subscription => /my/mail_subscription/simple_deactivate(.:format)
      simple_deactivate_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"simple_deactivate",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // sms_verifications => /sms_verifications(.:format)
      sms_verifications_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"sms_verifications",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // specialization_freelancer => /freelancers/:id/specialization(.:format)
      specialization_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"specialization",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // success_confirmation_resend => /success/confirmation_resend(.:format)
      success_confirmation_resend_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"success",false],[2,[7,"/",false],[2,[6,"confirmation_resend",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // success_password_resend => /success/password_resend(.:format)
      success_password_resend_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"success",false],[2,[7,"/",false],[2,[6,"password_resend",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // success_password_reset => /success/password_reset(.:format)
      success_password_reset_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"success",false],[2,[7,"/",false],[2,[6,"password_reset",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // success_paypal => /paypal/success(.:format)
      success_paypal_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"paypal",false],[2,[7,"/",false],[2,[6,"success",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // success_promo_tinkoff_partner_contacts => /promo/tinkoff_partner_contacts/success(.:format)
      success_promo_tinkoff_partner_contacts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"promo",false],[2,[7,"/",false],[2,[6,"tinkoff_partner_contacts",false],[2,[7,"/",false],[2,[6,"success",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // success_registration => /success/registration(.:format)
      success_registration_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"success",false],[2,[7,"/",false],[2,[6,"registration",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // success_subscribe => /success/subscribe(.:format)
      success_subscribe_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"success",false],[2,[7,"/",false],[2,[6,"subscribe",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // success_tinkoff_promo_contacts => /tinkoff/success(.:format)
      success_tinkoff_promo_contacts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoff",false],[2,[7,"/",false],[2,[6,"success",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // success_unsubscribe => /success/unsubscribe(.:format)
      success_unsubscribe_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"success",false],[2,[7,"/",false],[2,[6,"unsubscribe",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // task => /tasks/:id(.:format)
      task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // task_conversation => /tasks/:task_id/conversations/:id(.:format)
      task_conversation_path: function(_task_id, _id, options) {
      return Utils.build_path(["task_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"conversations",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // task_conversation_messages => /tasks/:task_id/conversations/:conversation_id/messages(.:format)
      task_conversation_messages_path: function(_task_id, _conversation_id, options) {
      return Utils.build_path(["task_id","conversation_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"conversations",false],[2,[7,"/",false],[2,[3,"conversation_id",false],[2,[7,"/",false],[2,[6,"messages",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // task_opinions => /tasks/:task_id/opinions(.:format)
      task_opinions_path: function(_task_id, options) {
      return Utils.build_path(["task_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"opinions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // task_rss => /rss/tasks(.:format)
      task_rss_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"rss",false],[2,[7,"/",false],[2,[6,"tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // task_rss_category => /rss/tasks/category/:name(.:format)
      task_rss_category_path: function(_name, options) {
      return Utils.build_path(["name"], ["format"], [2,[7,"/",false],[2,[6,"rss",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"category",false],[2,[7,"/",false],[2,[3,"name",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // task_rss_group => /rss/tasks/group/:name(.:format)
      task_rss_group_path: function(_name, options) {
      return Utils.build_path(["name"], ["format"], [2,[7,"/",false],[2,[6,"rss",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"group",false],[2,[7,"/",false],[2,[3,"name",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // task_task_comment => /tasks/:task_id/task_comments/:id(.:format)
      task_task_comment_path: function(_task_id, _id, options) {
      return Utils.build_path(["task_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // task_task_comment_response_comment => /tasks/:task_id/task_comments/:task_comment_id/response_comments/:id(.:format)
      task_task_comment_response_comment_path: function(_task_id, _task_comment_id, _id, options) {
      return Utils.build_path(["task_id","task_comment_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"task_comment_id",false],[2,[7,"/",false],[2,[6,"response_comments",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]], arguments);
      },
    // task_task_comment_response_comments => /tasks/:task_id/task_comments/:task_comment_id/response_comments(.:format)
      task_task_comment_response_comments_path: function(_task_id, _task_comment_id, options) {
      return Utils.build_path(["task_id","task_comment_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"task_comment_id",false],[2,[7,"/",false],[2,[6,"response_comments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // task_task_comments => /tasks/:task_id/task_comments(.:format)
      task_task_comments_path: function(_task_id, options) {
      return Utils.build_path(["task_id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks => /tasks(.:format)
      tasks_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // tasks_alotpro => /tasks/alotpro(.:format)
      tasks_alotpro_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"alotpro",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // tasks_archive_freelancer => /freelancers/:id/tasks_archive(.:format)
      tasks_archive_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_archived_freelancer => /freelancers/:id/tasks_archived(.:format)
      tasks_archived_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_archived",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_complaints_freelancer => /freelancers/:id/tasks_complaints(.:format)
      tasks_complaints_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_complaints",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_completed_freelancer => /freelancers/:id/tasks_completed(.:format)
      tasks_completed_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_completed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_current_freelancer => /freelancers/:id/tasks_current(.:format)
      tasks_current_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_current",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_deleted_freelancer => /freelancers/:id/tasks_deleted(.:format)
      tasks_deleted_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_deleted",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_executed_freelancer => /freelancers/:id/tasks_executed(.:format)
      tasks_executed_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_executed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_in_progress_freelancer => /freelancers/:id/tasks_in_progress(.:format)
      tasks_in_progress_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_in_progress",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_jooble => /tasks/jooble(.:format)
      tasks_jooble_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"jooble",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // tasks_published_freelancer => /freelancers/:id/tasks_published(.:format)
      tasks_published_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tasks_published",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // tasks_rss_socials => /tasks/rss_socials(.:format)
      tasks_rss_socials_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"rss_socials",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // tasks_vk_digest => /tasks/vk_digest(.:format)
      tasks_vk_digest_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"vk_digest",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // tinkoff_promo_contacts => /tinkoff_promo_contacts(.:format)
      tinkoff_promo_contacts_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoff_promo_contacts",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // tinkoffbank => /tinkoffbank(.:format)
      tinkoffbank_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoffbank",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // tinkoffbank_agreement => /tinkoffbank/agreement(.:format)
      tinkoffbank_agreement_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoffbank",false],[2,[7,"/",false],[2,[6,"agreement",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // tinkoffbank_create => /tinkoffbank(.:format)
      tinkoffbank_create_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoffbank",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // tinkoffbank_success_freelancer => /tinkoffbank/success_freelancer(.:format)
      tinkoffbank_success_freelancer_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoffbank",false],[2,[7,"/",false],[2,[6,"success_freelancer",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // tinkoffbank_success_guest => /tinkoffbank/success_guest(.:format)
      tinkoffbank_success_guest_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"tinkoffbank",false],[2,[7,"/",false],[2,[6,"success_guest",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // to_archive_task_task_comment => /tasks/:task_id/task_comments/:id/to_archive(.:format)
      to_archive_task_task_comment_path: function(_task_id, _id, options) {
      return Utils.build_path(["task_id","id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"task_id",false],[2,[7,"/",false],[2,[6,"task_comments",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"to_archive",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // to_safe_deal_contract => /contracts/:id/to_safe_deal(.:format)
      to_safe_deal_contract_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"to_safe_deal",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // toggle_check_ip_admin_promo_codes => /admin/promo_codes/toggle_check_ip(.:format)
      toggle_check_ip_admin_promo_codes_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"promo_codes",false],[2,[7,"/",false],[2,[6,"toggle_check_ip",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // touch_task => /tasks/:id/touch(.:format)
      touch_task_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"touch",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // universities_geo => /geo/universities(.:format)
      universities_geo_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"geo",false],[2,[7,"/",false],[2,[6,"universities",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // unlink_my_social => /my/socials/:id/unlink(.:format)
      unlink_my_social_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"socials",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"unlink",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // unlock_admin_user => /admin/users/:id/unlock(.:format)
      unlock_admin_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"admin",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"unlock",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // unlock_hq_user => /hq/users/:id/unlock(.:format)
      unlock_hq_user_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"hq",false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"unlock",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // unmark_service_response => /services/:service_id/responses/:id/unmark(.:format)
      unmark_service_response_path: function(_service_id, _id, options) {
      return Utils.build_path(["service_id","id"], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"responses",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"unmark",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]], arguments);
      },
    // up_freelancer => /freelancers/:id/up(.:format)
      up_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"up",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // update_avatar_freelancer => /freelancers/:id/update_avatar(.:format)
      update_avatar_freelancer_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"freelancers",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"update_avatar",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // update_avatar_user_branding => /users/:user_id/branding/update_avatar(.:format)
      update_avatar_user_branding_path: function(_user_id, options) {
      return Utils.build_path(["user_id"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"branding",false],[2,[7,"/",false],[2,[6,"update_avatar",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // update_banner_user_branding => /users/:user_id/branding/update_banner(.:format)
      update_banner_user_branding_path: function(_user_id, options) {
      return Utils.build_path(["user_id"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"user_id",false],[2,[7,"/",false],[2,[6,"branding",false],[2,[7,"/",false],[2,[6,"update_banner",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // update_delivery_frequency_my_mail_subscription => /my/mail_subscription/update_delivery_frequency(.:format)
      update_delivery_frequency_my_mail_subscription_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"my",false],[2,[7,"/",false],[2,[6,"mail_subscription",false],[2,[7,"/",false],[2,[6,"update_delivery_frequency",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // update_positions_projects => /projects/update_positions(.:format)
      update_positions_projects_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"projects",false],[2,[7,"/",false],[2,[6,"update_positions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // update_positions_services => /services/update_positions(.:format)
      update_positions_services_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"update_positions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // update_url_contract => /contracts/:id/update_url(.:format)
      update_url_contract_path: function(_id, options) {
      return Utils.build_path(["id"], ["format"], [2,[7,"/",false],[2,[6,"contracts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"update_url",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // update_weight_brainstorage_recommendations => /brainstorage/recommendations/update_weight(.:format)
      update_weight_brainstorage_recommendations_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"recommendations",false],[2,[7,"/",false],[2,[6,"update_weight",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // update_weight_brainstorage_works => /brainstorage/works/update_weight(.:format)
      update_weight_brainstorage_works_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"brainstorage",false],[2,[7,"/",false],[2,[6,"works",false],[2,[7,"/",false],[2,[6,"update_weight",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // user_confirmation => /users/confirmation(.:format)
      user_confirmation_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"confirmation",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // user_omniauth_authorize => /users/auth/:provider(.:format)
      user_omniauth_authorize_path: function(_provider, options) {
      return Utils.build_path(["provider"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[3,"provider",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // user_omniauth_callback => /users/auth/:action/callback(.:format)
      user_omniauth_callback_path: function(_action, options) {
      return Utils.build_path(["action"], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[3,"action",false],[2,[7,"/",false],[2,[6,"callback",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]], arguments);
      },
    // user_password => /users/password(.:format)
      user_password_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // user_registration => /users(.:format)
      user_registration_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // user_rss_tasks => /user_rss_tasks/:rss_token(.:format)
      user_rss_tasks_path: function(_rss_token, options) {
      return Utils.build_path(["rss_token"], ["format"], [2,[7,"/",false],[2,[6,"user_rss_tasks",false],[2,[7,"/",false],[2,[3,"rss_token",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // user_session => /users/sign_in(.:format)
      user_session_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_in",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // user_tmid_authorize => /auth/tmid/login(.:format)
      user_tmid_authorize_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[6,"tmid",false],[2,[7,"/",false],[2,[6,"login",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // user_tmid_register => /auth/tmid/register(.:format)
      user_tmid_register_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[6,"tmid",false],[2,[7,"/",false],[2,[6,"register",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // users_password_finish => /users/password/finish(.:format)
      users_password_finish_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[2,[7,"/",false],[2,[6,"finish",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // users_password_success => /users/password/success(.:format)
      users_password_success_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[2,[7,"/",false],[2,[6,"success",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]], arguments);
      },
    // validate => /validate(.:format)
      validate_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"validate",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // verification => /verification(.:format)
      verification_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"verification",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // verify_code => /verify(.:format)
      verify_code_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"verify",false],[1,[2,[8,".",false],[3,"format",false]],false]]], arguments);
      },
    // verify_sms_verifications => /sms_verifications/verify(.:format)
      verify_sms_verifications_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"sms_verifications",false],[2,[7,"/",false],[2,[6,"verify",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // yam_check_url => /yam/check_url(.:format)
      yam_check_url_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"yam",false],[2,[7,"/",false],[2,[6,"check_url",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // yam_fail_url => /yam/fail_url(.:format)
      yam_fail_url_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"yam",false],[2,[7,"/",false],[2,[6,"fail_url",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // yam_payment_aviso_url => /yam/payment_aviso_url(.:format)
      yam_payment_aviso_url_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"yam",false],[2,[7,"/",false],[2,[6,"payment_aviso_url",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      },
    // yam_success_url => /yam/success_url(.:format)
      yam_success_url_path: function(options) {
      return Utils.build_path([], ["format"], [2,[7,"/",false],[2,[6,"yam",false],[2,[7,"/",false],[2,[6,"success_url",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]], arguments);
      }}
    ;
    
      window.Routes.options = defaults;
    
    }).call(this);
    /*!
     * URI.js - Mutating URLs
     *
     * Version: 1.10.2
     *
     * Author: Rodney Rehm
     * Web: http://medialize.github.com/URI.js/
     *
     * Licensed under
     *   MIT License http://www.opensource.org/licenses/mit-license
     *   GPL v3 http://opensource.org/licenses/GPL-3.0
     *
     */
    
    (function (root, factory) {
        // https://github.com/umdjs/umd/blob/master/returnExports.js
        if (typeof exports === 'object') {
            // Node
            module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
        } else if (typeof define === 'function' && define.amd) {
            // AMD. Register as an anonymous module.
            define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
        } else {
            // Browser globals (root is window)
            root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains);
        }
    }(this, function (punycode, IPv6, SLD) {
    "use strict";
    
    function URI(url, base) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof URI)) {
            return new URI(url, base);
        }
    
        if (url === undefined) {
            if (typeof location !== 'undefined') {
                url = location.href + "";
            } else {
                url = "";
            }
        }
    
        this.href(url);
    
        // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
        if (base !== undefined) {
            return this.absoluteTo(base);
        }
    
        return this;
    };
    
    var p = URI.prototype;
    var hasOwn = Object.prototype.hasOwnProperty;
    
    function escapeRegEx(string) {
        // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
        return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    
    function getType(value) {
        return String(Object.prototype.toString.call(value)).slice(8, -1);
    }
    
    function isArray(obj) {
        return getType(obj) === "Array";
    }
    
    function filterArrayValues(data, value) {
        var lookup = {};
        var i, length;
    
        if (isArray(value)) {
            for (i = 0, length = value.length; i < length; i++) {
                lookup[value[i]] = true;
            }
        } else {
            lookup[value] = true;
        }
    
        for (i = 0, length = data.length; i < length; i++) {
            if (lookup[data[i]] !== undefined) {
                data.splice(i, 1);
                length--;
                i--;
            }
        }
    
        return data;
    }
    
    function arrayContains(list, value) {
        var i, length;
        
        // value may be string, number, array, regexp
        if (isArray(value)) {
            // Note: this can be optimized to O(n) (instead of current O(m * n))
            for (i = 0, length = value.length; i < length; i++) {
                if (!arrayContains(list, value[i])) {
                    return false;
                }
            }
            
            return true;
        }
        
        var _type = getType(value);
        for (i = 0, length = list.length; i < length; i++) {
            if (_type === 'RegExp') {
                if (typeof list[i] === 'string' && list[i].match(value)) {
                    return true;
                }
            } else if (list[i] === value) {
                return true;
            }
        }
    
        return false;
    }
    
    function arraysEqual(one, two) {
        if (!isArray(one) || !isArray(two)) {
            return false;
        }
        
        // arrays can't be equal if they have different amount of content
        if (one.length !== two.length) {
            return false;
        }
    
        one.sort();
        two.sort();
    
        for (var i = 0, l = one.length; i < l; i++) {
            if (one[i] !== two[i]) {
                return false;
            }
        }
        
        return true;
    }
    
    URI._parts = function() {
        return {
            protocol: null,
            username: null,
            password: null,
            hostname: null,
            urn: null,
            port: null,
            path: null,
            query: null,
            fragment: null,
            // state
            duplicateQueryParameters: URI.duplicateQueryParameters
        };
    };
    // state: allow duplicate query parameters (a=1&a=1)
    URI.duplicateQueryParameters = false;
    // static properties
    URI.protocol_expression = /^[a-z][a-z0-9-+-]*$/i;
    URI.idn_expression = /[^a-z0-9\.-]/i;
    URI.punycode_expression = /(xn--)/i;
    // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
    URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    // credits to Rich Brown
    // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
    // specification: http://www.ietf.org/rfc/rfc4291.txt
    URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    // gruber revised expression - http://rodneyrehm.de/t/url-regex.html
    URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
    // http://www.iana.org/assignments/uri-schemes.html
    // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
    URI.defaultPorts = {
        http: "80",
        https: "443",
        ftp: "21",
        gopher: "70",
        ws: "80",
        wss: "443"
    };
    // allowed hostname characters according to RFC 3986
    // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
    // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
    URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
    // encoding / decoding according to RFC3986
    function strictEncodeURIComponent(string) {
        // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
        return encodeURIComponent(string)
            .replace(/[!'()*]/g, escape)
            .replace(/\*/g, "%2A");
    }
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
    URI.iso8859 = function() {
        URI.encode = escape;
        URI.decode = unescape;
    };
    URI.unicode = function() {
        URI.encode = strictEncodeURIComponent;
        URI.decode = decodeURIComponent;
    };
    URI.characters = {
        pathname: {
            encode: {
                // RFC3986 2.1: For consistency, URI producers and normalizers should
                // use uppercase hexadecimal digits for all percent-encodings.
                expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
                map: {
                    // -._~!'()*
                    "%24": "$",
                    "%26": "&",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "=",
                    "%3A": ":",
                    "%40": "@"
                }
            },
            decode: {
                expression: /[\/\?#]/g,
                map: {
                    "/": "%2F",
                    "?": "%3F",
                    "#": "%23"
                }
            }
        },
        reserved: {
            encode: {
                // RFC3986 2.1: For consistency, URI producers and normalizers should
                // use uppercase hexadecimal digits for all percent-encodings.
                expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
                map: {
                    // gen-delims
                    "%3A": ":",
                    "%2F": "/",
                    "%3F": "?",
                    "%23": "#",
                    "%5B": "[",
                    "%5D": "]",
                    "%40": "@",
                    // sub-delims
                    "%21": "!",
                    "%24": "$",
                    "%26": "&",
                    "%27": "'",
                    "%28": "(",
                    "%29": ")",
                    "%2A": "*",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "="
                }
            }
        }
    };
    URI.encodeQuery = function(string) {
        return URI.encode(string + "").replace(/%20/g, '+');
    };
    URI.decodeQuery = function(string) {
        return URI.decode((string + "").replace(/\+/g, '%20'));
    };
    URI.recodePath = function(string) {
        var segments = (string + "").split('/');
        for (var i = 0, length = segments.length; i < length; i++) {
            segments[i] = URI.encodePathSegment(URI.decode(segments[i]));
        }
    
        return segments.join('/');
    };
    URI.decodePath = function(string) {
        var segments = (string + "").split('/');
        for (var i = 0, length = segments.length; i < length; i++) {
            segments[i] = URI.decodePathSegment(segments[i]);
        }
    
        return segments.join('/');
    };
    // generate encode/decode path functions
    var _parts = {'encode':'encode', 'decode':'decode'};
    var _part;
    var generateAccessor = function(_group, _part) {
        return function(string) {
            return URI[_part](string + "").replace(URI.characters[_group][_part].expression, function(c) {
                return URI.characters[_group][_part].map[c];
            });
        };
    };
    
    for (_part in _parts) {
        URI[_part + "PathSegment"] = generateAccessor("pathname", _parts[_part]);
    }
    
    URI.encodeReserved = generateAccessor("reserved", "encode");
    
    URI.parse = function(string, parts) {
        var pos, t;
        if (!parts) {
            parts = {};
        }
        // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
    
        // extract fragment
        pos = string.indexOf('#');
        if (pos > -1) {
            // escaping?
            parts.fragment = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
    
        // extract query
        pos = string.indexOf('?');
        if (pos > -1) {
            // escaping?
            parts.query = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
    
        // extract protocol
        if (string.substring(0, 2) === '//') {
            // relative-scheme
            parts.protocol = '';
            string = string.substring(2);
            // extract "user:pass@host:port"
            string = URI.parseAuthority(string, parts);
        } else {
            pos = string.indexOf(':');
            if (pos > -1) {
                parts.protocol = string.substring(0, pos);
                if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
                    // : may be within the path
                    parts.protocol = undefined;
                } else if (parts.protocol === 'file') {
                    // the file scheme: does not contain an authority
                    string = string.substring(pos + 3);
                } else if (string.substring(pos + 1, pos + 3) === '//') {
                    string = string.substring(pos + 3);
    
                    // extract "user:pass@host:port"
                    string = URI.parseAuthority(string, parts);
                } else {
                    string = string.substring(pos + 1);
                    parts.urn = true;
                }
            }
        }
    
        // what's left must be the path
        parts.path = string;
    
        // and we're done
        return parts;
    };
    URI.parseHost = function(string, parts) {
        // extract host:port
        var pos = string.indexOf('/');
        var bracketPos;
        var t;
    
        if (pos === -1) {
            pos = string.length;
        }
    
        if (string.charAt(0) === "[") {
            // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
            // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
            // IPv6+port in the format [2001:db8::1]:80 (for the time being)
            bracketPos = string.indexOf(']');
            parts.hostname = string.substring(1, bracketPos) || null;
            parts.port = string.substring(bracketPos+2, pos) || null;
        } else if (string.indexOf(':') !== string.lastIndexOf(':')) {
            // IPv6 host contains multiple colons - but no port
            // this notation is actually not allowed by RFC 3986, but we're a liberal parser
            parts.hostname = string.substring(0, pos) || null;
            parts.port = null;
        } else {
            t = string.substring(0, pos).split(':');
            parts.hostname = t[0] || null;
            parts.port = t[1] || null;
        }
    
        if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
            pos++;
            string = "/" + string;
        }
    
        return string.substring(pos) || '/';
    };
    URI.parseAuthority = function(string, parts) {
        string = URI.parseUserinfo(string, parts);
        return URI.parseHost(string, parts);
    };
    URI.parseUserinfo = function(string, parts) {
        // extract username:password
        var pos = string.indexOf('@');
        var firstSlash = string.indexOf('/');
        var t;
    
        // authority@ must come before /path
        if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
            t = string.substring(0, pos).split(':');
            parts.username = t[0] ? URI.decode(t[0]) : null;
            t.shift();
            parts.password = t[0] ? URI.decode(t.join(':')) : null;
            string = string.substring(pos + 1);
        } else {
            parts.username = null;
            parts.password = null;
        }
    
        return string;
    };
    URI.parseQuery = function(string) {
        if (!string) {
            return {};
        }
    
        // throw out the funky business - "?"[name"="value"&"]+
        string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');
    
        if (!string) {
            return {};
        }
    
        var items = {};
        var splits = string.split('&');
        var length = splits.length;
        var v, name, value;
    
        for (var i = 0; i < length; i++) {
            v = splits[i].split('=');
            name = URI.decodeQuery(v.shift());
            // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
            value = v.length ? URI.decodeQuery(v.join('=')) : null;
    
            if (items[name]) {
                if (typeof items[name] === "string") {
                    items[name] = [items[name]];
                }
    
                items[name].push(value);
            } else {
                items[name] = value;
            }
        }
    
        return items;
    };
    
    URI.build = function(parts) {
        var t = "";
    
        if (parts.protocol) {
            t += parts.protocol + ":";
        }
    
        if (!parts.urn && (t || parts.hostname)) {
            t += '//';
        }
    
        t += (URI.buildAuthority(parts) || '');
    
        if (typeof parts.path === "string") {
            if (parts.path.charAt(0) !== '/' && typeof parts.hostname === "string") {
                t += '/';
            }
    
            t += parts.path;
        }
    
        if (typeof parts.query === "string" && parts.query) {
            t += '?' + parts.query;
        }
    
        if (typeof parts.fragment === "string" && parts.fragment) {
            t += '#' + parts.fragment;
        }
        return t;
    };
    URI.buildHost = function(parts) {
        var t = "";
    
        if (!parts.hostname) {
            return "";
        } else if (URI.ip6_expression.test(parts.hostname)) {
            if (parts.port) {
                t += "[" + parts.hostname + "]:" + parts.port;
            } else {
                // don't know if we should always wrap IPv6 in []
                // the RFC explicitly says SHOULD, not MUST.
                t += parts.hostname;
            }
        } else {
            t += parts.hostname;
            if (parts.port) {
                t += ':' + parts.port;
            }
        }
    
        return t;
    };
    URI.buildAuthority = function(parts) {
        return URI.buildUserinfo(parts) + URI.buildHost(parts);
    };
    URI.buildUserinfo = function(parts) {
        var t = "";
    
        if (parts.username) {
            t += URI.encode(parts.username);
    
            if (parts.password) {
                t += ':' + URI.encode(parts.password);
            }
    
            t += "@";
        }
    
        return t;
    };
    URI.buildQuery = function(data, duplicates) {
        // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
        // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
        // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
        // URI.js treats the query string as being application/x-www-form-urlencoded
        // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
    
        var t = "";
        var unique, key, i, length;
        for (key in data) {
            if (hasOwn.call(data, key) && key) {
                if (isArray(data[key])) {
                    unique = {};
                    for (i = 0, length = data[key].length; i < length; i++) {
                        if (data[key][i] !== undefined && unique[data[key][i] + ""] === undefined) {
                            t += "&" + URI.buildQueryParameter(key, data[key][i]);
                            if (duplicates !== true) {
                                unique[data[key][i] + ""] = true;
                            }
                        }
                    }
                } else if (data[key] !== undefined) {
                    t += '&' + URI.buildQueryParameter(key, data[key]);
                }
            }
        }
    
        return t.substring(1);
    };
    URI.buildQueryParameter = function(name, value) {
        // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
        // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
        return URI.encodeQuery(name) + (value !== null ? "=" + URI.encodeQuery(value) : "");
    };
    
    URI.addQuery = function(data, name, value) {
        if (typeof name === "object") {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    URI.addQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === "string") {
            if (data[name] === undefined) {
                data[name] = value;
                return;
            } else if (typeof data[name] === "string") {
                data[name] = [data[name]];
            }
    
            if (!isArray(value)) {
                value = [value];
            }
    
            data[name] = data[name].concat(value);
        } else {
            throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
        }
    };
    URI.removeQuery = function(data, name, value) {
        var i, length, key;
        
        if (isArray(name)) {
            for (i = 0, length = name.length; i < length; i++) {
                data[name[i]] = undefined;
            }
        } else if (typeof name === "object") {
            for (key in name) {
                if (hasOwn.call(name, key)) {
                    URI.removeQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === "string") {
            if (value !== undefined) {
                if (data[name] === value) {
                    data[name] = undefined;
                } else if (isArray(data[name])) {
                    data[name] = filterArrayValues(data[name], value);
                }
            } else {
                data[name] = undefined;
            }
        } else {
            throw new TypeError("URI.addQuery() accepts an object, string as the first parameter");
        }
    };
    URI.hasQuery = function(data, name, value, withinArray) {
        if (typeof name === "object") {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    if (!URI.hasQuery(data, key, name[key])) {
                        return false;
                    }
                }
            }
            
            return true;
        } else if (typeof name !== "string") {
            throw new TypeError("URI.hasQuery() accepts an object, string as the name parameter");
        }
    
        switch (getType(value)) {
            case 'Undefined':
                // true if exists (but may be empty)
                return name in data; // data[name] !== undefined;
    
            case 'Boolean':
                // true if exists and non-empty
                var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
                return value === _booly;
    
            case 'Function':
                // allow complex comparison
                return !!value(data[name], name, data);
    
            case 'Array':
                if (!isArray(data[name])) {
                    return false;
                }
    
                var op = withinArray ? arrayContains : arraysEqual;
                return op(data[name], value);
    
            case 'RegExp':
                if (!isArray(data[name])) {
                    return Boolean(data[name] && data[name].match(value));
                }
    
                if (!withinArray) {
                    return false;
                }
    
                return arrayContains(data[name], value);
    
            case 'Number':
                value = String(value);
                // omit break;
            case 'String':
                if (!isArray(data[name])) {
                    return data[name] === value;
                }
    
                if (!withinArray) {
                    return false;
                }
    
                return arrayContains(data[name], value);
    
            default:
                throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter");
        }
    };
    
    
    URI.commonPath = function(one, two) {
        var length = Math.min(one.length, two.length);
        var pos;
    
        // find first non-matching character
        for (pos = 0; pos < length; pos++) {
            if (one.charAt(pos) !== two.charAt(pos)) {
                pos--;
                break;
            }
        }
    
        if (pos < 1) {
            return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
        }
        
        // revert to last /
        if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
            pos = one.substring(0, pos).lastIndexOf('/');
        }
    
        return one.substring(0, pos + 1);
    };
    
    URI.withinString = function(string, callback) {
        // expression used is "gruber revised" (@gruber v2) determined to be the best solution in
        // a regex sprint we did a couple of ages ago at
        // * http://mathiasbynens.be/demo/url-regex
        // * http://rodneyrehm.de/t/url-regex.html
    
        return string.replace(URI.find_uri_expression, callback);
    };
    
    URI.ensureValidHostname = function(v) {
        // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
        // they are not part of DNS and therefore ignored by URI.js
    
        if (v.match(URI.invalid_hostname_characters)) {
            // test punycode
            if (!punycode) {
                throw new TypeError("Hostname '" + v + "' contains characters other than [A-Z0-9.-] and Punycode.js is not available");
            }
    
            if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
                throw new TypeError("Hostname '" + v + "' contains characters other than [A-Z0-9.-]");
            }
        }
    };
    
    p.build = function(deferBuild) {
        if (deferBuild === true) {
            this._deferred_build = true;
        } else if (deferBuild === undefined || this._deferred_build) {
            this._string = URI.build(this._parts);
            this._deferred_build = false;
        }
    
        return this;
    };
    
    p.clone = function() {
        return new URI(this);
    };
    
    p.valueOf = p.toString = function() {
        return this.build(false)._string;
    };
    
    // generate simple accessors
    _parts = {protocol: 'protocol', username: 'username', password: 'password', hostname: 'hostname',  port: 'port'};
    generateAccessor = function(_part){
        return function(v, build) {
            if (v === undefined) {
                return this._parts[_part] || "";
            } else {
                this._parts[_part] = v;
                this.build(!build);
                return this;
            }
        };
    };
    
    for (_part in _parts) {                                                                                                                                                                                        
        p[_part] = generateAccessor(_parts[_part]);
    }
    
    // generate accessors with optionally prefixed input
    _parts = {query: '?', fragment: '#'};
    generateAccessor = function(_part, _key){
        return function(v, build) {
            if (v === undefined) {
                return this._parts[_part] || "";
            } else {
                if (v !== null) {
                    v = v + "";
                    if (v.charAt(0) === _key) {
                        v = v.substring(1);
                    }
                }
    
                this._parts[_part] = v;
                this.build(!build);
                return this;
            }
        };
    };
    
    for (_part in _parts) {
        p[_part] = generateAccessor(_part, _parts[_part]);
    }
    
    // generate accessors with prefixed output
    _parts = {search: ['?', 'query'], hash: ['#', 'fragment']};
    generateAccessor = function(_part, _key){
        return function(v, build) {
            var t = this[_part](v, build);
            return typeof t === "string" && t.length ? (_key + t) : t;
        };
    };
    
    for (_part in _parts) {
        p[_part] = generateAccessor(_parts[_part][1], _parts[_part][0]);
    }
    
    p.pathname = function(v, build) {
        if (v === undefined || v === true) {
            var res = this._parts.path || (this._parts.urn ? '' : '/');
            return v ? URI.decodePath(res) : res;
        } else {
            this._parts.path = v ? URI.recodePath(v) : "/";
            this.build(!build);
            return this;
        }
    };
    p.path = p.pathname;
    p.href = function(href, build) {
        var key;
        
        if (href === undefined) {
            return this.toString();
        }
    
        this._string = "";
        this._parts = URI._parts();
    
        var _URI = href instanceof URI;
        var _object = typeof href === "object" && (href.hostname || href.path);
    
        
        // window.location is reported to be an object, but it's not the sort
        // of object we're looking for: 
        // * location.protocol ends with a colon
        // * location.query != object.search
        // * location.hash != object.fragment
        // simply serializing the unknown object should do the trick 
        // (for location, not for everything...)
        if (!_URI && _object && href.pathname !== undefined) {
            href = href.toString();
        }
    
        if (typeof href === "string") {
            this._parts = URI.parse(href, this._parts);
        } else if (_URI || _object) {
            var src = _URI ? href._parts : href;
            for (key in src) {
                if (hasOwn.call(this._parts, key)) {
                    this._parts[key] = src[key];
                }
            }
        } else {
            throw new TypeError("invalid input");
        }
    
        this.build(!build);
        return this;
    };
    
    // identification accessors
    p.is = function(what) {
        var ip = false;
        var ip4 = false;
        var ip6 = false;
        var name = false;
        var sld = false;
        var idn = false;
        var punycode = false;
        var relative = !this._parts.urn;
    
        if (this._parts.hostname) {
            relative = false;
            ip4 = URI.ip4_expression.test(this._parts.hostname);
            ip6 = URI.ip6_expression.test(this._parts.hostname);
            ip = ip4 || ip6;
            name = !ip;
            sld = name && SLD && SLD.has(this._parts.hostname);
            idn = name && URI.idn_expression.test(this._parts.hostname);
            punycode = name && URI.punycode_expression.test(this._parts.hostname);
        }
    
        switch (what.toLowerCase()) {
            case 'relative':
                return relative;
    
            case 'absolute':
                return !relative;
    
            // hostname identification
            case 'domain':
            case 'name':
                return name;
    
            case 'sld':
                return sld;
    
            case 'ip':
                return ip;
    
            case 'ip4':
            case 'ipv4':
            case 'inet4':
                return ip4;
    
            case 'ip6':
            case 'ipv6':
            case 'inet6':
                return ip6;
    
            case 'idn':
                return idn;
    
            case 'url':
                return !this._parts.urn;
    
            case 'urn':
                return !!this._parts.urn;
    
            case 'punycode':
                return punycode;
        }
    
        return null;
    };
    
    // component specific input validation
    var _protocol = p.protocol;
    var _port = p.port;
    var _hostname = p.hostname;
    
    p.protocol = function(v, build) {
        if (v !== undefined) {
            if (v) {
                // accept trailing ://
                v = v.replace(/:(\/\/)?$/, '');
    
                if (v.match(/[^a-zA-z0-9\.+-]/)) {
                    throw new TypeError("Protocol '" + v + "' contains characters other than [A-Z0-9.+-]");
                }
            }
        }
        return _protocol.call(this, v, build);
    };
    p.scheme = p.protocol;
    p.port = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v !== undefined) {
            if (v === 0) {
                v = null;
            }
    
            if (v) {
                v += "";
                if (v.charAt(0) === ":") {
                    v = v.substring(1);
                }
    
                if (v.match(/[^0-9]/)) {
                    throw new TypeError("Port '" + v + "' contains characters other than [0-9]");
                }
            }
        }
        return _port.call(this, v, build);
    };
    p.hostname = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v !== undefined) {
            var x = {};
            URI.parseHost(v, x);
            v = x.hostname;
        }
        return _hostname.call(this, v, build);
    };
    
    // compound accessors
    p.host = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v === undefined) {
            return this._parts.hostname ? URI.buildHost(this._parts) : "";
        } else {
            URI.parseHost(v, this._parts);
            this.build(!build);
            return this;
        }
    };
    p.authority = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v === undefined) {
            return this._parts.hostname ? URI.buildAuthority(this._parts) : "";
        } else {
            URI.parseAuthority(v, this._parts);
            this.build(!build);
            return this;
        }
    };
    p.userinfo = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v === undefined) {
            if (!this._parts.username) {
                return "";
            }
    
            var t = URI.buildUserinfo(this._parts);
            return t.substring(0, t.length -1);
        } else {
            if (v[v.length-1] !== '@') {
                v += '@';
            }
    
            URI.parseUserinfo(v, this._parts);
            this.build(!build);
            return this;
        }
    };
    p.resource = function(v, build) {
        var parts;
        
        if (v === undefined) {
            return this.path() + this.search() + this.hash();
        }
        
        parts = URI.parse(v);
        this._parts.path = parts.path;
        this._parts.query = parts.query;
        this._parts.fragment = parts.fragment;
        this.build(!build);
        return this;
    };
    
    // fraction accessors
    p.subdomain = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        // convenience, return "www" from "www.example.org"
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return "";
            }
    
            // grab domain and add another segment
            var end = this._parts.hostname.length - this.domain().length - 1;
            return this._parts.hostname.substring(0, end) || "";
        } else {
            var e = this._parts.hostname.length - this.domain().length;
            var sub = this._parts.hostname.substring(0, e);
            var replace = new RegExp('^' + escapeRegEx(sub));
    
            if (v && v.charAt(v.length - 1) !== '.') {
                v += ".";
            }
    
            if (v) {
                URI.ensureValidHostname(v);
            }
    
            this._parts.hostname = this._parts.hostname.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.domain = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (typeof v === 'boolean') {
            build = v;
            v = undefined;
        }
    
        // convenience, return "example.org" from "www.example.org"
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return "";
            }
    
            // if hostname consists of 1 or 2 segments, it must be the domain
            var t = this._parts.hostname.match(/\./g);
            if (t && t.length < 2) {
                return this._parts.hostname;
            }
    
            // grab tld and add another segment
            var end = this._parts.hostname.length - this.tld(build).length - 1;
            end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
            return this._parts.hostname.substring(end) || "";
        } else {
            if (!v) {
                throw new TypeError("cannot set domain empty");
            }
    
            URI.ensureValidHostname(v);
    
            if (!this._parts.hostname || this.is('IP')) {
                this._parts.hostname = v;
            } else {
                var replace = new RegExp(escapeRegEx(this.domain()) + "$");
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
    
            this.build(!build);
            return this;
        }
    };
    p.tld = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (typeof v === 'boolean') {
            build = v;
            v = undefined;
        }
    
        // return "org" from "www.example.org"
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return "";
            }
    
            var pos = this._parts.hostname.lastIndexOf('.');
            var tld = this._parts.hostname.substring(pos + 1);
    
            if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
                return SLD.get(this._parts.hostname) || tld;
            }
    
            return tld;
        } else {
            var replace;
            
            if (!v) {
                throw new TypeError("cannot set TLD empty");
            } else if (v.match(/[^a-zA-Z0-9-]/)) {
                if (SLD && SLD.is(v)) {
                    replace = new RegExp(escapeRegEx(this.tld()) + "$");
                    this._parts.hostname = this._parts.hostname.replace(replace, v);
                } else {
                    throw new TypeError("TLD '" + v + "' contains characters other than [A-Z0-9]");
                }
            } else if (!this._parts.hostname || this.is('IP')) {
                throw new ReferenceError("cannot set TLD on non-domain host");
            } else {
                replace = new RegExp(escapeRegEx(this.tld()) + "$");
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
    
            this.build(!build);
            return this;
        }
    };
    p.directory = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v === undefined || v === true) {
            if (!this._parts.path && !this._parts.hostname) {
                return '';
            }
    
            if (this._parts.path === '/') {
                return '/';
            }
    
            var end = this._parts.path.length - this.filename().length - 1;
            var res = this._parts.path.substring(0, end) || (this._parts.hostname ? "/" : "");
    
            return v ? URI.decodePath(res) : res;
    
        } else {
            var e = this._parts.path.length - this.filename().length;
            var directory = this._parts.path.substring(0, e);
            var replace = new RegExp('^' + escapeRegEx(directory));
    
            // fully qualifier directories begin with a slash
            if (!this.is('relative')) {
                if (!v) {
                    v = '/';
                }
    
                if (v.charAt(0) !== '/') {
                    v = "/" + v;
                }
            }
    
            // directories always end with a slash
            if (v && v.charAt(v.length - 1) !== '/') {
                v += '/';
            }
    
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.filename = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v === undefined || v === true) {
            if (!this._parts.path || this._parts.path === '/') {
                return "";
            }
    
            var pos = this._parts.path.lastIndexOf('/');
            var res = this._parts.path.substring(pos+1);
    
            return v ? URI.decodePathSegment(res) : res;
        } else {
            var mutatedDirectory = false;
            
            if (v.charAt(0) === '/') {
                v = v.substring(1);
            }
    
            if (v.match(/\.?\//)) {
                mutatedDirectory = true;
            }
    
            var replace = new RegExp(escapeRegEx(this.filename()) + "$");
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
    
            if (mutatedDirectory) {
                this.normalizePath(build);
            } else {
                this.build(!build);
            }
    
            return this;
        }
    };
    p.suffix = function(v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
    
        if (v === undefined || v === true) {
            if (!this._parts.path || this._parts.path === '/') {
                return "";
            }
    
            var filename = this.filename();
            var pos = filename.lastIndexOf('.');
            var s, res;
    
            if (pos === -1) {
                return "";
            }
    
            // suffix may only contain alnum characters (yup, I made this up.)
            s = filename.substring(pos+1);
            res = (/^[a-z0-9%]+$/i).test(s) ? s : "";
            return v ? URI.decodePathSegment(res) : res;
        } else {
            if (v.charAt(0) === '.') {
                v = v.substring(1);
            }
    
            var suffix = this.suffix();
            var replace;
    
            if (!suffix) {
                if (!v) {
                    return this;
                }
    
                this._parts.path += '.' + URI.recodePath(v);
            } else if (!v) {
                replace = new RegExp(escapeRegEx("." + suffix) + "$");
            } else {
                replace = new RegExp(escapeRegEx(suffix) + "$");
            }
    
            if (replace) {
                v = URI.recodePath(v);
                this._parts.path = this._parts.path.replace(replace, v);
            }
    
            this.build(!build);
            return this;
        }
    };
    p.segment = function(segment, v, build) {
        var separator = this._parts.urn ? ':' : '/';
        var path = this.path();
        var absolute = path.substring(0, 1) === '/';
        var segments = path.split(separator);
    
        if (typeof segment !== 'number') {
            build = v;
            v = segment;
            segment = undefined;
        }
    
        if (segment !== undefined && typeof segment !== 'number') {
            throw new Error("Bad segment '" + segment + "', must be 0-based integer");
        }
    
        if (absolute) {
            segments.shift();
        }
    
        if (segment < 0) {
            // allow negative indexes to address from the end
            segment = Math.max(segments.length + segment, 0);
        }
    
        if (v === undefined) {
            return segment === undefined
                ? segments
                : segments[segment];
        } else if (segment === null || segments[segment] === undefined) {
            if (isArray(v)) {
                segments = v;
            } else if (v || (typeof v === "string" && v.length)) {
                if (segments[segments.length -1] === "") {
                    // empty trailing elements have to be overwritten
                    // to prefent results such as /foo//bar
                    segments[segments.length -1] = v;
                } else {
                    segments.push(v);
                }
            }
        } else {
            if (v || (typeof v === "string" && v.length)) {
                segments[segment] = v;
            } else {
                segments.splice(segment, 1);
            }
        }
    
        if (absolute) {
            segments.unshift("");
        }
    
        return this.path(segments.join(separator), build);
    };
    
    // mutating query string
    var q = p.query;
    p.query = function(v, build) {
        if (v === true) {
            return URI.parseQuery(this._parts.query);
        } else if (typeof v === "function") {
            var data = URI.parseQuery(this._parts.query);
            var result = v.call(this, data);
            this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters);
            this.build(!build);
            return this;
        } else if (v !== undefined && typeof v !== "string") {
            this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters);
            this.build(!build);
            return this;
        } else {
            return q.call(this, v, build);
        }
    };
    p.setQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query);
        
        if (typeof name === "object") {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    data[key] = name[key];
                }
            }
        } else if (typeof name === "string") {
            data[name] = value !== undefined ? value : null;
        } else {
            throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
        }
        
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters);
        if (typeof name !== "string") {
            build = value;
        }
    
        this.build(!build);
        return this;
    };
    p.addQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query);
        URI.addQuery(data, name, value === undefined ? null : value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters);
        if (typeof name !== "string") {
            build = value;
        }
    
        this.build(!build);
        return this;
    };
    p.removeQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query);
        URI.removeQuery(data, name, value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters);
        if (typeof name !== "string") {
            build = value;
        }
    
        this.build(!build);
        return this;
    };
    p.hasQuery = function(name, value, withinArray) {
        var data = URI.parseQuery(this._parts.query);
        return URI.hasQuery(data, name, value, withinArray);
    };
    p.setSearch = p.setQuery;
    p.addSearch = p.addQuery;
    p.removeSearch = p.removeQuery;
    p.hasSearch = p.hasQuery;
    
    // sanitizing URLs
    p.normalize = function() {
        if (this._parts.urn) {
            return this
                .normalizeProtocol(false)
                .normalizeQuery(false)
                .normalizeFragment(false)
                .build();
        }
    
        return this
            .normalizeProtocol(false)
            .normalizeHostname(false)
            .normalizePort(false)
            .normalizePath(false)
            .normalizeQuery(false)
            .normalizeFragment(false)
            .build();
    };
    p.normalizeProtocol = function(build) {
        if (typeof this._parts.protocol === "string") {
            this._parts.protocol = this._parts.protocol.toLowerCase();
            this.build(!build);
        }
    
        return this;
    };
    p.normalizeHostname = function(build) {
        if (this._parts.hostname) {
            if (this.is('IDN') && punycode) {
                this._parts.hostname = punycode.toASCII(this._parts.hostname);
            } else if (this.is('IPv6') && IPv6) {
                this._parts.hostname = IPv6.best(this._parts.hostname);
            }
    
            this._parts.hostname = this._parts.hostname.toLowerCase();
            this.build(!build);
        }
    
        return this;
    };
    p.normalizePort = function(build) {
        // remove port of it's the protocol's default
        if (typeof this._parts.protocol === "string" && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
            this._parts.port = null;
            this.build(!build);
        }
    
        return this;
    };
    p.normalizePath = function(build) {
        if (this._parts.urn) {
            return this;
        }
    
        if (!this._parts.path || this._parts.path === '/') {
            return this;
        }
    
        var _was_relative;
        var _was_relative_prefix;
        var _path = this._parts.path;
        var _parent, _pos;
    
        // handle relative paths
        if (_path.charAt(0) !== '/') {
            if (_path.charAt(0) === '.') {
                _was_relative_prefix = _path.substring(0, _path.indexOf('/'));
            }
            _was_relative = true;
            _path = '/' + _path;
        }
        // resolve simples
        _path = _path.replace(/(\/(\.\/)+)|\/{2,}/g, '/');
        // resolve parents
        while (true) {
            _parent = _path.indexOf('/../');
            if (_parent === -1) {
                // no more ../ to resolve
                break;
            } else if (_parent === 0) {
                // top level cannot be relative...
                _path = _path.substring(3);
                break;
            }
    
            _pos = _path.substring(0, _parent).lastIndexOf('/');
            if (_pos === -1) {
                _pos = _parent;
            }
            _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
        }
        // revert to relative
        if (_was_relative && this.is('relative')) {
            _path = _path.substring(1);
        }
    
        _path = URI.recodePath(_path);
        this._parts.path = _path;
        this.build(!build);
        return this;
    };
    p.normalizePathname = p.normalizePath;
    p.normalizeQuery = function(build) {
        if (typeof this._parts.query === "string") {
            if (!this._parts.query.length) {
                this._parts.query = null;
            } else {
                this.query(URI.parseQuery(this._parts.query));
            }
    
            this.build(!build);
        }
    
        return this;
    };
    p.normalizeFragment = function(build) {
        if (!this._parts.fragment) {
            this._parts.fragment = null;
            this.build(!build);
        }
    
        return this;
    };
    p.normalizeSearch = p.normalizeQuery;
    p.normalizeHash = p.normalizeFragment;
    
    p.iso8859 = function() {
        // expect unicode input, iso8859 output
        var e = URI.encode;
        var d = URI.decode;
    
        URI.encode = escape;
        URI.decode = decodeURIComponent;
        this.normalize();
        URI.encode = e;
        URI.decode = d;
        return this;
    };
    
    p.unicode = function() {
        // expect iso8859 input, unicode output
        var e = URI.encode;
        var d = URI.decode;
    
        URI.encode = strictEncodeURIComponent;
        URI.decode = unescape;
        this.normalize();
        URI.encode = e;
        URI.decode = d;
        return this;
    };
    
    p.readable = function() {
        var uri = this.clone();
        // removing username, password, because they shouldn't be displayed according to RFC 3986
        uri.username("").password("").normalize();
        var t = '';
        if (uri._parts.protocol) {
            t += uri._parts.protocol + '://';
        }
    
        if (uri._parts.hostname) {
            if (uri.is('punycode') && punycode) {
                t += punycode.toUnicode(uri._parts.hostname);
                if (uri._parts.port) {
                    t += ":" + uri._parts.port;
                }
            } else {
                t += uri.host();
            }
        }
    
        if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
            t += '/';
        }
    
        t += uri.path(true);
        if (uri._parts.query) {
            var q = '';
            for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
                var kv = (qp[i] || "").split('=');
                q += '&' + URI.decodeQuery(kv[0])
                    .replace(/&/g, '%26');
    
                if (kv[1] !== undefined) {
                    q += "=" + URI.decodeQuery(kv[1])
                        .replace(/&/g, '%26');
                }
            }
            t += '?' + q.substring(1);
        }
    
        t += uri.hash();
        return t;
    };
    
    // resolving relative and absolute URLs
    p.absoluteTo = function(base) {
        var resolved = this.clone();
        var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
        var basedir, i, p;
    
        if (this._parts.urn) {
            throw new Error('URNs do not have any generally defined hierachical components');
        }
    
        if (!(base instanceof URI)) {
            base = new URI(base);
        }
        
        if (!resolved._parts.protocol) {
            resolved._parts.protocol = base._parts.protocol;
        }
        
        if (this._parts.hostname) {
            return resolved;
        }
    
        for (i = 0, p; p = properties[i]; i++) {
            resolved._parts[p] = base._parts[p];
        }
        
        properties = ['query', 'path'];
        for (i = 0, p; p = properties[i]; i++) {
            if (!resolved._parts[p] && base._parts[p]) {
                resolved._parts[p] = base._parts[p];
            }
        }
    
        if (resolved.path().charAt(0) !== '/') {
            basedir = base.directory();
            resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
            resolved.normalizePath();
        }
    
        resolved.build();
        return resolved;
    };
    p.relativeTo = function(base) {
        var relative = this.clone();
        var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
        var common, _base, _this, _base_diff, _this_diff;
    
        if (relative._parts.urn) {
            throw new Error('URNs do not have any generally defined hierachical components');
        }
    
        if (!(base instanceof URI)) {
            base = new URI(base);
        }
    
        if (relative.path().charAt(0) !== '/' || base.path().charAt(0) !== '/') {
            throw new Error('Cannot calculate common path from non-relative URLs');
        }
    
        // determine common sub path
        common = URI.commonPath(relative.path(), base.path());
        
        // relative paths don't have authority
        for (var i = 0, p; p = properties[i]; i++) {
            relative._parts[p] = null;
        }
    
        // no relation if there's nothing in common 
        if (common === '/') {
            return relative;
        } else if (!common) {
            // there's absolutely nothing in common here
            return this.clone();
        }
        
        _base = base.directory();
        _this = relative.directory();
    
        // base and this are on the same level
        if (_base === _this) {
            relative._parts.path = relative.filename();
            return relative.build();
        }
        
        _base_diff = _base.substring(common.length);
        _this_diff = _this.substring(common.length);
        
        // this is a descendant of base
        if (_base + '/' === common) {
            if (_this_diff) {
                _this_diff += '/';
            }
            
            relative._parts.path = _this_diff + relative.filename();
            return relative.build();
        } 
    
        // this is a descendant of base
        var parents = '../';
        var _common = new RegExp('^' + escapeRegEx(common));
        var _parents = _base.replace(_common, '/').match(/\//g).length -1;
    
        while (_parents--) {
            parents += '../';
        }
    
        relative._parts.path = relative._parts.path.replace(_common, parents);
        return relative.build();
    };
    
    // comparing URIs
    p.equals = function(uri) {
        var one = this.clone();
        var two = new URI(uri);
        var one_map = {};
        var two_map = {};
        var checked = {};
        var one_query, two_query, key;
    
        one.normalize();
        two.normalize();
    
        // exact match
        if (one.toString() === two.toString()) {
            return true;
        }
    
        // extract query string
        one_query = one.query();
        two_query = two.query();
        one.query("");
        two.query("");
    
        // definitely not equal if not even non-query parts match
        if (one.toString() !== two.toString()) {
            return false;
        }
    
        // query parameters have the same length, even if they're permutated
        if (one_query.length !== two_query.length) {
            return false;
        }
    
        one_map = URI.parseQuery(one_query);
        two_map = URI.parseQuery(two_query);
    
        for (key in one_map) {
            if (hasOwn.call(one_map, key)) {
                if (!isArray(one_map[key])) {
                    if (one_map[key] !== two_map[key]) {
                        return false;
                    }
                } else if (!arraysEqual(one_map[key], two_map[key])) {
                    return false;
                }
    
                checked[key] = true;
            }
        }
    
        for (key in two_map) {
            if (hasOwn.call(two_map, key)) {
                if (!checked[key]) {
                    // two contains a parameter not present in one
                    return false;
                }
            }
        }
    
        return true;
    };
    
    // state
    p.duplicateQueryParameters = function(v) {
        this._parts.duplicateQueryParameters = !!v;
        return this;
    };
    
    return URI;
    }));
    /**
     * jquery.unique-element-id.js
     *
     * A simple jQuery plugin to get a unique ID for
     * any HTML element
     *
     * Usage:
     *    $('some_element_selector').uid();
     *
     * by Jamie Rumbelow <jamie@jamierumbelow.net>
     * http://jamieonsoftware.com
     * Copyright (c)2011 Jamie Rumbelow
     *
     * Licensed under the MIT license (http://www.opensource.org/licenses/MIT)
     */
    
    
    (function($){
      var __uid_counter = 0;
      
      /**
       * Generate a new unqiue ID
       */
      function generateUniqueId() {
        // Increment the counter
        __uid_counter++;
        
        // Return a unique ID
        return "element-" + __uid_counter;
      }
      
      /**
       * Get a unique ID for an element, ensuring that the
       * element has an id="" attribute
       */
      $.fn.uid = function(){
        // We need an element! Check the selector returned something
        if (!this.length > 0) {
          return false;
        }
        
        // Act on only the first element. Also, fetch the element's ID attr
        var first_element = this.first(),
            id_attr = first_element.attr('id');
            
        // Do we have an ID?
        if (!id_attr) {
          // No? Generate one!
          id_attr = generateUniqueId();
          
          // And set the ID attribute
          first_element.attr('id', id_attr);
        }
        
        // Return it
        return id_attr;
      };
    })(jQuery);
    //fgnass.github.com/spin.js#v1.3
    
    /**
     * Copyright (c) 2011-2013 Felix Gnass
     * Licensed under the MIT license
     */
    
    (function(root, factory) {
    
      /* CommonJS */
      if (typeof exports == 'object')  module.exports = factory()
    
      /* AMD module */
      else if (typeof define == 'function' && define.amd) define(factory)
    
      /* Browser global */
      else root.Spinner = factory()
    }
    (this, function() {
      "use strict";
    
      var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */
        , animations = {} /* Animation rules keyed by their name */
        , useCssAnimations /* Whether to use CSS animations or setTimeout */
    
      /**
       * Utility function to create elements. If no tag name is given,
       * a DIV is created. Optionally properties can be passed.
       */
      function createEl(tag, prop) {
        var el = document.createElement(tag || 'div')
          , n
    
        for(n in prop) el[n] = prop[n]
        return el
      }
    
      /**
       * Appends children and returns the parent.
       */
      function ins(parent /* child1, child2, ...*/) {
        for (var i=1, n=arguments.length; i<n; i++)
          parent.appendChild(arguments[i])
    
        return parent
      }
    
      /**
       * Insert a new stylesheet to hold the @keyframe or VML rules.
       */
      var sheet = (function() {
        var el = createEl('style', {type : 'text/css'})
        ins(document.getElementsByTagName('head')[0], el)
        return el.sheet || el.styleSheet
      }())
    
      /**
       * Creates an opacity keyframe animation rule and returns its name.
       * Since most mobile Webkits have timing issues with animation-delay,
       * we create separate rules for each line/segment.
       */
      function addAnimation(alpha, trail, i, lines) {
        var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-')
          , start = 0.01 + i/lines * 100
          , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)
          , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()
          , pre = prefix && '-' + prefix + '-' || ''
    
        if (!animations[name]) {
          sheet.insertRule(
            '@' + pre + 'keyframes ' + name + '{' +
            '0%{opacity:' + z + '}' +
            start + '%{opacity:' + alpha + '}' +
            (start+0.01) + '%{opacity:1}' +
            (start+trail) % 100 + '%{opacity:' + alpha + '}' +
            '100%{opacity:' + z + '}' +
            '}', sheet.cssRules.length)
    
          animations[name] = 1
        }
    
        return name
      }
    
      /**
       * Tries various vendor prefixes and returns the first supported property.
       */
      function vendor(el, prop) {
        var s = el.style
          , pp
          , i
    
        if(s[prop] !== undefined) return prop
        prop = prop.charAt(0).toUpperCase() + prop.slice(1)
        for(i=0; i<prefixes.length; i++) {
          pp = prefixes[i]+prop
          if(s[pp] !== undefined) return pp
        }
      }
    
      /**
       * Sets multiple style properties at once.
       */
      function css(el, prop) {
        for (var n in prop)
          el.style[vendor(el, n)||n] = prop[n]
    
        return el
      }
    
      /**
       * Fills in default values.
       */
      function merge(obj) {
        for (var i=1; i < arguments.length; i++) {
          var def = arguments[i]
          for (var n in def)
            if (obj[n] === undefined) obj[n] = def[n]
        }
        return obj
      }
    
      /**
       * Returns the absolute page-offset of the given element.
       */
      function pos(el) {
        var o = { x:el.offsetLeft, y:el.offsetTop }
        while((el = el.offsetParent))
          o.x+=el.offsetLeft, o.y+=el.offsetTop
    
        return o
      }
    
      // Built-in defaults
    
      var defaults = {
        lines: 12,            // The number of lines to draw
        length: 7,            // The length of each line
        width: 5,             // The line thickness
        radius: 10,           // The radius of the inner circle
        rotate: 0,            // Rotation offset
        corners: 1,           // Roundness (0..1)
        color: '#000',        // #rgb or #rrggbb
        direction: 1,         // 1: clockwise, -1: counterclockwise
        speed: 1,             // Rounds per second
        trail: 100,           // Afterglow percentage
        opacity: 1/4,         // Opacity of the lines
        fps: 20,              // Frames per second when using setTimeout()
        zIndex: 2e9,          // Use a high z-index by default
        className: 'spinner', // CSS class to assign to the element
        top: 'auto',          // center vertically
        left: 'auto',         // center horizontally
        position: 'relative'  // element position
      }
    
      /** The constructor */
      function Spinner(o) {
        if (typeof this == 'undefined') return new Spinner(o)
        this.opts = merge(o || {}, Spinner.defaults, defaults)
      }
    
      // Global defaults that override the built-ins:
      Spinner.defaults = {}
    
      merge(Spinner.prototype, {
    
        /**
         * Adds the spinner to the given target element. If this instance is already
         * spinning, it is automatically removed from its previous target b calling
         * stop() internally.
         */
        spin: function(target) {
          this.stop()
    
          var self = this
            , o = self.opts
            , el = self.el = css(createEl(0, {className: o.className}), {position: o.position, width: 0, zIndex: o.zIndex})
            , mid = o.radius+o.length+o.width
            , ep // element position
            , tp // target position
    
          if (target) {
            target.insertBefore(el, target.firstChild||null)
            tp = pos(target)
            ep = pos(el)
            css(el, {
              left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : parseInt(o.left, 10) + mid) + 'px',
              top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : parseInt(o.top, 10) + mid)  + 'px'
            })
          }
    
          el.setAttribute('role', 'progressbar')
          self.lines(el, self.opts)
    
          if (!useCssAnimations) {
            // No CSS animation support, use setTimeout() instead
            var i = 0
              , start = (o.lines - 1) * (1 - o.direction) / 2
              , alpha
              , fps = o.fps
              , f = fps/o.speed
              , ostep = (1-o.opacity) / (f*o.trail / 100)
              , astep = f/o.lines
    
            ;(function anim() {
              i++;
              for (var j = 0; j < o.lines; j++) {
                alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)
    
                self.opacity(el, j * o.direction + start, alpha, o)
              }
              self.timeout = self.el && setTimeout(anim, ~~(1000/fps))
            })()
          }
          return self
        },
    
        /**
         * Stops and removes the Spinner.
         */
        stop: function() {
          var el = this.el
          if (el) {
            clearTimeout(this.timeout)
            if (el.parentNode) el.parentNode.removeChild(el)
            this.el = undefined
          }
          return this
        },
    
        /**
         * Internal method that draws the individual lines. Will be overwritten
         * in VML fallback mode below.
         */
        lines: function(el, o) {
          var i = 0
            , start = (o.lines - 1) * (1 - o.direction) / 2
            , seg
    
          function fill(color, shadow) {
            return css(createEl(), {
              position: 'absolute',
              width: (o.length+o.width) + 'px',
              height: o.width + 'px',
              background: color,
              boxShadow: shadow,
              transformOrigin: 'left',
              transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',
              borderRadius: (o.corners * o.width>>1) + 'px'
            })
          }
    
          for (; i < o.lines; i++) {
            seg = css(createEl(), {
              position: 'absolute',
              top: 1+~(o.width/2) + 'px',
              transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
              opacity: o.opacity,
              animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1/o.speed + 's linear infinite'
            })
    
            if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}))
    
            ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')))
          }
          return el
        },
    
        /**
         * Internal method that adjusts the opacity of a single line.
         * Will be overwritten in VML fallback mode below.
         */
        opacity: function(el, i, val) {
          if (i < el.childNodes.length) el.childNodes[i].style.opacity = val
        }
    
      })
    
    
      function initVML() {
    
        /* Utility function to create a VML tag */
        function vml(tag, attr) {
          return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr)
        }
    
        // No CSS transforms but VML support, add a CSS rule for VML elements:
        sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')
    
        Spinner.prototype.lines = function(el, o) {
          var r = o.length+o.width
            , s = 2*r
    
          function grp() {
            return css(
              vml('group', {
                coordsize: s + ' ' + s,
                coordorigin: -r + ' ' + -r
              }),
              { width: s, height: s }
            )
          }
    
          var margin = -(o.width+o.length)*2 + 'px'
            , g = css(grp(), {position: 'absolute', top: margin, left: margin})
            , i
    
          function seg(i, dx, filter) {
            ins(g,
              ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),
                ins(css(vml('roundrect', {arcsize: o.corners}), {
                    width: r,
                    height: o.width,
                    left: o.radius,
                    top: -o.width>>1,
                    filter: filter
                  }),
                  vml('fill', {color: o.color, opacity: o.opacity}),
                  vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change
                )
              )
            )
          }
    
          if (o.shadow)
            for (i = 1; i <= o.lines; i++)
              seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')
    
          for (i = 1; i <= o.lines; i++) seg(i)
          return ins(el, g)
        }
    
        Spinner.prototype.opacity = function(el, i, val, o) {
          var c = el.firstChild
          o = o.shadow && o.lines || 0
          if (c && i+o < c.childNodes.length) {
            c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild
            if (c) c.opacity = val
          }
        }
      }
    
      var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})
    
      if (!vendor(probe, 'transform') && probe.adj) initVML()
      else useCssAnimations = vendor(probe, 'animation')
    
      return Spinner
    
    }));
    
    
    
    (function($) {
        $.fn.spin = function(opts, color) {
            var presets = {
                "tiny": { lines: 8, length: 2, width: 2, radius: 3 },
                "small": { lines: 8, length: 4, width: 3, radius: 5 },
                "large": { lines: 10, length: 8, width: 4, radius: 8 }
            };
            if (Spinner) {
                return this.each(function() {
                    var $this = $(this),
                        data = $this.data();
                    
                    if (data.spinner) {
                        data.spinner.stop();
                        delete data.spinner;
                    }
                    if (opts !== false) {
                        if (typeof opts === "string") {
                            if (opts in presets) {
                                opts = presets[opts];
                            } else {
                                opts = {};
                            }
                            if (color) {
                                opts.color = color;
                            }
                        }
                        data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
                    }
                });
            } else {
                throw "Spinner class not available.";
            }
        };
    })(jQuery);
    (function() {
    
    
    }).call(this);
    (function() {
      var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
    
      this.CheckboxLimiter = (function() {
        function CheckboxLimiter(checkboxes, limit, limitClass) {
          this.checkboxes = checkboxes;
          this.limit = limit != null ? limit : 3;
          this.limitClass = limitClass != null ? limitClass : 'checkbox-disabled';
          this.onCheckboxChange = bind(this.onCheckboxChange, this);
          this.addEventListeners();
        }
    
        CheckboxLimiter.prototype.addEventListeners = function() {
          return this.checkboxes.on('change', this.onCheckboxChange);
        };
    
        CheckboxLimiter.prototype.onCheckboxChange = function(event) {
          console.log(this.checkedCount());
          this.handleUncheked();
          if (this.checkedCount() > this.limit) {
            return ($(event.currentTarget)).prop('checked', false);
          }
        };
    
        CheckboxLimiter.prototype.checkedCount = function() {
          return _.size(this.checkboxes.filter(':checked'));
        };
    
        CheckboxLimiter.prototype.handleUncheked = function() {
          return _.each(this.checkboxes.filter(':not(:checked)'), (function(_this) {
            return function(item) {
              var target;
              target = ($(item)).closest('li');
              if (_this.checkedCount() >= _this.limit) {
                return target.addClass(_this.limitClass);
              } else {
                return target.removeClass(_this.limitClass);
              }
            };
          })(this));
        };
    
        return CheckboxLimiter;
    
      })();
    
    }).call(this);
    (function() {
      var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
    
      this.Toggler = (function() {
        function Toggler(target) {
          this.onTargetClick = bind(this.onTargetClick, this);
          this.target = $(target);
          this.container = $(this.target.parents(this.target.data('container')));
          this.controls = $(this.container.parents('[data-role=collapsable]'));
          this.controlsContainer = $(this.controls.data('container'));
          this.onConfirmer = $(this.target.data('onConfirmer'));
          this.offConfirmer = $(this.target.data('offConfirmer'));
          this.url = this.target.data('url');
          this.onUrl = this.target.data('onUrl');
          this.offUrl = this.target.data('offUrl');
          this.bsUrl = this.target.data('bsurl');
          this.method = this.target.data('method');
          this.shouldConfirm = this.target.data('shouldConfirm');
          this.sdOnly = this.target.data('sdonly');
          this.confirmOnce = this.target.data('confirmOnce');
          this.confirmed = false;
          this.busy = false;
          this.addEventListeners();
        }
    
        Toggler.prototype.addEventListeners = function() {
          return this.target.on('click', this.onTargetClick);
        };
    
        Toggler.prototype.onTargetClick = function(event) {
          var confirmer, url;
          if (this.busy) {
            return event.preventDefault();
          }
          confirmer = this.isChecked() ? this.onConfirmer : this.offConfirmer;
          url = (this.isChecked() ? this.onUrl : this.offUrl) || this.url;
          this.busy = true;
          if (!this.confirmOnce) {
            this.confirmed = false;
          }
          if (this.sdOnly) {
            return window.location = this.bsUrl;
          } else if ((_.any(confirmer)) && (this.shouldConfirm && !this.confirmed)) {
            this.toggle();
            confirmer.data('url', url);
            confirmer.data('method', this.method);
            confirmer.find('@bstarget').prop('href', this.bsUrl);
            return this.showConfirmer(confirmer);
          } else {
            return this.executeRequest(confirmer);
          }
        };
    
        Toggler.prototype.toggle = function() {
          return this.target.prop('checked', !this.isChecked());
        };
    
        Toggler.prototype.markContainer = function() {
          if (_.any(this.container)) {
            return this.container.attr('data-active', this.isChecked());
          }
        };
    
        Toggler.prototype.isChecked = function() {
          return this.target.is(':checked');
        };
    
        Toggler.prototype.showConfirmer = function(confirmer) {
          confirmer.on('click', '[data-role=confirm]', (function(_this) {
            return function(event) {
              event.preventDefault();
              _this.toggle();
              return _this.confirm(confirmer);
            };
          })(this));
          confirmer.on('click', '[data-role=cancel]', (function(_this) {
            return function(event) {
              event.preventDefault();
              _this.hideConfirmer(confirmer);
              return _this.busy = false;
            };
          })(this));
          this.controls.data('disabled', true);
          $('.overlay').addClass('overlay_show').data('disabled', true);
          $('.overlay').on('click', (function(_this) {
            return function(event) {
              event.preventDefault();
              _this.hideConfirmer(confirmer);
              return _this.busy = false;
            };
          })(this));
          return confirmer.show();
        };
    
        Toggler.prototype.hideConfirmer = function(confirmer) {
          confirmer.off('click', '[data-role=confirm]');
          confirmer.off('click', '[data-role=hide]');
          confirmer.removeData('url');
          confirmer.find('@bstarget').prop('href', 'javascript::void()');
          this.controls.removeData('disabled');
          $('.overlay').removeClass('overlay_show').removeData('disabled');
          return confirmer.hide();
        };
    
        Toggler.prototype.confirm = function(confirmer) {
          this.executeRequest(confirmer);
          this.hideConfirmer(confirmer);
          return this.confirmed = true;
        };
    
        Toggler.prototype.executeRequest = function(confirmer) {
          var method, url, xhr;
          url = confirmer.data('url');
          method = 'post';
          if (confirmer.data('method')) {
            method = confirmer.data('method');
          }
          if (method !== 'post') {
            window.location = url;
            return true;
          }
          xhr = $.ajax({
            url: url,
            method: method
          });
          xhr.done((function(_this) {
            return function(response) {
              _this.busy = false;
              if (response.message) {
                $.jGrowl(response.message, {
                  theme: 'alert'
                });
                _this.markContainer();
              }
              return _this.onRequestComplete();
            };
          })(this));
          return xhr.fail((function(_this) {
            return function(response) {
              console.log(response);
              return _this.toggle();
            };
          })(this));
        };
    
        Toggler.prototype.onRequestComplete = function() {
          var archiveControl, otherControls;
          if ((this.target.prop('name')) === 'set_executor') {
            archiveControl = $(this.controlsContainer.find("#archive_" + (this.controlsContainer.prop('id'))));
            archiveControl.data('hidden', this.isChecked());
            this.container.attr('title', (this.isChecked() ? 'Отменить фрилансера как исполнителя заказа' : 'Выбрать исполнителя'));
            if (this.isChecked()) {
              otherControls = ($('[name=set_executor]')).not(this.target).prop('checked', false);
              _.each(otherControls, (function(_this) {
                return function(item) {
                  ($(item)).parents('label').first().attr('data-active', 'false').attr('title', 'Выбрать исполнителя');
                  return _.each(($('.control_archive')).not(archiveControl), function(item) {
                    if (!($(item)).hasClass('animated')) {
                      ($(item)).addClass('animated');
                    }
                    return ($(item)).data('hidden', false).removeClass('fadeOutDown').addClass('fadeInDown').slideDown();
                  });
                };
              })(this));
            }
            if (archiveControl.data('hidden')) {
              return archiveControl.removeClass('fadeInDown').addClass('fadeOutDown').slideUp();
            } else {
              return archiveControl.removeClass('fadeOutDown').addClass('fadeInDown').slideDown();
            }
          }
        };
    
        return Toggler;
    
      })();
    
      $(function() {
        return _.each($('@toggler'), function(target) {
          var toggler;
          return toggler = new Toggler(target);
        });
      });
    
    }).call(this);
    (function() {
      $(function() {
        return ($("[name='subscription_user_mail[delivery_frequency]']")).on('change', function(event) {
          var descriptions, form, target;
          target = $(event.currentTarget);
          form = target.parents('form[data-remote=true]');
          descriptions = form.find("[data-role='subscription-description']");
          ((descriptions.addClass('hidden')).filter("[data-state='" + (target.val()) + "']")).removeClass('hidden');
          return form.submit();
        });
      });
    
    }).call(this);
    (function() {
      $(function() {
        return ($('[data-role=form-submit]')).on('click', function(event) {
          var $form, $hiddenField, $target, btnName, btnValue;
          $target = $(event.currentTarget);
          $form = $($target.data('form'));
          btnName = $target.prop('name');
          btnValue = $target.val();
          if (btnValue) {
            ($form.find("input[type=hidden][name='" + btnName + "']")).remove();
            $hiddenField = ($('<input>')).attr('type', 'hidden').attr('name', btnName).val(btnValue);
            $form.append($hiddenField);
          }
          return $form.submit();
        });
      });
    
    }).call(this);
    (function() {
      var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
    
      this.Collapsable = (function() {
        Collapsable.prototype.ITEM_SELECTOR = '> li';
    
        Collapsable.prototype.DELAY = 250;
    
        Collapsable.prototype.SEQ_DELAY = 75;
    
        Collapsable.prototype.CLASS_IN = 'fadeInDown';
    
        Collapsable.prototype.CLASS_OUT = 'fadeOutDown';
    
        function Collapsable(target) {
          this.collapse = bind(this.collapse, this);
          this.expand = bind(this.expand, this);
          this.onContainerMouseLeave = bind(this.onContainerMouseLeave, this);
          this.onContainerMouseEnter = bind(this.onContainerMouseEnter, this);
          this.target = $(target);
          this.container = $(this.target.data('container'));
          this.itemSelector = (this.target.data('itemSelector')) || this.ITEM_SELECTOR;
          this.shouldHide = this.target.data('shouldHide');
          _.each(this.items(), (function(_this) {
            return function(item) {
              if (!_this.isActiveItem(item)) {
                return item.hide();
              }
            };
          })(this));
          this.addEventListeners();
        }
    
        Collapsable.prototype.addEventListeners = function() {
          return this.container.on({
            mouseenter: this.onContainerMouseEnter,
            mouseleave: this.onContainerMouseLeave
          });
        };
    
        Collapsable.prototype.onContainerMouseEnter = function(event) {
          if (!this.isDisabled()) {
            return this.delayedEventCallback(event, this.expand);
          }
        };
    
        Collapsable.prototype.onContainerMouseLeave = function(event) {
          if (!this.isDisabled()) {
            return this.delayedEventCallback(event, this.collapse);
          }
        };
    
        Collapsable.prototype.delayedEventCallback = function(event, callback) {
          var currentTarget;
          currentTarget = $(event.currentTarget);
          clearTimeout(currentTarget.data('timer'));
          return currentTarget.data('timer', setTimeout(((function(_this) {
            return function() {
              return currentTarget.removeData('timer' && callback());
            };
          })(this)), this.DELAY));
        };
    
        Collapsable.prototype.expand = function() {
          if (!this.isExpanded()) {
            return _.each(this.iterableItems(), (function(_this) {
              return function(item, index) {
                var delay;
                delay = index * _this.SEQ_DELAY;
                return setTimeout((function() {
                  return _this.revealItem(item);
                }), delay);
              };
            })(this));
          }
        };
    
        Collapsable.prototype.collapse = function() {
          if (this.isExpanded()) {
            return _.each(this.iterableItems(), (function(_this) {
              return function(item, index) {
                var delay;
                delay = index * _this.SEQ_DELAY;
                return setTimeout((function() {
                  return _this.hideItem(item);
                }), delay);
              };
            })(this));
          }
        };
    
        Collapsable.prototype.isExpanded = function() {
          return _.every(this.iterableItems(), function(item) {
            return item.is(':visible');
          });
        };
    
        Collapsable.prototype.revealItem = function(item) {
          this.replaceClass(item, this.CLASS_OUT, this.CLASS_IN);
          return item.slideDown(250);
        };
    
        Collapsable.prototype.hideItem = function(item) {
          this.replaceClass(item, this.CLASS_IN, this.CLASS_OUT);
          return item.slideUp(250);
        };
    
        Collapsable.prototype.iterableItems = function() {
          return _.reject(this.items(), (function(_this) {
            return function(item) {
              return (_this.isActiveItem(item)) || (_this.isHiddenItem(item));
            };
          })(this));
        };
    
        Collapsable.prototype.isActiveItem = function(item) {
          return ((item.data('active')) != null) && (item.data('active')) === true;
        };
    
        Collapsable.prototype.isHiddenItem = function(item) {
          return ((item.data('hidden')) != null) && (item.data('hidden')) === true;
        };
    
        Collapsable.prototype.isDisabled = function() {
          return (this.target.data('disabled')) === true;
        };
    
        Collapsable.prototype.items = function() {
          return _.map(this.target.find(this.itemSelector), function(item) {
            return ($(item)).addClass('animated');
          });
        };
    
        Collapsable.prototype.replaceClass = function(element, from, to) {
          if (element.hasClass(from)) {
            element.removeClass(from);
          }
          if (!element.hasClass(to)) {
            return element.addClass(to);
          }
        };
    
        return Collapsable;
    
      })();
    
      $(function() {
        return _.each($('[data-role=collapsable]'), function(target) {
          return new Collapsable(target);
        });
      });
    
    }).call(this);
    (function() {
      var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
    
      this.PopupSelect = (function() {
        PopupSelect.prototype.LIMIT = 7;
    
        PopupSelect.prototype.SELECTABLE = 'input[type=checkbox], input[type=radio]';
    
        function PopupSelect(target, limit) {
          this.limit = limit != null ? limit : null;
          this.hidePopup = bind(this.hidePopup, this);
          this.target = $(target);
          this.button = $(this.target.data('button'));
          this.overlay = $('[data-block=overlay]');
          this.groupToggles = $(this.target.find('[data-role=group-toggle]'));
          this.groups = ($(this.target.find('[data-role=group]'))).addClass('animated');
          this.currentToggle = $(this.groupToggles[0]);
          this.currentGroup = $(this.groups[0]);
          this.selectables = this.groups.find(this.SELECTABLE);
          this.limit || (this.limit = this.LIMIT);
          this.target.addClass('animated');
          this.toggleGroup(this.currentGroup, this.currentToggle);
          this.addEventListeners();
        }
    
        PopupSelect.prototype.addEventListeners = function() {
          this.button.on('click', (function(_this) {
            return function(event) {
              return _this.showPopup();
            };
          })(this));
          this.overlay.on('click', (function(_this) {
            return function(event) {
              return _this.hidePopup();
            };
          })(this));
          this.groupToggles.on('click', (function(_this) {
            return function(event) {
              var group, target;
              target = $(event.currentTarget);
              group = $(target.data('group'));
              event.preventDefault();
              return _this.toggleGroup(group, target);
            };
          })(this));
          return this.selectables.on('change', (function(_this) {
            return function(event) {
              var blocker, uncheckedSelectables;
              _this.lastSelectable = $(event.currentTarget);
              if (!_this.lastSelectable.is(':checked')) {
                _this.selectables.filter(':disabled').prop('disabled', false).closest('label').find('[data-role=blocker]').remove();
              }
              if ((_this.lastSelectable.is(':checked')) && _this.totalSelectedCount() > _this.limit) {
                _this.lastSelectable.prop('checked', false);
                _this.shakePopup();
                blocker = ($("<span data-role='blocker'> Можно выбрать только " + _this.limit + " разделов </span>")).addClass('checkbox__limiter');
                uncheckedSelectables = _this.selectables.not(':checked');
                uncheckedSelectables.prop('disabled', true);
                blocker.insertAfter(uncheckedSelectables);
                return (uncheckedSelectables.closest('label')).addClass('checkbox_disabled');
              } else {
                (_this.selectables.not(':checked').closest('label')).removeClass('checkbox_disabled');
                _this.updateCounter(_this.currentGroup, _this.currentToggle);
                return _this.updateButton();
              }
            };
          })(this));
        };
    
        PopupSelect.prototype.showPopup = function() {
          ((this.target.removeClass('bounceOutDown')).addClass('bounceInDown')).slideDown();
          if (!this.overlay.hasClass('overlay_show')) {
            return this.overlay.addClass('overlay_show');
          }
        };
    
        PopupSelect.prototype.hidePopup = function(event) {
          ((this.target.removeClass('bounceInDown')).addClass('bounceOutDown')).slideUp();
          if (this.overlay.hasClass('overlay_show')) {
            return this.overlay.removeClass('overlay_show');
          }
        };
    
        PopupSelect.prototype.toggleGroup = function(group, toggle) {
          this.currentGroup = group;
          this.currentToggle = toggle;
          this.groupToggles.removeClass('active');
          toggle.addClass('active');
          this.groups.hide();
          return group.show();
        };
    
        PopupSelect.prototype.updateCounter = function(group, toggle) {
          var count, counter;
          counter = $(toggle.find('[data-role=counter]'));
          count = this.selectedInGroupCount(group);
          if (this.limit <= 1) {
            ($(this.groupToggles)).not("[data-group='" + (toggle.data('group')) + "']").find('[data-role=counter]').html(0).fadeOut(function(event) {
              return ($(this)).removeClass('visible');
            });
          }
          counter.addClass('animated');
          if (count > 0) {
            if (counter.is(':visible')) {
              counter.removeClass('pulse', function() {
                return counter.addClass('pulse');
              });
            } else {
              counter.removeClass('pulse', function() {
                return counter.fadeIn(function() {
                  return counter.addClass('pulse');
                });
              });
            }
          } else {
            counter.removeClass('pulse', function() {
              return counter.addClass('pulse', function() {
                return counter.fadeOut(function() {
                  return counter.removeClass('visible');
                });
              });
            });
          }
          return counter.html(count);
        };
    
        PopupSelect.prototype.totalSelectedCount = function() {
          return _.size(this.selectables.filter(':checked'));
        };
    
        PopupSelect.prototype.selectedInGroupCount = function(group) {
          return _.size((group.find(this.SELECTABLE)).filter(':checked'));
        };
    
        PopupSelect.prototype.shakePopup = function() {
          return this.target.removeClass('bounceOutDown bounceInDown shake', (function(_this) {
            return function() {
              return _this.target.addClass('shake');
            };
          })(this));
        };
    
        PopupSelect.prototype.updateButton = function() {
          var name, text;
          text = this.limit > 1 ? "Выбрано: " + (this.totalSelectedCount()) + " из " + this.limit : this.totalSelectedCount() <= 0 ? "Ничего не выбрано" : (name = (this.lastSelectable.parent().find('[data-role=name]')).html(), "Выбрано: " + name);
          return this.button.html(text);
        };
    
        return PopupSelect;
    
      })();
    
      $(function() {
        return _.each($('[data-block=popup-select]'), function(target) {
          return new PopupSelect(target, ($(target)).data('limit'));
        });
      });
    
    }).call(this);
    $(document).ready(function(){
    
      if($("@response-list_services").length) {
    
        $(function() {
    
          var newSelection = "";
          var tabsLink = $("@tabs_link_sub")
          var responsesList = $('@responses');
    
          tabsLink.click(function(e){
    
            var responseItem = $('@responses-item');
    
            e.preventDefault();
            tabsLink.removeClass("link_active");
            $(this).addClass("link_active");
            newSelection = $(this).attr("rel");
    
            if (newSelection == 'all') {
              responsesList.removeClass('new favorite')
              responsesList.addClass('all')
            }else if (newSelection == 'new'){
              responsesList.removeClass('all favorite')
              responsesList.addClass('new')
            }else if (newSelection == 'favorite'){
              responsesList.removeClass('new all')
              responsesList.addClass('favorite')
            }
    
            responseItem.not(".is_"+newSelection).addClass('hidden');
            $(".is_"+newSelection).removeClass('hidden');
    
            showEmptyBlock(newSelection);
    
            return false;
    
          });
        });
      }
    
    });
    
    function showEmptyBlock(targetClass) {
    
      var emptyBlock = $('@responses @empty');
    
      emptyBlock.addClass('hidden');
    
      if ($('@responses.' + targetClass).find('@responses-item.is_' + targetClass).length == 0) {
        $('@responses.' + targetClass).find('@empty').removeClass('hidden');
      };
    }
    
    function responsesCount(){
    
      var responsesList = $('@responses');
      var responseItem = $('@responses-item');
    
      var countResponses = responseItem.length;
      var countResponsesNew = $('@responses-item.is_new').length;
      var countResponsesFavorite = $('@responses-item.is_favorite').length;
    
      var tabAllCounter = $('@tabs_sub_all').find('@tabs_sub_counter')
      var tabNewCounter = $('@tabs_sub_new').find('@tabs_sub_counter')
      var tabFavoriteCounter = $('@tabs_sub_favorite').find('@tabs_sub_counter')
    
      tabAllCounter.html(countResponses);
      tabNewCounter.html(countResponsesNew);
      tabFavoriteCounter.html(countResponsesFavorite);
    
    }
    ;
    /**
     * Super simple wysiwyg editor v0.8.10
     * https://summernote.org
     *
     * Copyright 2013- Alan Hong. and other contributors
     * summernote may be freely distributed under the MIT license.
     *
     * Date: 2018-02-20T00:34Z
     */
    
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery')) :
        typeof define === 'function' && define.amd ? define(['jquery'], factory) :
        (factory(global.jQuery));
    }(this, (function ($$1) { 'use strict';
    
    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
    
    var Renderer = /** @class */ (function () {
        function Renderer(markup, children, options, callback) {
            this.markup = markup;
            this.children = children;
            this.options = options;
            this.callback = callback;
        }
        Renderer.prototype.render = function ($parent) {
            var $node = $$1(this.markup);
            if (this.options && this.options.contents) {
                $node.html(this.options.contents);
            }
            if (this.options && this.options.className) {
                $node.addClass(this.options.className);
            }
            if (this.options && this.options.data) {
                $$1.each(this.options.data, function (k, v) {
                    $node.attr('data-' + k, v);
                });
            }
            if (this.options && this.options.click) {
                $node.on('click', this.options.click);
            }
            if (this.children) {
                var $container_1 = $node.find('.note-children-container');
                this.children.forEach(function (child) {
                    child.render($container_1.length ? $container_1 : $node);
                });
            }
            if (this.callback) {
                this.callback($node, this.options);
            }
            if (this.options && this.options.callback) {
                this.options.callback($node);
            }
            if ($parent) {
                $parent.append($node);
            }
            return $node;
        };
        return Renderer;
    }());
    var renderer = {
        create: function (markup, callback) {
            return function () {
                var options = typeof arguments[1] === 'object' ? arguments[1] : arguments[0];
                var children = $$1.isArray(arguments[0]) ? arguments[0] : [];
                if (options && options.children) {
                    children = options.children;
                }
                return new Renderer(markup, children, options, callback);
            };
        }
    };
    
    var TooltipUI = /** @class */ (function () {
        function TooltipUI($node, options) {
            this.$node = $node;
            this.options = $.extend({}, {
                title: '',
                target: options.container,
                trigger: 'hover focus',
                placement: 'bottom'
            }, options);
            // create tooltip node
            this.$tooltip = $([
                '<div class="note-tooltip in">',
                '  <div class="note-tooltip-arrow"/>',
                '  <div class="note-tooltip-content"/>',
                '</div>'
            ].join(''));
            // define event
            if (this.options.trigger !== 'manual') {
                var showCallback_1 = this.show.bind(this);
                var hideCallback_1 = this.hide.bind(this);
                var toggleCallback_1 = this.toggle.bind(this);
                this.options.trigger.split(' ').forEach(function (eventName) {
                    if (eventName === 'hover') {
                        $node.off('mouseenter mouseleave');
                        $node.on('mouseenter', showCallback_1).on('mouseleave', hideCallback_1);
                    }
                    else if (eventName === 'click') {
                        $node.on('click', toggleCallback_1);
                    }
                    else if (eventName === 'focus') {
                        $node.on('focus', showCallback_1).on('blur', hideCallback_1);
                    }
                });
            }
        }
        TooltipUI.prototype.show = function () {
            var $node = this.$node;
            var offset = $node.offset();
            var $tooltip = this.$tooltip;
            var title = this.options.title || $node.attr('title') || $node.data('title');
            var placement = this.options.placement || $node.data('placement');
            $tooltip.addClass(placement);
            $tooltip.addClass('in');
            $tooltip.find('.note-tooltip-content').text(title);
            $tooltip.appendTo(this.options.target);
            var nodeWidth = $node.outerWidth();
            var nodeHeight = $node.outerHeight();
            var tooltipWidth = $tooltip.outerWidth();
            var tooltipHeight = $tooltip.outerHeight();
            if (placement === 'bottom') {
                $tooltip.css({
                    top: offset.top + nodeHeight,
                    left: offset.left + (nodeWidth / 2 - tooltipWidth / 2)
                });
            }
            else if (placement === 'top') {
                $tooltip.css({
                    top: offset.top - tooltipHeight,
                    left: offset.left + (nodeWidth / 2 - tooltipWidth / 2)
                });
            }
            else if (placement === 'left') {
                $tooltip.css({
                    top: offset.top + (nodeHeight / 2 - tooltipHeight / 2),
                    left: offset.left - tooltipWidth
                });
            }
            else if (placement === 'right') {
                $tooltip.css({
                    top: offset.top + (nodeHeight / 2 - tooltipHeight / 2),
                    left: offset.left + nodeWidth
                });
            }
        };
        TooltipUI.prototype.hide = function () {
            this.$tooltip.removeClass('in');
            this.$tooltip.remove();
        };
        TooltipUI.prototype.toggle = function () {
            if (this.$tooltip.hasClass('in')) {
                this.hide();
            }
            else {
                this.show();
            }
        };
        return TooltipUI;
    }());
    
    var DropdownUI = /** @class */ (function () {
        function DropdownUI($node, options) {
            this.$button = $node;
            this.options = $.extend({}, {
                target: options.container
            }, options);
            this.setEvent();
        }
        DropdownUI.prototype.setEvent = function () {
            this.$button.on('click', this.toggle.bind(this));
        };
        DropdownUI.prototype.clear = function () {
            var $parent = $('.note-btn-group.open');
            $parent.find('.note-btn.active').removeClass('active');
            $parent.removeClass('open');
        };
        DropdownUI.prototype.show = function () {
            this.$button.addClass('active');
            this.$button.parent().addClass('open');
            var $dropdown = this.$button.next();
            var offset = $dropdown.offset();
            var width = $dropdown.outerWidth();
            var windowWidth = $(window).width();
            var targetMarginRight = parseFloat($(this.options.target).css('margin-right'));
            if (offset.left + width > windowWidth - targetMarginRight) {
                $dropdown.css('margin-left', windowWidth - targetMarginRight - (offset.left + width));
            }
            else {
                $dropdown.css('margin-left', '');
            }
        };
        DropdownUI.prototype.hide = function () {
            this.$button.removeClass('active');
            this.$button.parent().removeClass('open');
        };
        DropdownUI.prototype.toggle = function () {
            var isOpened = this.$button.parent().hasClass('open');
            this.clear();
            if (isOpened) {
                this.hide();
            }
            else {
                this.show();
            }
        };
        return DropdownUI;
    }());
    $(document).on('click', function (e) {
        if (!$(e.target).closest('.note-btn-group').length) {
            $('.note-btn-group.open').removeClass('open');
        }
    });
    $(document).on('click.note-dropdown-menu', function (e) {
        $(e.target).closest('.note-dropdown-menu').parent().removeClass('open');
    });
    
    var ModalUI = /** @class */ (function () {
        function ModalUI($node, options) {
            this.options = $.extend({}, {
                target: options.container || 'body'
            }, options);
            this.$modal = $node;
            this.$backdrop = $('<div class="note-modal-backdrop" />');
        }
        ModalUI.prototype.show = function () {
            if (this.options.target === 'body') {
                this.$backdrop.css('position', 'fixed');
                this.$modal.css('position', 'fixed');
            }
            else {
                this.$backdrop.css('position', 'absolute');
                this.$modal.css('position', 'absolute');
            }
            this.$backdrop.appendTo(this.options.target).show();
            this.$modal.appendTo(this.options.target).addClass('open').show();
            this.$modal.trigger('note.modal.show');
            this.$modal.off('click', '.close').on('click', '.close', this.hide.bind(this));
        };
        ModalUI.prototype.hide = function () {
            this.$modal.removeClass('open').hide();
            this.$backdrop.hide();
            this.$modal.trigger('note.modal.hide');
        };
        return ModalUI;
    }());
    
    var editor = renderer.create('<div class="note-editor note-frame"/>');
    var toolbar = renderer.create('<div class="note-toolbar" role="toolbar"/>');
    var editingArea = renderer.create('<div class="note-editing-area"/>');
    var codable = renderer.create('<textarea class="note-codable" role="textbox" aria-multiline="true"/>');
    var editable = renderer.create('<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>');
    var statusbar = renderer.create([
        '<output class="note-status-output" role="status" aria-live="polite"/>',
        '<div class="note-statusbar" role="resize">',
        '  <div class="note-resizebar" role="seperator" aria-orientation="horizontal" aria-label="resize">',
        '    <div class="note-icon-bar"/>',
        '    <div class="note-icon-bar"/>',
        '    <div class="note-icon-bar"/>',
        '  </div>',
        '</div>'
    ].join(''));
    var airEditor = renderer.create('<div class="note-editor"/>');
    var airEditable = renderer.create([
        '<output class="note-status-output" role="status" aria-live="polite"/>',
        '<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>'
    ].join(''));
    var buttonGroup = renderer.create('<div class="note-btn-group">');
    var button = renderer.create('<button type="button" class="note-btn" role="button" tabindex="-1">', function ($node, options) {
        // set button type
        if (options && options.tooltip) {
            $node.attr({
                'aria-label': options.tooltip
            });
            $node.data('_lite_tooltip', new TooltipUI($node, {
                title: options.tooltip,
                container: options.container
            }));
        }
        if (options.contents) {
            $node.html(options.contents);
        }
        if (options && options.data && options.data.toggle === 'dropdown') {
            $node.data('_lite_dropdown', new DropdownUI($node, {
                container: options.container
            }));
        }
    });
    var dropdown = renderer.create('<div class="note-dropdown-menu" role="list">', function ($node, options) {
        var markup = $.isArray(options.items) ? options.items.map(function (item) {
            var value = (typeof item === 'string') ? item : (item.value || '');
            var content = options.template ? options.template(item) : item;
            var $temp = $('<a class="note-dropdown-item" href="#" data-value="' + value + '" role="listitem" aria-label="' + item + '"></a>');
            $temp.html(content).data('item', item);
            return $temp;
        }) : options.items;
        $node.html(markup).attr({ 'aria-label': options.title });
        $node.on('click', '> .note-dropdown-item', function (e) {
            var $a = $(this);
            var item = $a.data('item');
            var value = $a.data('value');
            if (item.click) {
                item.click($a);
            }
            else if (options.itemClick) {
                options.itemClick(e, item, value);
            }
        });
    });
    var dropdownCheck = renderer.create('<div class="note-dropdown-menu note-check" role="list">', function ($node, options) {
        var markup = $.isArray(options.items) ? options.items.map(function (item) {
            var value = (typeof item === 'string') ? item : (item.value || '');
            var content = options.template ? options.template(item) : item;
            var $temp = $('<a class="note-dropdown-item" href="#" data-value="' + value + '" role="listitem" aria-label="' + item + '"></a>');
            $temp.html([icon(options.checkClassName), ' ', content]).data('item', item);
            return $temp;
        }) : options.items;
        $node.html(markup).attr({ 'aria-label': options.title });
        $node.on('click', '> .note-dropdown-item', function (e) {
            var $a = $(this);
            var item = $a.data('item');
            var value = $a.data('value');
            if (item.click) {
                item.click($a);
            }
            else if (options.itemClick) {
                options.itemClick(e, item, value);
            }
        });
    });
    var dropdownButtonContents = function (contents, options) {
        return contents + ' ' + icon(options.icons.caret, 'span');
    };
    var dropdownButton = function (opt, callback) {
        return buttonGroup([
            button({
                className: 'dropdown-toggle',
                contents: opt.title + ' ' + icon('note-icon-caret'),
                tooltip: opt.tooltip,
                data: {
                    toggle: 'dropdown'
                }
            }),
            dropdown({
                className: opt.className,
                items: opt.items,
                template: opt.template,
                itemClick: opt.itemClick
            })
        ], { callback: callback }).render();
    };
    var dropdownCheckButton = function (opt, callback) {
        return buttonGroup([
            button({
                className: 'dropdown-toggle',
                contents: opt.title + ' ' + icon('note-icon-caret'),
                tooltip: opt.tooltip,
                data: {
                    toggle: 'dropdown'
                }
            }),
            dropdownCheck({
                className: opt.className,
                checkClassName: opt.checkClassName,
                items: opt.items,
                template: opt.template,
                itemClick: opt.itemClick
            })
        ], { callback: callback }).render();
    };
    var paragraphDropdownButton = function (opt) {
        return buttonGroup([
            button({
                className: 'dropdown-toggle',
                contents: opt.title + ' ' + icon('note-icon-caret'),
                tooltip: opt.tooltip,
                data: {
                    toggle: 'dropdown'
                }
            }),
            dropdown([
                buttonGroup({
                    className: 'note-align',
                    children: opt.items[0]
                }),
                buttonGroup({
                    className: 'note-list',
                    children: opt.items[1]
                })
            ])
        ]).render();
    };
    var tableMoveHandler = function (event, col, row) {
        var PX_PER_EM = 18;
        var $picker = $(event.target.parentNode); // target is mousecatcher
        var $dimensionDisplay = $picker.next();
        var $catcher = $picker.find('.note-dimension-picker-mousecatcher');
        var $highlighted = $picker.find('.note-dimension-picker-highlighted');
        var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');
        var posOffset;
        // HTML5 with jQuery - e.offsetX is undefined in Firefox
        if (event.offsetX === undefined) {
            var posCatcher = $(event.target).offset();
            posOffset = {
                x: event.pageX - posCatcher.left,
                y: event.pageY - posCatcher.top
            };
        }
        else {
            posOffset = {
                x: event.offsetX,
                y: event.offsetY
            };
        }
        var dim = {
            c: Math.ceil(posOffset.x / PX_PER_EM) || 1,
            r: Math.ceil(posOffset.y / PX_PER_EM) || 1
        };
        $highlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });
        $catcher.data('value', dim.c + 'x' + dim.r);
        if (dim.c > 3 && dim.c < col) {
            $unhighlighted.css({ width: dim.c + 1 + 'em' });
        }
        if (dim.r > 3 && dim.r < row) {
            $unhighlighted.css({ height: dim.r + 1 + 'em' });
        }
        $dimensionDisplay.html(dim.c + ' x ' + dim.r);
    };
    var tableDropdownButton = function (opt) {
        return buttonGroup([
            button({
                className: 'dropdown-toggle',
                contents: opt.title + ' ' + icon('note-icon-caret'),
                tooltip: opt.tooltip,
                data: {
                    toggle: 'dropdown'
                }
            }),
            dropdown({
                className: 'note-table',
                items: [
                    '<div class="note-dimension-picker">',
                    '  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>',
                    '  <div class="note-dimension-picker-highlighted"/>',
                    '  <div class="note-dimension-picker-unhighlighted"/>',
                    '</div>',
                    '<div class="note-dimension-display">1 x 1</div>'
                ].join('')
            })
        ], {
            callback: function ($node) {
                var $catcher = $node.find('.note-dimension-picker-mousecatcher');
                $catcher.css({
                    width: opt.col + 'em',
                    height: opt.row + 'em'
                })
                    .mousedown(opt.itemClick)
                    .mousemove(function (e) {
                    tableMoveHandler(e, opt.col, opt.row);
                });
            }
        }).render();
    };
    var palette = renderer.create('<div class="note-color-palette"/>', function ($node, options) {
        var contents = [];
        for (var row = 0, rowSize = options.colors.length; row < rowSize; row++) {
            var eventName = options.eventName;
            var colors = options.colors[row];
            var colorsName = options.colorsName[row];
            var buttons = [];
            for (var col = 0, colSize = colors.length; col < colSize; col++) {
                var color = colors[col];
                var colorName = colorsName[col];
                buttons.push([
                    '<button type="button" class="note-btn note-color-btn"',
                    'style="background-color:', color, '" ',
                    'data-event="', eventName, '" ',
                    'data-value="', color, '" ',
                    'title="', colorName, '" ',
                    'aria-label="', colorName, '" ',
                    'data-toggle="button" tabindex="-1"></button>'
                ].join(''));
            }
            contents.push('<div class="note-color-row">' + buttons.join('') + '</div>');
        }
        $node.html(contents.join(''));
        $node.find('.note-color-btn').each(function () {
            $(this).data('_lite_tooltip', new TooltipUI($(this), {
                container: options.container
            }));
        });
    });
    var colorDropdownButton = function (opt, type) {
        return buttonGroup({
            className: 'note-color',
            children: [
                button({
                    className: 'note-current-color-button',
                    contents: opt.title,
                    tooltip: opt.lang.color.recent,
                    click: opt.currentClick,
                    callback: function ($button) {
                        var $recentColor = $button.find('.note-recent-color');
                        if (type !== 'foreColor') {
                            $recentColor.css('background-color', '#FFFF00');
                            $button.attr('data-backColor', '#FFFF00');
                        }
                    }
                }),
                button({
                    className: 'dropdown-toggle',
                    contents: icon('note-icon-caret'),
                    tooltip: opt.lang.color.more,
                    data: {
                        toggle: 'dropdown'
                    }
                }),
                dropdown({
                    items: [
                        '<div>',
                        '<div class="note-btn-group btn-background-color">',
                        '  <div class="note-palette-title">' + opt.lang.color.background + '</div>',
                        '  <div>',
                        '<button type="button" class="note-color-reset note-btn note-btn-block" ' +
                            ' data-event="backColor" data-value="inherit">',
                        opt.lang.color.transparent,
                        '    </button>',
                        '  </div>',
                        '  <div class="note-holder" data-event="backColor"/>',
                        '</div>',
                        '<div class="note-btn-group btn-foreground-color">',
                        '  <div class="note-palette-title">' + opt.lang.color.foreground + '</div>',
                        '  <div>',
                        '<button type="button" class="note-color-reset note-btn note-btn-block" ' +
                            ' data-event="removeFormat" data-value="foreColor">',
                        opt.lang.color.resetToDefault,
                        '    </button>',
                        '  </div>',
                        '  <div class="note-holder" data-event="foreColor"/>',
                        '</div>',
                        '</div>'
                    ].join(''),
                    callback: function ($dropdown) {
                        $dropdown.find('.note-holder').each(function () {
                            var $holder = $(this);
                            $holder.append(palette({
                                colors: opt.colors,
                                eventName: $holder.data('event')
                            }).render());
                        });
                        if (type === 'fore') {
                            $dropdown.find('.btn-background-color').hide();
                            $dropdown.css({ 'min-width': '210px' });
                        }
                        else if (type === 'back') {
                            $dropdown.find('.btn-foreground-color').hide();
                            $dropdown.css({ 'min-width': '210px' });
                        }
                    },
                    click: function (event) {
                        var $button = $(event.target);
                        var eventName = $button.data('event');
                        var value = $button.data('value');
                        if (eventName && value) {
                            var key = eventName === 'backColor' ? 'background-color' : 'color';
                            var $color = $button.closest('.note-color').find('.note-recent-color');
                            var $currentButton = $button.closest('.note-color').find('.note-current-color-button');
                            $color.css(key, value);
                            $currentButton.attr('data-' + eventName, value);
                            if (type === 'fore') {
                                opt.itemClick('foreColor', value);
                            }
                            else if (type === 'back') {
                                opt.itemClick('backColor', value);
                            }
                            else {
                                opt.itemClick(eventName, value);
                            }
                        }
                    }
                })
            ]
        }).render();
    };
    var dialog = renderer.create('<div class="note-modal" aria-hidden="false" tabindex="-1" role="dialog"/>', function ($node, options) {
        if (options.fade) {
            $node.addClass('fade');
        }
        $node.attr({
            'aria-label': options.title
        });
        $node.html([
            '  <div class="note-modal-content">',
            (options.title
                ? '    <div class="note-modal-header">' +
                    '      <button type="button" class="close" aria-label="Close" aria-hidden="true"><i class="note-icon-close"></i></button>' +
                    '      <h4 class="note-modal-title">' + options.title + '</h4>' +
                    '    </div>' : ''),
            '    <div class="note-modal-body">' + options.body + '</div>',
            (options.footer
                ? '    <div class="note-modal-footer">' + options.footer + '</div>' : ''),
            '  </div>'
        ].join(''));
        $node.data('modal', new ModalUI($node, options));
    });
    var videoDialog = function (opt) {
        var body = '<div class="note-form-group">' +
            '<label class="note-form-label">' +
            opt.lang.video.url + ' <small class="text-muted">' +
            opt.lang.video.providers + '</small>' +
            '</label>' +
            '<input class="note-video-url note-input" type="text" />' +
            '</div>';
        var footer = [
            '<button type="button" href="#" class="note-btn note-btn-primary note-video-btn disabled" disabled>',
            opt.lang.video.insert,
            '</button>'
        ].join('');
        return dialog({
            title: opt.lang.video.insert,
            fade: opt.fade,
            body: body,
            footer: footer
        }).render();
    };
    var imageDialog = function (opt) {
        var body = '<div class="note-form-group note-group-select-from-files">' +
            '<label class="note-form-label">' + opt.lang.image.selectFromFiles + '</label>' +
            '<input class="note-note-image-input note-input" type="file" name="files" accept="image/*" multiple="multiple" />' +
            opt.imageLimitation +
            '</div>' +
            '<div class="note-form-group" style="overflow:auto;">' +
            '<label class="note-form-label">' + opt.lang.image.url + '</label>' +
            '<input class="note-image-url note-input" type="text" />' +
            '</div>';
        var footer = [
            '<button href="#" type="button" class="note-btn note-btn-primary note-btn-large note-image-btn disabled" disabled>',
            opt.lang.image.insert,
            '</button>'
        ].join('');
        return dialog({
            title: opt.lang.image.insert,
            fade: opt.fade,
            body: body,
            footer: footer
        }).render();
    };
    var linkDialog = function (opt) {
        var body = '<div class="note-form-group">' +
            '<label class="note-form-label">' + opt.lang.link.textToDisplay + '</label>' +
            '<input class="note-link-text note-input" type="text" />' +
            '</div>' +
            '<div class="note-form-group">' +
            '<label class="note-form-label">' + opt.lang.link.url + '</label>' +
            '<input class="note-link-url note-input" type="text" value="http://" />' +
            '</div>' +
            (!opt.disableLinkTarget
                ? '<div class="checkbox">' +
                    '<label>' + '<input type="checkbox" checked> ' + opt.lang.link.openInNewWindow + '</label>' +
                    '</div>' : '');
        var footer = [
            '<button href="#" type="button" class="note-btn note-btn-primary note-link-btn disabled" disabled>',
            opt.lang.link.insert,
            '</button>'
        ].join('');
        return dialog({
            className: 'link-dialog',
            title: opt.lang.link.insert,
            fade: opt.fade,
            body: body,
            footer: footer
        }).render();
    };
    var popover = renderer.create([
        '<div class="note-popover bottom">',
        '  <div class="note-popover-arrow"/>',
        '  <div class="note-popover-content note-children-container"/>',
        '</div>'
    ].join(''), function ($node, options) {
        var direction = typeof options.direction !== 'undefined' ? options.direction : 'bottom';
        $node.addClass(direction).hide();
        if (options.hideArrow) {
            $node.find('.note-popover-arrow').hide();
        }
    });
    var checkbox = renderer.create('<div class="checkbox"></div>', function ($node, options) {
        $node.html([
            ' <label' + (options.id ? ' for="' + options.id + '"' : '') + '>',
            ' <input role="checkbox" type="checkbox"' + (options.id ? ' id="' + options.id + '"' : ''),
            (options.checked ? ' checked' : ''),
            ' aria-checked="' + (options.checked ? 'true' : 'false') + '"/>',
            (options.text ? options.text : ''),
            '</label>'
        ].join(''));
    });
    var icon = function (iconClassName, tagName) {
        tagName = tagName || 'i';
        return '<' + tagName + ' class="' + iconClassName + '"/>';
    };
    var ui = {
        editor: editor,
        toolbar: toolbar,
        editingArea: editingArea,
        codable: codable,
        editable: editable,
        statusbar: statusbar,
        airEditor: airEditor,
        airEditable: airEditable,
        buttonGroup: buttonGroup,
        button: button,
        dropdown: dropdown,
        dropdownCheck: dropdownCheck,
        dropdownButton: dropdownButton,
        dropdownButtonContents: dropdownButtonContents,
        dropdownCheckButton: dropdownCheckButton,
        paragraphDropdownButton: paragraphDropdownButton,
        tableDropdownButton: tableDropdownButton,
        colorDropdownButton: colorDropdownButton,
        palette: palette,
        dialog: dialog,
        videoDialog: videoDialog,
        imageDialog: imageDialog,
        linkDialog: linkDialog,
        popover: popover,
        checkbox: checkbox,
        icon: icon,
        toggleBtn: function ($btn, isEnable) {
            $btn.toggleClass('disabled', !isEnable);
            $btn.attr('disabled', !isEnable);
        },
        toggleBtnActive: function ($btn, isActive) {
            $btn.toggleClass('active', isActive);
        },
        check: function ($dom, value) {
            $dom.find('.checked').removeClass('checked');
            $dom.find('[data-value="' + value + '"]').addClass('checked');
        },
        onDialogShown: function ($dialog, handler) {
            $dialog.one('note.modal.show', handler);
        },
        onDialogHidden: function ($dialog, handler) {
            $dialog.one('note.modal.hide', handler);
        },
        showDialog: function ($dialog) {
            $dialog.data('modal').show();
        },
        hideDialog: function ($dialog) {
            $dialog.data('modal').hide();
        },
        /**
         * get popover content area
         *
         * @param $popover
         * @returns {*}
         */
        getPopoverContent: function ($popover) {
            return $popover.find('.note-popover-content');
        },
        /**
         * get dialog's body area
         *
         * @param $dialog
         * @returns {*}
         */
        getDialogBody: function ($dialog) {
            return $dialog.find('.note-modal-body');
        },
        createLayout: function ($note, options) {
            var $editor = (options.airMode ? ui.airEditor([
                ui.editingArea([
                    ui.airEditable()
                ])
            ]) : ui.editor([
                ui.toolbar(),
                ui.editingArea([
                    ui.codable(),
                    ui.editable()
                ]),
                ui.statusbar()
            ])).render();
            $editor.insertAfter($note);
            return {
                note: $note,
                editor: $editor,
                toolbar: $editor.find('.note-toolbar'),
                editingArea: $editor.find('.note-editing-area'),
                editable: $editor.find('.note-editable'),
                codable: $editor.find('.note-codable'),
                statusbar: $editor.find('.note-statusbar')
            };
        },
        removeLayout: function ($note, layoutInfo) {
            $note.html(layoutInfo.editable.html());
            layoutInfo.editor.remove();
            $note.off('summernote'); // remove summernote custom event
            $note.show();
        }
    };
    
    $$1.summernote = $$1.summernote || {
        lang: {}
    };
    $$1.extend($$1.summernote.lang, {
        'en-US': {
            font: {
                bold: 'Bold',
                italic: 'Italic',
                underline: 'Underline',
                clear: 'Remove Font Style',
                height: 'Line Height',
                name: 'Font Family',
                strikethrough: 'Strikethrough',
                subscript: 'Subscript',
                superscript: 'Superscript',
                size: 'Font Size'
            },
            image: {
                image: 'Picture',
                insert: 'Insert Image',
                resizeFull: 'Resize Full',
                resizeHalf: 'Resize Half',
                resizeQuarter: 'Resize Quarter',
                floatLeft: 'Float Left',
                floatRight: 'Float Right',
                floatNone: 'Float None',
                shapeRounded: 'Shape: Rounded',
                shapeCircle: 'Shape: Circle',
                shapeThumbnail: 'Shape: Thumbnail',
                shapeNone: 'Shape: None',
                dragImageHere: 'Drag image or text here',
                dropImage: 'Drop image or Text',
                selectFromFiles: 'Select from files',
                maximumFileSize: 'Maximum file size',
                maximumFileSizeError: 'Maximum file size exceeded.',
                url: 'Image URL',
                remove: 'Remove Image',
                original: 'Original'
            },
            video: {
                video: 'Video',
                videoLink: 'Video Link',
                insert: 'Insert Video',
                url: 'Video URL',
                providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)'
            },
            link: {
                link: 'Link',
                insert: 'Insert Link',
                unlink: 'Unlink',
                edit: 'Edit',
                textToDisplay: 'Text to display',
                url: 'To what URL should this link go?',
                openInNewWindow: 'Open in new window'
            },
            table: {
                table: 'Table',
                addRowAbove: 'Add row above',
                addRowBelow: 'Add row below',
                addColLeft: 'Add column left',
                addColRight: 'Add column right',
                delRow: 'Delete row',
                delCol: 'Delete column',
                delTable: 'Delete table'
            },
            hr: {
                insert: 'Insert Horizontal Rule'
            },
            style: {
                style: 'Style',
                p: 'Normal',
                blockquote: 'Quote',
                pre: 'Code',
                h1: 'Header 1',
                h2: 'Header 2',
                h3: 'Header 3',
                h4: 'Header 4',
                h5: 'Header 5',
                h6: 'Header 6'
            },
            lists: {
                unordered: 'Unordered list',
                ordered: 'Ordered list'
            },
            options: {
                help: 'Help',
                fullscreen: 'Full Screen',
                codeview: 'Code View'
            },
            paragraph: {
                paragraph: 'Paragraph',
                outdent: 'Outdent',
                indent: 'Indent',
                left: 'Align left',
                center: 'Align center',
                right: 'Align right',
                justify: 'Justify full'
            },
            color: {
                recent: 'Recent Color',
                more: 'More Color',
                background: 'Background Color',
                foreground: 'Foreground Color',
                transparent: 'Transparent',
                setTransparent: 'Set transparent',
                reset: 'Reset',
                resetToDefault: 'Reset to default'
            },
            shortcut: {
                shortcuts: 'Keyboard shortcuts',
                close: 'Close',
                textFormatting: 'Text formatting',
                action: 'Action',
                paragraphFormatting: 'Paragraph formatting',
                documentStyle: 'Document Style',
                extraKeys: 'Extra keys'
            },
            help: {
                'insertParagraph': 'Insert Paragraph',
                'undo': 'Undoes the last command',
                'redo': 'Redoes the last command',
                'tab': 'Tab',
                'untab': 'Untab',
                'bold': 'Set a bold style',
                'italic': 'Set a italic style',
                'underline': 'Set a underline style',
                'strikethrough': 'Set a strikethrough style',
                'removeFormat': 'Clean a style',
                'justifyLeft': 'Set left align',
                'justifyCenter': 'Set center align',
                'justifyRight': 'Set right align',
                'justifyFull': 'Set full align',
                'insertUnorderedList': 'Toggle unordered list',
                'insertOrderedList': 'Toggle ordered list',
                'outdent': 'Outdent on current paragraph',
                'indent': 'Indent on current paragraph',
                'formatPara': 'Change current block\'s format as a paragraph(P tag)',
                'formatH1': 'Change current block\'s format as H1',
                'formatH2': 'Change current block\'s format as H2',
                'formatH3': 'Change current block\'s format as H3',
                'formatH4': 'Change current block\'s format as H4',
                'formatH5': 'Change current block\'s format as H5',
                'formatH6': 'Change current block\'s format as H6',
                'insertHorizontalRule': 'Insert horizontal rule',
                'linkDialog.show': 'Show Link Dialog'
            },
            history: {
                undo: 'Undo',
                redo: 'Redo'
            },
            specialChar: {
                specialChar: 'SPECIAL CHARACTERS',
                select: 'Select Special characters'
            }
        }
    });
    
    var isSupportAmd = typeof define === 'function' && define.amd; // eslint-disable-line
    /**
     * returns whether font is installed or not.
     *
     * @param {String} fontName
     * @return {Boolean}
     */
    function isFontInstalled(fontName) {
        var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';
        var $tester = $$1('<div>').css({
            position: 'absolute',
            left: '-9999px',
            top: '-9999px',
            fontSize: '200px'
        }).text('mmmmmmmmmwwwwwww').appendTo(document.body);
        var originalWidth = $tester.css('fontFamily', testFontName).width();
        var width = $tester.css('fontFamily', fontName + ',' + testFontName).width();
        $tester.remove();
        return originalWidth !== width;
    }
    var userAgent = navigator.userAgent;
    var isMSIE = /MSIE|Trident/i.test(userAgent);
    var browserVersion;
    if (isMSIE) {
        var matches = /MSIE (\d+[.]\d+)/.exec(userAgent);
        if (matches) {
            browserVersion = parseFloat(matches[1]);
        }
        matches = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(userAgent);
        if (matches) {
            browserVersion = parseFloat(matches[1]);
        }
    }
    var isEdge = /Edge\/\d+/.test(userAgent);
    var hasCodeMirror = !!window.CodeMirror;
    if (!hasCodeMirror && isSupportAmd) {
        // Webpack
        if (typeof __webpack_require__ === 'function') {
            try {
                // If CodeMirror can't be resolved, `require.resolve` will throw an
                // exception and `hasCodeMirror` won't be set to `true`.
                require.resolve('codemirror');
                hasCodeMirror = true;
            }
            catch (e) {
                // do nothing
            }
        }
        else if (typeof require !== 'undefined') {
            // Browserify
            if (typeof require.resolve !== 'undefined') {
                try {
                    // If CodeMirror can't be resolved, `require.resolve` will throw an
                    // exception and `hasCodeMirror` won't be set to `true`.
                    require.resolve('codemirror');
                    hasCodeMirror = true;
                }
                catch (e) {
                    // do nothing
                }
                // Almond/Require
            }
            else if (typeof require.specified !== 'undefined') {
                hasCodeMirror = require.specified('codemirror');
            }
        }
    }
    var isSupportTouch = (('ontouchstart' in window) ||
        (navigator.MaxTouchPoints > 0) ||
        (navigator.msMaxTouchPoints > 0));
    // [workaround] IE doesn't have input events for contentEditable
    // - see: https://goo.gl/4bfIvA
    var inputEventName = (isMSIE || isEdge) ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';
    /**
     * @class core.env
     *
     * Object which check platform and agent
     *
     * @singleton
     * @alternateClassName env
     */
    var env = {
        isMac: navigator.appVersion.indexOf('Mac') > -1,
        isMSIE: isMSIE,
        isEdge: isEdge,
        isFF: !isEdge && /firefox/i.test(userAgent),
        isPhantom: /PhantomJS/i.test(userAgent),
        isWebkit: !isEdge && /webkit/i.test(userAgent),
        isChrome: !isEdge && /chrome/i.test(userAgent),
        isSafari: !isEdge && /safari/i.test(userAgent),
        browserVersion: browserVersion,
        jqueryVersion: parseFloat($$1.fn.jquery),
        isSupportAmd: isSupportAmd,
        isSupportTouch: isSupportTouch,
        hasCodeMirror: hasCodeMirror,
        isFontInstalled: isFontInstalled,
        isW3CRangeSupport: !!document.createRange,
        inputEventName: inputEventName
    };
    
    /**
     * @class core.func
     *
     * func utils (for high-order func's arg)
     *
     * @singleton
     * @alternateClassName func
     */
    function eq(itemA) {
        return function (itemB) {
            return itemA === itemB;
        };
    }
    function eq2(itemA, itemB) {
        return itemA === itemB;
    }
    function peq2(propName) {
        return function (itemA, itemB) {
            return itemA[propName] === itemB[propName];
        };
    }
    function ok() {
        return true;
    }
    function fail() {
        return false;
    }
    function not(f) {
        return function () {
            return !f.apply(f, arguments);
        };
    }
    function and(fA, fB) {
        return function (item) {
            return fA(item) && fB(item);
        };
    }
    function self(a) {
        return a;
    }
    function invoke(obj, method) {
        return function () {
            return obj[method].apply(obj, arguments);
        };
    }
    var idCounter = 0;
    /**
     * generate a globally-unique id
     *
     * @param {String} [prefix]
     */
    function uniqueId(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
    }
    /**
     * returns bnd (bounds) from rect
     *
     * - IE Compatibility Issue: http://goo.gl/sRLOAo
     * - Scroll Issue: http://goo.gl/sNjUc
     *
     * @param {Rect} rect
     * @return {Object} bounds
     * @return {Number} bounds.top
     * @return {Number} bounds.left
     * @return {Number} bounds.width
     * @return {Number} bounds.height
     */
    function rect2bnd(rect) {
        var $document = $(document);
        return {
            top: rect.top + $document.scrollTop(),
            left: rect.left + $document.scrollLeft(),
            width: rect.right - rect.left,
            height: rect.bottom - rect.top
        };
    }
    /**
     * returns a copy of the object where the keys have become the values and the values the keys.
     * @param {Object} obj
     * @return {Object}
     */
    function invertObject(obj) {
        var inverted = {};
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                inverted[obj[key]] = key;
            }
        }
        return inverted;
    }
    /**
     * @param {String} namespace
     * @param {String} [prefix]
     * @return {String}
     */
    function namespaceToCamel(namespace, prefix) {
        prefix = prefix || '';
        return prefix + namespace.split('.').map(function (name) {
            return name.substring(0, 1).toUpperCase() + name.substring(1);
        }).join('');
    }
    /**
     * Returns a function, that, as long as it continues to be invoked, will not
     * be triggered. The function will be called after it stops being called for
     * N milliseconds. If `immediate` is passed, trigger the function on the
     * leading edge, instead of the trailing.
     * @param {Function} func
     * @param {Number} wait
     * @param {Boolean} immediate
     * @return {Function}
     */
    function debounce(func, wait, immediate) {
        var _this = this;
        var timeout;
        return function () {
            var context = _this;
            var args = arguments;
            var later = function () {
                timeout = null;
                if (!immediate) {
                    func.apply(context, args);
                }
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) {
                func.apply(context, args);
            }
        };
    }
    var func = {
        eq: eq,
        eq2: eq2,
        peq2: peq2,
        ok: ok,
        fail: fail,
        self: self,
        not: not,
        and: and,
        invoke: invoke,
        uniqueId: uniqueId,
        rect2bnd: rect2bnd,
        invertObject: invertObject,
        namespaceToCamel: namespaceToCamel,
        debounce: debounce
    };
    
    /**
     * returns the first item of an array.
     *
     * @param {Array} array
     */
    function head(array) {
        return array[0];
    }
    /**
     * returns the last item of an array.
     *
     * @param {Array} array
     */
    function last(array) {
        return array[array.length - 1];
    }
    /**
     * returns everything but the last entry of the array.
     *
     * @param {Array} array
     */
    function initial(array) {
        return array.slice(0, array.length - 1);
    }
    /**
     * returns the rest of the items in an array.
     *
     * @param {Array} array
     */
    function tail(array) {
        return array.slice(1);
    }
    /**
     * returns item of array
     */
    function find(array, pred) {
        for (var idx = 0, len = array.length; idx < len; idx++) {
            var item = array[idx];
            if (pred(item)) {
                return item;
            }
        }
    }
    /**
     * returns true if all of the values in the array pass the predicate truth test.
     */
    function all(array, pred) {
        for (var idx = 0, len = array.length; idx < len; idx++) {
            if (!pred(array[idx])) {
                return false;
            }
        }
        return true;
    }
    /**
     * returns index of item
     */
    function indexOf(array, item) {
        return $$1.inArray(item, array);
    }
    /**
     * returns true if the value is present in the list.
     */
    function contains(array, item) {
        return indexOf(array, item) !== -1;
    }
    /**
     * get sum from a list
     *
     * @param {Array} array - array
     * @param {Function} fn - iterator
     */
    function sum(array, fn) {
        fn = fn || func.self;
        return array.reduce(function (memo, v) {
            return memo + fn(v);
        }, 0);
    }
    /**
     * returns a copy of the collection with array type.
     * @param {Collection} collection - collection eg) node.childNodes, ...
     */
    function from(collection) {
        var result = [];
        var length = collection.length;
        var idx = -1;
        while (++idx < length) {
            result[idx] = collection[idx];
        }
        return result;
    }
    /**
     * returns whether list is empty or not
     */
    function isEmpty(array) {
        return !array || !array.length;
    }
    /**
     * cluster elements by predicate function.
     *
     * @param {Array} array - array
     * @param {Function} fn - predicate function for cluster rule
     * @param {Array[]}
     */
    function clusterBy(array, fn) {
        if (!array.length) {
            return [];
        }
        var aTail = tail(array);
        return aTail.reduce(function (memo, v) {
            var aLast = last(memo);
            if (fn(last(aLast), v)) {
                aLast[aLast.length] = v;
            }
            else {
                memo[memo.length] = [v];
            }
            return memo;
        }, [[head(array)]]);
    }
    /**
     * returns a copy of the array with all false values removed
     *
     * @param {Array} array - array
     * @param {Function} fn - predicate function for cluster rule
     */
    function compact(array) {
        var aResult = [];
        for (var idx = 0, len = array.length; idx < len; idx++) {
            if (array[idx]) {
                aResult.push(array[idx]);
            }
        }
        return aResult;
    }
    /**
     * produces a duplicate-free version of the array
     *
     * @param {Array} array
     */
    function unique(array) {
        var results = [];
        for (var idx = 0, len = array.length; idx < len; idx++) {
            if (!contains(results, array[idx])) {
                results.push(array[idx]);
            }
        }
        return results;
    }
    /**
     * returns next item.
     * @param {Array} array
     */
    function next(array, item) {
        var idx = indexOf(array, item);
        if (idx === -1) {
            return null;
        }
        return array[idx + 1];
    }
    /**
     * returns prev item.
     * @param {Array} array
     */
    function prev(array, item) {
        var idx = indexOf(array, item);
        if (idx === -1) {
            return null;
        }
        return array[idx - 1];
    }
    /**
     * @class core.list
     *
     * list utils
     *
     * @singleton
     * @alternateClassName list
     */
    var lists = {
        head: head,
        last: last,
        initial: initial,
        tail: tail,
        prev: prev,
        next: next,
        find: find,
        contains: contains,
        all: all,
        sum: sum,
        from: from,
        isEmpty: isEmpty,
        clusterBy: clusterBy,
        compact: compact,
        unique: unique
    };
    
    var KEY_MAP = {
        'BACKSPACE': 8,
        'TAB': 9,
        'ENTER': 13,
        'SPACE': 32,
        'DELETE': 46,
        // Arrow
        'LEFT': 37,
        'UP': 38,
        'RIGHT': 39,
        'DOWN': 40,
        // Number: 0-9
        'NUM0': 48,
        'NUM1': 49,
        'NUM2': 50,
        'NUM3': 51,
        'NUM4': 52,
        'NUM5': 53,
        'NUM6': 54,
        'NUM7': 55,
        'NUM8': 56,
        // Alphabet: a-z
        'B': 66,
        'E': 69,
        'I': 73,
        'J': 74,
        'K': 75,
        'L': 76,
        'R': 82,
        'S': 83,
        'U': 85,
        'V': 86,
        'Y': 89,
        'Z': 90,
        'SLASH': 191,
        'LEFTBRACKET': 219,
        'BACKSLASH': 220,
        'RIGHTBRACKET': 221
    };
    /**
     * @class core.key
     *
     * Object for keycodes.
     *
     * @singleton
     * @alternateClassName key
     */
    var key = {
        /**
         * @method isEdit
         *
         * @param {Number} keyCode
         * @return {Boolean}
         */
        isEdit: function (keyCode) {
            return lists.contains([
                KEY_MAP.BACKSPACE,
                KEY_MAP.TAB,
                KEY_MAP.ENTER,
                KEY_MAP.SPACE,
                KEY_MAP.DELETE
            ], keyCode);
        },
        /**
         * @method isMove
         *
         * @param {Number} keyCode
         * @return {Boolean}
         */
        isMove: function (keyCode) {
            return lists.contains([
                KEY_MAP.LEFT,
                KEY_MAP.UP,
                KEY_MAP.RIGHT,
                KEY_MAP.DOWN
            ], keyCode);
        },
        /**
         * @property {Object} nameFromCode
         * @property {String} nameFromCode.8 "BACKSPACE"
         */
        nameFromCode: func.invertObject(KEY_MAP),
        code: KEY_MAP
    };
    
    var NBSP_CHAR = String.fromCharCode(160);
    var ZERO_WIDTH_NBSP_CHAR = '\ufeff';
    /**
     * @method isEditable
     *
     * returns whether node is `note-editable` or not.
     *
     * @param {Node} node
     * @return {Boolean}
     */
    function isEditable(node) {
        return node && $$1(node).hasClass('note-editable');
    }
    /**
     * @method isControlSizing
     *
     * returns whether node is `note-control-sizing` or not.
     *
     * @param {Node} node
     * @return {Boolean}
     */
    function isControlSizing(node) {
        return node && $$1(node).hasClass('note-control-sizing');
    }
    /**
     * @method makePredByNodeName
     *
     * returns predicate which judge whether nodeName is same
     *
     * @param {String} nodeName
     * @return {Function}
     */
    function makePredByNodeName(nodeName) {
        nodeName = nodeName.toUpperCase();
        return function (node) {
            return node && node.nodeName.toUpperCase() === nodeName;
        };
    }
    /**
     * @method isText
     *
     *
     *
     * @param {Node} node
     * @return {Boolean} true if node's type is text(3)
     */
    function isText(node) {
        return node && node.nodeType === 3;
    }
    /**
     * @method isElement
     *
     *
     *
     * @param {Node} node
     * @return {Boolean} true if node's type is element(1)
     */
    function isElement(node) {
        return node && node.nodeType === 1;
    }
    /**
     * ex) br, col, embed, hr, img, input, ...
     * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
     */
    function isVoid(node) {
        return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT/.test(node.nodeName.toUpperCase());
    }
    function isPara(node) {
        if (isEditable(node)) {
            return false;
        }
        // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph
        return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());
    }
    function isHeading(node) {
        return node && /^H[1-7]/.test(node.nodeName.toUpperCase());
    }
    var isPre = makePredByNodeName('PRE');
    var isLi = makePredByNodeName('LI');
    function isPurePara(node) {
        return isPara(node) && !isLi(node);
    }
    var isTable = makePredByNodeName('TABLE');
    var isData = makePredByNodeName('DATA');
    function isInline(node) {
        return !isBodyContainer(node) &&
            !isList(node) &&
            !isHr(node) &&
            !isPara(node) &&
            !isTable(node) &&
            !isBlockquote(node) &&
            !isData(node);
    }
    function isList(node) {
        return node && /^UL|^OL/.test(node.nodeName.toUpperCase());
    }
    var isHr = makePredByNodeName('HR');
    function isCell(node) {
        return node && /^TD|^TH/.test(node.nodeName.toUpperCase());
    }
    var isBlockquote = makePredByNodeName('BLOCKQUOTE');
    function isBodyContainer(node) {
        return isCell(node) || isBlockquote(node) || isEditable(node);
    }
    var isAnchor = makePredByNodeName('A');
    function isParaInline(node) {
        return isInline(node) && !!ancestor(node, isPara);
    }
    function isBodyInline(node) {
        return isInline(node) && !ancestor(node, isPara);
    }
    var isBody = makePredByNodeName('BODY');
    /**
     * returns whether nodeB is closest sibling of nodeA
     *
     * @param {Node} nodeA
     * @param {Node} nodeB
     * @return {Boolean}
     */
    function isClosestSibling(nodeA, nodeB) {
        return nodeA.nextSibling === nodeB ||
            nodeA.previousSibling === nodeB;
    }
    /**
     * returns array of closest siblings with node
     *
     * @param {Node} node
     * @param {function} [pred] - predicate function
     * @return {Node[]}
     */
    function withClosestSiblings(node, pred) {
        pred = pred || func.ok;
        var siblings = [];
        if (node.previousSibling && pred(node.previousSibling)) {
            siblings.push(node.previousSibling);
        }
        siblings.push(node);
        if (node.nextSibling && pred(node.nextSibling)) {
            siblings.push(node.nextSibling);
        }
        return siblings;
    }
    /**
     * blank HTML for cursor position
     * - [workaround] old IE only works with &nbsp;
     * - [workaround] IE11 and other browser works with bogus br
     */
    var blankHTML = env.isMSIE && env.browserVersion < 11 ? '&nbsp;' : '<br>';
    /**
     * @method nodeLength
     *
     * returns #text's text size or element's childNodes size
     *
     * @param {Node} node
     */
    function nodeLength(node) {
        if (isText(node)) {
            return node.nodeValue.length;
        }
        if (node) {
            return node.childNodes.length;
        }
        return 0;
    }
    /**
     * returns whether node is empty or not.
     *
     * @param {Node} node
     * @return {Boolean}
     */
    function isEmpty$1(node) {
        var len = nodeLength(node);
        if (len === 0) {
            return true;
        }
        else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {
            // ex) <p><br></p>, <span><br></span>
            return true;
        }
        else if (lists.all(node.childNodes, isText) && node.innerHTML === '') {
            // ex) <p></p>, <span></span>
            return true;
        }
        return false;
    }
    /**
     * padding blankHTML if node is empty (for cursor position)
     */
    function paddingBlankHTML(node) {
        if (!isVoid(node) && !nodeLength(node)) {
            node.innerHTML = blankHTML;
        }
    }
    /**
     * find nearest ancestor predicate hit
     *
     * @param {Node} node
     * @param {Function} pred - predicate function
     */
    function ancestor(node, pred) {
        while (node) {
            if (pred(node)) {
                return node;
            }
            if (isEditable(node)) {
                break;
            }
            node = node.parentNode;
        }
        return null;
    }
    /**
     * find nearest ancestor only single child blood line and predicate hit
     *
     * @param {Node} node
     * @param {Function} pred - predicate function
     */
    function singleChildAncestor(node, pred) {
        node = node.parentNode;
        while (node) {
            if (nodeLength(node) !== 1) {
                break;
            }
            if (pred(node)) {
                return node;
            }
            if (isEditable(node)) {
                break;
            }
            node = node.parentNode;
        }
        return null;
    }
    /**
     * returns new array of ancestor nodes (until predicate hit).
     *
     * @param {Node} node
     * @param {Function} [optional] pred - predicate function
     */
    function listAncestor(node, pred) {
        pred = pred || func.fail;
        var ancestors = [];
        ancestor(node, function (el) {
            if (!isEditable(el)) {
                ancestors.push(el);
            }
            return pred(el);
        });
        return ancestors;
    }
    /**
     * find farthest ancestor predicate hit
     */
    function lastAncestor(node, pred) {
        var ancestors = listAncestor(node);
        return lists.last(ancestors.filter(pred));
    }
    /**
     * returns common ancestor node between two nodes.
     *
     * @param {Node} nodeA
     * @param {Node} nodeB
     */
    function commonAncestor(nodeA, nodeB) {
        var ancestors = listAncestor(nodeA);
        for (var n = nodeB; n; n = n.parentNode) {
            if ($$1.inArray(n, ancestors) > -1) {
                return n;
            }
        }
        return null; // difference document area
    }
    /**
     * listing all previous siblings (until predicate hit).
     *
     * @param {Node} node
     * @param {Function} [optional] pred - predicate function
     */
    function listPrev(node, pred) {
        pred = pred || func.fail;
        var nodes = [];
        while (node) {
            if (pred(node)) {
                break;
            }
            nodes.push(node);
            node = node.previousSibling;
        }
        return nodes;
    }
    /**
     * listing next siblings (until predicate hit).
     *
     * @param {Node} node
     * @param {Function} [pred] - predicate function
     */
    function listNext(node, pred) {
        pred = pred || func.fail;
        var nodes = [];
        while (node) {
            if (pred(node)) {
                break;
            }
            nodes.push(node);
            node = node.nextSibling;
        }
        return nodes;
    }
    /**
     * listing descendant nodes
     *
     * @param {Node} node
     * @param {Function} [pred] - predicate function
     */
    function listDescendant(node, pred) {
        var descendants = [];
        pred = pred || func.ok;
        // start DFS(depth first search) with node
        (function fnWalk(current) {
            if (node !== current && pred(current)) {
                descendants.push(current);
            }
            for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {
                fnWalk(current.childNodes[idx]);
            }
        })(node);
        return descendants;
    }
    /**
     * wrap node with new tag.
     *
     * @param {Node} node
     * @param {Node} tagName of wrapper
     * @return {Node} - wrapper
     */
    function wrap(node, wrapperName) {
        var parent = node.parentNode;
        var wrapper = $$1('<' + wrapperName + '>')[0];
        parent.insertBefore(wrapper, node);
        wrapper.appendChild(node);
        return wrapper;
    }
    /**
     * insert node after preceding
     *
     * @param {Node} node
     * @param {Node} preceding - predicate function
     */
    function insertAfter(node, preceding) {
        var next = preceding.nextSibling;
        var parent = preceding.parentNode;
        if (next) {
            parent.insertBefore(node, next);
        }
        else {
            parent.appendChild(node);
        }
        return node;
    }
    /**
     * append elements.
     *
     * @param {Node} node
     * @param {Collection} aChild
     */
    function appendChildNodes(node, aChild) {
        $$1.each(aChild, function (idx, child) {
            node.appendChild(child);
        });
        return node;
    }
    /**
     * returns whether boundaryPoint is left edge or not.
     *
     * @param {BoundaryPoint} point
     * @return {Boolean}
     */
    function isLeftEdgePoint(point) {
        return point.offset === 0;
    }
    /**
     * returns whether boundaryPoint is right edge or not.
     *
     * @param {BoundaryPoint} point
     * @return {Boolean}
     */
    function isRightEdgePoint(point) {
        return point.offset === nodeLength(point.node);
    }
    /**
     * returns whether boundaryPoint is edge or not.
     *
     * @param {BoundaryPoint} point
     * @return {Boolean}
     */
    function isEdgePoint(point) {
        return isLeftEdgePoint(point) || isRightEdgePoint(point);
    }
    /**
     * returns whether node is left edge of ancestor or not.
     *
     * @param {Node} node
     * @param {Node} ancestor
     * @return {Boolean}
     */
    function isLeftEdgeOf(node, ancestor) {
        while (node && node !== ancestor) {
            if (position(node) !== 0) {
                return false;
            }
            node = node.parentNode;
        }
        return true;
    }
    /**
     * returns whether node is right edge of ancestor or not.
     *
     * @param {Node} node
     * @param {Node} ancestor
     * @return {Boolean}
     */
    function isRightEdgeOf(node, ancestor) {
        if (!ancestor) {
            return false;
        }
        while (node && node !== ancestor) {
            if (position(node) !== nodeLength(node.parentNode) - 1) {
                return false;
            }
            node = node.parentNode;
        }
        return true;
    }
    /**
     * returns whether point is left edge of ancestor or not.
     * @param {BoundaryPoint} point
     * @param {Node} ancestor
     * @return {Boolean}
     */
    function isLeftEdgePointOf(point, ancestor) {
        return isLeftEdgePoint(point) && isLeftEdgeOf(point.node, ancestor);
    }
    /**
     * returns whether point is right edge of ancestor or not.
     * @param {BoundaryPoint} point
     * @param {Node} ancestor
     * @return {Boolean}
     */
    function isRightEdgePointOf(point, ancestor) {
        return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);
    }
    /**
     * returns offset from parent.
     *
     * @param {Node} node
     */
    function position(node) {
        var offset = 0;
        while ((node = node.previousSibling)) {
            offset += 1;
        }
        return offset;
    }
    function hasChildren(node) {
        return !!(node && node.childNodes && node.childNodes.length);
    }
    /**
     * returns previous boundaryPoint
     *
     * @param {BoundaryPoint} point
     * @param {Boolean} isSkipInnerOffset
     * @return {BoundaryPoint}
     */
    function prevPoint(point, isSkipInnerOffset) {
        var node;
        var offset;
        if (point.offset === 0) {
            if (isEditable(point.node)) {
                return null;
            }
            node = point.node.parentNode;
            offset = position(point.node);
        }
        else if (hasChildren(point.node)) {
            node = point.node.childNodes[point.offset - 1];
            offset = nodeLength(node);
        }
        else {
            node = point.node;
            offset = isSkipInnerOffset ? 0 : point.offset - 1;
        }
        return {
            node: node,
            offset: offset
        };
    }
    /**
     * returns next boundaryPoint
     *
     * @param {BoundaryPoint} point
     * @param {Boolean} isSkipInnerOffset
     * @return {BoundaryPoint}
     */
    function nextPoint(point, isSkipInnerOffset) {
        var node, offset;
        if (nodeLength(point.node) === point.offset) {
            if (isEditable(point.node)) {
                return null;
            }
            node = point.node.parentNode;
            offset = position(point.node) + 1;
        }
        else if (hasChildren(point.node)) {
            node = point.node.childNodes[point.offset];
            offset = 0;
        }
        else {
            node = point.node;
            offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;
        }
        return {
            node: node,
            offset: offset
        };
    }
    /**
     * returns whether pointA and pointB is same or not.
     *
     * @param {BoundaryPoint} pointA
     * @param {BoundaryPoint} pointB
     * @return {Boolean}
     */
    function isSamePoint(pointA, pointB) {
        return pointA.node === pointB.node && pointA.offset === pointB.offset;
    }
    /**
     * returns whether point is visible (can set cursor) or not.
     *
     * @param {BoundaryPoint} point
     * @return {Boolean}
     */
    function isVisiblePoint(point) {
        if (isText(point.node) || !hasChildren(point.node) || isEmpty$1(point.node)) {
            return true;
        }
        var leftNode = point.node.childNodes[point.offset - 1];
        var rightNode = point.node.childNodes[point.offset];
        if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {
            return true;
        }
        return false;
    }
    /**
     * @method prevPointUtil
     *
     * @param {BoundaryPoint} point
     * @param {Function} pred
     * @return {BoundaryPoint}
     */
    function prevPointUntil(point, pred) {
        while (point) {
            if (pred(point)) {
                return point;
            }
            point = prevPoint(point);
        }
        return null;
    }
    /**
     * @method nextPointUntil
     *
     * @param {BoundaryPoint} point
     * @param {Function} pred
     * @return {BoundaryPoint}
     */
    function nextPointUntil(point, pred) {
        while (point) {
            if (pred(point)) {
                return point;
            }
            point = nextPoint(point);
        }
        return null;
    }
    /**
     * returns whether point has character or not.
     *
     * @param {Point} point
     * @return {Boolean}
     */
    function isCharPoint(point) {
        if (!isText(point.node)) {
            return false;
        }
        var ch = point.node.nodeValue.charAt(point.offset - 1);
        return ch && (ch !== ' ' && ch !== NBSP_CHAR);
    }
    /**
     * @method walkPoint
     *
     * @param {BoundaryPoint} startPoint
     * @param {BoundaryPoint} endPoint
     * @param {Function} handler
     * @param {Boolean} isSkipInnerOffset
     */
    function walkPoint(startPoint, endPoint, handler, isSkipInnerOffset) {
        var point = startPoint;
        while (point) {
            handler(point);
            if (isSamePoint(point, endPoint)) {
                break;
            }
            var isSkipOffset = isSkipInnerOffset &&
                startPoint.node !== point.node &&
                endPoint.node !== point.node;
            point = nextPoint(point, isSkipOffset);
        }
    }
    /**
     * @method makeOffsetPath
     *
     * return offsetPath(array of offset) from ancestor
     *
     * @param {Node} ancestor - ancestor node
     * @param {Node} node
     */
    function makeOffsetPath(ancestor, node) {
        var ancestors = listAncestor(node, func.eq(ancestor));
        return ancestors.map(position).reverse();
    }
    /**
     * @method fromOffsetPath
     *
     * return element from offsetPath(array of offset)
     *
     * @param {Node} ancestor - ancestor node
     * @param {array} offsets - offsetPath
     */
    function fromOffsetPath(ancestor, offsets) {
        var current = ancestor;
        for (var i = 0, len = offsets.length; i < len; i++) {
            if (current.childNodes.length <= offsets[i]) {
                current = current.childNodes[current.childNodes.length - 1];
            }
            else {
                current = current.childNodes[offsets[i]];
            }
        }
        return current;
    }
    /**
     * @method splitNode
     *
     * split element or #text
     *
     * @param {BoundaryPoint} point
     * @param {Object} [options]
     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false
     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false
     * @return {Node} right node of boundaryPoint
     */
    function splitNode(point, options) {
        var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;
        var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;
        // edge case
        if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {
            if (isLeftEdgePoint(point)) {
                return point.node;
            }
            else if (isRightEdgePoint(point)) {
                return point.node.nextSibling;
            }
        }
        // split #text
        if (isText(point.node)) {
            return point.node.splitText(point.offset);
        }
        else {
            var childNode = point.node.childNodes[point.offset];
            var clone = insertAfter(point.node.cloneNode(false), point.node);
            appendChildNodes(clone, listNext(childNode));
            if (!isSkipPaddingBlankHTML) {
                paddingBlankHTML(point.node);
                paddingBlankHTML(clone);
            }
            return clone;
        }
    }
    /**
     * @method splitTree
     *
     * split tree by point
     *
     * @param {Node} root - split root
     * @param {BoundaryPoint} point
     * @param {Object} [options]
     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false
     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false
     * @return {Node} right node of boundaryPoint
     */
    function splitTree(root, point, options) {
        // ex) [#text, <span>, <p>]
        var ancestors = listAncestor(point.node, func.eq(root));
        if (!ancestors.length) {
            return null;
        }
        else if (ancestors.length === 1) {
            return splitNode(point, options);
        }
        return ancestors.reduce(function (node, parent) {
            if (node === point.node) {
                node = splitNode(point, options);
            }
            return splitNode({
                node: parent,
                offset: node ? position(node) : nodeLength(parent)
            }, options);
        });
    }
    /**
     * split point
     *
     * @param {Point} point
     * @param {Boolean} isInline
     * @return {Object}
     */
    function splitPoint(point, isInline) {
        // find splitRoot, container
        //  - inline: splitRoot is a child of paragraph
        //  - block: splitRoot is a child of bodyContainer
        var pred = isInline ? isPara : isBodyContainer;
        var ancestors = listAncestor(point.node, pred);
        var topAncestor = lists.last(ancestors) || point.node;
        var splitRoot, container;
        if (pred(topAncestor)) {
            splitRoot = ancestors[ancestors.length - 2];
            container = topAncestor;
        }
        else {
            splitRoot = topAncestor;
            container = splitRoot.parentNode;
        }
        // if splitRoot is exists, split with splitTree
        var pivot = splitRoot && splitTree(splitRoot, point, {
            isSkipPaddingBlankHTML: isInline,
            isNotSplitEdgePoint: isInline
        });
        // if container is point.node, find pivot with point.offset
        if (!pivot && container === point.node) {
            pivot = point.node.childNodes[point.offset];
        }
        return {
            rightNode: pivot,
            container: container
        };
    }
    function create(nodeName) {
        return document.createElement(nodeName);
    }
    function createText(text) {
        return document.createTextNode(text);
    }
    /**
     * @method remove
     *
     * remove node, (isRemoveChild: remove child or not)
     *
     * @param {Node} node
     * @param {Boolean} isRemoveChild
     */
    function remove(node, isRemoveChild) {
        if (!node || !node.parentNode) {
            return;
        }
        if (node.removeNode) {
            return node.removeNode(isRemoveChild);
        }
        var parent = node.parentNode;
        if (!isRemoveChild) {
            var nodes = [];
            for (var i = 0, len = node.childNodes.length; i < len; i++) {
                nodes.push(node.childNodes[i]);
            }
            for (var i = 0, len = nodes.length; i < len; i++) {
                parent.insertBefore(nodes[i], node);
            }
        }
        parent.removeChild(node);
    }
    /**
     * @method removeWhile
     *
     * @param {Node} node
     * @param {Function} pred
     */
    function removeWhile(node, pred) {
        while (node) {
            if (isEditable(node) || !pred(node)) {
                break;
            }
            var parent = node.parentNode;
            remove(node);
            node = parent;
        }
    }
    /**
     * @method replace
     *
     * replace node with provided nodeName
     *
     * @param {Node} node
     * @param {String} nodeName
     * @return {Node} - new node
     */
    function replace(node, nodeName) {
        if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {
            return node;
        }
        var newNode = create(nodeName);
        if (node.style.cssText) {
            newNode.style.cssText = node.style.cssText;
        }
        appendChildNodes(newNode, lists.from(node.childNodes));
        insertAfter(newNode, node);
        remove(node);
        return newNode;
    }
    var isTextarea = makePredByNodeName('TEXTAREA');
    /**
     * @param {jQuery} $node
     * @param {Boolean} [stripLinebreaks] - default: false
     */
    function value($node, stripLinebreaks) {
        var val = isTextarea($node[0]) ? $node.val() : $node.html();
        if (stripLinebreaks) {
            return val.replace(/[\n\r]/g, '');
        }
        return val;
    }
    /**
     * @method html
     *
     * get the HTML contents of node
     *
     * @param {jQuery} $node
     * @param {Boolean} [isNewlineOnBlock]
     */
    function html($node, isNewlineOnBlock) {
        var markup = value($node);
        if (isNewlineOnBlock) {
            var regexTag = /<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g;
            markup = markup.replace(regexTag, function (match, endSlash, name) {
                name = name.toUpperCase();
                var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) &&
                    !!endSlash;
                var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);
                return match + ((isEndOfInlineContainer || isBlockNode) ? '\n' : '');
            });
            markup = $$1.trim(markup);
        }
        return markup;
    }
    function posFromPlaceholder(placeholder) {
        var $placeholder = $$1(placeholder);
        var pos = $placeholder.offset();
        var height = $placeholder.outerHeight(true); // include margin
        return {
            left: pos.left,
            top: pos.top + height
        };
    }
    function attachEvents($node, events) {
        Object.keys(events).forEach(function (key) {
            $node.on(key, events[key]);
        });
    }
    function detachEvents($node, events) {
        Object.keys(events).forEach(function (key) {
            $node.off(key, events[key]);
        });
    }
    /**
     * @method isCustomStyleTag
     *
     * assert if a node contains a "note-styletag" class,
     * which implies that's a custom-made style tag node
     *
     * @param {Node} an HTML DOM node
     */
    function isCustomStyleTag(node) {
        return node && !isText(node) && lists.contains(node.classList, 'note-styletag');
    }
    var dom = {
        /** @property {String} NBSP_CHAR */
        NBSP_CHAR: NBSP_CHAR,
        /** @property {String} ZERO_WIDTH_NBSP_CHAR */
        ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,
        /** @property {String} blank */
        blank: blankHTML,
        /** @property {String} emptyPara */
        emptyPara: "<p>" + blankHTML + "</p>",
        makePredByNodeName: makePredByNodeName,
        isEditable: isEditable,
        isControlSizing: isControlSizing,
        isText: isText,
        isElement: isElement,
        isVoid: isVoid,
        isPara: isPara,
        isPurePara: isPurePara,
        isHeading: isHeading,
        isInline: isInline,
        isBlock: func.not(isInline),
        isBodyInline: isBodyInline,
        isBody: isBody,
        isParaInline: isParaInline,
        isPre: isPre,
        isList: isList,
        isTable: isTable,
        isData: isData,
        isCell: isCell,
        isBlockquote: isBlockquote,
        isBodyContainer: isBodyContainer,
        isAnchor: isAnchor,
        isDiv: makePredByNodeName('DIV'),
        isLi: isLi,
        isBR: makePredByNodeName('BR'),
        isSpan: makePredByNodeName('SPAN'),
        isB: makePredByNodeName('B'),
        isU: makePredByNodeName('U'),
        isS: makePredByNodeName('S'),
        isI: makePredByNodeName('I'),
        isImg: makePredByNodeName('IMG'),
        isTextarea: isTextarea,
        isEmpty: isEmpty$1,
        isEmptyAnchor: func.and(isAnchor, isEmpty$1),
        isClosestSibling: isClosestSibling,
        withClosestSiblings: withClosestSiblings,
        nodeLength: nodeLength,
        isLeftEdgePoint: isLeftEdgePoint,
        isRightEdgePoint: isRightEdgePoint,
        isEdgePoint: isEdgePoint,
        isLeftEdgeOf: isLeftEdgeOf,
        isRightEdgeOf: isRightEdgeOf,
        isLeftEdgePointOf: isLeftEdgePointOf,
        isRightEdgePointOf: isRightEdgePointOf,
        prevPoint: prevPoint,
        nextPoint: nextPoint,
        isSamePoint: isSamePoint,
        isVisiblePoint: isVisiblePoint,
        prevPointUntil: prevPointUntil,
        nextPointUntil: nextPointUntil,
        isCharPoint: isCharPoint,
        walkPoint: walkPoint,
        ancestor: ancestor,
        singleChildAncestor: singleChildAncestor,
        listAncestor: listAncestor,
        lastAncestor: lastAncestor,
        listNext: listNext,
        listPrev: listPrev,
        listDescendant: listDescendant,
        commonAncestor: commonAncestor,
        wrap: wrap,
        insertAfter: insertAfter,
        appendChildNodes: appendChildNodes,
        position: position,
        hasChildren: hasChildren,
        makeOffsetPath: makeOffsetPath,
        fromOffsetPath: fromOffsetPath,
        splitTree: splitTree,
        splitPoint: splitPoint,
        create: create,
        createText: createText,
        remove: remove,
        removeWhile: removeWhile,
        replace: replace,
        html: html,
        value: value,
        posFromPlaceholder: posFromPlaceholder,
        attachEvents: attachEvents,
        detachEvents: detachEvents,
        isCustomStyleTag: isCustomStyleTag
    };
    
    /**
     * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js
     *
     * @param {TextRange} textRange
     * @param {Boolean} isStart
     * @return {BoundaryPoint}
     *
     * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx
     */
    function textRangeToPoint(textRange, isStart) {
        var container = textRange.parentElement();
        var offset;
        var tester = document.body.createTextRange();
        var prevContainer;
        var childNodes = lists.from(container.childNodes);
        for (offset = 0; offset < childNodes.length; offset++) {
            if (dom.isText(childNodes[offset])) {
                continue;
            }
            tester.moveToElementText(childNodes[offset]);
            if (tester.compareEndPoints('StartToStart', textRange) >= 0) {
                break;
            }
            prevContainer = childNodes[offset];
        }
        if (offset !== 0 && dom.isText(childNodes[offset - 1])) {
            var textRangeStart = document.body.createTextRange();
            var curTextNode = null;
            textRangeStart.moveToElementText(prevContainer || container);
            textRangeStart.collapse(!prevContainer);
            curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;
            var pointTester = textRange.duplicate();
            pointTester.setEndPoint('StartToStart', textRangeStart);
            var textCount = pointTester.text.replace(/[\r\n]/g, '').length;
            while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {
                textCount -= curTextNode.nodeValue.length;
                curTextNode = curTextNode.nextSibling;
            }
            // [workaround] enforce IE to re-reference curTextNode, hack
            var dummy = curTextNode.nodeValue; // eslint-disable-line
            if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) &&
                textCount === curTextNode.nodeValue.length) {
                textCount -= curTextNode.nodeValue.length;
                curTextNode = curTextNode.nextSibling;
            }
            container = curTextNode;
            offset = textCount;
        }
        return {
            cont: container,
            offset: offset
        };
    }
    /**
     * return TextRange from boundary point (inspired by google closure-library)
     * @param {BoundaryPoint} point
     * @return {TextRange}
     */
    function pointToTextRange(point) {
        var textRangeInfo = function (container, offset) {
            var node, isCollapseToStart;
            if (dom.isText(container)) {
                var prevTextNodes = dom.listPrev(container, func.not(dom.isText));
                var prevContainer = lists.last(prevTextNodes).previousSibling;
                node = prevContainer || container.parentNode;
                offset += lists.sum(lists.tail(prevTextNodes), dom.nodeLength);
                isCollapseToStart = !prevContainer;
            }
            else {
                node = container.childNodes[offset] || container;
                if (dom.isText(node)) {
                    return textRangeInfo(node, 0);
                }
                offset = 0;
                isCollapseToStart = false;
            }
            return {
                node: node,
                collapseToStart: isCollapseToStart,
                offset: offset
            };
        };
        var textRange = document.body.createTextRange();
        var info = textRangeInfo(point.node, point.offset);
        textRange.moveToElementText(info.node);
        textRange.collapse(info.collapseToStart);
        textRange.moveStart('character', info.offset);
        return textRange;
    }
    /**
       * Wrapped Range
       *
       * @constructor
       * @param {Node} sc - start container
       * @param {Number} so - start offset
       * @param {Node} ec - end container
       * @param {Number} eo - end offset
       */
    var WrappedRange = /** @class */ (function () {
        function WrappedRange(sc, so, ec, eo) {
            this.sc = sc;
            this.so = so;
            this.ec = ec;
            this.eo = eo;
            // isOnEditable: judge whether range is on editable or not
            this.isOnEditable = this.makeIsOn(dom.isEditable);
            // isOnList: judge whether range is on list node or not
            this.isOnList = this.makeIsOn(dom.isList);
            // isOnAnchor: judge whether range is on anchor node or not
            this.isOnAnchor = this.makeIsOn(dom.isAnchor);
            // isOnCell: judge whether range is on cell node or not
            this.isOnCell = this.makeIsOn(dom.isCell);
            // isOnData: judge whether range is on data node or not
            this.isOnData = this.makeIsOn(dom.isData);
        }
        // nativeRange: get nativeRange from sc, so, ec, eo
        WrappedRange.prototype.nativeRange = function () {
            if (env.isW3CRangeSupport) {
                var w3cRange = document.createRange();
                w3cRange.setStart(this.sc, this.so);
                w3cRange.setEnd(this.ec, this.eo);
                return w3cRange;
            }
            else {
                var textRange = pointToTextRange({
                    node: this.sc,
                    offset: this.so
                });
                textRange.setEndPoint('EndToEnd', pointToTextRange({
                    node: this.ec,
                    offset: this.eo
                }));
                return textRange;
            }
        };
        WrappedRange.prototype.getPoints = function () {
            return {
                sc: this.sc,
                so: this.so,
                ec: this.ec,
                eo: this.eo
            };
        };
        WrappedRange.prototype.getStartPoint = function () {
            return {
                node: this.sc,
                offset: this.so
            };
        };
        WrappedRange.prototype.getEndPoint = function () {
            return {
                node: this.ec,
                offset: this.eo
            };
        };
        /**
         * select update visible range
         */
        WrappedRange.prototype.select = function () {
            var nativeRng = this.nativeRange();
            if (env.isW3CRangeSupport) {
                var selection = document.getSelection();
                if (selection.rangeCount > 0) {
                    selection.removeAllRanges();
                }
                selection.addRange(nativeRng);
            }
            else {
                nativeRng.select();
            }
            return this;
        };
        /**
         * Moves the scrollbar to start container(sc) of current range
         *
         * @return {WrappedRange}
         */
        WrappedRange.prototype.scrollIntoView = function (container) {
            var height = $$1(container).height();
            if (container.scrollTop + height < this.sc.offsetTop) {
                container.scrollTop += Math.abs(container.scrollTop + height - this.sc.offsetTop);
            }
            return this;
        };
        /**
         * @return {WrappedRange}
         */
        WrappedRange.prototype.normalize = function () {
            /**
             * @param {BoundaryPoint} point
             * @param {Boolean} isLeftToRight
             * @return {BoundaryPoint}
             */
            var getVisiblePoint = function (point, isLeftToRight) {
                if ((dom.isVisiblePoint(point) && !dom.isEdgePoint(point)) ||
                    (dom.isVisiblePoint(point) && dom.isRightEdgePoint(point) && !isLeftToRight) ||
                    (dom.isVisiblePoint(point) && dom.isLeftEdgePoint(point) && isLeftToRight) ||
                    (dom.isVisiblePoint(point) && dom.isBlock(point.node) && dom.isEmpty(point.node))) {
                    return point;
                }
                // point on block's edge
                var block = dom.ancestor(point.node, dom.isBlock);
                if (((dom.isLeftEdgePointOf(point, block) || dom.isVoid(dom.prevPoint(point).node)) && !isLeftToRight) ||
                    ((dom.isRightEdgePointOf(point, block) || dom.isVoid(dom.nextPoint(point).node)) && isLeftToRight)) {
                    // returns point already on visible point
                    if (dom.isVisiblePoint(point)) {
                        return point;
                    }
                    // reverse direction
                    isLeftToRight = !isLeftToRight;
                }
                var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint)
                    : dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);
                return nextPoint || point;
            };
            var endPoint = getVisiblePoint(this.getEndPoint(), false);
            var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);
            return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);
        };
        /**
         * returns matched nodes on range
         *
         * @param {Function} [pred] - predicate function
         * @param {Object} [options]
         * @param {Boolean} [options.includeAncestor]
         * @param {Boolean} [options.fullyContains]
         * @return {Node[]}
         */
        WrappedRange.prototype.nodes = function (pred, options) {
            pred = pred || func.ok;
            var includeAncestor = options && options.includeAncestor;
            var fullyContains = options && options.fullyContains;
            // TODO compare points and sort
            var startPoint = this.getStartPoint();
            var endPoint = this.getEndPoint();
            var nodes = [];
            var leftEdgeNodes = [];
            dom.walkPoint(startPoint, endPoint, function (point) {
                if (dom.isEditable(point.node)) {
                    return;
                }
                var node;
                if (fullyContains) {
                    if (dom.isLeftEdgePoint(point)) {
                        leftEdgeNodes.push(point.node);
                    }
                    if (dom.isRightEdgePoint(point) && lists.contains(leftEdgeNodes, point.node)) {
                        node = point.node;
                    }
                }
                else if (includeAncestor) {
                    node = dom.ancestor(point.node, pred);
                }
                else {
                    node = point.node;
                }
                if (node && pred(node)) {
                    nodes.push(node);
                }
            }, true);
            return lists.unique(nodes);
        };
        /**
         * returns commonAncestor of range
         * @return {Element} - commonAncestor
         */
        WrappedRange.prototype.commonAncestor = function () {
            return dom.commonAncestor(this.sc, this.ec);
        };
        /**
         * returns expanded range by pred
         *
         * @param {Function} pred - predicate function
         * @return {WrappedRange}
         */
        WrappedRange.prototype.expand = function (pred) {
            var startAncestor = dom.ancestor(this.sc, pred);
            var endAncestor = dom.ancestor(this.ec, pred);
            if (!startAncestor && !endAncestor) {
                return new WrappedRange(this.sc, this.so, this.ec, this.eo);
            }
            var boundaryPoints = this.getPoints();
            if (startAncestor) {
                boundaryPoints.sc = startAncestor;
                boundaryPoints.so = 0;
            }
            if (endAncestor) {
                boundaryPoints.ec = endAncestor;
                boundaryPoints.eo = dom.nodeLength(endAncestor);
            }
            return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);
        };
        /**
         * @param {Boolean} isCollapseToStart
         * @return {WrappedRange}
         */
        WrappedRange.prototype.collapse = function (isCollapseToStart) {
            if (isCollapseToStart) {
                return new WrappedRange(this.sc, this.so, this.sc, this.so);
            }
            else {
                return new WrappedRange(this.ec, this.eo, this.ec, this.eo);
            }
        };
        /**
         * splitText on range
         */
        WrappedRange.prototype.splitText = function () {
            var isSameContainer = this.sc === this.ec;
            var boundaryPoints = this.getPoints();
            if (dom.isText(this.ec) && !dom.isEdgePoint(this.getEndPoint())) {
                this.ec.splitText(this.eo);
            }
            if (dom.isText(this.sc) && !dom.isEdgePoint(this.getStartPoint())) {
                boundaryPoints.sc = this.sc.splitText(this.so);
                boundaryPoints.so = 0;
                if (isSameContainer) {
                    boundaryPoints.ec = boundaryPoints.sc;
                    boundaryPoints.eo = this.eo - this.so;
                }
            }
            return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);
        };
        /**
         * delete contents on range
         * @return {WrappedRange}
         */
        WrappedRange.prototype.deleteContents = function () {
            if (this.isCollapsed()) {
                return this;
            }
            var rng = this.splitText();
            var nodes = rng.nodes(null, {
                fullyContains: true
            });
            // find new cursor point
            var point = dom.prevPointUntil(rng.getStartPoint(), function (point) {
                return !lists.contains(nodes, point.node);
            });
            var emptyParents = [];
            $$1.each(nodes, function (idx, node) {
                // find empty parents
                var parent = node.parentNode;
                if (point.node !== parent && dom.nodeLength(parent) === 1) {
                    emptyParents.push(parent);
                }
                dom.remove(node, false);
            });
            // remove empty parents
            $$1.each(emptyParents, function (idx, node) {
                dom.remove(node, false);
            });
            return new WrappedRange(point.node, point.offset, point.node, point.offset).normalize();
        };
        /**
         * makeIsOn: return isOn(pred) function
         */
        WrappedRange.prototype.makeIsOn = function (pred) {
            return function () {
                var ancestor = dom.ancestor(this.sc, pred);
                return !!ancestor && (ancestor === dom.ancestor(this.ec, pred));
            };
        };
        /**
         * @param {Function} pred
         * @return {Boolean}
         */
        WrappedRange.prototype.isLeftEdgeOf = function (pred) {
            if (!dom.isLeftEdgePoint(this.getStartPoint())) {
                return false;
            }
            var node = dom.ancestor(this.sc, pred);
            return node && dom.isLeftEdgeOf(this.sc, node);
        };
        /**
         * returns whether range was collapsed or not
         */
        WrappedRange.prototype.isCollapsed = function () {
            return this.sc === this.ec && this.so === this.eo;
        };
        /**
         * wrap inline nodes which children of body with paragraph
         *
         * @return {WrappedRange}
         */
        WrappedRange.prototype.wrapBodyInlineWithPara = function () {
            if (dom.isBodyContainer(this.sc) && dom.isEmpty(this.sc)) {
                this.sc.innerHTML = dom.emptyPara;
                return new WrappedRange(this.sc.firstChild, 0, this.sc.firstChild, 0);
            }
            /**
             * [workaround] firefox often create range on not visible point. so normalize here.
             *  - firefox: |<p>text</p>|
             *  - chrome: <p>|text|</p>
             */
            var rng = this.normalize();
            if (dom.isParaInline(this.sc) || dom.isPara(this.sc)) {
                return rng;
            }
            // find inline top ancestor
            var topAncestor;
            if (dom.isInline(rng.sc)) {
                var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));
                topAncestor = lists.last(ancestors);
                if (!dom.isInline(topAncestor)) {
                    topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];
                }
            }
            else {
                topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];
            }
            // siblings not in paragraph
            var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();
            inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline));
            // wrap with paragraph
            if (inlineSiblings.length) {
                var para = dom.wrap(lists.head(inlineSiblings), 'p');
                dom.appendChildNodes(para, lists.tail(inlineSiblings));
            }
            return this.normalize();
        };
        /**
         * insert node at current cursor
         *
         * @param {Node} node
         * @return {Node}
         */
        WrappedRange.prototype.insertNode = function (node) {
            var rng = this.wrapBodyInlineWithPara().deleteContents();
            var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));
            if (info.rightNode) {
                info.rightNode.parentNode.insertBefore(node, info.rightNode);
            }
            else {
                info.container.appendChild(node);
            }
            return node;
        };
        /**
         * insert html at current cursor
         */
        WrappedRange.prototype.pasteHTML = function (markup) {
            var contentsContainer = $$1('<div></div>').html(markup)[0];
            var childNodes = lists.from(contentsContainer.childNodes);
            var rng = this.wrapBodyInlineWithPara().deleteContents();
            return childNodes.reverse().map(function (childNode) {
                return rng.insertNode(childNode);
            }).reverse();
        };
        /**
         * returns text in range
         *
         * @return {String}
         */
        WrappedRange.prototype.toString = function () {
            var nativeRng = this.nativeRange();
            return env.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;
        };
        /**
         * returns range for word before cursor
         *
         * @param {Boolean} [findAfter] - find after cursor, default: false
         * @return {WrappedRange}
         */
        WrappedRange.prototype.getWordRange = function (findAfter) {
            var endPoint = this.getEndPoint();
            if (!dom.isCharPoint(endPoint)) {
                return this;
            }
            var startPoint = dom.prevPointUntil(endPoint, function (point) {
                return !dom.isCharPoint(point);
            });
            if (findAfter) {
                endPoint = dom.nextPointUntil(endPoint, function (point) {
                    return !dom.isCharPoint(point);
                });
            }
            return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);
        };
        /**
         * create offsetPath bookmark
         *
         * @param {Node} editable
         */
        WrappedRange.prototype.bookmark = function (editable) {
            return {
                s: {
                    path: dom.makeOffsetPath(editable, this.sc),
                    offset: this.so
                },
                e: {
                    path: dom.makeOffsetPath(editable, this.ec),
                    offset: this.eo
                }
            };
        };
        /**
         * create offsetPath bookmark base on paragraph
         *
         * @param {Node[]} paras
         */
        WrappedRange.prototype.paraBookmark = function (paras) {
            return {
                s: {
                    path: lists.tail(dom.makeOffsetPath(lists.head(paras), this.sc)),
                    offset: this.so
                },
                e: {
                    path: lists.tail(dom.makeOffsetPath(lists.last(paras), this.ec)),
                    offset: this.eo
                }
            };
        };
        /**
         * getClientRects
         * @return {Rect[]}
         */
        WrappedRange.prototype.getClientRects = function () {
            var nativeRng = this.nativeRange();
            return nativeRng.getClientRects();
        };
        return WrappedRange;
    }());
    /**
     * Data structure
     *  * BoundaryPoint: a point of dom tree
     *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range
     *
     * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position
     */
    var range = {
        /**
         * create Range Object From arguments or Browser Selection
         *
         * @param {Node} sc - start container
         * @param {Number} so - start offset
         * @param {Node} ec - end container
         * @param {Number} eo - end offset
         * @return {WrappedRange}
         */
        create: function (sc, so, ec, eo) {
            if (arguments.length === 4) {
                return new WrappedRange(sc, so, ec, eo);
            }
            else if (arguments.length === 2) {
                ec = sc;
                eo = so;
                return new WrappedRange(sc, so, ec, eo);
            }
            else {
                var wrappedRange = this.createFromSelection();
                if (!wrappedRange && arguments.length === 1) {
                    wrappedRange = this.createFromNode(arguments[0]);
                    return wrappedRange.collapse(dom.emptyPara === arguments[0].innerHTML);
                }
                return wrappedRange;
            }
        },
        createFromSelection: function () {
            var sc, so, ec, eo;
            if (env.isW3CRangeSupport) {
                var selection = document.getSelection();
                if (!selection || selection.rangeCount === 0) {
                    return null;
                }
                else if (dom.isBody(selection.anchorNode)) {
                    // Firefox: returns entire body as range on initialization.
                    // We won't never need it.
                    return null;
                }
                var nativeRng = selection.getRangeAt(0);
                sc = nativeRng.startContainer;
                so = nativeRng.startOffset;
                ec = nativeRng.endContainer;
                eo = nativeRng.endOffset;
            }
            else {
                var textRange = document.selection.createRange();
                var textRangeEnd = textRange.duplicate();
                textRangeEnd.collapse(false);
                var textRangeStart = textRange;
                textRangeStart.collapse(true);
                var startPoint = textRangeToPoint(textRangeStart, true);
                var endPoint = textRangeToPoint(textRangeEnd, false);
                // same visible point case: range was collapsed.
                if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) &&
                    dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) &&
                    endPoint.node.nextSibling === startPoint.node) {
                    startPoint = endPoint;
                }
                sc = startPoint.cont;
                so = startPoint.offset;
                ec = endPoint.cont;
                eo = endPoint.offset;
            }
            return new WrappedRange(sc, so, ec, eo);
        },
        /**
         * @method
         *
         * create WrappedRange from node
         *
         * @param {Node} node
         * @return {WrappedRange}
         */
        createFromNode: function (node) {
            var sc = node;
            var so = 0;
            var ec = node;
            var eo = dom.nodeLength(ec);
            // browsers can't target a picture or void node
            if (dom.isVoid(sc)) {
                so = dom.listPrev(sc).length - 1;
                sc = sc.parentNode;
            }
            if (dom.isBR(ec)) {
                eo = dom.listPrev(ec).length - 1;
                ec = ec.parentNode;
            }
            else if (dom.isVoid(ec)) {
                eo = dom.listPrev(ec).length;
                ec = ec.parentNode;
            }
            return this.create(sc, so, ec, eo);
        },
        /**
         * create WrappedRange from node after position
         *
         * @param {Node} node
         * @return {WrappedRange}
         */
        createFromNodeBefore: function (node) {
            return this.createFromNode(node).collapse(true);
        },
        /**
         * create WrappedRange from node after position
         *
         * @param {Node} node
         * @return {WrappedRange}
         */
        createFromNodeAfter: function (node) {
            return this.createFromNode(node).collapse();
        },
        /**
         * @method
         *
         * create WrappedRange from bookmark
         *
         * @param {Node} editable
         * @param {Object} bookmark
         * @return {WrappedRange}
         */
        createFromBookmark: function (editable, bookmark) {
            var sc = dom.fromOffsetPath(editable, bookmark.s.path);
            var so = bookmark.s.offset;
            var ec = dom.fromOffsetPath(editable, bookmark.e.path);
            var eo = bookmark.e.offset;
            return new WrappedRange(sc, so, ec, eo);
        },
        /**
         * @method
         *
         * create WrappedRange from paraBookmark
         *
         * @param {Object} bookmark
         * @param {Node[]} paras
         * @return {WrappedRange}
         */
        createFromParaBookmark: function (bookmark, paras) {
            var so = bookmark.s.offset;
            var eo = bookmark.e.offset;
            var sc = dom.fromOffsetPath(lists.head(paras), bookmark.s.path);
            var ec = dom.fromOffsetPath(lists.last(paras), bookmark.e.path);
            return new WrappedRange(sc, so, ec, eo);
        }
    };
    
    /**
     * @method readFileAsDataURL
     *
     * read contents of file as representing URL
     *
     * @param {File} file
     * @return {Promise} - then: dataUrl
     */
    function readFileAsDataURL(file) {
        return $$1.Deferred(function (deferred) {
            $$1.extend(new FileReader(), {
                onload: function (e) {
                    var dataURL = e.target.result;
                    deferred.resolve(dataURL);
                },
                onerror: function (err) {
                    deferred.reject(err);
                }
            }).readAsDataURL(file);
        }).promise();
    }
    /**
     * @method createImage
     *
     * create `<image>` from url string
     *
     * @param {String} url
     * @return {Promise} - then: $image
     */
    function createImage(url) {
        return $$1.Deferred(function (deferred) {
            var $img = $$1('<img>');
            $img.one('load', function () {
                $img.off('error abort');
                deferred.resolve($img);
            }).one('error abort', function () {
                $img.off('load').detach();
                deferred.reject($img);
            }).css({
                display: 'none'
            }).appendTo(document.body).attr('src', url);
        }).promise();
    }
    
    var History = /** @class */ (function () {
        function History($editable) {
            this.stack = [];
            this.stackOffset = -1;
            this.$editable = $editable;
            this.editable = $editable[0];
        }
        History.prototype.makeSnapshot = function () {
            var rng = range.create(this.editable);
            var emptyBookmark = { s: { path: [], offset: 0 }, e: { path: [], offset: 0 } };
            return {
                contents: this.$editable.html(),
                bookmark: (rng ? rng.bookmark(this.editable) : emptyBookmark)
            };
        };
        History.prototype.applySnapshot = function (snapshot) {
            if (snapshot.contents !== null) {
                this.$editable.html(snapshot.contents);
            }
            if (snapshot.bookmark !== null) {
                range.createFromBookmark(this.editable, snapshot.bookmark).select();
            }
        };
        /**
        * @method rewind
        * Rewinds the history stack back to the first snapshot taken.
        * Leaves the stack intact, so that "Redo" can still be used.
        */
        History.prototype.rewind = function () {
            // Create snap shot if not yet recorded
            if (this.$editable.html() !== this.stack[this.stackOffset].contents) {
                this.recordUndo();
            }
            // Return to the first available snapshot.
            this.stackOffset = 0;
            // Apply that snapshot.
            this.applySnapshot(this.stack[this.stackOffset]);
        };
        /**
        * @method reset
        * Resets the history stack completely; reverting to an empty editor.
        */
        History.prototype.reset = function () {
            // Clear the stack.
            this.stack = [];
            // Restore stackOffset to its original value.
            this.stackOffset = -1;
            // Clear the editable area.
            this.$editable.html('');
            // Record our first snapshot (of nothing).
            this.recordUndo();
        };
        /**
         * undo
         */
        History.prototype.undo = function () {
            // Create snap shot if not yet recorded
            if (this.$editable.html() !== this.stack[this.stackOffset].contents) {
                this.recordUndo();
            }
            if (this.stackOffset > 0) {
                this.stackOffset--;
                this.applySnapshot(this.stack[this.stackOffset]);
            }
        };
        /**
         * redo
         */
        History.prototype.redo = function () {
            if (this.stack.length - 1 > this.stackOffset) {
                this.stackOffset++;
                this.applySnapshot(this.stack[this.stackOffset]);
            }
        };
        /**
         * recorded undo
         */
        History.prototype.recordUndo = function () {
            this.stackOffset++;
            // Wash out stack after stackOffset
            if (this.stack.length > this.stackOffset) {
                this.stack = this.stack.slice(0, this.stackOffset);
            }
            // Create new snapshot and push it to the end
            this.stack.push(this.makeSnapshot());
        };
        return History;
    }());
    
    var Style = /** @class */ (function () {
        function Style() {
        }
        /**
         * @method jQueryCSS
         *
         * [workaround] for old jQuery
         * passing an array of style properties to .css()
         * will result in an object of property-value pairs.
         * (compability with version < 1.9)
         *
         * @private
         * @param  {jQuery} $obj
         * @param  {Array} propertyNames - An array of one or more CSS properties.
         * @return {Object}
         */
        Style.prototype.jQueryCSS = function ($obj, propertyNames) {
            if (env.jqueryVersion < 1.9) {
                var result_1 = {};
                $$1.each(propertyNames, function (idx, propertyName) {
                    result_1[propertyName] = $obj.css(propertyName);
                });
                return result_1;
            }
            return $obj.css(propertyNames);
        };
        /**
         * returns style object from node
         *
         * @param {jQuery} $node
         * @return {Object}
         */
        Style.prototype.fromNode = function ($node) {
            var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];
            var styleInfo = this.jQueryCSS($node, properties) || {};
            styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10);
            return styleInfo;
        };
        /**
         * paragraph level style
         *
         * @param {WrappedRange} rng
         * @param {Object} styleInfo
         */
        Style.prototype.stylePara = function (rng, styleInfo) {
            $$1.each(rng.nodes(dom.isPara, {
                includeAncestor: true
            }), function (idx, para) {
                $$1(para).css(styleInfo);
            });
        };
        /**
         * insert and returns styleNodes on range.
         *
         * @param {WrappedRange} rng
         * @param {Object} [options] - options for styleNodes
         * @param {String} [options.nodeName] - default: `SPAN`
         * @param {Boolean} [options.expandClosestSibling] - default: `false`
         * @param {Boolean} [options.onlyPartialContains] - default: `false`
         * @return {Node[]}
         */
        Style.prototype.styleNodes = function (rng, options) {
            rng = rng.splitText();
            var nodeName = (options && options.nodeName) || 'SPAN';
            var expandClosestSibling = !!(options && options.expandClosestSibling);
            var onlyPartialContains = !!(options && options.onlyPartialContains);
            if (rng.isCollapsed()) {
                return [rng.insertNode(dom.create(nodeName))];
            }
            var pred = dom.makePredByNodeName(nodeName);
            var nodes = rng.nodes(dom.isText, {
                fullyContains: true
            }).map(function (text) {
                return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);
            });
            if (expandClosestSibling) {
                if (onlyPartialContains) {
                    var nodesInRange_1 = rng.nodes();
                    // compose with partial contains predication
                    pred = func.and(pred, function (node) {
                        return lists.contains(nodesInRange_1, node);
                    });
                }
                return nodes.map(function (node) {
                    var siblings = dom.withClosestSiblings(node, pred);
                    var head = lists.head(siblings);
                    var tails = lists.tail(siblings);
                    $$1.each(tails, function (idx, elem) {
                        dom.appendChildNodes(head, elem.childNodes);
                        dom.remove(elem);
                    });
                    return lists.head(siblings);
                });
            }
            else {
                return nodes;
            }
        };
        /**
         * get current style on cursor
         *
         * @param {WrappedRange} rng
         * @return {Object} - object contains style properties.
         */
        Style.prototype.current = function (rng) {
            var $cont = $$1(!dom.isElement(rng.sc) ? rng.sc.parentNode : rng.sc);
            var styleInfo = this.fromNode($cont);
            // document.queryCommandState for toggle state
            // [workaround] prevent Firefox nsresult: "0x80004005 (NS_ERROR_FAILURE)"
            try {
                styleInfo = $$1.extend(styleInfo, {
                    'font-bold': document.queryCommandState('bold') ? 'bold' : 'normal',
                    'font-italic': document.queryCommandState('italic') ? 'italic' : 'normal',
                    'font-underline': document.queryCommandState('underline') ? 'underline' : 'normal',
                    'font-subscript': document.queryCommandState('subscript') ? 'subscript' : 'normal',
                    'font-superscript': document.queryCommandState('superscript') ? 'superscript' : 'normal',
                    'font-strikethrough': document.queryCommandState('strikethrough') ? 'strikethrough' : 'normal',
                    'font-family': document.queryCommandValue('fontname') || styleInfo['font-family']
                });
            }
            catch (e) { }
            // list-style-type to list-style(unordered, ordered)
            if (!rng.isOnList()) {
                styleInfo['list-style'] = 'none';
            }
            else {
                var orderedTypes = ['circle', 'disc', 'disc-leading-zero', 'square'];
                var isUnordered = $$1.inArray(styleInfo['list-style-type'], orderedTypes) > -1;
                styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';
            }
            var para = dom.ancestor(rng.sc, dom.isPara);
            if (para && para.style['line-height']) {
                styleInfo['line-height'] = para.style.lineHeight;
            }
            else {
                var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);
                styleInfo['line-height'] = lineHeight.toFixed(1);
            }
            styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);
            styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);
            styleInfo.range = rng;
            return styleInfo;
        };
        return Style;
    }());
    
    var Bullet = /** @class */ (function () {
        function Bullet() {
        }
        /**
         * toggle ordered list
         */
        Bullet.prototype.insertOrderedList = function (editable) {
            this.toggleList('OL', editable);
        };
        /**
         * toggle unordered list
         */
        Bullet.prototype.insertUnorderedList = function (editable) {
            this.toggleList('UL', editable);
        };
        /**
         * indent
         */
        Bullet.prototype.indent = function (editable) {
            var _this = this;
            var rng = range.create(editable).wrapBodyInlineWithPara();
            var paras = rng.nodes(dom.isPara, { includeAncestor: true });
            var clustereds = lists.clusterBy(paras, func.peq2('parentNode'));
            $$1.each(clustereds, function (idx, paras) {
                var head = lists.head(paras);
                if (dom.isLi(head)) {
                    _this.wrapList(paras, head.parentNode.nodeName);
                }
                else {
                    $$1.each(paras, function (idx, para) {
                        $$1(para).css('marginLeft', function (idx, val) {
                            return (parseInt(val, 10) || 0) + 25;
                        });
                    });
                }
            });
            rng.select();
        };
        /**
         * outdent
         */
        Bullet.prototype.outdent = function (editable) {
            var _this = this;
            var rng = range.create(editable).wrapBodyInlineWithPara();
            var paras = rng.nodes(dom.isPara, { includeAncestor: true });
            var clustereds = lists.clusterBy(paras, func.peq2('parentNode'));
            $$1.each(clustereds, function (idx, paras) {
                var head = lists.head(paras);
                if (dom.isLi(head)) {
                    _this.releaseList([paras]);
                }
                else {
                    $$1.each(paras, function (idx, para) {
                        $$1(para).css('marginLeft', function (idx, val) {
                            val = (parseInt(val, 10) || 0);
                            return val > 25 ? val - 25 : '';
                        });
                    });
                }
            });
            rng.select();
        };
        /**
         * toggle list
         *
         * @param {String} listName - OL or UL
         */
        Bullet.prototype.toggleList = function (listName, editable) {
            var _this = this;
            var rng = range.create(editable).wrapBodyInlineWithPara();
            var paras = rng.nodes(dom.isPara, { includeAncestor: true });
            var bookmark = rng.paraBookmark(paras);
            var clustereds = lists.clusterBy(paras, func.peq2('parentNode'));
            // paragraph to list
            if (lists.find(paras, dom.isPurePara)) {
                var wrappedParas_1 = [];
                $$1.each(clustereds, function (idx, paras) {
                    wrappedParas_1 = wrappedParas_1.concat(_this.wrapList(paras, listName));
                });
                paras = wrappedParas_1;
                // list to paragraph or change list style
            }
            else {
                var diffLists = rng.nodes(dom.isList, {
                    includeAncestor: true
                }).filter(function (listNode) {
                    return !$$1.nodeName(listNode, listName);
                });
                if (diffLists.length) {
                    $$1.each(diffLists, function (idx, listNode) {
                        dom.replace(listNode, listName);
                    });
                }
                else {
                    paras = this.releaseList(clustereds, true);
                }
            }
            range.createFromParaBookmark(bookmark, paras).select();
        };
        /**
         * @param {Node[]} paras
         * @param {String} listName
         * @return {Node[]}
         */
        Bullet.prototype.wrapList = function (paras, listName) {
            var head = lists.head(paras);
            var last = lists.last(paras);
            var prevList = dom.isList(head.previousSibling) && head.previousSibling;
            var nextList = dom.isList(last.nextSibling) && last.nextSibling;
            var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last);
            // P to LI
            paras = paras.map(function (para) {
                return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;
            });
            // append to list(<ul>, <ol>)
            dom.appendChildNodes(listNode, paras);
            if (nextList) {
                dom.appendChildNodes(listNode, lists.from(nextList.childNodes));
                dom.remove(nextList);
            }
            return paras;
        };
        /**
         * @method releaseList
         *
         * @param {Array[]} clustereds
         * @param {Boolean} isEscapseToBody
         * @return {Node[]}
         */
        Bullet.prototype.releaseList = function (clustereds, isEscapseToBody) {
            var releasedParas = [];
            $$1.each(clustereds, function (idx, paras) {
                var head = lists.head(paras);
                var last = lists.last(paras);
                var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) : head.parentNode;
                var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {
                    node: last.parentNode,
                    offset: dom.position(last) + 1
                }, {
                    isSkipPaddingBlankHTML: true
                }) : null;
                var middleList = dom.splitTree(headList, {
                    node: head.parentNode,
                    offset: dom.position(head)
                }, {
                    isSkipPaddingBlankHTML: true
                });
                paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi)
                    : lists.from(middleList.childNodes).filter(dom.isLi);
                // LI to P
                if (isEscapseToBody || !dom.isList(headList.parentNode)) {
                    paras = paras.map(function (para) {
                        return dom.replace(para, 'P');
                    });
                }
                $$1.each(lists.from(paras).reverse(), function (idx, para) {
                    dom.insertAfter(para, headList);
                });
                // remove empty lists
                var rootLists = lists.compact([headList, middleList, lastList]);
                $$1.each(rootLists, function (idx, rootList) {
                    var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));
                    $$1.each(listNodes.reverse(), function (idx, listNode) {
                        if (!dom.nodeLength(listNode)) {
                            dom.remove(listNode, true);
                        }
                    });
                });
                releasedParas = releasedParas.concat(paras);
            });
            return releasedParas;
        };
        return Bullet;
    }());
    
    /**
     * @class editing.Typing
     *
     * Typing
     *
     */
    var Typing = /** @class */ (function () {
        function Typing() {
            // a Bullet instance to toggle lists off
            this.bullet = new Bullet();
        }
        /**
         * insert tab
         *
         * @param {WrappedRange} rng
         * @param {Number} tabsize
         */
        Typing.prototype.insertTab = function (rng, tabsize) {
            var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));
            rng = rng.deleteContents();
            rng.insertNode(tab, true);
            rng = range.create(tab, tabsize);
            rng.select();
        };
        /**
         * insert paragraph
         */
        Typing.prototype.insertParagraph = function (editable) {
            var rng = range.create(editable);
            // deleteContents on range.
            rng = rng.deleteContents();
            // Wrap range if it needs to be wrapped by paragraph
            rng = rng.wrapBodyInlineWithPara();
            // finding paragraph
            var splitRoot = dom.ancestor(rng.sc, dom.isPara);
            var nextPara;
            // on paragraph: split paragraph
            if (splitRoot) {
                // if it is an empty line with li
                if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {
                    // toogle UL/OL and escape
                    this.bullet.toggleList(splitRoot.parentNode.nodeName);
                    return;
                    // if it is an empty line with para on blockquote
                }
                else if (dom.isEmpty(splitRoot) && dom.isPara(splitRoot) && dom.isBlockquote(splitRoot.parentNode)) {
                    // escape blockquote
                    dom.insertAfter(splitRoot, splitRoot.parentNode);
                    nextPara = splitRoot;
                    // if new line has content (not a line break)
                }
                else {
                    nextPara = dom.splitTree(splitRoot, rng.getStartPoint());
                    var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);
                    emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));
                    $$1.each(emptyAnchors, function (idx, anchor) {
                        dom.remove(anchor);
                    });
                    // replace empty heading, pre or custom-made styleTag with P tag
                    if ((dom.isHeading(nextPara) || dom.isPre(nextPara) || dom.isCustomStyleTag(nextPara)) && dom.isEmpty(nextPara)) {
                        nextPara = dom.replace(nextPara, 'p');
                    }
                }
                // no paragraph: insert empty paragraph
            }
            else {
                var next = rng.sc.childNodes[rng.so];
                nextPara = $$1(dom.emptyPara)[0];
                if (next) {
                    rng.sc.insertBefore(nextPara, next);
                }
                else {
                    rng.sc.appendChild(nextPara);
                }
            }
            range.create(nextPara, 0).normalize().select().scrollIntoView(editable);
        };
        return Typing;
    }());
    
    /**
     * @class Create a virtual table to create what actions to do in change.
     * @param {object} startPoint Cell selected to apply change.
     * @param {enum} where  Where change will be applied Row or Col. Use enum: TableResultAction.where
     * @param {enum} action Action to be applied. Use enum: TableResultAction.requestAction
     * @param {object} domTable Dom element of table to make changes.
     */
    var TableResultAction = function (startPoint, where, action, domTable) {
        var _startPoint = { 'colPos': 0, 'rowPos': 0 };
        var _virtualTable = [];
        var _actionCellList = [];
        /// ///////////////////////////////////////////
        // Private functions
        /// ///////////////////////////////////////////
        /**
         * Set the startPoint of action.
         */
        function setStartPoint() {
            if (!startPoint || !startPoint.tagName || (startPoint.tagName.toLowerCase() !== 'td' && startPoint.tagName.toLowerCase() !== 'th')) {
                console.error('Impossible to identify start Cell point.', startPoint);
                return;
            }
            _startPoint.colPos = startPoint.cellIndex;
            if (!startPoint.parentElement || !startPoint.parentElement.tagName || startPoint.parentElement.tagName.toLowerCase() !== 'tr') {
                console.error('Impossible to identify start Row point.', startPoint);
                return;
            }
            _startPoint.rowPos = startPoint.parentElement.rowIndex;
        }
        /**
         * Define virtual table position info object.
         *
         * @param {int} rowIndex Index position in line of virtual table.
         * @param {int} cellIndex Index position in column of virtual table.
         * @param {object} baseRow Row affected by this position.
         * @param {object} baseCell Cell affected by this position.
         * @param {bool} isSpan Inform if it is an span cell/row.
         */
        function setVirtualTablePosition(rowIndex, cellIndex, baseRow, baseCell, isRowSpan, isColSpan, isVirtualCell) {
            var objPosition = {
                'baseRow': baseRow,
                'baseCell': baseCell,
                'isRowSpan': isRowSpan,
                'isColSpan': isColSpan,
                'isVirtual': isVirtualCell
            };
            if (!_virtualTable[rowIndex]) {
                _virtualTable[rowIndex] = [];
            }
            _virtualTable[rowIndex][cellIndex] = objPosition;
        }
        /**
         * Create action cell object.
         *
         * @param {object} virtualTableCellObj Object of specific position on virtual table.
         * @param {enum} resultAction Action to be applied in that item.
         */
        function getActionCell(virtualTableCellObj, resultAction, virtualRowPosition, virtualColPosition) {
            return {
                'baseCell': virtualTableCellObj.baseCell,
                'action': resultAction,
                'virtualTable': {
                    'rowIndex': virtualRowPosition,
                    'cellIndex': virtualColPosition
                }
            };
        }
        /**
         * Recover free index of row to append Cell.
         *
         * @param {int} rowIndex Index of row to find free space.
         * @param {int} cellIndex Index of cell to find free space in table.
         */
        function recoverCellIndex(rowIndex, cellIndex) {
            if (!_virtualTable[rowIndex]) {
                return cellIndex;
            }
            if (!_virtualTable[rowIndex][cellIndex]) {
                return cellIndex;
            }
            var newCellIndex = cellIndex;
            while (_virtualTable[rowIndex][newCellIndex]) {
                newCellIndex++;
                if (!_virtualTable[rowIndex][newCellIndex]) {
                    return newCellIndex;
                }
            }
        }
        /**
         * Recover info about row and cell and add information to virtual table.
         *
         * @param {object} row Row to recover information.
         * @param {object} cell Cell to recover information.
         */
        function addCellInfoToVirtual(row, cell) {
            var cellIndex = recoverCellIndex(row.rowIndex, cell.cellIndex);
            var cellHasColspan = (cell.colSpan > 1);
            var cellHasRowspan = (cell.rowSpan > 1);
            var isThisSelectedCell = (row.rowIndex === _startPoint.rowPos && cell.cellIndex === _startPoint.colPos);
            setVirtualTablePosition(row.rowIndex, cellIndex, row, cell, cellHasRowspan, cellHasColspan, false);
            // Add span rows to virtual Table.
            var rowspanNumber = cell.attributes.rowSpan ? parseInt(cell.attributes.rowSpan.value, 10) : 0;
            if (rowspanNumber > 1) {
                for (var rp = 1; rp < rowspanNumber; rp++) {
                    var rowspanIndex = row.rowIndex + rp;
                    adjustStartPoint(rowspanIndex, cellIndex, cell, isThisSelectedCell);
                    setVirtualTablePosition(rowspanIndex, cellIndex, row, cell, true, cellHasColspan, true);
                }
            }
            // Add span cols to virtual table.
            var colspanNumber = cell.attributes.colSpan ? parseInt(cell.attributes.colSpan.value, 10) : 0;
            if (colspanNumber > 1) {
                for (var cp = 1; cp < colspanNumber; cp++) {
                    var cellspanIndex = recoverCellIndex(row.rowIndex, (cellIndex + cp));
                    adjustStartPoint(row.rowIndex, cellspanIndex, cell, isThisSelectedCell);
                    setVirtualTablePosition(row.rowIndex, cellspanIndex, row, cell, cellHasRowspan, true, true);
                }
            }
        }
        /**
         * Process validation and adjust of start point if needed
         *
         * @param {int} rowIndex
         * @param {int} cellIndex
         * @param {object} cell
         * @param {bool} isSelectedCell
         */
        function adjustStartPoint(rowIndex, cellIndex, cell, isSelectedCell) {
            if (rowIndex === _startPoint.rowPos && _startPoint.colPos >= cell.cellIndex && cell.cellIndex <= cellIndex && !isSelectedCell) {
                _startPoint.colPos++;
            }
        }
        /**
         * Create virtual table of cells with all cells, including span cells.
         */
        function createVirtualTable() {
            var rows = domTable.rows;
            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
                var cells = rows[rowIndex].cells;
                for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                    addCellInfoToVirtual(rows[rowIndex], cells[cellIndex]);
                }
            }
        }
        /**
         * Get action to be applied on the cell.
         *
         * @param {object} cell virtual table cell to apply action
         */
        function getDeleteResultActionToCell(cell) {
            switch (where) {
                case TableResultAction.where.Column:
                    if (cell.isColSpan) {
                        return TableResultAction.resultAction.SubtractSpanCount;
                    }
                    break;
                case TableResultAction.where.Row:
                    if (!cell.isVirtual && cell.isRowSpan) {
                        return TableResultAction.resultAction.AddCell;
                    }
                    else if (cell.isRowSpan) {
                        return TableResultAction.resultAction.SubtractSpanCount;
                    }
                    break;
            }
            return TableResultAction.resultAction.RemoveCell;
        }
        /**
         * Get action to be applied on the cell.
         *
         * @param {object} cell virtual table cell to apply action
         */
        function getAddResultActionToCell(cell) {
            switch (where) {
                case TableResultAction.where.Column:
                    if (cell.isColSpan) {
                        return TableResultAction.resultAction.SumSpanCount;
                    }
                    else if (cell.isRowSpan && cell.isVirtual) {
                        return TableResultAction.resultAction.Ignore;
                    }
                    break;
                case TableResultAction.where.Row:
                    if (cell.isRowSpan) {
                        return TableResultAction.resultAction.SumSpanCount;
                    }
                    else if (cell.isColSpan && cell.isVirtual) {
                        return TableResultAction.resultAction.Ignore;
                    }
                    break;
            }
            return TableResultAction.resultAction.AddCell;
        }
        function init() {
            setStartPoint();
            createVirtualTable();
        }
        /// ///////////////////////////////////////////
        // Public functions
        /// ///////////////////////////////////////////
        /**
         * Recover array os what to do in table.
         */
        this.getActionList = function () {
            var fixedRow = (where === TableResultAction.where.Row) ? _startPoint.rowPos : -1;
            var fixedCol = (where === TableResultAction.where.Column) ? _startPoint.colPos : -1;
            var actualPosition = 0;
            var canContinue = true;
            while (canContinue) {
                var rowPosition = (fixedRow >= 0) ? fixedRow : actualPosition;
                var colPosition = (fixedCol >= 0) ? fixedCol : actualPosition;
                var row = _virtualTable[rowPosition];
                if (!row) {
                    canContinue = false;
                    return _actionCellList;
                }
                var cell = row[colPosition];
                if (!cell) {
                    canContinue = false;
                    return _actionCellList;
                }
                // Define action to be applied in this cell
                var resultAction = TableResultAction.resultAction.Ignore;
                switch (action) {
                    case TableResultAction.requestAction.Add:
                        resultAction = getAddResultActionToCell(cell);
                        break;
                    case TableResultAction.requestAction.Delete:
                        resultAction = getDeleteResultActionToCell(cell);
                        break;
                }
                _actionCellList.push(getActionCell(cell, resultAction, rowPosition, colPosition));
                actualPosition++;
            }
            return _actionCellList;
        };
        init();
    };
    /**
    *
    * Where action occours enum.
    */
    TableResultAction.where = { 'Row': 0, 'Column': 1 };
    /**
    *
    * Requested action to apply enum.
    */
    TableResultAction.requestAction = { 'Add': 0, 'Delete': 1 };
    /**
    *
    * Result action to be executed enum.
    */
    TableResultAction.resultAction = { 'Ignore': 0, 'SubtractSpanCount': 1, 'RemoveCell': 2, 'AddCell': 3, 'SumSpanCount': 4 };
    /**
     *
     * @class editing.Table
     *
     * Table
     *
     */
    var Table = /** @class */ (function () {
        function Table() {
        }
        /**
         * handle tab key
         *
         * @param {WrappedRange} rng
         * @param {Boolean} isShift
         */
        Table.prototype.tab = function (rng, isShift) {
            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
            var table = dom.ancestor(cell, dom.isTable);
            var cells = dom.listDescendant(table, dom.isCell);
            var nextCell = lists[isShift ? 'prev' : 'next'](cells, cell);
            if (nextCell) {
                range.create(nextCell, 0).select();
            }
        };
        /**
         * Add a new row
         *
         * @param {WrappedRange} rng
         * @param {String} position (top/bottom)
         * @return {Node}
         */
        Table.prototype.addRow = function (rng, position) {
            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
            var currentTr = $$1(cell).closest('tr');
            var trAttributes = this.recoverAttributes(currentTr);
            var html = $$1('<tr' + trAttributes + '></tr>');
            var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Add, $$1(currentTr).closest('table')[0]);
            var actions = vTable.getActionList();
            for (var idCell = 0; idCell < actions.length; idCell++) {
                var currentCell = actions[idCell];
                var tdAttributes = this.recoverAttributes(currentCell.baseCell);
                switch (currentCell.action) {
                    case TableResultAction.resultAction.AddCell:
                        html.append('<td' + tdAttributes + '>' + dom.blank + '</td>');
                        break;
                    case TableResultAction.resultAction.SumSpanCount:
                        if (position === 'top') {
                            var baseCellTr = currentCell.baseCell.parent;
                            var isTopFromRowSpan = (!baseCellTr ? 0 : currentCell.baseCell.closest('tr').rowIndex) <= currentTr[0].rowIndex;
                            if (isTopFromRowSpan) {
                                var newTd = $$1('<div></div>').append($$1('<td' + tdAttributes + '>' + dom.blank + '</td>').removeAttr('rowspan')).html();
                                html.append(newTd);
                                break;
                            }
                        }
                        var rowspanNumber = parseInt(currentCell.baseCell.rowSpan, 10);
                        rowspanNumber++;
                        currentCell.baseCell.setAttribute('rowSpan', rowspanNumber);
                        break;
                }
            }
            if (position === 'top') {
                currentTr.before(html);
            }
            else {
                var cellHasRowspan = (cell.rowSpan > 1);
                if (cellHasRowspan) {
                    var lastTrIndex = currentTr[0].rowIndex + (cell.rowSpan - 2);
                    $$1($$1(currentTr).parent().find('tr')[lastTrIndex]).after($$1(html));
                    return;
                }
                currentTr.after(html);
            }
        };
        /**
         * Add a new col
         *
         * @param {WrappedRange} rng
         * @param {String} position (left/right)
         * @return {Node}
         */
        Table.prototype.addCol = function (rng, position) {
            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
            var row = $$1(cell).closest('tr');
            var rowsGroup = $$1(row).siblings();
            rowsGroup.push(row);
            var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Add, $$1(row).closest('table')[0]);
            var actions = vTable.getActionList();
            for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {
                var currentCell = actions[actionIndex];
                var tdAttributes = this.recoverAttributes(currentCell.baseCell);
                switch (currentCell.action) {
                    case TableResultAction.resultAction.AddCell:
                        if (position === 'right') {
                            $$1(currentCell.baseCell).after('<td' + tdAttributes + '>' + dom.blank + '</td>');
                        }
                        else {
                            $$1(currentCell.baseCell).before('<td' + tdAttributes + '>' + dom.blank + '</td>');
                        }
                        break;
                    case TableResultAction.resultAction.SumSpanCount:
                        if (position === 'right') {
                            var colspanNumber = parseInt(currentCell.baseCell.colSpan, 10);
                            colspanNumber++;
                            currentCell.baseCell.setAttribute('colSpan', colspanNumber);
                        }
                        else {
                            $$1(currentCell.baseCell).before('<td' + tdAttributes + '>' + dom.blank + '</td>');
                        }
                        break;
                }
            }
        };
        /*
        * Copy attributes from element.
        *
        * @param {object} Element to recover attributes.
        * @return {string} Copied string elements.
        */
        Table.prototype.recoverAttributes = function (el) {
            var resultStr = '';
            if (!el) {
                return resultStr;
            }
            var attrList = el.attributes || [];
            for (var i = 0; i < attrList.length; i++) {
                if (attrList[i].name.toLowerCase() === 'id') {
                    continue;
                }
                if (attrList[i].specified) {
                    resultStr += ' ' + attrList[i].name + '=\'' + attrList[i].value + '\'';
                }
            }
            return resultStr;
        };
        /**
         * Delete current row
         *
         * @param {WrappedRange} rng
         * @return {Node}
         */
        Table.prototype.deleteRow = function (rng) {
            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
            var row = $$1(cell).closest('tr');
            var cellPos = row.children('td, th').index($$1(cell));
            var rowPos = row[0].rowIndex;
            var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Delete, $$1(row).closest('table')[0]);
            var actions = vTable.getActionList();
            for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {
                if (!actions[actionIndex]) {
                    continue;
                }
                var baseCell = actions[actionIndex].baseCell;
                var virtualPosition = actions[actionIndex].virtualTable;
                var hasRowspan = (baseCell.rowSpan && baseCell.rowSpan > 1);
                var rowspanNumber = (hasRowspan) ? parseInt(baseCell.rowSpan, 10) : 0;
                switch (actions[actionIndex].action) {
                    case TableResultAction.resultAction.Ignore:
                        continue;
                    case TableResultAction.resultAction.AddCell:
                        var nextRow = row.next('tr')[0];
                        if (!nextRow) {
                            continue;
                        }
                        var cloneRow = row[0].cells[cellPos];
                        if (hasRowspan) {
                            if (rowspanNumber > 2) {
                                rowspanNumber--;
                                nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);
                                nextRow.cells[cellPos].setAttribute('rowSpan', rowspanNumber);
                                nextRow.cells[cellPos].innerHTML = '';
                            }
                            else if (rowspanNumber === 2) {
                                nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);
                                nextRow.cells[cellPos].removeAttribute('rowSpan');
                                nextRow.cells[cellPos].innerHTML = '';
                            }
                        }
                        continue;
                    case TableResultAction.resultAction.SubtractSpanCount:
                        if (hasRowspan) {
                            if (rowspanNumber > 2) {
                                rowspanNumber--;
                                baseCell.setAttribute('rowSpan', rowspanNumber);
                                if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) {
                                    baseCell.innerHTML = '';
                                }
                            }
                            else if (rowspanNumber === 2) {
                                baseCell.removeAttribute('rowSpan');
                                if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) {
                                    baseCell.innerHTML = '';
                                }
                            }
                        }
                        continue;
                    case TableResultAction.resultAction.RemoveCell:
                        // Do not need remove cell because row will be deleted.
                        continue;
                }
            }
            row.remove();
        };
        /**
         * Delete current col
         *
         * @param {WrappedRange} rng
         * @return {Node}
         */
        Table.prototype.deleteCol = function (rng) {
            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
            var row = $$1(cell).closest('tr');
            var cellPos = row.children('td, th').index($$1(cell));
            var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Delete, $$1(row).closest('table')[0]);
            var actions = vTable.getActionList();
            for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {
                if (!actions[actionIndex]) {
                    continue;
                }
                switch (actions[actionIndex].action) {
                    case TableResultAction.resultAction.Ignore:
                        continue;
                    case TableResultAction.resultAction.SubtractSpanCount:
                        var baseCell = actions[actionIndex].baseCell;
                        var hasColspan = (baseCell.colSpan && baseCell.colSpan > 1);
                        if (hasColspan) {
                            var colspanNumber = (baseCell.colSpan) ? parseInt(baseCell.colSpan, 10) : 0;
                            if (colspanNumber > 2) {
                                colspanNumber--;
                                baseCell.setAttribute('colSpan', colspanNumber);
                                if (baseCell.cellIndex === cellPos) {
                                    baseCell.innerHTML = '';
                                }
                            }
                            else if (colspanNumber === 2) {
                                baseCell.removeAttribute('colSpan');
                                if (baseCell.cellIndex === cellPos) {
                                    baseCell.innerHTML = '';
                                }
                            }
                        }
                        continue;
                    case TableResultAction.resultAction.RemoveCell:
                        dom.remove(actions[actionIndex].baseCell, true);
                        continue;
                }
            }
        };
        /**
         * create empty table element
         *
         * @param {Number} rowCount
         * @param {Number} colCount
         * @return {Node}
         */
        Table.prototype.createTable = function (colCount, rowCount, options) {
            var tds = [];
            var tdHTML;
            for (var idxCol = 0; idxCol < colCount; idxCol++) {
                tds.push('<td>' + dom.blank + '</td>');
            }
            tdHTML = tds.join('');
            var trs = [];
            var trHTML;
            for (var idxRow = 0; idxRow < rowCount; idxRow++) {
                trs.push('<tr>' + tdHTML + '</tr>');
            }
            trHTML = trs.join('');
            var $table = $$1('<table>' + trHTML + '</table>');
            if (options && options.tableClassName) {
                $table.addClass(options.tableClassName);
            }
            return $table[0];
        };
        /**
         * Delete current table
         *
         * @param {WrappedRange} rng
         * @return {Node}
         */
        Table.prototype.deleteTable = function (rng) {
            var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);
            $$1(cell).closest('table').remove();
        };
        return Table;
    }());
    
    var KEY_BOGUS = 'bogus';
    /**
     * @class Editor
     */
    var Editor = /** @class */ (function () {
        function Editor(context) {
            var _this = this;
            this.context = context;
            this.$note = context.layoutInfo.note;
            this.$editor = context.layoutInfo.editor;
            this.$editable = context.layoutInfo.editable;
            this.options = context.options;
            this.lang = this.options.langInfo;
            this.editable = this.$editable[0];
            this.lastRange = null;
            this.style = new Style();
            this.table = new Table();
            this.typing = new Typing();
            this.bullet = new Bullet();
            this.history = new History(this.$editable);
            this.context.memo('help.undo', this.lang.help.undo);
            this.context.memo('help.redo', this.lang.help.redo);
            this.context.memo('help.tab', this.lang.help.tab);
            this.context.memo('help.untab', this.lang.help.untab);
            this.context.memo('help.insertParagraph', this.lang.help.insertParagraph);
            this.context.memo('help.insertOrderedList', this.lang.help.insertOrderedList);
            this.context.memo('help.insertUnorderedList', this.lang.help.insertUnorderedList);
            this.context.memo('help.indent', this.lang.help.indent);
            this.context.memo('help.outdent', this.lang.help.outdent);
            this.context.memo('help.formatPara', this.lang.help.formatPara);
            this.context.memo('help.insertHorizontalRule', this.lang.help.insertHorizontalRule);
            this.context.memo('help.fontName', this.lang.help.fontName);
            // native commands(with execCommand), generate function for execCommand
            var commands = [
                'bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript',
                'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',
                'formatBlock', 'removeFormat', 'backColor'
            ];
            for (var idx = 0, len = commands.length; idx < len; idx++) {
                this[commands[idx]] = (function (sCmd) {
                    return function (value) {
                        _this.beforeCommand();
                        document.execCommand(sCmd, false, value);
                        _this.afterCommand(true);
                    };
                })(commands[idx]);
                this.context.memo('help.' + commands[idx], this.lang.help[commands[idx]]);
            }
            this.fontName = this.wrapCommand(function (value) {
                return _this.fontStyling('font-family', "\'" + value + "\'");
            });
            this.fontSize = this.wrapCommand(function (value) {
                return _this.fontStyling('font-size', value + 'px');
            });
            for (var idx = 1; idx <= 6; idx++) {
                this['formatH' + idx] = (function (idx) {
                    return function () {
                        _this.formatBlock('H' + idx);
                    };
                })(idx);
                this.context.memo('help.formatH' + idx, this.lang.help['formatH' + idx]);
            }
            
            this.insertParagraph = this.wrapCommand(function () {
                _this.typing.insertParagraph(_this.editable);
            });
            this.insertOrderedList = this.wrapCommand(function () {
                _this.bullet.insertOrderedList(_this.editable);
            });
            this.insertUnorderedList = this.wrapCommand(function () {
                _this.bullet.insertUnorderedList(_this.editable);
            });
            this.indent = this.wrapCommand(function () {
                _this.bullet.indent(_this.editable);
            });
            this.outdent = this.wrapCommand(function () {
                _this.bullet.outdent(_this.editable);
            });
            /**
             * insertNode
             * insert node
             * @param {Node} node
             */
            this.insertNode = this.wrapCommand(function (node) {
                if (_this.isLimited($$1(node).text().length)) {
                    return;
                }
                var rng = _this.createRange();
                rng.insertNode(node);
                range.createFromNodeAfter(node).select();
            });
            /**
             * insert text
             * @param {String} text
             */
            this.insertText = this.wrapCommand(function (text) {
                if (_this.isLimited(text.length)) {
                    return;
                }
                var rng = _this.createRange();
                var textNode = rng.insertNode(dom.createText(text));
                range.create(textNode, dom.nodeLength(textNode)).select();
            });
            /**
             * paste HTML
             * @param {String} markup
             */
            this.pasteHTML = this.wrapCommand(function (markup) {
                if (_this.isLimited(markup.length)) {
                    return;
                }
                var contents = _this.createRange().pasteHTML(markup);
                range.createFromNodeAfter(lists.last(contents)).select();
            });
            /**
             * formatBlock
             *
             * @param {String} tagName
             */
            this.formatBlock = this.wrapCommand(function (tagName, $target) {
                var onApplyCustomStyle = _this.options.callbacks.onApplyCustomStyle;
                if (onApplyCustomStyle) {
                    onApplyCustomStyle.call(_this, $target, _this.context, _this.onFormatBlock);
                }
                else {
                    _this.onFormatBlock(tagName, $target);
                }
            });
            /**
             * insert horizontal rule
             */
            this.insertHorizontalRule = this.wrapCommand(function () {
                var hrNode = _this.createRange().insertNode(dom.create('HR'));
                if (hrNode.nextSibling) {
                    range.create(hrNode.nextSibling, 0).normalize().select();
                }
            });
            /**
             * lineHeight
             * @param {String} value
             */
            this.lineHeight = this.wrapCommand(function (value) {
                _this.style.stylePara(_this.createRange(), {
                    lineHeight: value
                });
            });
            /**
             * create link (command)
             *
             * @param {Object} linkInfo
             */
            this.createLink = this.wrapCommand(function (linkInfo) {
                var linkUrl = linkInfo.url;
                var linkText = linkInfo.text;
                var isNewWindow = linkInfo.isNewWindow;
                var rng = linkInfo.range || _this.createRange();
                var isTextChanged = rng.toString() !== linkText;
                // handle spaced urls from input
                if (typeof linkUrl === 'string') {
                    linkUrl = linkUrl.trim();
                }
                if (_this.options.onCreateLink) {
                    linkUrl = _this.options.onCreateLink(linkUrl);
                }
                else {
                    // if url doesn't match an URL schema, set http:// as default
                    linkUrl = /^[A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?/.test(linkUrl)
                        ? linkUrl : 'http://' + linkUrl;
                }
                var anchors = [];
                if (isTextChanged) {
                    rng = rng.deleteContents();
                    var anchor = rng.insertNode($$1('<A>' + linkText + '</A>')[0]);
                    anchors.push(anchor);
                }
                else {
                    anchors = _this.style.styleNodes(rng, {
                        nodeName: 'A',
                        expandClosestSibling: true,
                        onlyPartialContains: true
                    });
                }
                $$1.each(anchors, function (idx, anchor) {
                    $$1(anchor).attr('href', linkUrl);
                    if (isNewWindow) {
                        $$1(anchor).attr('target', '_blank');
                    }
                    else {
                        $$1(anchor).removeAttr('target');
                    }
                });
                var startRange = range.createFromNodeBefore(lists.head(anchors));
                var startPoint = startRange.getStartPoint();
                var endRange = range.createFromNodeAfter(lists.last(anchors));
                var endPoint = endRange.getEndPoint();
                range.create(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset).select();
            });
            /**
             * setting color
             *
             * @param {Object} sObjColor  color code
             * @param {String} sObjColor.foreColor foreground color
             * @param {String} sObjColor.backColor background color
             */
            this.color = this.wrapCommand(function (colorInfo) {
                var foreColor = colorInfo.foreColor;
                var backColor = colorInfo.backColor;
                if (foreColor) {
                    document.execCommand('foreColor', false, foreColor);
                }
                if (backColor) {
                    document.execCommand('backColor', false, backColor);
                }
            });
            /**
             * Set foreground color
             *
             * @param {String} colorCode foreground color code
             */
            this.foreColor = this.wrapCommand(function (colorInfo) {
                document.execCommand('styleWithCSS', false, true);
                document.execCommand('foreColor', false, colorInfo);
            });
            /**
             * insert Table
             *
             * @param {String} dimension of table (ex : "5x5")
             */
            this.insertTable = this.wrapCommand(function (dim) {
                var dimension = dim.split('x');
                var rng = _this.createRange().deleteContents();
                rng.insertNode(_this.table.createTable(dimension[0], dimension[1], _this.options));
            });
            /**
             * remove media object and Figure Elements if media object is img with Figure.
             */
            this.removeMedia = this.wrapCommand(function () {
                var $target = $$1(_this.restoreTarget()).parent();
                if ($target.parent('figure').length) {
                    $target.parent('figure').remove();
                }
                else {
                    $target = $$1(_this.restoreTarget()).detach();
                }
                _this.context.triggerEvent('media.delete', $target, _this.$editable);
            });
            /**
             * float me
             *
             * @param {String} value
             */
            this.floatMe = this.wrapCommand(function (value) {
                var $target = $$1(_this.restoreTarget());
                $target.toggleClass('note-float-left', value === 'left');
                $target.toggleClass('note-float-right', value === 'right');
                $target.css('float', value);
            });
            /**
             * resize overlay element
             * @param {String} value
             */
            this.resize = this.wrapCommand(function (value) {
                var $target = $$1(_this.restoreTarget());
                $target.css({
                    width: value * 100 + '%',
                    height: ''
                });
            });
        }
        Editor.prototype.initialize = function () {
            var _this = this;
            // bind custom events
            this.$editable.on('keydown', function (event) {
                if (event.keyCode === key.code.ENTER) {
                    _this.context.triggerEvent('enter', event);
                }
                _this.context.triggerEvent('keydown', event);
                if (!event.isDefaultPrevented()) {
                    if (_this.options.shortcuts) {
                        _this.handleKeyMap(event);
                    }
                    else {
                        _this.preventDefaultEditableShortCuts(event);
                    }
                }
                if (_this.isLimited(1, event)) {
                    return false;
                }
            }).on('keyup', function (event) {
                _this.context.triggerEvent('keyup', event);
            }).on('focus', function (event) {
                _this.context.triggerEvent('focus', event);
            }).on('blur', function (event) {
                _this.context.triggerEvent('blur', event);
            }).on('mousedown', function (event) {
                _this.context.triggerEvent('mousedown', event);
            }).on('mouseup', function (event) {
                _this.context.triggerEvent('mouseup', event);
            }).on('scroll', function (event) {
                _this.context.triggerEvent('scroll', event);
            }).on('paste', function (event) {
                _this.context.triggerEvent('paste', event);
            });
            // init content before set event
            this.$editable.html(dom.html(this.$note) || dom.emptyPara);
            this.$editable.on(env.inputEventName, func.debounce(function () {
                _this.context.triggerEvent('change', _this.$editable.html());
            }, 100));
            this.$editor.on('focusin', function (event) {
                _this.context.triggerEvent('focusin', event);
            }).on('focusout', function (event) {
                _this.context.triggerEvent('focusout', event);
            });
            if (!this.options.airMode) {
                if (this.options.width) {
                    this.$editor.outerWidth(this.options.width);
                }
                if (this.options.height) {
                    this.$editable.outerHeight(this.options.height);
                }
                if (this.options.maxHeight) {
                    this.$editable.css('max-height', this.options.maxHeight);
                }
                if (this.options.minHeight) {
                    this.$editable.css('min-height', this.options.minHeight);
                }
            }
            this.history.recordUndo();
        };
        Editor.prototype.destroy = function () {
            this.$editable.off();
        };
        Editor.prototype.handleKeyMap = function (event) {
            var keyMap = this.options.keyMap[env.isMac ? 'mac' : 'pc'];
            var keys = [];
            if (event.metaKey) {
                keys.push('CMD');
            }
            if (event.ctrlKey && !event.altKey) {
                keys.push('CTRL');
            }
            if (event.shiftKey) {
                keys.push('SHIFT');
            }
            var keyName = key.nameFromCode[event.keyCode];
            if (keyName) {
                keys.push(keyName);
            }
            var eventName = keyMap[keys.join('+')];
            if (eventName) {
                if (this.context.invoke(eventName) !== false) {
                    event.preventDefault();
                }
            }
            else if (key.isEdit(event.keyCode)) {
                this.afterCommand();
            }
        };
        Editor.prototype.preventDefaultEditableShortCuts = function (event) {
            // B(Bold, 66) / I(Italic, 73) / U(Underline, 85)
            if ((event.ctrlKey || event.metaKey) &&
                lists.contains([66, 73, 85], event.keyCode)) {
                event.preventDefault();
            }
        };
        Editor.prototype.isLimited = function (pad, event) {
            pad = pad || 0;
            if (typeof event !== 'undefined') {
                if (key.isMove(event.keyCode) ||
                    (event.ctrlKey || event.metaKey) ||
                    lists.contains([key.code.BACKSPACE, key.code.DELETE], event.keyCode)) {
                    return false;
                }
            }
            if (this.options.maxTextLength > 0) {
                if ((this.$editable.text().length + pad) >= this.options.maxTextLength) {
                    return true;
                }
            }
            return false;
        };
        /**
         * create range
         * @return {WrappedRange}
         */
        Editor.prototype.createRange = function () {
            this.focus();
            return range.create(this.editable);
        };
        /**
         * saveRange
         *
         * save current range
         *
         * @param {Boolean} [thenCollapse=false]
         */
        Editor.prototype.saveRange = function (thenCollapse) {
            this.lastRange = this.createRange();
            if (thenCollapse) {
                this.lastRange.collapse().select();
            }
        };
        /**
         * restoreRange
         *
         * restore lately range
         */
        Editor.prototype.restoreRange = function () {
            if (this.lastRange) {
                this.lastRange.select();
                this.focus();
            }
        };
        Editor.prototype.saveTarget = function (node) {
            this.$editable.data('target', node);
        };
        Editor.prototype.clearTarget = function () {
            this.$editable.removeData('target');
        };
        Editor.prototype.restoreTarget = function () {
            return this.$editable.data('target');
        };
        /**
         * currentStyle
         *
         * current style
         * @return {Object|Boolean} unfocus
         */
        Editor.prototype.currentStyle = function () {
            var rng = range.create();
            if (rng) {
                rng = rng.normalize();
            }
            return rng ? this.style.current(rng) : this.style.fromNode(this.$editable);
        };
        /**
         * style from node
         *
         * @param {jQuery} $node
         * @return {Object}
         */
        Editor.prototype.styleFromNode = function ($node) {
            return this.style.fromNode($node);
        };
        /**
         * undo
         */
        Editor.prototype.undo = function () {
            this.context.triggerEvent('before.command', this.$editable.html());
            this.history.undo();
            this.context.triggerEvent('change', this.$editable.html());
        };
        /**
         * redo
         */
        Editor.prototype.redo = function () {
            this.context.triggerEvent('before.command', this.$editable.html());
            this.history.redo();
            this.context.triggerEvent('change', this.$editable.html());
        };
        /**
         * before command
         */
        Editor.prototype.beforeCommand = function () {
            this.context.triggerEvent('before.command', this.$editable.html());
            // keep focus on editable before command execution
            this.focus();
        };
        /**
         * after command
         * @param {Boolean} isPreventTrigger
         */
        Editor.prototype.afterCommand = function (isPreventTrigger) {
            this.normalizeContent();
            this.history.recordUndo();
            if (!isPreventTrigger) {
                this.context.triggerEvent('change', this.$editable.html());
            }
        };
        /**
         * handle tab key
         */
        Editor.prototype.tab = function () {
            var rng = this.createRange();
            if (rng.isCollapsed() && rng.isOnCell()) {
                this.table.tab(rng);
            }
            else {
                if (this.options.tabSize === 0) {
                    return false;
                }
                if (!this.isLimited(this.options.tabSize)) {
                    this.beforeCommand();
                    this.typing.insertTab(rng, this.options.tabSize);
                    this.afterCommand();
                }
            }
        };
        /**
         * handle shift+tab key
         */
        Editor.prototype.untab = function () {
            var rng = this.createRange();
            if (rng.isCollapsed() && rng.isOnCell()) {
                this.table.tab(rng, true);
            }
            else {
                if (this.options.tabSize === 0) {
                    return false;
                }
            }
        };
        /**
         * run given function between beforeCommand and afterCommand
         */
        Editor.prototype.wrapCommand = function (fn) {
            var _this = this;
            return function () {
                _this.beforeCommand();
                fn.apply(_this, arguments);
                _this.afterCommand();
            };
        };
        /**
         * insert image
         *
         * @param {String} src
         * @param {String|Function} param
         * @return {Promise}
         */
        Editor.prototype.insertImage = function (src, param) {
            var _this = this;
            return createImage(src, param).then(function ($image) {
                _this.beforeCommand();
                if (typeof param === 'function') {
                    param($image);
                }
                else {
                    if (typeof param === 'string') {
                        $image.attr('data-filename', param);
                    }
                    $image.css('width', Math.min(_this.$editable.width(), $image.width()));
                }
                $image.show();
                range.create(_this.editable).insertNode($image[0]);
                range.createFromNodeAfter($image[0]).select();
                _this.afterCommand();
            }).fail(function (e) {
                _this.context.triggerEvent('image.upload.error', e);
            });
        };
        /**
         * insertImages
         * @param {File[]} files
         */
        Editor.prototype.insertImages = function (files) {
            var _this = this;
            $$1.each(files, function (idx, file) {
                var filename = file.name;
                if (_this.options.maximumImageFileSize && _this.options.maximumImageFileSize < file.size) {
                    _this.context.triggerEvent('image.upload.error', _this.lang.image.maximumFileSizeError);
                }
                else {
                    readFileAsDataURL(file).then(function (dataURL) {
                        return _this.insertImage(dataURL, filename);
                    }).fail(function () {
                        _this.context.triggerEvent('image.upload.error');
                    });
                }
            });
        };
        /**
         * insertImagesOrCallback
         * @param {File[]} files
         */
        Editor.prototype.insertImagesOrCallback = function (files) {
            var callbacks = this.options.callbacks;
            // If onImageUpload this.options setted
            if (callbacks.onImageUpload) {
                this.context.triggerEvent('image.upload', files);
                // else insert Image as dataURL
            }
            else {
                this.insertImages(files);
            }
        };
        /**
         * return selected plain text
         * @return {String} text
         */
        Editor.prototype.getSelectedText = function () {
            var rng = this.createRange();
            // if range on anchor, expand range with anchor
            if (rng.isOnAnchor()) {
                rng = range.createFromNode(dom.ancestor(rng.sc, dom.isAnchor));
            }
            return rng.toString();
        };
        Editor.prototype.onFormatBlock = function (tagName, $target) {
            // [workaround] for MSIE, IE need `<`
            tagName = env.isMSIE ? '<' + tagName + '>' : tagName;
            document.execCommand('FormatBlock', false, tagName);
            // support custom class
            if ($target && $target.length) {
                var className = $target[0].className || '';
                if (className) {
                    var currentRange = this.createRange();
                    var $parent = $$1([currentRange.sc, currentRange.ec]).closest(tagName);
                    $parent.addClass(className);
                }
            }
        };
        Editor.prototype.formatPara = function () {
            this.formatBlock('P');
        };
        Editor.prototype.fontStyling = function (target, value) {
            var rng = this.createRange();
            if (rng) {
                var spans = this.style.styleNodes(rng);
                $$1(spans).css(target, value);
                // [workaround] added styled bogus span for style
                //  - also bogus character needed for cursor position
                if (rng.isCollapsed()) {
                    var firstSpan = lists.head(spans);
                    if (firstSpan && !dom.nodeLength(firstSpan)) {
                        firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;
                        range.createFromNodeAfter(firstSpan.firstChild).select();
                        this.$editable.data(KEY_BOGUS, firstSpan);
                    }
                }
            }
        };
        /**
         * unlink
         *
         * @type command
         */
        Editor.prototype.unlink = function () {
            var rng = this.createRange();
            if (rng.isOnAnchor()) {
                var anchor = dom.ancestor(rng.sc, dom.isAnchor);
                rng = range.createFromNode(anchor);
                rng.select();
                this.beforeCommand();
                document.execCommand('unlink');
                this.afterCommand();
            }
        };
        /**
         * returns link info
         *
         * @return {Object}
         * @return {WrappedRange} return.range
         * @return {String} return.text
         * @return {Boolean} [return.isNewWindow=true]
         * @return {String} [return.url=""]
         */
        Editor.prototype.getLinkInfo = function () {
            var rng = this.createRange().expand(dom.isAnchor);
            // Get the first anchor on range(for edit).
            var $anchor = $$1(lists.head(rng.nodes(dom.isAnchor)));
            var linkInfo = {
                range: rng,
                text: rng.toString(),
                url: $anchor.length ? $anchor.attr('href') : ''
            };
            // Define isNewWindow when anchor exists.
            if ($anchor.length) {
                linkInfo.isNewWindow = $anchor.attr('target') === '_blank';
            }
            return linkInfo;
        };
        Editor.prototype.addRow = function (position) {
            var rng = this.createRange(this.$editable);
            if (rng.isCollapsed() && rng.isOnCell()) {
                this.beforeCommand();
                this.table.addRow(rng, position);
                this.afterCommand();
            }
        };
        Editor.prototype.addCol = function (position) {
            var rng = this.createRange(this.$editable);
            if (rng.isCollapsed() && rng.isOnCell()) {
                this.beforeCommand();
                this.table.addCol(rng, position);
                this.afterCommand();
            }
        };
        Editor.prototype.deleteRow = function () {
            var rng = this.createRange(this.$editable);
            if (rng.isCollapsed() && rng.isOnCell()) {
                this.beforeCommand();
                this.table.deleteRow(rng);
                this.afterCommand();
            }
        };
        Editor.prototype.deleteCol = function () {
            var rng = this.createRange(this.$editable);
            if (rng.isCollapsed() && rng.isOnCell()) {
                this.beforeCommand();
                this.table.deleteCol(rng);
                this.afterCommand();
            }
        };
        Editor.prototype.deleteTable = function () {
            var rng = this.createRange(this.$editable);
            if (rng.isCollapsed() && rng.isOnCell()) {
                this.beforeCommand();
                this.table.deleteTable(rng);
                this.afterCommand();
            }
        };
        /**
         * @param {Position} pos
         * @param {jQuery} $target - target element
         * @param {Boolean} [bKeepRatio] - keep ratio
         */
        Editor.prototype.resizeTo = function (pos, $target, bKeepRatio) {
            var imageSize;
            if (bKeepRatio) {
                var newRatio = pos.y / pos.x;
                var ratio = $target.data('ratio');
                imageSize = {
                    width: ratio > newRatio ? pos.x : pos.y / ratio,
                    height: ratio > newRatio ? pos.x * ratio : pos.y
                };
            }
            else {
                imageSize = {
                    width: pos.x,
                    height: pos.y
                };
            }
            $target.css(imageSize);
        };
        /**
         * returns whether editable area has focus or not.
         */
        Editor.prototype.hasFocus = function () {
            return this.$editable.is(':focus');
        };
        /**
         * set focus
         */
        Editor.prototype.focus = function () {
            // [workaround] Screen will move when page is scolled in IE.
            //  - do focus when not focused
            if (!this.hasFocus()) {
                this.$editable.focus();
            }
        };
        /**
         * returns whether contents is empty or not.
         * @return {Boolean}
         */
        Editor.prototype.isEmpty = function () {
            return dom.isEmpty(this.$editable[0]) || dom.emptyPara === this.$editable.html();
        };
        /**
         * Removes all contents and restores the editable instance to an _emptyPara_.
         */
        Editor.prototype.empty = function () {
            this.context.invoke('code', dom.emptyPara);
        };
        /**
         * normalize content
         */
        Editor.prototype.normalizeContent = function () {
            this.$editable[0].normalize();
        };
        return Editor;
    }());
    
    var Clipboard = /** @class */ (function () {
        function Clipboard(context) {
            this.context = context;
            this.$editable = context.layoutInfo.editable;
        }
        Clipboard.prototype.initialize = function () {
            this.$editable.on('paste', this.pasteByEvent.bind(this));
        };
        /**
         * paste by clipboard event
         *
         * @param {Event} event
         */
        Clipboard.prototype.pasteByEvent = function (event) {
            var clipboardData = event.originalEvent.clipboardData;
            if (clipboardData && clipboardData.items && clipboardData.items.length) {
                var item = lists.head(clipboardData.items);
                if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {
                    this.context.invoke('editor.insertImagesOrCallback', [item.getAsFile()]);
                }
                this.context.invoke('editor.afterCommand');
            }
        };
        return Clipboard;
    }());
    
    var Dropzone = /** @class */ (function () {
        function Dropzone(context) {
            this.context = context;
            this.$eventListener = $$1(document);
            this.$editor = context.layoutInfo.editor;
            this.$editable = context.layoutInfo.editable;
            this.options = context.options;
            this.lang = this.options.langInfo;
            this.documentEventHandlers = {};
            this.$dropzone = $$1([
                '<div class="note-dropzone">',
                '  <div class="note-dropzone-message"/>',
                '</div>'
            ].join('')).prependTo(this.$editor);
        }
        /**
         * attach Drag and Drop Events
         */
        Dropzone.prototype.initialize = function () {
            if (this.options.disableDragAndDrop) {
                // prevent default drop event
                this.documentEventHandlers.onDrop = function (e) {
                    e.preventDefault();
                };
                // do not consider outside of dropzone
                this.$eventListener = this.$dropzone;
                this.$eventListener.on('drop', this.documentEventHandlers.onDrop);
            }
            else {
                this.attachDragAndDropEvent();
            }
        };
        /**
         * attach Drag and Drop Events
         */
        Dropzone.prototype.attachDragAndDropEvent = function () {
            var _this = this;
            var collection = $$1();
            var $dropzoneMessage = this.$dropzone.find('.note-dropzone-message');
            this.documentEventHandlers.onDragenter = function (e) {
                var isCodeview = _this.context.invoke('codeview.isActivated');
                var hasEditorSize = _this.$editor.width() > 0 && _this.$editor.height() > 0;
                if (!isCodeview && !collection.length && hasEditorSize) {
                    _this.$editor.addClass('dragover');
                    _this.$dropzone.width(_this.$editor.width());
                    _this.$dropzone.height(_this.$editor.height());
                    $dropzoneMessage.text(_this.lang.image.dragImageHere);
                }
                collection = collection.add(e.target);
            };
            this.documentEventHandlers.onDragleave = function (e) {
                collection = collection.not(e.target);
                if (!collection.length) {
                    _this.$editor.removeClass('dragover');
                }
            };
            this.documentEventHandlers.onDrop = function () {
                collection = $$1();
                _this.$editor.removeClass('dragover');
            };
            // show dropzone on dragenter when dragging a object to document
            // -but only if the editor is visible, i.e. has a positive width and height
            this.$eventListener.on('dragenter', this.documentEventHandlers.onDragenter)
                .on('dragleave', this.documentEventHandlers.onDragleave)
                .on('drop', this.documentEventHandlers.onDrop);
            // change dropzone's message on hover.
            this.$dropzone.on('dragenter', function () {
                _this.$dropzone.addClass('hover');
                $dropzoneMessage.text(_this.lang.image.dropImage);
            }).on('dragleave', function () {
                _this.$dropzone.removeClass('hover');
                $dropzoneMessage.text(_this.lang.image.dragImageHere);
            });
            // attach dropImage
            this.$dropzone.on('drop', function (event) {
                var dataTransfer = event.originalEvent.dataTransfer;
                // stop the browser from opening the dropped content
                event.preventDefault();
                if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
                    _this.$editable.focus();
                    _this.context.invoke('editor.insertImagesOrCallback', dataTransfer.files);
                }
                else {
                    $$1.each(dataTransfer.types, function (idx, type) {
                        var content = dataTransfer.getData(type);
                        if (type.toLowerCase().indexOf('text') > -1) {
                            _this.context.invoke('editor.pasteHTML', content);
                        }
                        else {
                            $$1(content).each(function (idx, item) {
                                _this.context.invoke('editor.insertNode', item);
                            });
                        }
                    });
                }
            }).on('dragover', false); // prevent default dragover event
        };
        Dropzone.prototype.destroy = function () {
            var _this = this;
            Object.keys(this.documentEventHandlers).forEach(function (key) {
                _this.$eventListener.off(key.substr(2).toLowerCase(), _this.documentEventHandlers[key]);
            });
            this.documentEventHandlers = {};
        };
        return Dropzone;
    }());
    
    var CodeMirror;
    if (env.hasCodeMirror) {
        if (env.isSupportAmd) {
            require(['codemirror'], function (cm) {
                CodeMirror = cm;
            });
        }
        else {
            CodeMirror = window.CodeMirror;
        }
    }
    /**
     * @class Codeview
     */
    var CodeView = /** @class */ (function () {
        function CodeView(context) {
            this.context = context;
            this.$editor = context.layoutInfo.editor;
            this.$editable = context.layoutInfo.editable;
            this.$codable = context.layoutInfo.codable;
            this.options = context.options;
        }
        CodeView.prototype.sync = function () {
            var isCodeview = this.isActivated();
            if (isCodeview && env.hasCodeMirror) {
                this.$codable.data('cmEditor').save();
            }
        };
        /**
         * @return {Boolean}
         */
        CodeView.prototype.isActivated = function () {
            return this.$editor.hasClass('codeview');
        };
        /**
         * toggle codeview
         */
        CodeView.prototype.toggle = function () {
            if (this.isActivated()) {
                this.deactivate();
            }
            else {
                this.activate();
            }
            this.context.triggerEvent('codeview.toggled');
        };
        /**
         * activate code view
         */
        CodeView.prototype.activate = function () {
            var _this = this;
            this.$codable.val(dom.html(this.$editable, this.options.prettifyHtml));
            this.$codable.height(this.$editable.height());
            this.context.invoke('toolbar.updateCodeview', true);
            this.$editor.addClass('codeview');
            this.$codable.focus();
            // activate CodeMirror as codable
            if (env.hasCodeMirror) {
                var cmEditor_1 = CodeMirror.fromTextArea(this.$codable[0], this.options.codemirror);
                // CodeMirror TernServer
                if (this.options.codemirror.tern) {
                    var server_1 = new CodeMirror.TernServer(this.options.codemirror.tern);
                    cmEditor_1.ternServer = server_1;
                    cmEditor_1.on('cursorActivity', function (cm) {
                        server_1.updateArgHints(cm);
                    });
                }
                cmEditor_1.on('blur', function (event) {
                    _this.context.triggerEvent('blur.codeview', cmEditor_1.getValue(), event);
                });
                // CodeMirror hasn't Padding.
                cmEditor_1.setSize(null, this.$editable.outerHeight());
                this.$codable.data('cmEditor', cmEditor_1);
            }
            else {
                this.$codable.on('blur', function (event) {
                    _this.context.triggerEvent('blur.codeview', _this.$codable.val(), event);
                });
            }
        };
        /**
         * deactivate code view
         */
        CodeView.prototype.deactivate = function () {
            // deactivate CodeMirror as codable
            if (env.hasCodeMirror) {
                var cmEditor = this.$codable.data('cmEditor');
                this.$codable.val(cmEditor.getValue());
                cmEditor.toTextArea();
            }
            var value = dom.value(this.$codable, this.options.prettifyHtml) || dom.emptyPara;
            var isChange = this.$editable.html() !== value;
            this.$editable.html(value);
            this.$editable.height(this.options.height ? this.$codable.height() : 'auto');
            this.$editor.removeClass('codeview');
            if (isChange) {
                this.context.triggerEvent('change', this.$editable.html(), this.$editable);
            }
            this.$editable.focus();
            this.context.invoke('toolbar.updateCodeview', false);
        };
        CodeView.prototype.destroy = function () {
            if (this.isActivated()) {
                this.deactivate();
            }
        };
        return CodeView;
    }());
    
    var EDITABLE_PADDING = 24;
    var Statusbar = /** @class */ (function () {
        function Statusbar(context) {
            this.$document = $$1(document);
            this.$statusbar = context.layoutInfo.statusbar;
            this.$editable = context.layoutInfo.editable;
            this.options = context.options;
        }
        Statusbar.prototype.initialize = function () {
            var _this = this;
            if (this.options.airMode || this.options.disableResizeEditor) {
                this.destroy();
                return;
            }
            this.$statusbar.on('mousedown', function (event) {
                event.preventDefault();
                event.stopPropagation();
                var editableTop = _this.$editable.offset().top - _this.$document.scrollTop();
                var onMouseMove = function (event) {
                    var height = event.clientY - (editableTop + EDITABLE_PADDING);
                    height = (_this.options.minheight > 0) ? Math.max(height, _this.options.minheight) : height;
                    height = (_this.options.maxHeight > 0) ? Math.min(height, _this.options.maxHeight) : height;
                    _this.$editable.height(height);
                };
                _this.$document.on('mousemove', onMouseMove).one('mouseup', function () {
                    _this.$document.off('mousemove', onMouseMove);
                });
            });
        };
        Statusbar.prototype.destroy = function () {
            this.$statusbar.off();
            this.$statusbar.addClass('locked');
        };
        return Statusbar;
    }());
    
    var Fullscreen = /** @class */ (function () {
        function Fullscreen(context) {
            var _this = this;
            this.context = context;
            this.$editor = context.layoutInfo.editor;
            this.$toolbar = context.layoutInfo.toolbar;
            this.$editable = context.layoutInfo.editable;
            this.$codable = context.layoutInfo.codable;
            this.$window = $$1(window);
            this.$scrollbar = $$1('html, body');
            this.onResize = function () {
                _this.resizeTo({
                    h: _this.$window.height() - _this.$toolbar.outerHeight()
                });
            };
        }
        Fullscreen.prototype.resizeTo = function (size) {
            this.$editable.css('height', size.h);
            this.$codable.css('height', size.h);
            if (this.$codable.data('cmeditor')) {
                this.$codable.data('cmeditor').setsize(null, size.h);
            }
        };
        /**
         * toggle fullscreen
         */
        Fullscreen.prototype.toggle = function () {
            this.$editor.toggleClass('fullscreen');
            if (this.isFullscreen()) {
                this.$editable.data('orgHeight', this.$editable.css('height'));
                this.$window.on('resize', this.onResize).trigger('resize');
                this.$scrollbar.css('overflow', 'hidden');
            }
            else {
                this.$window.off('resize', this.onResize);
                this.resizeTo({ h: this.$editable.data('orgHeight') });
                this.$scrollbar.css('overflow', 'visible');
            }
            this.context.invoke('toolbar.updateFullscreen', this.isFullscreen());
        };
        Fullscreen.prototype.isFullscreen = function () {
            return this.$editor.hasClass('fullscreen');
        };
        return Fullscreen;
    }());
    
    var Handle = /** @class */ (function () {
        function Handle(context) {
            var _this = this;
            this.context = context;
            this.$document = $$1(document);
            this.$editingArea = context.layoutInfo.editingArea;
            this.options = context.options;
            this.lang = this.options.langInfo;
            this.events = {
                'summernote.mousedown': function (we, e) {
                    if (_this.update(e.target)) {
                        e.preventDefault();
                    }
                },
                'summernote.keyup summernote.scroll summernote.change summernote.dialog.shown': function () {
                    _this.update();
                },
                'summernote.disable': function () {
                    _this.hide();
                },
                'summernote.codeview.toggled': function () {
                    _this.update();
                }
            };
        }
        Handle.prototype.initialize = function () {
            var _this = this;
            this.$handle = $$1([
                '<div class="note-handle">',
                '<div class="note-control-selection">',
                '<div class="note-control-selection-bg"></div>',
                '<div class="note-control-holder note-control-nw"></div>',
                '<div class="note-control-holder note-control-ne"></div>',
                '<div class="note-control-holder note-control-sw"></div>',
                '<div class="',
                (this.options.disableResizeImage ? 'note-control-holder' : 'note-control-sizing'),
                ' note-control-se"></div>',
                (this.options.disableResizeImage ? '' : '<div class="note-control-selection-info"></div>'),
                '</div>',
                '</div>'
            ].join('')).prependTo(this.$editingArea);
            this.$handle.on('mousedown', function (event) {
                if (dom.isControlSizing(event.target)) {
                    event.preventDefault();
                    event.stopPropagation();
                    var $target_1 = _this.$handle.find('.note-control-selection').data('target');
                    var posStart_1 = $target_1.offset();
                    var scrollTop_1 = _this.$document.scrollTop();
                    var onMouseMove_1 = function (event) {
                        _this.context.invoke('editor.resizeTo', {
                            x: event.clientX - posStart_1.left,
                            y: event.clientY - (posStart_1.top - scrollTop_1)
                        }, $target_1, !event.shiftKey);
                        _this.update($target_1[0]);
                    };
                    _this.$document
                        .on('mousemove', onMouseMove_1)
                        .one('mouseup', function (e) {
                        e.preventDefault();
                        _this.$document.off('mousemove', onMouseMove_1);
                        _this.context.invoke('editor.afterCommand');
                    });
                    if (!$target_1.data('ratio')) {
                        $target_1.data('ratio', $target_1.height() / $target_1.width());
                    }
                }
            });
            // Listen for scrolling on the handle overlay.
            this.$handle.on('wheel', function (e) {
                e.preventDefault();
                _this.update();
            });
        };
        Handle.prototype.destroy = function () {
            this.$handle.remove();
        };
        Handle.prototype.update = function (target) {
            if (this.context.isDisabled()) {
                return false;
            }
            var isImage = dom.isImg(target);
            var $selection = this.$handle.find('.note-control-selection');
            this.context.invoke('imagePopover.update', target);
            if (isImage) {
                var $image = $$1(target);
                var position = $image.position();
                var pos = {
                    left: position.left + parseInt($image.css('marginLeft'), 10),
                    top: position.top + parseInt($image.css('marginTop'), 10)
                };
                // exclude margin
                var imageSize = {
                    w: $image.outerWidth(false),
                    h: $image.outerHeight(false)
                };
                $selection.css({
                    display: 'block',
                    left: pos.left,
                    top: pos.top,
                    width: imageSize.w,
                    height: imageSize.h
                }).data('target', $image); // save current image element.
                var origImageObj = new Image();
                origImageObj.src = $image.attr('src');
                var sizingText = imageSize.w + 'x' + imageSize.h + ' (' + this.lang.image.original + ': ' + origImageObj.width + 'x' + origImageObj.height + ')';
                $selection.find('.note-control-selection-info').text(sizingText);
                this.context.invoke('editor.saveTarget', target);
            }
            else {
                this.hide();
            }
            return isImage;
        };
        /**
         * hide
         *
         * @param {jQuery} $handle
         */
        Handle.prototype.hide = function () {
            this.context.invoke('editor.clearTarget');
            this.$handle.children().hide();
        };
        return Handle;
    }());
    
    var defaultScheme = 'http://';
    var linkPattern = /^([A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i;
    var AutoLink = /** @class */ (function () {
        function AutoLink(context) {
            var _this = this;
            this.context = context;
            this.events = {
                'summernote.keyup': function (we, e) {
                    if (!e.isDefaultPrevented()) {
                        _this.handleKeyup(e);
                    }
                },
                'summernote.keydown': function (we, e) {
                    _this.handleKeydown(e);
                }
            };
        }
        AutoLink.prototype.initialize = function () {
            this.lastWordRange = null;
        };
        AutoLink.prototype.destroy = function () {
            this.lastWordRange = null;
        };
        AutoLink.prototype.replace = function () {
            if (!this.lastWordRange) {
                return;
            }
            var keyword = this.lastWordRange.toString();
            var match = keyword.match(linkPattern);
            if (match && (match[1] || match[2])) {
                var link = match[1] ? keyword : defaultScheme + keyword;
                var node = $$1('<a />').html(keyword).attr('href', link)[0];
                this.lastWordRange.insertNode(node);
                this.lastWordRange = null;
                this.context.invoke('editor.focus');
            }
        };
        AutoLink.prototype.handleKeydown = function (e) {
            if (lists.contains([key.code.ENTER, key.code.SPACE], e.keyCode)) {
                var wordRange = this.context.invoke('editor.createRange').getWordRange();
                this.lastWordRange = wordRange;
            }
        };
        AutoLink.prototype.handleKeyup = function (e) {
            if (lists.contains([key.code.ENTER, key.code.SPACE], e.keyCode)) {
                this.replace();
            }
        };
        return AutoLink;
    }());
    
    /**
     * textarea auto sync.
     */
    var AutoSync = /** @class */ (function () {
        function AutoSync(context) {
            var _this = this;
            this.$note = context.layoutInfo.note;
            this.events = {
                'summernote.change': function () {
                    _this.$note.val(context.invoke('code'));
                }
            };
        }
        AutoSync.prototype.shouldInitialize = function () {
            return dom.isTextarea(this.$note[0]);
        };
        return AutoSync;
    }());
    
    var Placeholder = /** @class */ (function () {
        function Placeholder(context) {
            var _this = this;
            this.context = context;
            this.$editingArea = context.layoutInfo.editingArea;
            this.options = context.options;
            this.events = {
                'summernote.init summernote.change': function () {
                    _this.update();
                },
                'summernote.codeview.toggled': function () {
                    _this.update();
                }
            };
        }
        Placeholder.prototype.shouldInitialize = function () {
            return !!this.options.placeholder;
        };
        Placeholder.prototype.initialize = function () {
            var _this = this;
            this.$placeholder = $$1('<div class="note-placeholder">');
            this.$placeholder.on('click', function () {
                _this.context.invoke('focus');
            }).text(this.options.placeholder).prependTo(this.$editingArea);
            this.update();
        };
        Placeholder.prototype.destroy = function () {
            this.$placeholder.remove();
        };
        Placeholder.prototype.update = function () {
            var isShow = !this.context.invoke('codeview.isActivated') && this.context.invoke('editor.isEmpty');
            this.$placeholder.toggle(isShow);
        };
        return Placeholder;
    }());
    
    var Buttons = /** @class */ (function () {
        function Buttons(context) {
            this.ui = $$1.summernote.ui;
            this.context = context;
            this.$toolbar = context.layoutInfo.toolbar;
            this.options = context.options;
            this.lang = this.options.langInfo;
            this.invertedKeyMap = func.invertObject(this.options.keyMap[env.isMac ? 'mac' : 'pc']);
        }
        Buttons.prototype.representShortcut = function (editorMethod) {
            var shortcut = this.invertedKeyMap[editorMethod];
            if (!this.options.shortcuts || !shortcut) {
                return '';
            }
            if (env.isMac) {
                shortcut = shortcut.replace('CMD', '⌘').replace('SHIFT', '⇧');
            }
            shortcut = shortcut.replace('BACKSLASH', '\\')
                .replace('SLASH', '/')
                .replace('LEFTBRACKET', '[')
                .replace('RIGHTBRACKET', ']');
            return ' (' + shortcut + ')';
        };
        Buttons.prototype.button = function (o) {
            if (!this.options.tooltip && o.tooltip) {
                delete o.tooltip;
            }
            o.container = this.options.container;
            return this.ui.button(o);
        };
        Buttons.prototype.initialize = function () {
            this.addToolbarButtons();
            this.addImagePopoverButtons();
            this.addLinkPopoverButtons();
            this.addTablePopoverButtons();
            this.fontInstalledMap = {};
        };
        Buttons.prototype.destroy = function () {
            delete this.fontInstalledMap;
        };
        Buttons.prototype.isFontInstalled = function (name) {
            if (!this.fontInstalledMap.hasOwnProperty(name)) {
                this.fontInstalledMap[name] = env.isFontInstalled(name) ||
                    lists.contains(this.options.fontNamesIgnoreCheck, name);
            }
            return this.fontInstalledMap[name];
        };
        Buttons.prototype.isFontDeservedToAdd = function (name) {
            var genericFamilies = ['sans-serif', 'serif', 'monospace', 'cursive', 'fantasy'];
            name = name.toLowerCase();
            return ((name !== '') && this.isFontInstalled(name) && ($$1.inArray(name, genericFamilies) === -1));
        };
        Buttons.prototype.addToolbarButtons = function () {
            var _this = this;
            this.context.memo('button.style', function () {
                return _this.ui.buttonGroup([
                    _this.button({
                        className: 'dropdown-toggle',
                        contents: _this.ui.dropdownButtonContents(_this.ui.icon(_this.options.icons.magic), _this.options),
                        tooltip: _this.lang.style.style,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    _this.ui.dropdown({
                        className: 'dropdown-style',
                        items: _this.options.styleTags,
                        title: _this.lang.style.style,
                        template: function (item) {
                            if (typeof item === 'string') {
                                item = { tag: item, title: (_this.lang.style.hasOwnProperty(item) ? _this.lang.style[item] : item) };
                            }
                            var tag = item.tag;
                            var title = item.title;
                            var style = item.style ? ' style="' + item.style + '" ' : '';
                            var className = item.className ? ' class="' + item.className + '"' : '';
                            return '<' + tag + style + className + '>' + title + '</' + tag + '>';
                        },
                        click: _this.context.createInvokeHandler('editor.formatBlock')
                    })
                ]).render();
            });
            var _loop_1 = function (styleIdx, styleLen) {
                var item = this_1.options.styleTags[styleIdx];
                this_1.context.memo('button.style.' + item, function () {
                    return _this.button({
                        className: 'note-btn-style-' + item,
                        contents: '<div data-value="' + item + '">' + item.toUpperCase() + '</div>',
                        tooltip: _this.lang.style[item],
                        click: _this.context.createInvokeHandler('editor.formatBlock')
                    }).render();
                });
            };
            var this_1 = this;
            for (var styleIdx = 0, styleLen = this.options.styleTags.length; styleIdx < styleLen; styleIdx++) {
                _loop_1(styleIdx, styleLen);
            }
            this.context.memo('button.bold', function () {
                return _this.button({
                    className: 'note-btn-bold',
                    contents: _this.ui.icon(_this.options.icons.bold),
                    tooltip: _this.lang.font.bold + _this.representShortcut('bold'),
                    click: _this.context.createInvokeHandlerAndUpdateState('editor.bold')
                }).render();
            });
            this.context.memo('button.italic', function () {
                return _this.button({
                    className: 'note-btn-italic',
                    contents: _this.ui.icon(_this.options.icons.italic),
                    tooltip: _this.lang.font.italic + _this.representShortcut('italic'),
                    click: _this.context.createInvokeHandlerAndUpdateState('editor.italic')
                }).render();
            });
            this.context.memo('button.underline', function () {
                return _this.button({
                    className: 'note-btn-underline',
                    contents: _this.ui.icon(_this.options.icons.underline),
                    tooltip: _this.lang.font.underline + _this.representShortcut('underline'),
                    click: _this.context.createInvokeHandlerAndUpdateState('editor.underline')
                }).render();
            });
            this.context.memo('button.clear', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.eraser),
                    tooltip: _this.lang.font.clear + _this.representShortcut('removeFormat'),
                    click: _this.context.createInvokeHandler('editor.removeFormat')
                }).render();
            });
            this.context.memo('button.strikethrough', function () {
                return _this.button({
                    className: 'note-btn-strikethrough',
                    contents: _this.ui.icon(_this.options.icons.strikethrough),
                    tooltip: _this.lang.font.strikethrough + _this.representShortcut('strikethrough'),
                    click: _this.context.createInvokeHandlerAndUpdateState('editor.strikethrough')
                }).render();
            });
            this.context.memo('button.superscript', function () {
                return _this.button({
                    className: 'note-btn-superscript',
                    contents: _this.ui.icon(_this.options.icons.superscript),
                    tooltip: _this.lang.font.superscript,
                    click: _this.context.createInvokeHandlerAndUpdateState('editor.superscript')
                }).render();
            });
            this.context.memo('button.subscript', function () {
                return _this.button({
                    className: 'note-btn-subscript',
                    contents: _this.ui.icon(_this.options.icons.subscript),
                    tooltip: _this.lang.font.subscript,
                    click: _this.context.createInvokeHandlerAndUpdateState('editor.subscript')
                }).render();
            });
            this.context.memo('button.fontname', function () {
                var styleInfo = _this.context.invoke('editor.currentStyle');
                // Add 'default' fonts into the fontnames array if not exist
                $$1.each(styleInfo['font-family'].split(','), function (idx, fontname) {
                    fontname = fontname.trim().replace(/['"]+/g, '');
                    if (_this.isFontDeservedToAdd(fontname)) {
                        if ($$1.inArray(fontname, _this.options.fontNames) === -1) {
                            _this.options.fontNames.push(fontname);
                        }
                    }
                });
                return _this.ui.buttonGroup([
                    _this.button({
                        className: 'dropdown-toggle',
                        contents: _this.ui.dropdownButtonContents('<span class="note-current-fontname"/>', _this.options),
                        tooltip: _this.lang.font.name,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    _this.ui.dropdownCheck({
                        className: 'dropdown-fontname',
                        checkClassName: _this.options.icons.menuCheck,
                        items: _this.options.fontNames.filter(_this.isFontInstalled.bind(_this)),
                        title: _this.lang.font.name,
                        template: function (item) {
                            return '<span style="font-family: \'' + item + '\'">' + item + '</span>';
                        },
                        click: _this.context.createInvokeHandlerAndUpdateState('editor.fontName')
                    })
                ]).render();
            });
            this.context.memo('button.fontsize', function () {
                return _this.ui.buttonGroup([
                    _this.button({
                        className: 'dropdown-toggle',
                        contents: _this.ui.dropdownButtonContents('<span class="note-current-fontsize"/>', _this.options),
                        tooltip: _this.lang.font.size,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    _this.ui.dropdownCheck({
                        className: 'dropdown-fontsize',
                        checkClassName: _this.options.icons.menuCheck,
                        items: _this.options.fontSizes,
                        title: _this.lang.font.size,
                        click: _this.context.createInvokeHandlerAndUpdateState('editor.fontSize')
                    })
                ]).render();
            });
            this.context.memo('button.color', function () {
                return _this.ui.buttonGroup({
                    className: 'note-color',
                    children: [
                        _this.button({
                            className: 'note-current-color-button',
                            contents: _this.ui.icon(_this.options.icons.font + ' note-recent-color'),
                            tooltip: _this.lang.color.recent,
                            click: function (e) {
                                var $button = $$1(e.currentTarget);
                                _this.context.invoke('editor.color', {
                                    backColor: $button.attr('data-backColor'),
                                    foreColor: $button.attr('data-foreColor')
                                });
                            },
                            callback: function ($button) {
                                var $recentColor = $button.find('.note-recent-color');
                                $recentColor.css('background-color', '#FFFF00');
                                $button.attr('data-backColor', '#FFFF00');
                            }
                        }),
                        _this.button({
                            className: 'dropdown-toggle',
                            contents: _this.ui.dropdownButtonContents('', _this.options),
                            tooltip: _this.lang.color.more,
                            data: {
                                toggle: 'dropdown'
                            }
                        }),
                        _this.ui.dropdown({
                            items: [
                                '<div class="note-palette">',
                                '  <div class="note-palette-title">' + _this.lang.color.background + '</div>',
                                '  <div>',
                                '    <button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">',
                                _this.lang.color.transparent,
                                '    </button>',
                                '  </div>',
                                '  <div class="note-holder" data-event="backColor"/>',
                                '</div>',
                                '<div class="note-palette">',
                                '  <div class="note-palette-title">' + _this.lang.color.foreground + '</div>',
                                '  <div>',
                                '    <button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">',
                                _this.lang.color.resetToDefault,
                                '    </button>',
                                '  </div>',
                                '  <div class="note-holder" data-event="foreColor"/>',
                                '</div>'
                            ].join(''),
                            callback: function ($dropdown) {
                                $dropdown.find('.note-holder').each(function (idx, item) {
                                    var $holder = $$1(item);
                                    $holder.append(_this.ui.palette({
                                        colors: _this.options.colors,
                                        colorsName: _this.options.colorsName,
                                        eventName: $holder.data('event'),
                                        container: _this.options.container,
                                        tooltip: _this.options.tooltip
                                    }).render());
                                });
                            },
                            click: function (event) {
                                var $button = $$1(event.target);
                                var eventName = $button.data('event');
                                var value = $button.data('value');
                                if (eventName && value) {
                                    var key = eventName === 'backColor' ? 'background-color' : 'color';
                                    var $color = $button.closest('.note-color').find('.note-recent-color');
                                    var $currentButton = $button.closest('.note-color').find('.note-current-color-button');
                                    $color.css(key, value);
                                    $currentButton.attr('data-' + eventName, value);
                                    _this.context.invoke('editor.' + eventName, value);
                                }
                            }
                        })
                    ]
                }).render();
            });
            this.context.memo('button.ul', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.unorderedlist),
                    tooltip: _this.lang.lists.unordered + _this.representShortcut('insertUnorderedList'),
                    click: _this.context.createInvokeHandler('editor.insertUnorderedList')
                }).render();
            });
            this.context.memo('button.ol', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.orderedlist),
                    tooltip: _this.lang.lists.ordered + _this.representShortcut('insertOrderedList'),
                    click: _this.context.createInvokeHandler('editor.insertOrderedList')
                }).render();
            });
            var justifyLeft = this.button({
                contents: this.ui.icon(this.options.icons.alignLeft),
                tooltip: this.lang.paragraph.left + this.representShortcut('justifyLeft'),
                click: this.context.createInvokeHandler('editor.justifyLeft')
            });
            var justifyCenter = this.button({
                contents: this.ui.icon(this.options.icons.alignCenter),
                tooltip: this.lang.paragraph.center + this.representShortcut('justifyCenter'),
                click: this.context.createInvokeHandler('editor.justifyCenter')
            });
            var justifyRight = this.button({
                contents: this.ui.icon(this.options.icons.alignRight),
                tooltip: this.lang.paragraph.right + this.representShortcut('justifyRight'),
                click: this.context.createInvokeHandler('editor.justifyRight')
            });
            var justifyFull = this.button({
                contents: this.ui.icon(this.options.icons.alignJustify),
                tooltip: this.lang.paragraph.justify + this.representShortcut('justifyFull'),
                click: this.context.createInvokeHandler('editor.justifyFull')
            });
            var outdent = this.button({
                contents: this.ui.icon(this.options.icons.outdent),
                tooltip: this.lang.paragraph.outdent + this.representShortcut('outdent'),
                click: this.context.createInvokeHandler('editor.outdent')
            });
            var indent = this.button({
                contents: this.ui.icon(this.options.icons.indent),
                tooltip: this.lang.paragraph.indent + this.representShortcut('indent'),
                click: this.context.createInvokeHandler('editor.indent')
            });
            this.context.memo('button.justifyLeft', func.invoke(justifyLeft, 'render'));
            this.context.memo('button.justifyCenter', func.invoke(justifyCenter, 'render'));
            this.context.memo('button.justifyRight', func.invoke(justifyRight, 'render'));
            this.context.memo('button.justifyFull', func.invoke(justifyFull, 'render'));
            this.context.memo('button.outdent', func.invoke(outdent, 'render'));
            this.context.memo('button.indent', func.invoke(indent, 'render'));
            this.context.memo('button.paragraph', function () {
                return _this.ui.buttonGroup([
                    _this.button({
                        className: 'dropdown-toggle',
                        contents: _this.ui.dropdownButtonContents(_this.ui.icon(_this.options.icons.alignLeft), _this.options),
                        tooltip: _this.lang.paragraph.paragraph,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    _this.ui.dropdown([
                        _this.ui.buttonGroup({
                            className: 'note-align',
                            children: [justifyLeft, justifyCenter, justifyRight, justifyFull]
                        }),
                        _this.ui.buttonGroup({
                            className: 'note-list',
                            children: [outdent, indent]
                        })
                    ])
                ]).render();
            });
            this.context.memo('button.height', function () {
                return _this.ui.buttonGroup([
                    _this.button({
                        className: 'dropdown-toggle',
                        contents: _this.ui.dropdownButtonContents(_this.ui.icon(_this.options.icons.textHeight), _this.options),
                        tooltip: _this.lang.font.height,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    _this.ui.dropdownCheck({
                        items: _this.options.lineHeights,
                        checkClassName: _this.options.icons.menuCheck,
                        className: 'dropdown-line-height',
                        title: _this.lang.font.height,
                        click: _this.context.createInvokeHandler('editor.lineHeight')
                    })
                ]).render();
            });
            this.context.memo('button.table', function () {
                return _this.ui.buttonGroup([
                    _this.button({
                        className: 'dropdown-toggle',
                        contents: _this.ui.dropdownButtonContents(_this.ui.icon(_this.options.icons.table), _this.options),
                        tooltip: _this.lang.table.table,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    _this.ui.dropdown({
                        title: _this.lang.table.table,
                        className: 'note-table',
                        items: [
                            '<div class="note-dimension-picker">',
                            '  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>',
                            '  <div class="note-dimension-picker-highlighted"/>',
                            '  <div class="note-dimension-picker-unhighlighted"/>',
                            '</div>',
                            '<div class="note-dimension-display">1 x 1</div>'
                        ].join('')
                    })
                ], {
                    callback: function ($node) {
                        var $catcher = $node.find('.note-dimension-picker-mousecatcher');
                        $catcher.css({
                            width: _this.options.insertTableMaxSize.col + 'em',
                            height: _this.options.insertTableMaxSize.row + 'em'
                        }).mousedown(_this.context.createInvokeHandler('editor.insertTable'))
                            .on('mousemove', _this.tableMoveHandler.bind(_this));
                    }
                }).render();
            });
            this.context.memo('button.link', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.link),
                    tooltip: _this.lang.link.link + _this.representShortcut('linkDialog.show'),
                    click: _this.context.createInvokeHandler('linkDialog.show')
                }).render();
            });
            this.context.memo('button.picture', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.picture),
                    tooltip: _this.lang.image.image,
                    click: _this.context.createInvokeHandler('imageDialog.show')
                }).render();
            });
            this.context.memo('button.video', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.video),
                    tooltip: _this.lang.video.video,
                    click: _this.context.createInvokeHandler('videoDialog.show')
                }).render();
            });
            this.context.memo('button.hr', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.minus),
                    tooltip: _this.lang.hr.insert + _this.representShortcut('insertHorizontalRule'),
                    click: _this.context.createInvokeHandler('editor.insertHorizontalRule')
                }).render();
            });
            this.context.memo('button.fullscreen', function () {
                return _this.button({
                    className: 'btn-fullscreen',
                    contents: _this.ui.icon(_this.options.icons.arrowsAlt),
                    tooltip: _this.lang.options.fullscreen,
                    click: _this.context.createInvokeHandler('fullscreen.toggle')
                }).render();
            });
            this.context.memo('button.codeview', function () {
                return _this.button({
                    className: 'btn-codeview',
                    contents: _this.ui.icon(_this.options.icons.code),
                    tooltip: _this.lang.options.codeview,
                    click: _this.context.createInvokeHandler('codeview.toggle')
                }).render();
            });
            this.context.memo('button.redo', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.redo),
                    tooltip: _this.lang.history.redo + _this.representShortcut('redo'),
                    click: _this.context.createInvokeHandler('editor.redo')
                }).render();
            });
            this.context.memo('button.undo', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.undo),
                    tooltip: _this.lang.history.undo + _this.representShortcut('undo'),
                    click: _this.context.createInvokeHandler('editor.undo')
                }).render();
            });
            this.context.memo('button.help', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.question),
                    tooltip: _this.lang.options.help,
                    click: _this.context.createInvokeHandler('helpDialog.show')
                }).render();
            });
        };
        /**
         * image : [
         *   ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
         *   ['float', ['floatLeft', 'floatRight', 'floatNone' ]],
         *   ['remove', ['removeMedia']]
         * ],
         */
        Buttons.prototype.addImagePopoverButtons = function () {
            var _this = this;
            // Image Size Buttons
            this.context.memo('button.imageSize100', function () {
                return _this.button({
                    contents: '<span class="note-fontsize-10">100%</span>',
                    tooltip: _this.lang.image.resizeFull,
                    click: _this.context.createInvokeHandler('editor.resize', '1')
                }).render();
            });
            this.context.memo('button.imageSize50', function () {
                return _this.button({
                    contents: '<span class="note-fontsize-10">50%</span>',
                    tooltip: _this.lang.image.resizeHalf,
                    click: _this.context.createInvokeHandler('editor.resize', '0.5')
                }).render();
            });
            this.context.memo('button.imageSize25', function () {
                return _this.button({
                    contents: '<span class="note-fontsize-10">25%</span>',
                    tooltip: _this.lang.image.resizeQuarter,
                    click: _this.context.createInvokeHandler('editor.resize', '0.25')
                }).render();
            });
            // Float Buttons
            this.context.memo('button.floatLeft', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.alignLeft),
                    tooltip: _this.lang.image.floatLeft,
                    click: _this.context.createInvokeHandler('editor.floatMe', 'left')
                }).render();
            });
            this.context.memo('button.floatRight', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.alignRight),
                    tooltip: _this.lang.image.floatRight,
                    click: _this.context.createInvokeHandler('editor.floatMe', 'right')
                }).render();
            });
            this.context.memo('button.floatNone', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.alignJustify),
                    tooltip: _this.lang.image.floatNone,
                    click: _this.context.createInvokeHandler('editor.floatMe', 'none')
                }).render();
            });
            // Remove Buttons
            this.context.memo('button.removeMedia', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.trash),
                    tooltip: _this.lang.image.remove,
                    click: _this.context.createInvokeHandler('editor.removeMedia')
                }).render();
            });
        };
        Buttons.prototype.addLinkPopoverButtons = function () {
            var _this = this;
            this.context.memo('button.linkDialogShow', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.link),
                    tooltip: _this.lang.link.edit,
                    click: _this.context.createInvokeHandler('linkDialog.show')
                }).render();
            });
            this.context.memo('button.unlink', function () {
                return _this.button({
                    contents: _this.ui.icon(_this.options.icons.unlink),
                    tooltip: _this.lang.link.unlink,
                    click: _this.context.createInvokeHandler('editor.unlink')
                }).render();
            });
        };
        /**
         * table : [
         *  ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']],
         *  ['delete', ['deleteRow', 'deleteCol', 'deleteTable']]
         * ],
         */
        Buttons.prototype.addTablePopoverButtons = function () {
            var _this = this;
            this.context.memo('button.addRowUp', function () {
                return _this.button({
                    className: 'btn-md',
                    contents: _this.ui.icon(_this.options.icons.rowAbove),
                    tooltip: _this.lang.table.addRowAbove,
                    click: _this.context.createInvokeHandler('editor.addRow', 'top')
                }).render();
            });
            this.context.memo('button.addRowDown', function () {
                return _this.button({
                    className: 'btn-md',
                    contents: _this.ui.icon(_this.options.icons.rowBelow),
                    tooltip: _this.lang.table.addRowBelow,
                    click: _this.context.createInvokeHandler('editor.addRow', 'bottom')
                }).render();
            });
            this.context.memo('button.addColLeft', function () {
                return _this.button({
                    className: 'btn-md',
                    contents: _this.ui.icon(_this.options.icons.colBefore),
                    tooltip: _this.lang.table.addColLeft,
                    click: _this.context.createInvokeHandler('editor.addCol', 'left')
                }).render();
            });
            this.context.memo('button.addColRight', function () {
                return _this.button({
                    className: 'btn-md',
                    contents: _this.ui.icon(_this.options.icons.colAfter),
                    tooltip: _this.lang.table.addColRight,
                    click: _this.context.createInvokeHandler('editor.addCol', 'right')
                }).render();
            });
            this.context.memo('button.deleteRow', function () {
                return _this.button({
                    className: 'btn-md',
                    contents: _this.ui.icon(_this.options.icons.rowRemove),
                    tooltip: _this.lang.table.delRow,
                    click: _this.context.createInvokeHandler('editor.deleteRow')
                }).render();
            });
            this.context.memo('button.deleteCol', function () {
                return _this.button({
                    className: 'btn-md',
                    contents: _this.ui.icon(_this.options.icons.colRemove),
                    tooltip: _this.lang.table.delCol,
                    click: _this.context.createInvokeHandler('editor.deleteCol')
                }).render();
            });
            this.context.memo('button.deleteTable', function () {
                return _this.button({
                    className: 'btn-md',
                    contents: _this.ui.icon(_this.options.icons.trash),
                    tooltip: _this.lang.table.delTable,
                    click: _this.context.createInvokeHandler('editor.deleteTable')
                }).render();
            });
        };
        Buttons.prototype.build = function ($container, groups) {
            for (var groupIdx = 0, groupLen = groups.length; groupIdx < groupLen; groupIdx++) {
                var group = groups[groupIdx];
                var groupName = $$1.isArray(group) ? group[0] : group;
                var buttons = $$1.isArray(group) ? ((group.length === 1) ? [group[0]] : group[1]) : [group];
                var $group = this.ui.buttonGroup({
                    className: 'note-' + groupName
                }).render();
                for (var idx = 0, len = buttons.length; idx < len; idx++) {
                    var btn = this.context.memo('button.' + buttons[idx]);
                    if (btn) {
                        $group.append(typeof btn === 'function' ? btn(this.context) : btn);
                    }
                }
                $group.appendTo($container);
            }
        };
        /**
         * @param {jQuery} [$container]
         */
        Buttons.prototype.updateCurrentStyle = function ($container) {
            var _this = this;
            var $cont = $container || this.$toolbar;
            var styleInfo = this.context.invoke('editor.currentStyle');
            this.updateBtnStates($cont, {
                '.note-btn-bold': function () {
                    return styleInfo['font-bold'] === 'bold';
                },
                '.note-btn-italic': function () {
                    return styleInfo['font-italic'] === 'italic';
                },
                '.note-btn-underline': function () {
                    return styleInfo['font-underline'] === 'underline';
                },
                '.note-btn-subscript': function () {
                    return styleInfo['font-subscript'] === 'subscript';
                },
                '.note-btn-superscript': function () {
                    return styleInfo['font-superscript'] === 'superscript';
                },
                '.note-btn-strikethrough': function () {
                    return styleInfo['font-strikethrough'] === 'strikethrough';
                }
            });
            if (styleInfo['font-family']) {
                var fontNames = styleInfo['font-family'].split(',').map(function (name) {
                    return name.replace(/[\'\"]/g, '')
                        .replace(/\s+$/, '')
                        .replace(/^\s+/, '');
                });
                var fontName_1 = lists.find(fontNames, this.isFontInstalled.bind(this));
                $cont.find('.dropdown-fontname a').each(function (idx, item) {
                    var $item = $$1(item);
                    // always compare string to avoid creating another func.
                    var isChecked = ($item.data('value') + '') === (fontName_1 + '');
                    $item.toggleClass('checked', isChecked);
                });
                $cont.find('.note-current-fontname').text(fontName_1).css('font-family', fontName_1);
            }
            if (styleInfo['font-size']) {
                var fontSize_1 = styleInfo['font-size'];
                $cont.find('.dropdown-fontsize a').each(function (idx, item) {
                    var $item = $$1(item);
                    // always compare with string to avoid creating another func.
                    var isChecked = ($item.data('value') + '') === (fontSize_1 + '');
                    $item.toggleClass('checked', isChecked);
                });
                $cont.find('.note-current-fontsize').text(fontSize_1);
            }
            if (styleInfo['line-height']) {
                var lineHeight_1 = styleInfo['line-height'];
                $cont.find('.dropdown-line-height li a').each(function (idx, item) {
                    // always compare with string to avoid creating another func.
                    var isChecked = ($$1(item).data('value') + '') === (lineHeight_1 + '');
                    _this.className = isChecked ? 'checked' : '';
                });
            }
        };
        Buttons.prototype.updateBtnStates = function ($container, infos) {
            var _this = this;
            $$1.each(infos, function (selector, pred) {
                _this.ui.toggleBtnActive($container.find(selector), pred());
            });
        };
        Buttons.prototype.tableMoveHandler = function (event) {
            var PX_PER_EM = 18;
            var $picker = $$1(event.target.parentNode); // target is mousecatcher
            var $dimensionDisplay = $picker.next();
            var $catcher = $picker.find('.note-dimension-picker-mousecatcher');
            var $highlighted = $picker.find('.note-dimension-picker-highlighted');
            var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');
            var posOffset;
            // HTML5 with jQuery - e.offsetX is undefined in Firefox
            if (event.offsetX === undefined) {
                var posCatcher = $$1(event.target).offset();
                posOffset = {
                    x: event.pageX - posCatcher.left,
                    y: event.pageY - posCatcher.top
                };
            }
            else {
                posOffset = {
                    x: event.offsetX,
                    y: event.offsetY
                };
            }
            var dim = {
                c: Math.ceil(posOffset.x / PX_PER_EM) || 1,
                r: Math.ceil(posOffset.y / PX_PER_EM) || 1
            };
            $highlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });
            $catcher.data('value', dim.c + 'x' + dim.r);
            if (dim.c > 3 && dim.c < this.options.insertTableMaxSize.col) {
                $unhighlighted.css({ width: dim.c + 1 + 'em' });
            }
            if (dim.r > 3 && dim.r < this.options.insertTableMaxSize.row) {
                $unhighlighted.css({ height: dim.r + 1 + 'em' });
            }
            $dimensionDisplay.html(dim.c + ' x ' + dim.r);
        };
        return Buttons;
    }());
    
    var Toolbar = /** @class */ (function () {
        function Toolbar(context) {
            this.context = context;
            this.$window = $$1(window);
            this.$document = $$1(document);
            this.ui = $$1.summernote.ui;
            this.$note = context.layoutInfo.note;
            this.$editor = context.layoutInfo.editor;
            this.$toolbar = context.layoutInfo.toolbar;
            this.options = context.options;
            this.followScroll = this.followScroll.bind(this);
        }
        Toolbar.prototype.shouldInitialize = function () {
            return !this.options.airMode;
        };
        Toolbar.prototype.initialize = function () {
            var _this = this;
            this.options.toolbar = this.options.toolbar || [];
            if (!this.options.toolbar.length) {
                this.$toolbar.hide();
            }
            else {
                this.context.invoke('buttons.build', this.$toolbar, this.options.toolbar);
            }
            if (this.options.toolbarContainer) {
                this.$toolbar.appendTo(this.options.toolbarContainer);
            }
            this.changeContainer(false);
            this.$note.on('summernote.keyup summernote.mouseup summernote.change', function () {
                _this.context.invoke('buttons.updateCurrentStyle');
            });
            this.context.invoke('buttons.updateCurrentStyle');
            if (this.options.followingToolbar) {
                this.$window.on('scroll resize', this.followScroll);
            }
        };
        Toolbar.prototype.destroy = function () {
            this.$toolbar.children().remove();
            if (this.options.followingToolbar) {
                this.$window.off('scroll resize', this.followScroll);
            }
        };
        Toolbar.prototype.followScroll = function () {
            if (this.$editor.hasClass('fullscreen')) {
                return false;
            }
            var $toolbarWrapper = this.$toolbar.parent('.note-toolbar-wrapper');
            var editorHeight = this.$editor.outerHeight();
            var editorWidth = this.$editor.width();
            var toolbarHeight = this.$toolbar.height();
            $toolbarWrapper.css({
                height: toolbarHeight
            });
            // check if the web app is currently using another static bar
            var otherBarHeight = 0;
            if (this.options.otherStaticBar) {
                otherBarHeight = $$1(this.options.otherStaticBar).outerHeight();
            }
            var currentOffset = this.$document.scrollTop();
            var editorOffsetTop = this.$editor.offset().top;
            var editorOffsetBottom = editorOffsetTop + editorHeight;
            var activateOffset = editorOffsetTop - otherBarHeight;
            var deactivateOffsetBottom = editorOffsetBottom - otherBarHeight - toolbarHeight;
            if ((currentOffset > activateOffset) && (currentOffset < deactivateOffsetBottom)) {
                this.$toolbar.css({
                    position: 'fixed',
                    top: otherBarHeight,
                    width: editorWidth
                });
            }
            else {
                this.$toolbar.css({
                    position: 'relative',
                    top: 0,
                    width: '100%'
                });
            }
        };
        Toolbar.prototype.changeContainer = function (isFullscreen) {
            if (isFullscreen) {
                this.$toolbar.prependTo(this.$editor);
            }
            else {
                if (this.options.toolbarContainer) {
                    this.$toolbar.appendTo(this.options.toolbarContainer);
                }
            }
        };
        Toolbar.prototype.updateFullscreen = function (isFullscreen) {
            this.ui.toggleBtnActive(this.$toolbar.find('.btn-fullscreen'), isFullscreen);
            this.changeContainer(isFullscreen);
        };
        Toolbar.prototype.updateCodeview = function (isCodeview) {
            this.ui.toggleBtnActive(this.$toolbar.find('.btn-codeview'), isCodeview);
            if (isCodeview) {
                this.deactivate();
            }
            else {
                this.activate();
            }
        };
        Toolbar.prototype.activate = function (isIncludeCodeview) {
            var $btn = this.$toolbar.find('button');
            if (!isIncludeCodeview) {
                $btn = $btn.not('.btn-codeview');
            }
            this.ui.toggleBtn($btn, true);
        };
        Toolbar.prototype.deactivate = function (isIncludeCodeview) {
            var $btn = this.$toolbar.find('button');
            if (!isIncludeCodeview) {
                $btn = $btn.not('.btn-codeview');
            }
            this.ui.toggleBtn($btn, false);
        };
        return Toolbar;
    }());
    
    var LinkDialog = /** @class */ (function () {
        function LinkDialog(context) {
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.$body = $$1(document.body);
            this.$editor = context.layoutInfo.editor;
            this.options = context.options;
            this.lang = this.options.langInfo;
            context.memo('help.linkDialog.show', this.options.langInfo.help['linkDialog.show']);
        }
        LinkDialog.prototype.initialize = function () {
            var $container = this.options.dialogsInBody ? this.$body : this.$editor;
            var body = [
                '<div class="form-group note-form-group">',
                "<label class=\"note-form-label\">" + this.lang.link.textToDisplay + "</label>",
                '<input class="note-link-text form-control note-form-control  note-input" type="text" />',
                '</div>',
                '<div class="form-group note-form-group">',
                "<label class=\"note-form-label\">" + this.lang.link.url + "</label>",
                '<input class="note-link-url form-control note-form-control note-input" type="text" value="http://" />',
                '</div>',
                !this.options.disableLinkTarget
                    ? $$1('<div/>').append(this.ui.checkbox({
                        id: 'sn-checkbox-open-in-new-window',
                        text: this.lang.link.openInNewWindow,
                        checked: true
                    }).render()).html()
                    : ''
            ].join('');
            var buttonClass = 'btn btn-primary note-btn note-btn-primary note-link-btn';
            var footer = "<button type=\"submit\" href=\"#\" class=\"" + buttonClass + "\" disabled>" + this.lang.link.insert + "</button>";
            this.$dialog = this.ui.dialog({
                className: 'link-dialog',
                title: this.lang.link.insert,
                fade: this.options.dialogsFade,
                body: body,
                footer: footer
            }).render().appendTo($container);
        };
        LinkDialog.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog);
            this.$dialog.remove();
        };
        LinkDialog.prototype.bindEnterKey = function ($input, $btn) {
            $input.on('keypress', function (event) {
                if (event.keyCode === key.code.ENTER) {
                    event.preventDefault();
                    $btn.trigger('click');
                }
            });
        };
        /**
         * toggle update button
         */
        LinkDialog.prototype.toggleLinkBtn = function ($linkBtn, $linkText, $linkUrl) {
            this.ui.toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());
        };
        /**
         * Show link dialog and set event handlers on dialog controls.
         *
         * @param {Object} linkInfo
         * @return {Promise}
         */
        LinkDialog.prototype.showLinkDialog = function (linkInfo) {
            var _this = this;
            return $$1.Deferred(function (deferred) {
                var $linkText = _this.$dialog.find('.note-link-text');
                var $linkUrl = _this.$dialog.find('.note-link-url');
                var $linkBtn = _this.$dialog.find('.note-link-btn');
                var $openInNewWindow = _this.$dialog.find('input[type=checkbox]');
                _this.ui.onDialogShown(_this.$dialog, function () {
                    _this.context.triggerEvent('dialog.shown');
                    // if no url was given, copy text to url
                    if (!linkInfo.url) {
                        linkInfo.url = linkInfo.text;
                    }
                    $linkText.val(linkInfo.text);
                    var handleLinkTextUpdate = function () {
                        _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);
                        // if linktext was modified by keyup,
                        // stop cloning text from linkUrl
                        linkInfo.text = $linkText.val();
                    };
                    $linkText.on('input', handleLinkTextUpdate).on('paste', function () {
                        setTimeout(handleLinkTextUpdate, 0);
                    });
                    var handleLinkUrlUpdate = function () {
                        _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);
                        // display same link on `Text to display` input
                        // when create a new link
                        if (!linkInfo.text) {
                            $linkText.val($linkUrl.val());
                        }
                    };
                    $linkUrl.on('input', handleLinkUrlUpdate).on('paste', function () {
                        setTimeout(handleLinkUrlUpdate, 0);
                    }).val(linkInfo.url);
                    if (!env.isSupportTouch) {
                        $linkUrl.trigger('focus');
                    }
                    _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);
                    _this.bindEnterKey($linkUrl, $linkBtn);
                    _this.bindEnterKey($linkText, $linkBtn);
                    var isChecked = linkInfo.isNewWindow !== undefined
                        ? linkInfo.isNewWindow : _this.context.options.linkTargetBlank;
                    $openInNewWindow.prop('checked', isChecked);
                    $linkBtn.one('click', function (event) {
                        event.preventDefault();
                        deferred.resolve({
                            range: linkInfo.range,
                            url: $linkUrl.val(),
                            text: $linkText.val(),
                            isNewWindow: $openInNewWindow.is(':checked')
                        });
                        _this.ui.hideDialog(_this.$dialog);
                    });
                });
                _this.ui.onDialogHidden(_this.$dialog, function () {
                    // detach events
                    $linkText.off('input paste keypress');
                    $linkUrl.off('input paste keypress');
                    $linkBtn.off('click');
                    if (deferred.state() === 'pending') {
                        deferred.reject();
                    }
                });
                _this.ui.showDialog(_this.$dialog);
            }).promise();
        };
        /**
         * @param {Object} layoutInfo
         */
        LinkDialog.prototype.show = function () {
            var _this = this;
            var linkInfo = this.context.invoke('editor.getLinkInfo');
            this.context.invoke('editor.saveRange');
            this.showLinkDialog(linkInfo).then(function (linkInfo) {
                _this.context.invoke('editor.restoreRange');
                _this.context.invoke('editor.createLink', linkInfo);
            }).fail(function () {
                _this.context.invoke('editor.restoreRange');
            });
        };
        return LinkDialog;
    }());
    
    var LinkPopover = /** @class */ (function () {
        function LinkPopover(context) {
            var _this = this;
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.options = context.options;
            this.events = {
                'summernote.keyup summernote.mouseup summernote.change summernote.scroll': function () {
                    _this.update();
                },
                'summernote.disable summernote.dialog.shown': function () {
                    _this.hide();
                }
            };
        }
        LinkPopover.prototype.shouldInitialize = function () {
            return !lists.isEmpty(this.options.popover.link);
        };
        LinkPopover.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: 'note-link-popover',
                callback: function ($node) {
                    var $content = $node.find('.popover-content,.note-popover-content');
                    $content.prepend('<span><a target="_blank"></a>&nbsp;</span>');
                }
            }).render().appendTo(this.options.container);
            var $content = this.$popover.find('.popover-content,.note-popover-content');
            this.context.invoke('buttons.build', $content, this.options.popover.link);
        };
        LinkPopover.prototype.destroy = function () {
            this.$popover.remove();
        };
        LinkPopover.prototype.update = function () {
            // Prevent focusing on editable when invoke('code') is executed
            if (!this.context.invoke('editor.hasFocus')) {
                this.hide();
                return;
            }
            var rng = this.context.invoke('editor.createRange');
            if (rng.isCollapsed() && rng.isOnAnchor()) {
                var anchor = dom.ancestor(rng.sc, dom.isAnchor);
                var href = $$1(anchor).attr('href');
                this.$popover.find('a').attr('href', href).html(href);
                var pos = dom.posFromPlaceholder(anchor);
                this.$popover.css({
                    display: 'block',
                    left: pos.left,
                    top: pos.top
                });
            }
            else {
                this.hide();
            }
        };
        LinkPopover.prototype.hide = function () {
            this.$popover.hide();
        };
        return LinkPopover;
    }());
    
    var ImageDialog = /** @class */ (function () {
        function ImageDialog(context) {
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.$body = $$1(document.body);
            this.$editor = context.layoutInfo.editor;
            this.options = context.options;
            this.lang = this.options.langInfo;
        }
        ImageDialog.prototype.initialize = function () {
            var $container = this.options.dialogsInBody ? this.$body : this.$editor;
            var imageLimitation = '';
            if (this.options.maximumImageFileSize) {
                var unit = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024));
                var readableSize = (this.options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 +
                    ' ' + ' KMGTP'[unit] + 'B';
                imageLimitation = "<small>" + (this.lang.image.maximumFileSize + ' : ' + readableSize) + "</small>";
            }
            var body = [
                '<div class="form-group note-form-group note-group-select-from-files">',
                '<label class="note-form-label">' + this.lang.image.selectFromFiles + '</label>',
                '<input class="note-image-input note-form-control note-input" ',
                ' type="file" name="files" accept="image/*" multiple="multiple" />',
                imageLimitation,
                '</div>',
                '<div class="form-group note-group-image-url" style="overflow:auto;">',
                '<label class="note-form-label">' + this.lang.image.url + '</label>',
                '<input class="note-image-url form-control note-form-control note-input ',
                ' col-md-12" type="text" />',
                '</div>'
            ].join('');
            var buttonClass = 'btn btn-primary note-btn note-btn-primary note-image-btn';
            var footer = "<button type=\"submit\" href=\"#\" class=\"" + buttonClass + "\" disabled>" + this.lang.image.insert + "</button>";
            this.$dialog = this.ui.dialog({
                title: this.lang.image.insert,
                fade: this.options.dialogsFade,
                body: body,
                footer: footer
            }).render().appendTo($container);
        };
        ImageDialog.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog);
            this.$dialog.remove();
        };
        ImageDialog.prototype.bindEnterKey = function ($input, $btn) {
            $input.on('keypress', function (event) {
                if (event.keyCode === key.code.ENTER) {
                    event.preventDefault();
                    $btn.trigger('click');
                }
            });
        };
        ImageDialog.prototype.show = function () {
            var _this = this;
            this.context.invoke('editor.saveRange');
            this.showImageDialog().then(function (data) {
                // [workaround] hide dialog before restore range for IE range focus
                _this.ui.hideDialog(_this.$dialog);
                _this.context.invoke('editor.restoreRange');
                if (typeof data === 'string') {
                    _this.context.invoke('editor.insertImage', data);
                }
                else {
                    _this.context.invoke('editor.insertImagesOrCallback', data);
                }
            }).fail(function () {
                _this.context.invoke('editor.restoreRange');
            });
        };
        /**
         * show image dialog
         *
         * @param {jQuery} $dialog
         * @return {Promise}
         */
        ImageDialog.prototype.showImageDialog = function () {
            var _this = this;
            return $$1.Deferred(function (deferred) {
                var $imageInput = _this.$dialog.find('.note-image-input');
                var $imageUrl = _this.$dialog.find('.note-image-url');
                var $imageBtn = _this.$dialog.find('.note-image-btn');
                _this.ui.onDialogShown(_this.$dialog, function () {
                    _this.context.triggerEvent('dialog.shown');
                    // Cloning imageInput to clear element.
                    $imageInput.replaceWith($imageInput.clone().on('change', function (event) {
                        deferred.resolve(event.target.files || event.target.value);
                    }).val(''));
                    $imageBtn.click(function (event) {
                        event.preventDefault();
                        deferred.resolve($imageUrl.val());
                    });
                    $imageUrl.on('keyup paste', function () {
                        var url = $imageUrl.val();
                        _this.ui.toggleBtn($imageBtn, url);
                    }).val('');
                    if (!env.isSupportTouch) {
                        $imageUrl.trigger('focus');
                    }
                    _this.bindEnterKey($imageUrl, $imageBtn);
                });
                _this.ui.onDialogHidden(_this.$dialog, function () {
                    $imageInput.off('change');
                    $imageUrl.off('keyup paste keypress');
                    $imageBtn.off('click');
                    if (deferred.state() === 'pending') {
                        deferred.reject();
                    }
                });
                _this.ui.showDialog(_this.$dialog);
            });
        };
        return ImageDialog;
    }());
    
    /**
     * Image popover module
     *  mouse events that show/hide popover will be handled by Handle.js.
     *  Handle.js will receive the events and invoke 'imagePopover.update'.
     */
    var ImagePopover = /** @class */ (function () {
        function ImagePopover(context) {
            var _this = this;
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.editable = context.layoutInfo.editable[0];
            this.options = context.options;
            this.events = {
                'summernote.disable': function () {
                    _this.hide();
                }
            };
        }
        ImagePopover.prototype.shouldInitialize = function () {
            return !lists.isEmpty(this.options.popover.image);
        };
        ImagePopover.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: 'note-image-popover'
            }).render().appendTo(this.options.container);
            var $content = this.$popover.find('.popover-content,.note-popover-content');
            this.context.invoke('buttons.build', $content, this.options.popover.image);
        };
        ImagePopover.prototype.destroy = function () {
            this.$popover.remove();
        };
        ImagePopover.prototype.update = function (target) {
            if (dom.isImg(target)) {
                var pos = dom.posFromPlaceholder(target);
                var posEditor = dom.posFromPlaceholder(this.editable);
                this.$popover.css({
                    display: 'block',
                    left: this.options.popatmouse ? event.pageX - 20 : pos.left,
                    top: this.options.popatmouse ? event.pageY : Math.min(pos.top, posEditor.top)
                });
            }
            else {
                this.hide();
            }
        };
        ImagePopover.prototype.hide = function () {
            this.$popover.hide();
        };
        return ImagePopover;
    }());
    
    var TablePopover = /** @class */ (function () {
        function TablePopover(context) {
            var _this = this;
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.options = context.options;
            this.events = {
                'summernote.mousedown': function (we, e) {
                    _this.update(e.target);
                },
                'summernote.keyup summernote.scroll summernote.change': function () {
                    _this.update();
                },
                'summernote.disable': function () {
                    _this.hide();
                }
            };
        }
        TablePopover.prototype.shouldInitialize = function () {
            return !lists.isEmpty(this.options.popover.table);
        };
        TablePopover.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: 'note-table-popover'
            }).render().appendTo(this.options.container);
            var $content = this.$popover.find('.popover-content,.note-popover-content');
            this.context.invoke('buttons.build', $content, this.options.popover.table);
            // [workaround] Disable Firefox's default table editor
            if (env.isFF) {
                document.execCommand('enableInlineTableEditing', false, false);
            }
        };
        TablePopover.prototype.destroy = function () {
            this.$popover.remove();
        };
        TablePopover.prototype.update = function (target) {
            if (this.context.isDisabled()) {
                return false;
            }
            var isCell = dom.isCell(target);
            if (isCell) {
                var pos = dom.posFromPlaceholder(target);
                this.$popover.css({
                    display: 'block',
                    left: pos.left,
                    top: pos.top
                });
            }
            else {
                this.hide();
            }
            return isCell;
        };
        TablePopover.prototype.hide = function () {
            this.$popover.hide();
        };
        return TablePopover;
    }());
    
    var VideoDialog = /** @class */ (function () {
        function VideoDialog(context) {
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.$body = $$1(document.body);
            this.$editor = context.layoutInfo.editor;
            this.options = context.options;
            this.lang = this.options.langInfo;
        }
        VideoDialog.prototype.initialize = function () {
            var $container = this.options.dialogsInBody ? this.$body : this.$editor;
            var body = [
                '<div class="form-group note-form-group row-fluid">',
                "<label class=\"note-form-label\">" + this.lang.video.url + " <small class=\"text-muted\">" + this.lang.video.providers + "</small></label>",
                '<input class="note-video-url form-control note-form-control note-input" type="text" />',
                '</div>'
            ].join('');
            var buttonClass = 'btn btn-primary note-btn note-btn-primary note-video-btn';
            var footer = "<button type=\"submit\" href=\"#\" class=\"" + buttonClass + "\" disabled>" + this.lang.video.insert + "</button>";
            this.$dialog = this.ui.dialog({
                title: this.lang.video.insert,
                fade: this.options.dialogsFade,
                body: body,
                footer: footer
            }).render().appendTo($container);
        };
        VideoDialog.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog);
            this.$dialog.remove();
        };
        VideoDialog.prototype.bindEnterKey = function ($input, $btn) {
            $input.on('keypress', function (event) {
                if (event.keyCode === key.code.ENTER) {
                    event.preventDefault();
                    $btn.trigger('click');
                }
            });
        };
        VideoDialog.prototype.createVideoNode = function (url) {
            // video url patterns(youtube, instagram, vimeo, dailymotion, youku, mp4, ogg, webm)
            var ytRegExp = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
            var ytMatch = url.match(ytRegExp);
            var igRegExp = /(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/;
            var igMatch = url.match(igRegExp);
            var vRegExp = /\/\/vine\.co\/v\/([a-zA-Z0-9]+)/;
            var vMatch = url.match(vRegExp);
            var vimRegExp = /\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/;
            var vimMatch = url.match(vimRegExp);
            var dmRegExp = /.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/;
            var dmMatch = url.match(dmRegExp);
            var youkuRegExp = /\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/;
            var youkuMatch = url.match(youkuRegExp);
            var qqRegExp = /\/\/v\.qq\.com.*?vid=(.+)/;
            var qqMatch = url.match(qqRegExp);
            var qqRegExp2 = /\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/;
            var qqMatch2 = url.match(qqRegExp2);
            var mp4RegExp = /^.+.(mp4|m4v)$/;
            var mp4Match = url.match(mp4RegExp);
            var oggRegExp = /^.+.(ogg|ogv)$/;
            var oggMatch = url.match(oggRegExp);
            var webmRegExp = /^.+.(webm)$/;
            var webmMatch = url.match(webmRegExp);
            var $video;
            if (ytMatch && ytMatch[1].length === 11) {
                var youtubeId = ytMatch[1];
                $video = $$1('<iframe>')
                    .attr('frameborder', 0)
                    .attr('src', '//www.youtube.com/embed/' + youtubeId)
                    .attr('width', '640').attr('height', '360');
            }
            else if (igMatch && igMatch[0].length) {
                $video = $$1('<iframe>')
                    .attr('frameborder', 0)
                    .attr('src', 'https://instagram.com/p/' + igMatch[1] + '/embed/')
                    .attr('width', '612').attr('height', '710')
                    .attr('scrolling', 'no')
                    .attr('allowtransparency', 'true');
            }
            else if (vMatch && vMatch[0].length) {
                $video = $$1('<iframe>')
                    .attr('frameborder', 0)
                    .attr('src', vMatch[0] + '/embed/simple')
                    .attr('width', '600').attr('height', '600')
                    .attr('class', 'vine-embed');
            }
            else if (vimMatch && vimMatch[3].length) {
                $video = $$1('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>')
                    .attr('frameborder', 0)
                    .attr('src', '//player.vimeo.com/video/' + vimMatch[3])
                    .attr('width', '640').attr('height', '360');
            }
            else if (dmMatch && dmMatch[2].length) {
                $video = $$1('<iframe>')
                    .attr('frameborder', 0)
                    .attr('src', '//www.dailymotion.com/embed/video/' + dmMatch[2])
                    .attr('width', '640').attr('height', '360');
            }
            else if (youkuMatch && youkuMatch[1].length) {
                $video = $$1('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>')
                    .attr('frameborder', 0)
                    .attr('height', '498')
                    .attr('width', '510')
                    .attr('src', '//player.youku.com/embed/' + youkuMatch[1]);
            }
            else if ((qqMatch && qqMatch[1].length) || (qqMatch2 && qqMatch2[2].length)) {
                var vid = ((qqMatch && qqMatch[1].length) ? qqMatch[1] : qqMatch2[2]);
                $video = $$1('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>')
                    .attr('frameborder', 0)
                    .attr('height', '310')
                    .attr('width', '500')
                    .attr('src', 'http://v.qq.com/iframe/player.html?vid=' + vid + '&amp;auto=0');
            }
            else if (mp4Match || oggMatch || webmMatch) {
                $video = $$1('<video controls>')
                    .attr('src', url)
                    .attr('width', '640').attr('height', '360');
            }
            else {
                // this is not a known video link. Now what, Cat? Now what?
                return false;
            }
            $video.addClass('note-video-clip');
            return $video[0];
        };
        VideoDialog.prototype.show = function () {
            var _this = this;
            var text = this.context.invoke('editor.getSelectedText');
            this.context.invoke('editor.saveRange');
            this.showVideoDialog(text).then(function (url) {
                // [workaround] hide dialog before restore range for IE range focus
                _this.ui.hideDialog(_this.$dialog);
                _this.context.invoke('editor.restoreRange');
                // build node
                var $node = _this.createVideoNode(url);
                if ($node) {
                    // insert video node
                    _this.context.invoke('editor.insertNode', $node);
                }
            }).fail(function () {
                _this.context.invoke('editor.restoreRange');
            });
        };
        /**
         * show image dialog
         *
         * @param {jQuery} $dialog
         * @return {Promise}
         */
        VideoDialog.prototype.showVideoDialog = function (text) {
            var _this = this;
            return $$1.Deferred(function (deferred) {
                var $videoUrl = _this.$dialog.find('.note-video-url');
                var $videoBtn = _this.$dialog.find('.note-video-btn');
                _this.ui.onDialogShown(_this.$dialog, function () {
                    _this.context.triggerEvent('dialog.shown');
                    $videoUrl.val(text).on('input', function () {
                        _this.ui.toggleBtn($videoBtn, $videoUrl.val());
                    });
                    if (!env.isSupportTouch) {
                        $videoUrl.trigger('focus');
                    }
                    $videoBtn.click(function (event) {
                        event.preventDefault();
                        deferred.resolve($videoUrl.val());
                    });
                    _this.bindEnterKey($videoUrl, $videoBtn);
                });
                _this.ui.onDialogHidden(_this.$dialog, function () {
                    $videoUrl.off('input');
                    $videoBtn.off('click');
                    if (deferred.state() === 'pending') {
                        deferred.reject();
                    }
                });
                _this.ui.showDialog(_this.$dialog);
            });
        };
        return VideoDialog;
    }());
    
    var HelpDialog = /** @class */ (function () {
        function HelpDialog(context) {
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.$body = $$1(document.body);
            this.$editor = context.layoutInfo.editor;
            this.options = context.options;
            this.lang = this.options.langInfo;
        }
        HelpDialog.prototype.initialize = function () {
            var $container = this.options.dialogsInBody ? this.$body : this.$editor;
            var body = [
                '<p class="text-center">',
                '<a href="http://summernote.org/" target="_blank">Summernote 0.8.10</a> · ',
                '<a href="https://github.com/summernote/summernote" target="_blank">Project</a> · ',
                '<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>',
                '</p>'
            ].join('');
            this.$dialog = this.ui.dialog({
                title: this.lang.options.help,
                fade: this.options.dialogsFade,
                body: this.createShortcutList(),
                footer: body,
                callback: function ($node) {
                    $node.find('.modal-body,.note-modal-body').css({
                        'max-height': 300,
                        'overflow': 'scroll'
                    });
                }
            }).render().appendTo($container);
        };
        HelpDialog.prototype.destroy = function () {
            this.ui.hideDialog(this.$dialog);
            this.$dialog.remove();
        };
        HelpDialog.prototype.createShortcutList = function () {
            var _this = this;
            var keyMap = this.options.keyMap[env.isMac ? 'mac' : 'pc'];
            return Object.keys(keyMap).map(function (key) {
                var command = keyMap[key];
                var $row = $$1('<div><div class="help-list-item"/></div>');
                $row.append($$1('<label><kbd>' + key + '</kdb></label>').css({
                    'width': 180,
                    'margin-right': 10
                })).append($$1('<span/>').html(_this.context.memo('help.' + command) || command));
                return $row.html();
            }).join('');
        };
        /**
         * show help dialog
         *
         * @return {Promise}
         */
        HelpDialog.prototype.showHelpDialog = function () {
            var _this = this;
            return $$1.Deferred(function (deferred) {
                _this.ui.onDialogShown(_this.$dialog, function () {
                    _this.context.triggerEvent('dialog.shown');
                    deferred.resolve();
                });
                _this.ui.showDialog(_this.$dialog);
            }).promise();
        };
        HelpDialog.prototype.show = function () {
            var _this = this;
            this.context.invoke('editor.saveRange');
            this.showHelpDialog().then(function () {
                _this.context.invoke('editor.restoreRange');
            });
        };
        return HelpDialog;
    }());
    
    var AIR_MODE_POPOVER_X_OFFSET = 20;
    var AirPopover = /** @class */ (function () {
        function AirPopover(context) {
            var _this = this;
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.options = context.options;
            this.events = {
                'summernote.keyup summernote.mouseup summernote.scroll': function () {
                    _this.update();
                },
                'summernote.disable summernote.change summernote.dialog.shown': function () {
                    _this.hide();
                },
                'summernote.focusout': function (we, e) {
                    // [workaround] Firefox doesn't support relatedTarget on focusout
                    //  - Ignore hide action on focus out in FF.
                    if (env.isFF) {
                        return;
                    }
                    if (!e.relatedTarget || !dom.ancestor(e.relatedTarget, func.eq(_this.$popover[0]))) {
                        _this.hide();
                    }
                }
            };
        }
        AirPopover.prototype.shouldInitialize = function () {
            return this.options.airMode && !lists.isEmpty(this.options.popover.air);
        };
        AirPopover.prototype.initialize = function () {
            this.$popover = this.ui.popover({
                className: 'note-air-popover'
            }).render().appendTo(this.options.container);
            var $content = this.$popover.find('.popover-content');
            this.context.invoke('buttons.build', $content, this.options.popover.air);
        };
        AirPopover.prototype.destroy = function () {
            this.$popover.remove();
        };
        AirPopover.prototype.update = function () {
            var styleInfo = this.context.invoke('editor.currentStyle');
            if (styleInfo.range && !styleInfo.range.isCollapsed()) {
                var rect = lists.last(styleInfo.range.getClientRects());
                if (rect) {
                    var bnd = func.rect2bnd(rect);
                    this.$popover.css({
                        display: 'block',
                        left: Math.max(bnd.left + bnd.width / 2, 0) - AIR_MODE_POPOVER_X_OFFSET,
                        top: bnd.top + bnd.height
                    });
                    this.context.invoke('buttons.updateCurrentStyle', this.$popover);
                }
            }
            else {
                this.hide();
            }
        };
        AirPopover.prototype.hide = function () {
            this.$popover.hide();
        };
        return AirPopover;
    }());
    
    var POPOVER_DIST = 5;
    var HintPopover = /** @class */ (function () {
        function HintPopover(context) {
            var _this = this;
            this.context = context;
            this.ui = $$1.summernote.ui;
            this.$editable = context.layoutInfo.editable;
            this.options = context.options;
            this.hint = this.options.hint || [];
            this.direction = this.options.hintDirection || 'bottom';
            this.hints = $$1.isArray(this.hint) ? this.hint : [this.hint];
            this.events = {
                'summernote.keyup': function (we, e) {
                    if (!e.isDefaultPrevented()) {
                        _this.handleKeyup(e);
                    }
                },
                'summernote.keydown': function (we, e) {
                    _this.handleKeydown(e);
                },
                'summernote.disable summernote.dialog.shown': function () {
                    _this.hide();
                }
            };
        }
        HintPopover.prototype.shouldInitialize = function () {
            return this.hints.length > 0;
        };
        HintPopover.prototype.initialize = function () {
            var _this = this;
            this.lastWordRange = null;
            this.$popover = this.ui.popover({
                className: 'note-hint-popover',
                hideArrow: true,
                direction: ''
            }).render().appendTo(this.options.container);
            this.$popover.hide();
            this.$content = this.$popover.find('.popover-content,.note-popover-content');
            this.$content.on('click', '.note-hint-item', function () {
                _this.$content.find('.active').removeClass('active');
                $$1(_this).addClass('active');
                _this.replace();
            });
        };
        HintPopover.prototype.destroy = function () {
            this.$popover.remove();
        };
        HintPopover.prototype.selectItem = function ($item) {
            this.$content.find('.active').removeClass('active');
            $item.addClass('active');
            this.$content[0].scrollTop = $item[0].offsetTop - (this.$content.innerHeight() / 2);
        };
        HintPopover.prototype.moveDown = function () {
            var $current = this.$content.find('.note-hint-item.active');
            var $next = $current.next();
            if ($next.length) {
                this.selectItem($next);
            }
            else {
                var $nextGroup = $current.parent().next();
                if (!$nextGroup.length) {
                    $nextGroup = this.$content.find('.note-hint-group').first();
                }
                this.selectItem($nextGroup.find('.note-hint-item').first());
            }
        };
        HintPopover.prototype.moveUp = function () {
            var $current = this.$content.find('.note-hint-item.active');
            var $prev = $current.prev();
            if ($prev.length) {
                this.selectItem($prev);
            }
            else {
                var $prevGroup = $current.parent().prev();
                if (!$prevGroup.length) {
                    $prevGroup = this.$content.find('.note-hint-group').last();
                }
                this.selectItem($prevGroup.find('.note-hint-item').last());
            }
        };
        HintPopover.prototype.replace = function () {
            var $item = this.$content.find('.note-hint-item.active');
            if ($item.length) {
                var node = this.nodeFromItem($item);
                // XXX: consider to move codes to editor for recording redo/undo.
                this.lastWordRange.insertNode(node);
                range.createFromNode(node).collapse().select();
                this.lastWordRange = null;
                this.hide();
                this.context.triggerEvent('change', this.$editable.html(), this.$editable[0]);
                this.context.invoke('editor.focus');
            }
        };
        HintPopover.prototype.nodeFromItem = function ($item) {
            var hint = this.hints[$item.data('index')];
            var item = $item.data('item');
            var node = hint.content ? hint.content(item) : item;
            if (typeof node === 'string') {
                node = dom.createText(node);
            }
            return node;
        };
        HintPopover.prototype.createItemTemplates = function (hintIdx, items) {
            var hint = this.hints[hintIdx];
            return items.map(function (item, idx) {
                var $item = $$1('<div class="note-hint-item"/>');
                $item.append(hint.template ? hint.template(item) : item + '');
                $item.data({
                    'index': hintIdx,
                    'item': item
                });
                return $item;
            });
        };
        HintPopover.prototype.handleKeydown = function (e) {
            if (!this.$popover.is(':visible')) {
                return;
            }
            if (e.keyCode === key.code.ENTER) {
                e.preventDefault();
                this.replace();
            }
            else if (e.keyCode === key.code.UP) {
                e.preventDefault();
                this.moveUp();
            }
            else if (e.keyCode === key.code.DOWN) {
                e.preventDefault();
                this.moveDown();
            }
        };
        HintPopover.prototype.searchKeyword = function (index, keyword, callback) {
            var hint = this.hints[index];
            if (hint && hint.match.test(keyword) && hint.search) {
                var matches = hint.match.exec(keyword);
                hint.search(matches[1], callback);
            }
            else {
                callback();
            }
        };
        HintPopover.prototype.createGroup = function (idx, keyword) {
            var _this = this;
            var $group = $$1('<div class="note-hint-group note-hint-group-' + idx + '"/>');
            this.searchKeyword(idx, keyword, function (items) {
                items = items || [];
                if (items.length) {
                    $group.html(_this.createItemTemplates(idx, items));
                    _this.show();
                }
            });
            return $group;
        };
        HintPopover.prototype.handleKeyup = function (e) {
            var _this = this;
            if (!lists.contains([key.code.ENTER, key.code.UP, key.code.DOWN], e.keyCode)) {
                var wordRange = this.context.invoke('editor.createRange').getWordRange();
                var keyword_1 = wordRange.toString();
                if (this.hints.length && keyword_1) {
                    this.$content.empty();
                    var bnd = func.rect2bnd(lists.last(wordRange.getClientRects()));
                    if (bnd) {
                        this.$popover.hide();
                        this.lastWordRange = wordRange;
                        this.hints.forEach(function (hint, idx) {
                            if (hint.match.test(keyword_1)) {
                                _this.createGroup(idx, keyword_1).appendTo(_this.$content);
                            }
                        });
                        // select first .note-hint-item
                        this.$content.find('.note-hint-item:first').addClass('active');
                        // set position for popover after group is created
                        if (this.direction === 'top') {
                            this.$popover.css({
                                left: bnd.left,
                                top: bnd.top - this.$popover.outerHeight() - POPOVER_DIST
                            });
                        }
                        else {
                            this.$popover.css({
                                left: bnd.left,
                                top: bnd.top + bnd.height + POPOVER_DIST
                            });
                        }
                    }
                }
                else {
                    this.hide();
                }
            }
        };
        HintPopover.prototype.show = function () {
            this.$popover.show();
        };
        HintPopover.prototype.hide = function () {
            this.$popover.hide();
        };
        return HintPopover;
    }());
    
    var Context = /** @class */ (function () {
        /**
         * @param {jQuery} $note
         * @param {Object} options
         */
        function Context($note, options) {
            this.ui = $$1.summernote.ui;
            this.$note = $note;
            this.memos = {};
            this.modules = {};
            this.layoutInfo = {};
            this.options = options;
            this.initialize();
        }
        /**
         * create layout and initialize modules and other resources
         */
        Context.prototype.initialize = function () {
            this.layoutInfo = this.ui.createLayout(this.$note, this.options);
            this._initialize();
            this.$note.hide();
            return this;
        };
        /**
         * destroy modules and other resources and remove layout
         */
        Context.prototype.destroy = function () {
            this._destroy();
            this.$note.removeData('summernote');
            this.ui.removeLayout(this.$note, this.layoutInfo);
        };
        /**
         * destory modules and other resources and initialize it again
         */
        Context.prototype.reset = function () {
            var disabled = this.isDisabled();
            this.code(dom.emptyPara);
            this._destroy();
            this._initialize();
            if (disabled) {
                this.disable();
            }
        };
        Context.prototype._initialize = function () {
            var _this = this;
            // add optional buttons
            var buttons = $$1.extend({}, this.options.buttons);
            Object.keys(buttons).forEach(function (key) {
                _this.memo('button.' + key, buttons[key]);
            });
            var modules = $$1.extend({}, this.options.modules, $$1.summernote.plugins || {});
            // add and initialize modules
            Object.keys(modules).forEach(function (key) {
                _this.module(key, modules[key], true);
            });
            Object.keys(this.modules).forEach(function (key) {
                _this.initializeModule(key);
            });
        };
        Context.prototype._destroy = function () {
            var _this = this;
            // destroy modules with reversed order
            Object.keys(this.modules).reverse().forEach(function (key) {
                _this.removeModule(key);
            });
            Object.keys(this.memos).forEach(function (key) {
                _this.removeMemo(key);
            });
            // trigger custom onDestroy callback
            this.triggerEvent('destroy', this);
        };
        Context.prototype.code = function (html) {
            var isActivated = this.invoke('codeview.isActivated');
            if (html === undefined) {
                this.invoke('codeview.sync');
                return isActivated ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();
            }
            else {
                if (isActivated) {
                    this.layoutInfo.codable.val(html);
                }
                else {
                    this.layoutInfo.editable.html(html);
                }
                this.$note.val(html);
                this.triggerEvent('change', html);
            }
        };
        Context.prototype.isDisabled = function () {
            return this.layoutInfo.editable.attr('contenteditable') === 'false';
        };
        Context.prototype.enable = function () {
            this.layoutInfo.editable.attr('contenteditable', true);
            this.invoke('toolbar.activate', true);
            this.triggerEvent('disable', false);
        };
        Context.prototype.disable = function () {
            // close codeview if codeview is opend
            if (this.invoke('codeview.isActivated')) {
                this.invoke('codeview.deactivate');
            }
            this.layoutInfo.editable.attr('contenteditable', false);
            this.invoke('toolbar.deactivate', true);
            this.triggerEvent('disable', true);
        };
        Context.prototype.triggerEvent = function () {
            var namespace = lists.head(arguments);
            var args = lists.tail(lists.from(arguments));
            var callback = this.options.callbacks[func.namespaceToCamel(namespace, 'on')];
            if (callback) {
                callback.apply(this.$note[0], args);
            }
            this.$note.trigger('summernote.' + namespace, args);
        };
        Context.prototype.initializeModule = function (key) {
            var module = this.modules[key];
            module.shouldInitialize = module.shouldInitialize || func.ok;
            if (!module.shouldInitialize()) {
                return;
            }
            // initialize module
            if (module.initialize) {
                module.initialize();
            }
            // attach events
            if (module.events) {
                dom.attachEvents(this.$note, module.events);
            }
        };
        Context.prototype.module = function (key, ModuleClass, withoutIntialize) {
            if (arguments.length === 1) {
                return this.modules[key];
            }
            this.modules[key] = new ModuleClass(this);
            if (!withoutIntialize) {
                this.initializeModule(key);
            }
        };
        Context.prototype.removeModule = function (key) {
            var module = this.modules[key];
            if (module.shouldInitialize()) {
                if (module.events) {
                    dom.detachEvents(this.$note, module.events);
                }
                if (module.destroy) {
                    module.destroy();
                }
            }
            delete this.modules[key];
        };
        Context.prototype.memo = function (key, obj) {
            if (arguments.length === 1) {
                return this.memos[key];
            }
            this.memos[key] = obj;
        };
        Context.prototype.removeMemo = function (key) {
            if (this.memos[key] && this.memos[key].destroy) {
                this.memos[key].destroy();
            }
            delete this.memos[key];
        };
        /**
         * Some buttons need to change their visual style immediately once they get pressed
         */
        Context.prototype.createInvokeHandlerAndUpdateState = function (namespace, value) {
            var _this = this;
            return function (event) {
                _this.createInvokeHandler(namespace, value)(event);
                _this.invoke('buttons.updateCurrentStyle');
            };
        };
        Context.prototype.createInvokeHandler = function (namespace, value) {
            var _this = this;
            return function (event) {
                event.preventDefault();
                var $target = $$1(event.target);
                _this.invoke(namespace, value || $target.closest('[data-value]').data('value'), $target);
            };
        };
        Context.prototype.invoke = function () {
            var namespace = lists.head(arguments);
            var args = lists.tail(lists.from(arguments));
            var splits = namespace.split('.');
            var hasSeparator = splits.length > 1;
            var moduleName = hasSeparator && lists.head(splits);
            var methodName = hasSeparator ? lists.last(splits) : lists.head(splits);
            var module = this.modules[moduleName || 'editor'];
            if (!moduleName && this[methodName]) {
                return this[methodName].apply(this, args);
            }
            else if (module && module[methodName] && module.shouldInitialize()) {
                return module[methodName].apply(module, args);
            }
        };
        return Context;
    }());
    
    $$1.fn.extend({
        /**
         * Summernote API
         *
         * @param {Object|String}
         * @return {this}
         */
        summernote: function () {
            var type = $$1.type(lists.head(arguments));
            var isExternalAPICalled = type === 'string';
            var hasInitOptions = type === 'object';
            var options = $$1.extend({}, $$1.summernote.options, hasInitOptions ? lists.head(arguments) : {});
            // Update options
            options.langInfo = $$1.extend(true, {}, $$1.summernote.lang['en-US'], $$1.summernote.lang[options.lang]);
            options.icons = $$1.extend(true, {}, $$1.summernote.options.icons, options.icons);
            options.tooltip = options.tooltip === 'auto' ? !env.isSupportTouch : options.tooltip;
            this.each(function (idx, note) {
                var $note = $$1(note);
                if (!$note.data('summernote')) {
                    var context = new Context($note, options);
                    $note.data('summernote', context);
                    $note.data('summernote').triggerEvent('init', context.layoutInfo);
                }
            });
            var $note = this.first();
            if ($note.length) {
                var context = $note.data('summernote');
                if (isExternalAPICalled) {
                    return context.invoke.apply(context, lists.from(arguments));
                }
                else if (options.focus) {
                    context.invoke('editor.focus');
                }
            }
            return this;
        }
    });
    
    $$1.summernote = $$1.extend($$1.summernote, {
        version: '0.8.10',
        ui: ui,
        plugins: {},
        options: {
            modules: {
                'editor': Editor,
                'clipboard': Clipboard,
                'dropzone': Dropzone,
                'codeview': CodeView,
                'statusbar': Statusbar,
                'fullscreen': Fullscreen,
                'handle': Handle,
                // FIXME: HintPopover must be front of autolink
                //  - Script error about range when Enter key is pressed on hint popover
                'hintPopover': HintPopover,
                'autoLink': AutoLink,
                'autoSync': AutoSync,
                'placeholder': Placeholder,
                'buttons': Buttons,
                'toolbar': Toolbar,
                'linkDialog': LinkDialog,
                'linkPopover': LinkPopover,
                'imageDialog': ImageDialog,
                'imagePopover': ImagePopover,
                'tablePopover': TablePopover,
                'videoDialog': VideoDialog,
                'helpDialog': HelpDialog,
                'airPopover': AirPopover
            },
            buttons: {},
            lang: 'en-US',
            followingToolbar: true,
            otherStaticBar: '',
            // toolbar
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'clear']],
                ['fontname', ['fontname']],
                ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture', 'video']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ],
            // popover
            popatmouse: true,
            popover: {
                image: [
                    ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
                    ['float', ['floatLeft', 'floatRight', 'floatNone']],
                    ['remove', ['removeMedia']]
                ],
                link: [
                    ['link', ['linkDialogShow', 'unlink']]
                ],
                table: [
                    ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']],
                    ['delete', ['deleteRow', 'deleteCol', 'deleteTable']]
                ],
                air: [
                    ['color', ['color']],
                    ['font', ['bold', 'underline', 'clear']],
                    ['para', ['ul', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture']]
                ]
            },
            // air mode: inline editor
            airMode: false,
            width: null,
            height: null,
            focus: false,
            tabSize: 4,
            styleWithSpan: true,
            shortcuts: true,
            textareaAutoSync: true,
            hintDirection: 'bottom',
            tooltip: 'auto',
            container: 'body',
            maxTextLength: 0,
            styleTags: ['p', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
            fontNames: [
                'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',
                'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',
                'Tahoma', 'Times New Roman', 'Verdana'
            ],
            fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],
            // pallete colors(n x n)
            colors: [
                ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],
                ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],
                ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],
                ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],
                ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],
                ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],
                ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],
                ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']
            ],
            // http://chir.ag/projects/name-that-color/
            colorsName: [
                ['Black', 'Tundora', 'Dove Gray', 'Star Dust', 'Pale Slate', 'Gallery', 'Alabaster', 'White'],
                ['Red', 'Orange Peel', 'Yellow', 'Green', 'Cyan', 'Blue', 'Electric Violet', 'Magenta'],
                ['Azalea', 'Karry', 'Egg White', 'Zanah', 'Botticelli', 'Tropical Blue', 'Mischka', 'Twilight'],
                ['Tonys Pink', 'Peach Orange', 'Cream Brulee', 'Sprout', 'Casper', 'Perano', 'Cold Purple', 'Careys Pink'],
                ['Mandy', 'Rajah', 'Dandelion', 'Olivine', 'Gulf Stream', 'Viking', 'Blue Marguerite', 'Puce'],
                ['Guardsman Red', 'Fire Bush', 'Golden Dream', 'Chelsea Cucumber', 'Smalt Blue', 'Boston Blue', 'Butterfly Bush', 'Cadillac'],
                ['Sangria', 'Mai Tai', 'Buddha Gold', 'Forest Green', 'Eden', 'Venice Blue', 'Meteorite', 'Claret'],
                ['Rosewood', 'Cinnamon', 'Olive', 'Parsley', 'Tiber', 'Midnight Blue', 'Valentino', 'Loulou']
            ],
            lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],
            tableClassName: 'table table-bordered',
            insertTableMaxSize: {
                col: 10,
                row: 10
            },
            dialogsInBody: false,
            dialogsFade: false,
            maximumImageFileSize: null,
            callbacks: {
                onInit: null,
                onFocus: null,
                onBlur: null,
                onBlurCodeview: null,
                onEnter: null,
                onKeyup: null,
                onKeydown: null,
                onSubmit: null,
                onImageUpload: null,
                onImageUploadError: null
            },
            codemirror: {
                mode: 'text/html',
                htmlMode: true,
                lineNumbers: true
            },
            keyMap: {
                pc: {
                    'ENTER': 'insertParagraph',
                    'CTRL+Z': 'undo',
                    'CTRL+Y': 'redo',
                    'TAB': 'tab',
                    'SHIFT+TAB': 'untab',
                    'CTRL+B': 'bold',
                    'CTRL+I': 'italic',
                    'CTRL+U': 'underline',
                    'CTRL+SHIFT+S': 'strikethrough',
                    'CTRL+BACKSLASH': 'removeFormat',
                    'CTRL+SHIFT+L': 'justifyLeft',
                    'CTRL+SHIFT+E': 'justifyCenter',
                    'CTRL+SHIFT+R': 'justifyRight',
                    'CTRL+SHIFT+J': 'justifyFull',
                    'CTRL+SHIFT+NUM7': 'insertUnorderedList',
                    'CTRL+SHIFT+NUM8': 'insertOrderedList',
                    'CTRL+LEFTBRACKET': 'outdent',
                    'CTRL+RIGHTBRACKET': 'indent',
                    'CTRL+NUM0': 'formatPara',
                    'CTRL+NUM1': 'formatH1',
                    'CTRL+NUM2': 'formatH2',
                    'CTRL+NUM3': 'formatH3',
                    'CTRL+NUM4': 'formatH4',
                    'CTRL+NUM5': 'formatH5',
                    'CTRL+NUM6': 'formatH6',
                    'CTRL+ENTER': 'insertHorizontalRule',
                    'CTRL+K': 'linkDialog.show'
                },
                mac: {
                    'ENTER': 'insertParagraph',
                    'CMD+Z': 'undo',
                    'CMD+SHIFT+Z': 'redo',
                    'TAB': 'tab',
                    'SHIFT+TAB': 'untab',
                    'CMD+B': 'bold',
                    'CMD+I': 'italic',
                    'CMD+U': 'underline',
                    'CMD+SHIFT+S': 'strikethrough',
                    'CMD+BACKSLASH': 'removeFormat',
                    'CMD+SHIFT+L': 'justifyLeft',
                    'CMD+SHIFT+E': 'justifyCenter',
                    'CMD+SHIFT+R': 'justifyRight',
                    'CMD+SHIFT+J': 'justifyFull',
                    'CMD+SHIFT+NUM7': 'insertUnorderedList',
                    'CMD+SHIFT+NUM8': 'insertOrderedList',
                    'CMD+LEFTBRACKET': 'outdent',
                    'CMD+RIGHTBRACKET': 'indent',
                    'CMD+NUM0': 'formatPara',
                    'CMD+NUM1': 'formatH1',
                    'CMD+NUM2': 'formatH2',
                    'CMD+NUM3': 'formatH3',
                    'CMD+NUM4': 'formatH4',
                    'CMD+NUM5': 'formatH5',
                    'CMD+NUM6': 'formatH6',
                    'CMD+ENTER': 'insertHorizontalRule',
                    'CMD+K': 'linkDialog.show'
                }
            },
            icons: {
                'align': 'note-icon-align',
                'alignCenter': 'note-icon-align-center',
                'alignJustify': 'note-icon-align-justify',
                'alignLeft': 'note-icon-align-left',
                'alignRight': 'note-icon-align-right',
                'rowBelow': 'note-icon-row-below',
                'colBefore': 'note-icon-col-before',
                'colAfter': 'note-icon-col-after',
                'rowAbove': 'note-icon-row-above',
                'rowRemove': 'note-icon-row-remove',
                'colRemove': 'note-icon-col-remove',
                'indent': 'note-icon-align-indent',
                'outdent': 'note-icon-align-outdent',
                'arrowsAlt': 'note-icon-arrows-alt',
                'bold': 'note-icon-bold',
                'caret': 'note-icon-caret',
                'circle': 'note-icon-circle',
                'close': 'note-icon-close',
                'code': 'note-icon-code',
                'eraser': 'note-icon-eraser',
                'font': 'note-icon-font',
                'frame': 'note-icon-frame',
                'italic': 'note-icon-italic',
                'link': 'note-icon-link',
                'unlink': 'note-icon-chain-broken',
                'magic': 'note-icon-magic',
                'menuCheck': 'note-icon-menu-check',
                'minus': 'note-icon-minus',
                'orderedlist': 'note-icon-orderedlist',
                'pencil': 'note-icon-pencil',
                'picture': 'note-icon-picture',
                'question': 'note-icon-question',
                'redo': 'note-icon-redo',
                'square': 'note-icon-square',
                'strikethrough': 'note-icon-strikethrough',
                'subscript': 'note-icon-subscript',
                'superscript': 'note-icon-superscript',
                'table': 'note-icon-table',
                'textHeight': 'note-icon-text-height',
                'trash': 'note-icon-trash',
                'underline': 'note-icon-underline',
                'undo': 'note-icon-undo',
                'unorderedlist': 'note-icon-unorderedlist',
                'video': 'note-icon-video'
            }
        }
    });
    
    })));
    //# sourceMappingURL=summernote-lite.js.map
    ;
    (function($) {
      $.extend($.summernote.lang, {
        'ru-RU': {
          font: {
            bold: 'Полужирный',
            italic: 'Курсив',
            underline: 'Подчёркнутый',
            clear: 'Убрать стили шрифта',
            height: 'Высота линии',
            name: 'Шрифт',
            strikethrough: 'Зачёркнутый',
            subscript: 'Нижний индекс',
            superscript: 'Верхний индекс',
            size: 'Размер шрифта'
          },
          image: {
            image: 'Картинка',
            insert: 'Вставить картинку',
            resizeFull: 'Восстановить размер',
            resizeHalf: 'Уменьшить до 50%',
            resizeQuarter: 'Уменьшить до 25%',
            floatLeft: 'Расположить слева',
            floatRight: 'Расположить справа',
            floatNone: 'Расположение по-умолчанию',
            shapeRounded: 'Форма: Закругленная',
            shapeCircle: 'Форма: Круг',
            shapeThumbnail: 'Форма: Миниатюра',
            shapeNone: 'Форма: Нет',
            dragImageHere: 'Перетащите сюда картинку',
            dropImage: 'Перетащите картинку',
            selectFromFiles: 'Выбрать из файлов',
            maximumFileSize: 'Максимальный размер файла',
            maximumFileSizeError: 'Превышен максимальный размер файла',
            url: 'URL картинки',
            remove: 'Удалить картинку',
            original: 'Оригинал'
          },
          video: {
            video: 'Видео',
            videoLink: 'Ссылка на видео',
            insert: 'Вставить видео',
            url: 'URL видео',
            providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion или Youku)'
          },
          link: {
            link: 'Ссылка',
            insert: 'Вставить ссылку',
            unlink: 'Убрать ссылку',
            edit: 'Редактировать',
            textToDisplay: 'Отображаемый текст',
            url: 'URL для перехода',
            openInNewWindow: 'Открывать в новом окне'
          },
          table: {
            table: 'Таблица',
            addRowAbove: 'Добавить строку выше',
            addRowBelow: 'Добавить строку ниже',
            addColLeft: 'Добавить столбец слева',
            addColRight: 'Добавить столбец справа',
            delRow: 'Удалить строку',
            delCol: 'Удалить столбец',
            delTable: 'Удалить таблицу'
          },
          hr: {
            insert: 'Вставить горизонтальную линию'
          },
          style: {
            style: 'Стиль',
            p: 'Нормальный',
            blockquote: 'Цитата',
            pre: 'Код',
            h1: 'Заголовок 1',
            h2: 'Заголовок 2',
            h3: 'Заголовок 3',
            h4: 'Заголовок 4',
            h5: 'Заголовок 5',
            h6: 'Заголовок 6'
          },
          lists: {
            unordered: 'Маркированный список',
            ordered: 'Нумерованный список'
          },
          options: {
            help: 'Помощь',
            fullscreen: 'На весь экран',
            codeview: 'Исходный код'
          },
          paragraph: {
            paragraph: 'Параграф',
            outdent: 'Уменьшить отступ',
            indent: 'Увеличить отступ',
            left: 'Выровнять по левому краю',
            center: 'Выровнять по центру',
            right: 'Выровнять по правому краю',
            justify: 'Растянуть по ширине'
          },
          color: {
            recent: 'Последний цвет',
            more: 'Еще цвета',
            background: 'Цвет фона',
            foreground: 'Цвет шрифта',
            transparent: 'Прозрачный',
            setTransparent: 'Сделать прозрачным',
            reset: 'Сброс',
            resetToDefault: 'Восстановить умолчания'
          },
          shortcut: {
            shortcuts: 'Сочетания клавиш',
            close: 'Закрыть',
            textFormatting: 'Форматирование текста',
            action: 'Действие',
            paragraphFormatting: 'Форматирование параграфа',
            documentStyle: 'Стиль документа',
            extraKeys: 'Дополнительные комбинации'
          },
          help: {
            'insertParagraph': 'Новый параграф',
            'undo': 'Отменить последнюю команду',
            'redo': 'Повторить последнюю команду',
            'tab': 'Tab',
            'untab': 'Untab',
            'bold': 'Установить стиль "Жирный"',
            'italic': 'Установить стиль "Наклонный"',
            'underline': 'Установить стиль "Подчеркнутый"',
            'strikethrough': 'Установить стиль "Зачеркнутый"',
            'removeFormat': 'Сборсить стили',
            'justifyLeft': 'Выровнять по левому краю',
            'justifyCenter': 'Выровнять по центру',
            'justifyRight': 'Выровнять по правому краю',
            'justifyFull': 'Растянуть на всю ширину',
            'insertUnorderedList': 'Включить/отключить маркированный список',
            'insertOrderedList': 'Включить/отключить нумерованный список',
            'outdent': 'Убрать отступ в текущем параграфе',
            'indent': 'Вставить отступ в текущем параграфе',
            'formatPara': 'Форматировать текущий блок как параграф (тег P)',
            'formatH1': 'Форматировать текущий блок как H1',
            'formatH2': 'Форматировать текущий блок как H2',
            'formatH3': 'Форматировать текущий блок как H3',
            'formatH4': 'Форматировать текущий блок как H4',
            'formatH5': 'Форматировать текущий блок как H5',
            'formatH6': 'Форматировать текущий блок как H6',
            'insertHorizontalRule': 'Вставить горизонтальную черту',
            'linkDialog.show': 'Показать диалог "Ссылка"'
          },
          history: {
            undo: 'Отменить',
            redo: 'Повтор'
          },
          specialChar: {
            specialChar: 'SPECIAL CHARACTERS',
            select: 'Select Special characters'
          }
        }
      });
    })(jQuery);
    $(document).ready(function(){
    
      if ($('[data-provider="summernote"]').length < 1) { return false; }
    
      const sendFile = function(file, toSummernote) {
        var data = new FormData;
        data.append('file', file);
        return $.ajax({
          data: data,
          type: 'POST',
          url: Routes.blog_image_anyfiles_path(params),
          cache: false,
          contentType: false,
          processData: false,
          success: function(data) {
            return toSummernote.summernote("insertImage", data.filelink);
          }
        });
      };
    
      csrf_token = $('meta[name=csrf-token]').attr('content');
      csrf_param = $('meta[name=csrf-param]').attr('content');
      var params = {};
      if (csrf_param && csrf_token) {
        params[csrf_param] = encodeURIComponent(csrf_token);
      }
      $('[data-provider="summernote"]').summernote({
        height: 300,
        lang: 'ru-RU',
        styleTags: ['p', 'blockquote', 'pre'],
        toolbar: [
          ['style', ['style']],
          ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],
          ['para', ['ul', 'ol', 'paragraph']],
          ['insert', ['link', 'picture']],
          ['controls', ['fullscreen', 'codeview']],
          ['misc', ['undo', 'redo']],
        ],
        callbacks: {
          onImageUpload: function(files) {
            sendFile(files[0], $(this));
          }
        }
      });
    
      setTimeout(function(){
        $('.note-modal-footer').find('button').addClass('btn_green').removeClass('note-btn-primary note-btn');
        $('.note-modal-content').find('.checkbox').remove();
      }, 2000);
    })
    ;
    /**!
     * Sortable
     * @author	RubaXa   <trash@rubaxa.org>
     * @license MIT
     */
    
    
    
    (function (factory) {
        "use strict";
    
        if (typeof define === "function" && define.amd) {
            define(factory);
        }
        else if (typeof module != "undefined" && typeof module.exports != "undefined") {
            module.exports = factory();
        }
        else if (typeof Package !== "undefined") {
            Sortable = factory();  // export for Meteor.js
        }
        else {
            /* jshint sub:true */
            window["Sortable"] = factory();
        }
    })(function () {
        "use strict";
        
        if (typeof window == "undefined" || typeof window.document == "undefined") {
            return function() {
                throw new Error( "Sortable.js requires a window with a document" );
            }
        }
    
        var dragEl,
            parentEl,
            ghostEl,
            cloneEl,
            rootEl,
            nextEl,
    
            scrollEl,
            scrollParentEl,
    
            lastEl,
            lastCSS,
            lastParentCSS,
    
            oldIndex,
            newIndex,
    
            activeGroup,
            autoScroll = {},
    
            tapEvt,
            touchEvt,
    
            moved,
    
            /** @const */
            RSPACE = /\s+/g,
    
            expando = 'Sortable' + (new Date).getTime(),
    
            win = window,
            document = win.document,
            parseInt = win.parseInt,
    
            supportDraggable = !!('draggable' in document.createElement('div')),
            supportCssPointerEvents = (function (el) {
                el = document.createElement('x');
                el.style.cssText = 'pointer-events:auto';
                return el.style.pointerEvents === 'auto';
            })(),
    
            _silent = false,
    
            abs = Math.abs,
            slice = [].slice,
    
            touchDragOverListeners = [],
    
            _autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {
                // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
                if (rootEl && options.scroll) {
                    var el,
                        rect,
                        sens = options.scrollSensitivity,
                        speed = options.scrollSpeed,
    
                        x = evt.clientX,
                        y = evt.clientY,
    
                        winWidth = window.innerWidth,
                        winHeight = window.innerHeight,
    
                        vx,
                        vy
                    ;
    
                    // Delect scrollEl
                    if (scrollParentEl !== rootEl) {
                        scrollEl = options.scroll;
                        scrollParentEl = rootEl;
    
                        if (scrollEl === true) {
                            scrollEl = rootEl;
    
                            do {
                                if ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||
                                    (scrollEl.offsetHeight < scrollEl.scrollHeight)
                                ) {
                                    break;
                                }
                                /* jshint boss:true */
                            } while (scrollEl = scrollEl.parentNode);
                        }
                    }
    
                    if (scrollEl) {
                        el = scrollEl;
                        rect = scrollEl.getBoundingClientRect();
                        vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
                        vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
                    }
    
    
                    if (!(vx || vy)) {
                        vx = (winWidth - x <= sens) - (x <= sens);
                        vy = (winHeight - y <= sens) - (y <= sens);
    
                        /* jshint expr:true */
                        (vx || vy) && (el = win);
                    }
    
    
                    if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
                        autoScroll.el = el;
                        autoScroll.vx = vx;
                        autoScroll.vy = vy;
    
                        clearInterval(autoScroll.pid);
    
                        if (el) {
                            autoScroll.pid = setInterval(function () {
                                if (el === win) {
                                    win.scrollTo(win.pageXOffset + vx * speed, win.pageYOffset + vy * speed);
                                } else {
                                    vy && (el.scrollTop += vy * speed);
                                    vx && (el.scrollLeft += vx * speed);
                                }
                            }, 24);
                        }
                    }
                }
            }, 30),
    
            _prepareGroup = function (options) {
                var group = options.group;
    
                if (!group || typeof group != 'object') {
                    group = options.group = {name: group};
                }
    
                ['pull', 'put'].forEach(function (key) {
                    if (!(key in group)) {
                        group[key] = true;
                    }
                });
    
                options.groups = ' ' + group.name + (group.put.join ? ' ' + group.put.join(' ') : '') + ' ';
            }
        ;
    
    
    
        /**
         * @class  Sortable
         * @param  {HTMLElement}  el
         * @param  {Object}       [options]
         */
        function Sortable(el, options) {
            if (!(el && el.nodeType && el.nodeType === 1)) {
                throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);
            }
    
            this.el = el; // root element
            this.options = options = _extend({}, options);
    
    
            // Export instance
            el[expando] = this;
    
    
            // Default options
            var defaults = {
                group: Math.random(),
                sort: true,
                disabled: false,
                store: null,
                handle: null,
                scroll: true,
                scrollSensitivity: 30,
                scrollSpeed: 10,
                draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
                ghostClass: 'sortable-ghost',
                chosenClass: 'sortable-chosen',
                ignore: 'a, img',
                filter: null,
                animation: 0,
                setData: function (dataTransfer, dragEl) {
                    dataTransfer.setData('Text', dragEl.textContent);
                },
                dropBubble: false,
                dragoverBubble: false,
                dataIdAttr: 'data-id',
                delay: 0,
                forceFallback: false,
                fallbackClass: 'sortable-fallback',
                fallbackOnBody: false
            };
    
    
            // Set default options
            for (var name in defaults) {
                !(name in options) && (options[name] = defaults[name]);
            }
    
            _prepareGroup(options);
    
            // Bind all private methods
            for (var fn in this) {
                if (fn.charAt(0) === '_') {
                    this[fn] = this[fn].bind(this);
                }
            }
    
            // Setup drag mode
            this.nativeDraggable = options.forceFallback ? false : supportDraggable;
    
            // Bind events
            _on(el, 'mousedown', this._onTapStart);
            _on(el, 'touchstart', this._onTapStart);
    
            if (this.nativeDraggable) {
                _on(el, 'dragover', this);
                _on(el, 'dragenter', this);
            }
    
            touchDragOverListeners.push(this._onDragOver);
    
            // Restore sorting
            options.store && this.sort(options.store.get(this));
        }
    
    
        Sortable.prototype = /** @lends Sortable.prototype */ {
            constructor: Sortable,
    
            _onTapStart: function (/** Event|TouchEvent */evt) {
                var _this = this,
                    el = this.el,
                    options = this.options,
                    type = evt.type,
                    touch = evt.touches && evt.touches[0],
                    target = (touch || evt).target,
                    originalTarget = target,
                    filter = options.filter;
    
    
                if (type === 'mousedown' && evt.button !== 0 || options.disabled) {
                    return; // only left button or enabled
                }
    
                target = _closest(target, options.draggable, el);
    
                if (!target) {
                    return;
                }
    
                // get the index of the dragged element within its parent
                oldIndex = _index(target, options.draggable);
    
                // Check filter
                if (typeof filter === 'function') {
                    if (filter.call(this, evt, target, this)) {
                        _dispatchEvent(_this, originalTarget, 'filter', target, el, oldIndex);
                        evt.preventDefault();
                        return; // cancel dnd
                    }
                }
                else if (filter) {
                    filter = filter.split(',').some(function (criteria) {
                        criteria = _closest(originalTarget, criteria.trim(), el);
    
                        if (criteria) {
                            _dispatchEvent(_this, criteria, 'filter', target, el, oldIndex);
                            return true;
                        }
                    });
    
                    if (filter) {
                        evt.preventDefault();
                        return; // cancel dnd
                    }
                }
    
    
                if (options.handle && !_closest(originalTarget, options.handle, el)) {
                    return;
                }
    
    
                // Prepare `dragstart`
                this._prepareDragStart(evt, touch, target);
            },
    
            _prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target) {
                var _this = this,
                    el = _this.el,
                    options = _this.options,
                    ownerDocument = el.ownerDocument,
                    dragStartFn;
    
                if (target && !dragEl && (target.parentNode === el)) {
                    tapEvt = evt;
    
                    rootEl = el;
                    dragEl = target;
                    parentEl = dragEl.parentNode;
                    nextEl = dragEl.nextSibling;
                    activeGroup = options.group;
    
                    dragStartFn = function () {
                        // Delayed drag has been triggered
                        // we can re-enable the events: touchmove/mousemove
                        _this._disableDelayedDrag();
    
                        // Make the element draggable
                        dragEl.draggable = true;
    
                        // Chosen item
                        _toggleClass(dragEl, _this.options.chosenClass, true);
    
                        // Bind the events: dragstart/dragend
                        _this._triggerDragStart(touch);
                    };
    
                    // Disable "draggable"
                    options.ignore.split(',').forEach(function (criteria) {
                        _find(dragEl, criteria.trim(), _disableDraggable);
                    });
    
                    _on(ownerDocument, 'mouseup', _this._onDrop);
                    _on(ownerDocument, 'touchend', _this._onDrop);
                    _on(ownerDocument, 'touchcancel', _this._onDrop);
    
                    if (options.delay) {
                        // If the user moves the pointer or let go the click or touch
                        // before the delay has been reached:
                        // disable the delayed drag
                        _on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
                        _on(ownerDocument, 'touchend', _this._disableDelayedDrag);
                        _on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
                        _on(ownerDocument, 'mousemove', _this._disableDelayedDrag);
                        _on(ownerDocument, 'touchmove', _this._disableDelayedDrag);
    
                        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
                    } else {
                        dragStartFn();
                    }
                }
            },
    
            _disableDelayedDrag: function () {
                var ownerDocument = this.el.ownerDocument;
    
                clearTimeout(this._dragStartTimer);
                _off(ownerDocument, 'mouseup', this._disableDelayedDrag);
                _off(ownerDocument, 'touchend', this._disableDelayedDrag);
                _off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
                _off(ownerDocument, 'mousemove', this._disableDelayedDrag);
                _off(ownerDocument, 'touchmove', this._disableDelayedDrag);
            },
    
            _triggerDragStart: function (/** Touch */touch) {
                if (touch) {
                    // Touch device support
                    tapEvt = {
                        target: dragEl,
                        clientX: touch.clientX,
                        clientY: touch.clientY
                    };
    
                    this._onDragStart(tapEvt, 'touch');
                }
                else if (!this.nativeDraggable) {
                    this._onDragStart(tapEvt, true);
                }
                else {
                    _on(dragEl, 'dragend', this);
                    _on(rootEl, 'dragstart', this._onDragStart);
                }
    
                try {
                    if (document.selection) {
                        document.selection.empty();
                    } else {
                        window.getSelection().removeAllRanges();
                    }
                } catch (err) {
                }
            },
    
            _dragStarted: function () {
                if (rootEl && dragEl) {
                    // Apply effect
                    _toggleClass(dragEl, this.options.ghostClass, true);
    
                    Sortable.active = this;
    
                    // Drag start event
                    _dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);
                }
            },
    
            _emulateDragOver: function () {
                if (touchEvt) {
                    if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {
                        return;
                    }
    
                    this._lastX = touchEvt.clientX;
                    this._lastY = touchEvt.clientY;
    
                    if (!supportCssPointerEvents) {
                        _css(ghostEl, 'display', 'none');
                    }
    
                    var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),
                        parent = target,
                        groupName = ' ' + this.options.group.name + '',
                        i = touchDragOverListeners.length;
    
                    if (parent) {
                        do {
                            if (parent[expando] && parent[expando].options.groups.indexOf(groupName) > -1) {
                                while (i--) {
                                    touchDragOverListeners[i]({
                                        clientX: touchEvt.clientX,
                                        clientY: touchEvt.clientY,
                                        target: target,
                                        rootEl: parent
                                    });
                                }
    
                                break;
                            }
    
                            target = parent; // store last element
                        }
                        /* jshint boss:true */
                        while (parent = parent.parentNode);
                    }
    
                    if (!supportCssPointerEvents) {
                        _css(ghostEl, 'display', '');
                    }
                }
            },
    
    
            _onTouchMove: function (/**TouchEvent*/evt) {
                if (tapEvt) {
                    // only set the status to dragging, when we are actually dragging
                    if (!Sortable.active) {
                        this._dragStarted();
                    }
    
                    // as well as creating the ghost element on the document body
                    this._appendGhost();
    
                    var touch = evt.touches ? evt.touches[0] : evt,
                        dx = touch.clientX - tapEvt.clientX,
                        dy = touch.clientY - tapEvt.clientY,
                        translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';
    
                    moved = true;
                    touchEvt = touch;
    
                    _css(ghostEl, 'webkitTransform', translate3d);
                    _css(ghostEl, 'mozTransform', translate3d);
                    _css(ghostEl, 'msTransform', translate3d);
                    _css(ghostEl, 'transform', translate3d);
    
                    evt.preventDefault();
                }
            },
    
            _appendGhost: function () {
                if (!ghostEl) {
                    var rect = dragEl.getBoundingClientRect(),
                        css = _css(dragEl),
                        options = this.options,
                        ghostRect;
    
                    ghostEl = dragEl.cloneNode(true);
    
                    _toggleClass(ghostEl, options.ghostClass, false);
                    _toggleClass(ghostEl, options.fallbackClass, true);
    
                    _css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));
                    _css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));
                    _css(ghostEl, 'width', rect.width);
                    _css(ghostEl, 'height', rect.height);
                    _css(ghostEl, 'opacity', '0.8');
                    _css(ghostEl, 'position', 'fixed');
                    _css(ghostEl, 'zIndex', '100000');
                    _css(ghostEl, 'pointerEvents', 'none');
    
                    options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);
    
                    // Fixing dimensions.
                    ghostRect = ghostEl.getBoundingClientRect();
                    _css(ghostEl, 'width', rect.width * 2 - ghostRect.width);
                    _css(ghostEl, 'height', rect.height * 2 - ghostRect.height);
                }
            },
    
            _onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {
                var dataTransfer = evt.dataTransfer,
                    options = this.options;
    
                this._offUpEvents();
    
                if (activeGroup.pull == 'clone') {
                    cloneEl = dragEl.cloneNode(true);
                    _css(cloneEl, 'display', 'none');
                    rootEl.insertBefore(cloneEl, dragEl);
                }
    
                if (useFallback) {
    
                    if (useFallback === 'touch') {
                        // Bind touch events
                        _on(document, 'touchmove', this._onTouchMove);
                        _on(document, 'touchend', this._onDrop);
                        _on(document, 'touchcancel', this._onDrop);
                    } else {
                        // Old brwoser
                        _on(document, 'mousemove', this._onTouchMove);
                        _on(document, 'mouseup', this._onDrop);
                    }
    
                    this._loopId = setInterval(this._emulateDragOver, 50);
                }
                else {
                    if (dataTransfer) {
                        dataTransfer.effectAllowed = 'move';
                        options.setData && options.setData.call(this, dataTransfer, dragEl);
                    }
    
                    _on(document, 'drop', this);
                    setTimeout(this._dragStarted, 0);
                }
            },
    
            _onDragOver: function (/**Event*/evt) {
                var el = this.el,
                    target,
                    dragRect,
                    revert,
                    options = this.options,
                    group = options.group,
                    groupPut = group.put,
                    isOwner = (activeGroup === group),
                    canSort = options.sort;
    
                if (evt.preventDefault !== void 0) {
                    evt.preventDefault();
                    !options.dragoverBubble && evt.stopPropagation();
                }
    
                moved = true;
    
                if (activeGroup && !options.disabled &&
                    (isOwner
                        ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
                        : activeGroup.pull && groupPut && (
                            (activeGroup.name === group.name) || // by Name
                            (groupPut.indexOf && ~groupPut.indexOf(activeGroup.name)) // by Array
                        )
                    ) &&
                    (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
                ) {
                    // Smart auto-scrolling
                    _autoScroll(evt, options, this.el);
    
                    if (_silent) {
                        return;
                    }
    
                    target = _closest(evt.target, options.draggable, el);
                    dragRect = dragEl.getBoundingClientRect();
    
                    if (revert) {
                        _cloneHide(true);
    
                        if (cloneEl || nextEl) {
                            rootEl.insertBefore(dragEl, cloneEl || nextEl);
                        }
                        else if (!canSort) {
                            rootEl.appendChild(dragEl);
                        }
    
                        return;
                    }
    
    
                    if ((el.children.length === 0) || (el.children[0] === ghostEl) ||
                        (el === evt.target) && (target = _ghostIsLast(el, evt))
                    ) {
    
                        if (target) {
                            if (target.animated) {
                                return;
                            }
    
                            targetRect = target.getBoundingClientRect();
                        }
    
                        _cloneHide(isOwner);
    
                        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect) !== false) {
                            if (!dragEl.contains(el)) {
                                el.appendChild(dragEl);
                                parentEl = el; // actualization
                            }
    
                            this._animate(dragRect, dragEl);
                            target && this._animate(targetRect, target);
                        }
                    }
                    else if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {
                        if (lastEl !== target) {
                            lastEl = target;
                            lastCSS = _css(target);
                            lastParentCSS = _css(target.parentNode);
                        }
    
    
                        var targetRect = target.getBoundingClientRect(),
                            width = targetRect.right - targetRect.left,
                            height = targetRect.bottom - targetRect.top,
                            floating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display)
                                || (lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0),
                            isWide = (target.offsetWidth > dragEl.offsetWidth),
                            isLong = (target.offsetHeight > dragEl.offsetHeight),
                            halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
                            nextSibling = target.nextElementSibling,
                            moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect),
                            after
                        ;
    
                        if (moveVector !== false) {
                            _silent = true;
                            setTimeout(_unsilent, 30);
    
                            _cloneHide(isOwner);
    
                            if (moveVector === 1 || moveVector === -1) {
                                after = (moveVector === 1);
                            }
                            else if (floating) {
                                var elTop = dragEl.offsetTop,
                                    tgTop = target.offsetTop;
    
                                if (elTop === tgTop) {
                                    after = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;
                                } else {
                                    after = tgTop > elTop;
                                }
                            } else {
                                after = (nextSibling !== dragEl) && !isLong || halfway && isLong;
                            }
    
                            if (!dragEl.contains(el)) {
                                if (after && !nextSibling) {
                                    el.appendChild(dragEl);
                                } else {
                                    target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
                                }
                            }
    
                            parentEl = dragEl.parentNode; // actualization
    
                            this._animate(dragRect, dragEl);
                            this._animate(targetRect, target);
                        }
                    }
                }
            },
    
            _animate: function (prevRect, target) {
                var ms = this.options.animation;
    
                if (ms) {
                    var currentRect = target.getBoundingClientRect();
    
                    _css(target, 'transition', 'none');
                    _css(target, 'transform', 'translate3d('
                        + (prevRect.left - currentRect.left) + 'px,'
                        + (prevRect.top - currentRect.top) + 'px,0)'
                    );
    
                    target.offsetWidth; // repaint
    
                    _css(target, 'transition', 'all ' + ms + 'ms');
                    _css(target, 'transform', 'translate3d(0,0,0)');
    
                    clearTimeout(target.animated);
                    target.animated = setTimeout(function () {
                        _css(target, 'transition', '');
                        _css(target, 'transform', '');
                        target.animated = false;
                    }, ms);
                }
            },
    
            _offUpEvents: function () {
                var ownerDocument = this.el.ownerDocument;
    
                _off(document, 'touchmove', this._onTouchMove);
                _off(ownerDocument, 'mouseup', this._onDrop);
                _off(ownerDocument, 'touchend', this._onDrop);
                _off(ownerDocument, 'touchcancel', this._onDrop);
            },
    
            _onDrop: function (/**Event*/evt) {
                var el = this.el,
                    options = this.options;
    
                clearInterval(this._loopId);
                clearInterval(autoScroll.pid);
                clearTimeout(this._dragStartTimer);
    
                // Unbind events
                _off(document, 'mousemove', this._onTouchMove);
    
                if (this.nativeDraggable) {
                    _off(document, 'drop', this);
                    _off(el, 'dragstart', this._onDragStart);
                }
    
                this._offUpEvents();
    
                if (evt) {
                    if (moved) {
                        evt.preventDefault();
                        !options.dropBubble && evt.stopPropagation();
                    }
    
                    ghostEl && ghostEl.parentNode.removeChild(ghostEl);
    
                    if (dragEl) {
                        if (this.nativeDraggable) {
                            _off(dragEl, 'dragend', this);
                        }
    
                        _disableDraggable(dragEl);
    
                        // Remove class's
                        _toggleClass(dragEl, this.options.ghostClass, false);
                        _toggleClass(dragEl, this.options.chosenClass, false);
    
                        if (rootEl !== parentEl) {
                            newIndex = _index(dragEl, options.draggable);
    
                            if (newIndex >= 0) {
                                // drag from one list and drop into another
                                _dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
                                _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
    
                                // Add event
                                _dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);
    
                                // Remove event
                                _dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);
                            }
                        }
                        else {
                            // Remove clone
                            cloneEl && cloneEl.parentNode.removeChild(cloneEl);
    
                            if (dragEl.nextSibling !== nextEl) {
                                // Get the index of the dragged element within its parent
                                newIndex = _index(dragEl, options.draggable);
    
                                if (newIndex >= 0) {
                                    // drag & drop within the same list
                                    _dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);
                                    _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
                                }
                            }
                        }
    
                        if (Sortable.active) {
                            if (newIndex === null || newIndex === -1) {
                                newIndex = oldIndex;
                            }
    
                            _dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);
    
                            // Save sorting
                            this.save();
                        }
                    }
    
                }
                this._nulling();
            },
    
            _nulling: function() {
                // Nulling
                rootEl =
                dragEl =
                parentEl =
                ghostEl =
                nextEl =
                cloneEl =
    
                scrollEl =
                scrollParentEl =
    
                tapEvt =
                touchEvt =
    
                moved =
                newIndex =
    
                lastEl =
                lastCSS =
    
                activeGroup =
                Sortable.active = null;
            },
    
            handleEvent: function (/**Event*/evt) {
                var type = evt.type;
    
                if (type === 'dragover' || type === 'dragenter') {
                    if (dragEl) {
                        this._onDragOver(evt);
                        _globalDragOver(evt);
                    }
                }
                else if (type === 'drop' || type === 'dragend') {
                    this._onDrop(evt);
                }
            },
    
    
            /**
             * Serializes the item into an array of string.
             * @returns {String[]}
             */
            toArray: function () {
                var order = [],
                    el,
                    children = this.el.children,
                    i = 0,
                    n = children.length,
                    options = this.options;
    
                for (; i < n; i++) {
                    el = children[i];
                    if (_closest(el, options.draggable, this.el)) {
                        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
                    }
                }
    
                return order;
            },
    
    
            /**
             * Sorts the elements according to the array.
             * @param  {String[]}  order  order of the items
             */
            sort: function (order) {
                var items = {}, rootEl = this.el;
    
                this.toArray().forEach(function (id, i) {
                    var el = rootEl.children[i];
    
                    if (_closest(el, this.options.draggable, rootEl)) {
                        items[id] = el;
                    }
                }, this);
    
                order.forEach(function (id) {
                    if (items[id]) {
                        rootEl.removeChild(items[id]);
                        rootEl.appendChild(items[id]);
                    }
                });
            },
    
    
            /**
             * Save the current sorting
             */
            save: function () {
                var store = this.options.store;
                store && store.set(this);
            },
    
    
            /**
             * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
             * @param   {HTMLElement}  el
             * @param   {String}       [selector]  default: `options.draggable`
             * @returns {HTMLElement|null}
             */
            closest: function (el, selector) {
                return _closest(el, selector || this.options.draggable, this.el);
            },
    
    
            /**
             * Set/get option
             * @param   {string} name
             * @param   {*}      [value]
             * @returns {*}
             */
            option: function (name, value) {
                var options = this.options;
    
                if (value === void 0) {
                    return options[name];
                } else {
                    options[name] = value;
    
                    if (name === 'group') {
                        _prepareGroup(options);
                    }
                }
            },
    
    
            /**
             * Destroy
             */
            destroy: function () {
                var el = this.el;
    
                el[expando] = null;
    
                _off(el, 'mousedown', this._onTapStart);
                _off(el, 'touchstart', this._onTapStart);
    
                if (this.nativeDraggable) {
                    _off(el, 'dragover', this);
                    _off(el, 'dragenter', this);
                }
    
                // Remove draggable attributes
                Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
                    el.removeAttribute('draggable');
                });
    
                touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);
    
                this._onDrop();
    
                this.el = el = null;
            }
        };
    
    
        function _cloneHide(state) {
            if (cloneEl && (cloneEl.state !== state)) {
                _css(cloneEl, 'display', state ? 'none' : '');
                !state && cloneEl.state && rootEl.insertBefore(cloneEl, dragEl);
                cloneEl.state = state;
            }
        }
    
    
        function _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {
            if (el) {
                ctx = ctx || document;
    
                do {
                    if (
                        (selector === '>*' && el.parentNode === ctx)
                        || _matches(el, selector)
                    ) {
                        return el;
                    }
                }
                while (el !== ctx && (el = el.parentNode));
            }
    
            return null;
        }
    
    
        function _globalDragOver(/**Event*/evt) {
            if (evt.dataTransfer) {
                evt.dataTransfer.dropEffect = 'move';
            }
            evt.preventDefault();
        }
    
    
        function _on(el, event, fn) {
            el.addEventListener(event, fn, false);
        }
    
    
        function _off(el, event, fn) {
            el.removeEventListener(event, fn, false);
        }
    
    
        function _toggleClass(el, name, state) {
            if (el) {
                if (el.classList) {
                    el.classList[state ? 'add' : 'remove'](name);
                }
                else {
                    var className = (' ' + el.className + ' ').replace(RSPACE, ' ').replace(' ' + name + ' ', ' ');
                    el.className = (className + (state ? ' ' + name : '')).replace(RSPACE, ' ');
                }
            }
        }
    
    
        function _css(el, prop, val) {
            var style = el && el.style;
    
            if (style) {
                if (val === void 0) {
                    if (document.defaultView && document.defaultView.getComputedStyle) {
                        val = document.defaultView.getComputedStyle(el, '');
                    }
                    else if (el.currentStyle) {
                        val = el.currentStyle;
                    }
    
                    return prop === void 0 ? val : val[prop];
                }
                else {
                    if (!(prop in style)) {
                        prop = '-webkit-' + prop;
                    }
    
                    style[prop] = val + (typeof val === 'string' ? '' : 'px');
                }
            }
        }
    
    
        function _find(ctx, tagName, iterator) {
            if (ctx) {
                var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;
    
                if (iterator) {
                    for (; i < n; i++) {
                        iterator(list[i], i);
                    }
                }
    
                return list;
            }
    
            return [];
        }
    
    
    
        function _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {
            var evt = document.createEvent('Event'),
                options = (sortable || rootEl[expando]).options,
                onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
    
            evt.initEvent(name, true, true);
    
            evt.to = rootEl;
            evt.from = fromEl || rootEl;
            evt.item = targetEl || rootEl;
            evt.clone = cloneEl;
    
            evt.oldIndex = startIndex;
            evt.newIndex = newIndex;
    
            rootEl.dispatchEvent(evt);
    
            if (options[onName]) {
                options[onName].call(sortable, evt);
            }
        }
    
    
        function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect) {
            var evt,
                sortable = fromEl[expando],
                onMoveFn = sortable.options.onMove,
                retVal;
    
            evt = document.createEvent('Event');
            evt.initEvent('move', true, true);
    
            evt.to = toEl;
            evt.from = fromEl;
            evt.dragged = dragEl;
            evt.draggedRect = dragRect;
            evt.related = targetEl || toEl;
            evt.relatedRect = targetRect || toEl.getBoundingClientRect();
    
            fromEl.dispatchEvent(evt);
    
            if (onMoveFn) {
                retVal = onMoveFn.call(sortable, evt);
            }
    
            return retVal;
        }
    
    
        function _disableDraggable(el) {
            el.draggable = false;
        }
    
    
        function _unsilent() {
            _silent = false;
        }
    
    
        /** @returns {HTMLElement|false} */
        function _ghostIsLast(el, evt) {
            var lastEl = el.lastElementChild,
                    rect = lastEl.getBoundingClientRect();
    
            return ((evt.clientY - (rect.top + rect.height) > 5) || (evt.clientX - (rect.right + rect.width) > 5)) && lastEl; // min delta
        }
    
    
        /**
         * Generate id
         * @param   {HTMLElement} el
         * @returns {String}
         * @private
         */
        function _generateId(el) {
            var str = el.tagName + el.className + el.src + el.href + el.textContent,
                i = str.length,
                sum = 0;
    
            while (i--) {
                sum += str.charCodeAt(i);
            }
    
            return sum.toString(36);
        }
    
        /**
         * Returns the index of an element within its parent for a selected set of
         * elements
         * @param  {HTMLElement} el
         * @param  {selector} selector
         * @return {number}
         */
        function _index(el, selector) {
            var index = 0;
    
            if (!el || !el.parentNode) {
                return -1;
            }
    
            while (el && (el = el.previousElementSibling)) {
                if (el.nodeName.toUpperCase() !== 'TEMPLATE'
                        && _matches(el, selector)) {
                    index++;
                }
            }
    
            return index;
        }
    
        function _matches(/**HTMLElement*/el, /**String*/selector) {
            if (el) {
                selector = selector.split('.');
    
                var tag = selector.shift().toUpperCase(),
                    re = new RegExp('\\s(' + selector.join('|') + ')(?=\\s)', 'g');
    
                return (
                    (tag === '' || el.nodeName.toUpperCase() == tag) &&
                    (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)
                );
            }
    
            return false;
        }
    
        function _throttle(callback, ms) {
            var args, _this;
    
            return function () {
                if (args === void 0) {
                    args = arguments;
                    _this = this;
    
                    setTimeout(function () {
                        if (args.length === 1) {
                            callback.call(_this, args[0]);
                        } else {
                            callback.apply(_this, args);
                        }
    
                        args = void 0;
                    }, ms);
                }
            };
        }
    
        function _extend(dst, src) {
            if (dst && src) {
                for (var key in src) {
                    if (src.hasOwnProperty(key)) {
                        dst[key] = src[key];
                    }
                }
            }
    
            return dst;
        }
    
    
        // Export utils
        Sortable.utils = {
            on: _on,
            off: _off,
            css: _css,
            find: _find,
            is: function (el, selector) {
                return !!_closest(el, selector, el);
            },
            extend: _extend,
            throttle: _throttle,
            closest: _closest,
            toggleClass: _toggleClass,
            index: _index
        };
    
    
        /**
         * Create sortable instance
         * @param {HTMLElement}  el
         * @param {Object}      [options]
         */
        Sortable.create = function (el, options) {
            return new Sortable(el, options);
        };
    
    
        // Export
        Sortable.version = '1.4.2';
        return Sortable;
    });
    /**
     * jQuery plugin for Sortable
     * @author	RubaXa   <trash@rubaxa.org>
     * @license MIT
     */
    
    (function (factory) {
        "use strict";
    
        if (typeof define === "function" && define.amd) {
            define(["jquery"], factory);
        }
        else {
            /* jshint sub:true */
            factory(jQuery);
        }
    })(function ($) {
        "use strict";
    
    
        /* CODE */
    
    
        /**
         * jQuery plugin for Sortable
         * @param   {Object|String} options
         * @param   {..*}           [args]
         * @returns {jQuery|*}
         */
        $.fn.sortable = function (options) {
            var retVal,
                args = arguments;
    
            this.each(function () {
                var $el = $(this),
                    sortable = $el.data('sortable');
    
                if (!sortable && (options instanceof Object || !options)) {
                    sortable = new Sortable(this, options);
                    $el.data('sortable', sortable);
                }
    
                if (sortable) {
                    if (options === 'widget') {
                        return sortable;
                    }
                    else if (options === 'destroy') {
                        sortable.destroy();
                        $el.removeData('sortable');
                    }
                    else if (typeof sortable[options] === 'function') {
                        retVal = sortable[options].apply(sortable, [].slice.call(args, 1));
                    }
                    else if (options in sortable.options) {
                        retVal = sortable.option.apply(sortable, args);
                    }
                }
            });
    
            return (retVal === void 0) ? this : retVal;
        };
    });
    
    
    /*rateYo V2.3.2, A simple and flexible star rating plugin
    prashanth pamidi (https://github.com/prrashi)*/
    
    !function(a){"use strict";function b(){var a=!1;return function(b){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(b)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(b.substr(0,4)))&&(a=!0)}(navigator.userAgent||navigator.vendor||window.opera),a}function c(a,b,c){return a===b?a=b:a===c&&(a=c),a}function d(a,b,c){if(!(a>=b&&a<=c))throw Error("Invalid Rating, expected value between "+b+" and "+c);return a}function e(a){return void 0!==a}function f(a,b,c){var d=c/100*(b-a);return d=Math.round(a+d).toString(16),1===d.length&&(d="0"+d),d}function g(a,b,c){if(!a||!b)return null;c=e(c)?c:0,a=q(a),b=q(b);var d=f(a.r,b.r,c),g=f(a.b,b.b,c);return"#"+d+f(a.g,b.g,c)+g}function h(f,i){function k(a){e(a)||(a=i.rating),Z=a;var b=a/P,c=b*R;b>1&&(c+=(Math.ceil(b)-1)*T),r(i.ratedFill),c=i.rtl?100-c:c,c<0?c=0:c>100&&(c=100),X.css("width",c+"%")}function l(){U=Q*i.numStars+S*(i.numStars-1),R=Q/U*100,T=S/U*100,f.width(U),k()}function n(a){var b=i.starWidth=a;return Q=window.parseFloat(i.starWidth.replace("px","")),W.find("svg").attr({width:i.starWidth,height:b}),X.find("svg").attr({width:i.starWidth,height:b}),l(),f}function p(a){return i.spacing=a,S=parseFloat(i.spacing.replace("px","")),W.find("svg:not(:first-child)").css({"margin-left":a}),X.find("svg:not(:first-child)").css({"margin-left":a}),l(),f}function q(a){return i.normalFill=a,(i.rtl?X:W).find("svg").attr({fill:i.normalFill}),f}function r(a){if(i.multiColor){var b=Z-Y,c=b/i.maxValue*100,d=i.multiColor||{};a=g(d.startColor||o.startColor,d.endColor||o.endColor,c)}else _=a;return i.ratedFill=a,(i.rtl?W:X).find("svg").attr({fill:i.ratedFill}),f}function s(a){a=!!a,i.rtl=a,q(i.normalFill),k()}function t(a){i.multiColor=a,r(a?a:_)}function u(b){i.numStars=b,P=i.maxValue/i.numStars,W.empty(),X.empty();for(var c=0;c<i.numStars;c++)W.append(a(i.starSvg||m)),X.append(a(i.starSvg||m));return n(i.starWidth),q(i.normalFill),p(i.spacing),k(),f}function v(a){return i.maxValue=a,P=i.maxValue/i.numStars,i.rating>a&&C(a),k(),f}function w(a){return i.precision=a,C(i.rating),f}function x(a){return i.halfStar=a,f}function y(a){return i.fullStar=a,f}function z(a){var b=a%P,c=P/2,d=i.halfStar,e=i.fullStar;return e||d?(e||d&&b>c?a+=P-b:(a-=b,b>0&&(a+=c)),a):a}function A(a){var b=W.offset(),c=b.left,d=c+W.width(),e=i.maxValue,f=a.pageX,g=0;if(f<c)g=Y;else if(f>d)g=e;else{var h=(f-c)/(d-c);if(S>0){h*=100;for(var j=h;j>0;)j>R?(g+=P,j-=R+T):(g+=j/R*P,j=0)}else g=h*i.maxValue;g=z(g)}return i.rtl&&(g=e-g),parseFloat(g)}function B(a){return i.readOnly=a,f.attr("readonly",!0),N(),a||(f.removeAttr("readonly"),M()),f}function C(a){var b=a,e=i.maxValue;return"string"==typeof b&&("%"===b[b.length-1]&&(b=b.substr(0,b.length-1),e=100,v(e)),b=parseFloat(b)),d(b,Y,e),b=parseFloat(b.toFixed(i.precision)),c(parseFloat(b),Y,e),i.rating=b,k(),$&&f.trigger("rateyo.set",{rating:b}),f}function D(a){return i.onInit=a,f}function E(a){return i.onSet=a,f}function F(a){return i.onChange=a,f}function G(a){var b=A(a).toFixed(i.precision),d=i.maxValue;b=c(parseFloat(b),Y,d),k(b),f.trigger("rateyo.change",{rating:b})}function H(){b()||(k(),f.trigger("rateyo.change",{rating:i.rating}))}function I(a){var b=A(a).toFixed(i.precision);b=parseFloat(b),O.rating(b)}function J(a,b){i.onInit&&"function"==typeof i.onInit&&i.onInit.apply(this,[b.rating,O])}function K(a,b){i.onChange&&"function"==typeof i.onChange&&i.onChange.apply(this,[b.rating,O])}function L(a,b){i.onSet&&"function"==typeof i.onSet&&i.onSet.apply(this,[b.rating,O])}function M(){f.on("mousemove",G).on("mouseenter",G).on("mouseleave",H).on("click",I).on("rateyo.init",J).on("rateyo.change",K).on("rateyo.set",L)}function N(){f.off("mousemove",G).off("mouseenter",G).off("mouseleave",H).off("click",I).off("rateyo.init",J).off("rateyo.change",K).off("rateyo.set",L)}this.node=f.get(0);var O=this;f.empty().addClass("jq-ry-container");var P,Q,R,S,T,U,V=a("<div/>").addClass("jq-ry-group-wrapper").appendTo(f),W=a("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(V),X=a("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(V),Y=0,Z=i.rating,$=!1,_=i.ratedFill;this.rating=function(a){return e(a)?(C(a),f):i.rating},this.destroy=function(){return i.readOnly||N(),h.prototype.collection=j(f.get(0),this.collection),f.removeClass("jq-ry-container").children().remove(),f},this.method=function(a){if(!a)throw Error("Method name not specified!");if(!e(this[a]))throw Error("Method "+a+" doesn't exist!");var b=Array.prototype.slice.apply(arguments,[]),c=b.slice(1);return this[a].apply(this,c)},this.option=function(a,b){if(!e(a))return i;var c;switch(a){case"starWidth":c=n;break;case"numStars":c=u;break;case"normalFill":c=q;break;case"ratedFill":c=r;break;case"multiColor":c=t;break;case"maxValue":c=v;break;case"precision":c=w;break;case"rating":c=C;break;case"halfStar":c=x;break;case"fullStar":c=y;break;case"readOnly":c=B;break;case"spacing":c=p;break;case"rtl":c=s;break;case"onInit":c=D;break;case"onSet":c=E;break;case"onChange":c=F;break;default:throw Error("No such option as "+a)}return e(b)?c(b):i[a]},u(i.numStars),B(i.readOnly),i.rtl&&s(i.rtl),this.collection.push(this),this.rating(i.rating,!0),$=!0,f.trigger("rateyo.init",{rating:i.rating})}function i(b,c){var d;return a.each(c,function(){if(b===this.node)return d=this,!1}),d}function j(b,c){return a.each(c,function(a){if(b===this.node){var d=c.slice(0,a),e=c.slice(a+1,c.length);return c=d.concat(e),!1}}),c}function k(b){var c=h.prototype.collection,d=a(this);if(0===d.length)return d;var e=Array.prototype.slice.apply(arguments,[]);if(0===e.length)b=e[0]={};else{if(1!==e.length||"object"!=typeof e[0]){if(e.length>=1&&"string"==typeof e[0]){var f=e[0],g=e.slice(1),j=[];return a.each(d,function(a,b){var d=i(b,c);if(!d)throw Error("Trying to set options before even initialization");var e=d[f];if(!e)throw Error("Method "+f+" does not exist!");var h=e.apply(d,g);j.push(h)}),j=1===j.length?j[0]:j}throw Error("Invalid Arguments")}b=e[0]}return b=a.extend({},n,b),a.each(d,function(){var d=i(this,c);if(d)return d;var e=a(this),f={},g=a.extend({},b);return a.each(e.data(),function(a,b){if(0===a.indexOf("rateyo")){var c=a.replace(/^rateyo/,"");c=c[0].toLowerCase()+c.slice(1),f[c]=b,delete g[c]}}),new h(a(this),a.extend({},f,g))})}function l(){return k.apply(this,Array.prototype.slice.apply(arguments,[]))}var m='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',n={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},o={startColor:"#c0392b",endColor:"#f1c40f"},p=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,q=function(a){if(!p.test(a))return null;var b=p.exec(a);return{r:parseInt(b[1],16),g:parseInt(b[2],16),b:parseInt(b[3],16)}};h.prototype.collection=[],window.RateYo=h,a.fn.rateYo=l}(window.jQuery);
    //# sourceMappingURL=jquery.rateyo.min.js.map
    ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    var clear_form_errors = function(){
      $('.field_error').each(function(index, field_error){
        $('.field__help', field_error).remove();
        // var field = $(field_error).html();
        $(field_error).removeClass('field_error');
      });
    
      $('input.loading, button.loading').removeClass('loading').attr('disabled', false);
    };
    
    var scroll_to_first_error = function(){
      $.scrollTo( $('.field_error').first() , 10,  { axis: 'y', offset: -50 } );
    };
    
    $(document).ready(function(){
    
    
    
      function close_accordion_section() {
        $('@accordion_title_link').removeClass('active');
        $('@accordion_pane').slideUp(300).removeClass('open');
      }
    
      $('@accordion_title_link').click(function(e) {
        var currentAttrValue = $(this).attr('href');
    
        if($(e.target).is('.active')) {
          close_accordion_section();
        }else {
          close_accordion_section();
          // Add active class to section title
          $(this).addClass('active');
          // Open up the hidden content panel
          $(currentAttrValue).slideDown(300).addClass('open');
          $('@user_expand_menu').removeClass('user-panel_expand');
          $('@expand_menu_dropdown').parent().css({height: 0});
        }
        e.preventDefault();
      });
    
      // TM Panel
    
      $.getJSON('//habr.com/toplink/', function(json){
        var html = '<span class="subtitle">Мегапосты:</span>';
        if(json.links.length){
          $.each(json.links, function(index, item){
            var color = item.color ? 'style="color: '+ item.color+'"' : '';
            html += '<a href="'+item.link+'"target="_blank" class="specials__item-link"'+color+'>'+item.title+'</a>';
          });
        }else{
          if (!json.link || !json.title) return;
          var color = json.color ? 'style="color: '+ json.color+'"' : '';
          html = '<a href="'+json.link+'"target="_blank" class="specials__item-link'+color+'>'+json.title+'</a>';
        }
        $('@tm_panel .menu_services .specials').append(html);
      });
    
      // поддержка показа баннера с помощью script.js
      window.TMPanelShowLink = function(params) {
        var color = params.color ? 'style="color: ' + params.color + '"' : '';
        var html  = '<a href="' + params.link + '" target="_blank" class="specials__item-link"' + color + '>' + params.title + '</a>';
        if (params.position === 'left') {
          $('@tm_panel .menu-services .specials').prepend(html);
        } else {
          $('@tm_panel .menu-services .specials').append(html);
        }
      };
    
      (function() {
        $('@expand_menu_trigger').on('click touchstart', function(e){
          e.preventDefault();
          var menuHeight = $('@expand_menu_dropdown').height();
    
          if($('@user_expand_menu').hasClass('user-panel_expand')){
            $('@user_expand_menu').removeClass('user-panel_expand');
            $('@expand_menu_dropdown').parent().css({height: 0});
          }else{
            close_accordion_section();
            $('@user_expand_menu').addClass('user-panel_expand');
            $('@expand_menu_dropdown').parent().css({height: menuHeight});
          }
        });
      })();
    
      //init plugins
    
      $('@chzn_select').chosen({
        disable_search_threshold: 350
      });
    
      $('@datepicker').datepicker({
        language: 'ru-RU',
        format: 'dd.mm.YYYY',
        zIndex: 100,
        autoHide: true,
        startDate: 'today'
      });
    
      $('.autoresize').autosize();
    
      $(".rateInput").rateYo({
        starWidth: "20px",
        halfStar: false,
        precision: 0,
        spacing: '5px'
      }).on("rateyo.set", function (e, data) {
        if (data.rating > 0) {
          $(this).closest('.field_checkbox').find('.value_field').val(data.rating);
        } else {
          $(this).closest('.field_checkbox').find('.value_field').val('');
        }
      });
    
      $('input.money_format').autoNumeric({aSep: ' ', aDec: ',', mDec: 0 });
    
      $('textarea.wysiwyg').each(function(i, textarea){
        wysiwyg($(textarea));
      });
    
      // add class for toggle comments event
    
      $("[data-role=collapse-comments]").on('click', function(event) {
        target = $(event.currentTarget);
        container = target.closest('.content-list__item');
        container.toggleClass('content-list__item_load');
      });
    
    
    
    
    
      // Убирает ошибку с поля, после события on blur
    
      $(document).on('blur change input', '.field input, .field textarea, .field select', function(){
        var field = $(this).closest('.field');
        if ($.trim($(this).val()).length > 0 ){
          field.removeClass('field_error');
          field.find('.field_error').removeClass('field_error');
          field.find('.field__help').remove();
          field.find('.validation-error').remove();
        }
      });
    
      // раскрывашка для меню на странице help
    
      $('@toggle_link').on('click', function(){
        if( $('@menu_tree').hasClass('menu_open') ){
          $('@menu_tree').removeClass('menu_open');
        }else{
          $('@menu_tree').removeClass('menu_open');
          $('@menu_tree').addClass('menu_open');
        }
      });
    
      //cкрытие формы подписки
    
      $('[name="subscription_user_mail[delivery_frequency]"]').on('click', function(event) {
        var target = $(event.currentTarget);
        if (target.parents('label').hasClass('js-delivery_never')) {
          $('.form_subscribe').addClass('hidden');
        } else {
          $('.form_subscribe').removeClass('hidden');
        }
      });
      if ($('#subscription_user_mail_delivery_frequency').prop('checked')){
        $('.form_subscribe').addClass('hidden');
      }
    
      // открытие дропдаунов по клику
    
      $(document).on('click', '@dropdown_trigger', function(){
        var dropdown = $(this).closest('@dropdown');
    
        if ( dropdown.hasClass('open') ){
          dropdown.removeClass('open');
        }else{
          $('@dropdown').removeClass('open');
          dropdown.addClass('open');
        }
    
        $(document).one('click', function(e){
          if( $(e.target).closest('@dropdown').size() === 0 ){
            dropdown.removeClass('open');
          }
        });
        return false;
      });
    
      // nested formfield removed
    
      $(document).on('nested:fieldRemoved', function(event){
        var field = event.field;
        var fields = field.closest('.form-fields__group');
        if ( fields.find('.fields:visible').size() === 0 ) {
          fields.find('.link_add-field').click();
        }
      });
    
      // nested formfield removed
    
      $(function() {
        var fieldsCount,
            maxFieldsCount = 8,
            $addLink = $('.link_add-field');
    
        function toggleAddLink() {
          $addLink.toggle(fieldsCount <= maxFieldsCount);
        }
    
        $(document).on('nested:fieldAdded', function() {
          fieldsCount += 1;
          toggleAddLink();
        });
    
        $(document).on('nested:fieldRemoved', function() {
          fieldsCount -= 1;
          toggleAddLink();
        });
    
        // count existing nested fields after page was loaded
        fieldsCount = $('form .fields').length;
        toggleAddLink();
      });
    
      // nested formfield add
    
      $(document).on('nested:fieldAdded', function(event){
        var field = event.field;
        var customField = field.find('@chzn_select');
        customField.chosen({
          disable_search_threshold: 350
        });
      });
    
      // scroll_to_top in left float panel
    
      var scroll_to_top = $('@scroll_top');
      var last_scroll_position = 0;
    
      scroll_to_top.on('click', function(){
        if( last_scroll_position > 0 ){
          $.scrollTo(last_scroll_position);
          last_scroll_position = 0;
          scroll_to_top.removeClass('down').attr('title', "Перемотать страницу наверх");
        }else{
          last_scroll_position = window.pageYOffset;
          $.scrollTo($('body'));
          scroll_to_top.addClass('down').attr('title', "Перемотать страницу обратно к последней позиции");
        }
        return false;
      });
    
      $(window).scroll(function(){
        if( this.pageYOffset > 1 && last_scroll_position > 0){
          scroll_to_top.removeClass('down').attr('title', "Перемотать страницу наверх");
          last_scroll_position = 0;
        }
        if( this.pageYOffset > 1 ){
          scroll_to_top.removeClass('hidden');
        }else{
          if( !scroll_to_top.hasClass('down') ) {
            scroll_to_top.addClass('hidden');
          }
        }
      });
    
    
      // Штука для подсчета кол-ва символов введенных в текстовое поле
    
      var formCountSelector = $('input[data-maxlength], textarea[data-maxlength]');
      formCountSymbols(formCountSelector);
    
      // dashboard panes buttons logic
    
      $('.pane__footer a[href^="#js-user_upgrade"]').on('click', function (e){
        e.stopPropagation();
        $('#js-user_upgrade').removeClass('hidden');
        $('#js-current_position').addClass('hidden');
        $('#js-profile_select').addClass('hidden');
        return false;
      });
    
      $('.pane__footer a[href^="#js-profile_select"]').on('click', function (e){
        e.stopPropagation();
        $('#js-profile_select').removeClass('hidden');
        $('#js-user_upgrade').addClass('hidden');
        $('#js-current_position').addClass('hidden');
        return false;
      });
    
      $('.pane__button_close').on('click', function (e){
        e.stopPropagation();
        $(this).parents('.pane').addClass('hidden');
        $('#js-current_position').removeClass('hidden');
      });
    
      $('.toggle-switcher').click(function (e) {
        e.stopPropagation();
      });
    
      // Опубликовать заказ
    
      var task_publish = $('#js-publish_task input');
      task_publish.change(function(e){
        $.post(task_publish.data('url'));
      });
    
      // дизеблим кнопку сабмита при клике и добавляем класс loading
    
      $(document).on('click', 'button[type="submit"], input[type="submit"]', function(){
        var btn = $(this);
            btn.addClass('loading');
        setTimeout(function(){
          btn.attr('disabled', true);
        },3);
      });
    
      // для ссылок, которые отправляются аяксом, добавляем класс loading
    
      $('a.button[data-remote="true"]').on('click',function(){
        $(this).addClass('loading');
      });
    
      // Обработчик ajax-submit форм
      $('form[data-remote="true"]').each(function(i, form){
        $(form).on('ajax:success', function(){
          $('button.loading, input.loading, a.loading', form).removeClass('loading').attr('disabled', false);
        });
      });
    
      //hide favorite comment form
    
      $(document).on('click', '.cancel_favorite_note', function(){
        var note = $(this).parents(".user-note");
        $(this).parents(".user-note__form").remove();
        note.children(".note_wrapper").show();
        return false;
      });
    
      // Форма размещения услуги
    
      $('#service_agreement').prop('checked', false);
    
      $(document).on('change', '#service_agreement', function(){
        var form = $('#service_form');
        form.find('button[type="submit"]').attr('disabled', !$(this).prop('checked'));
      });
    });
    
    
    
    function formCountSymbols (formSelector) {
    
      formSelector.each(function(i, formSelector, field){
    
        var maxlength = $(this).data('maxlength');
        var input = $(this);
    
        input.textareaCount({
          'maxCharacterSize': maxlength,
          'warningStyle' : 'field__counter_warning',
          'warningNumber': 0,
          'displayFormat' : '#left'
        });
      });
    }
    
    function closeFeedbackModal() {
      var overlay = $('body > .overlay');
      var modalFeedback = $('.modal_feedback');
    
      modalFeedback.removeClass('modal_show');
      overlay.removeClass('overlay_show');
    }
    
    function openFeedbackModal() {
      var overlay = $('body > .overlay');
      var modalFeedback = $('.modal_feedback');
    
      modalFeedback.addClass('modal_show');
      overlay.addClass('overlay_show');
    }
    
    function wysiwyg(textarea){
      textarea.redactor({
    
            buttons: [
              'bold',
              'italic',
              'underline',
              'link',
              'unorderedlist',
              'orderedlist'
    
            ],
            lang: 'ru',
    
            // focusCallback: function(e) {
            //   textarea.trigger('focus');
            // },
            // blurCallback: function(e) {
            //   textarea.trigger('blur');
            // },
            changeCallback: function(html) {
              textarea.trigger('change', html);
            },
            syncAfterCallback: function(e) {
              textarea.trigger('sync');
            },
            linebreaks: true,
            minHeight: 100
      });
    }
    
    function truncate(text, max_letters){
      if( typeof(max_letters) == 'undefined' ) max_letters = 20;
      text = $.trim(text);
      if( text.length > max_letters) text = text.substring(0, max_letters) + "...";
      return text;
    }
    
    // Convert number of bytes into human readable format
    // @param integer bytes     Number of bytes to convert
    // @param integer precision Number of digits after the decimal separator
    // @return string
    
    function bytesToSize(bytes, precision){
      var kilobyte = 1024;
      var megabyte = kilobyte * 1024;
      var gigabyte = megabyte * 1024;
      var terabyte = gigabyte * 1024;
    
      if ((bytes >= 0) && (bytes < kilobyte)) {
          return bytes + ' B';
    
      } else if ((bytes >= kilobyte) && (bytes < megabyte)) {
          return (bytes / kilobyte).toFixed(precision) + ' KB';
    
      } else if ((bytes >= megabyte) && (bytes < gigabyte)) {
          return (bytes / megabyte).toFixed(precision) + ' MB';
    
      } else if ((bytes >= gigabyte) && (bytes < terabyte)) {
          return (bytes / gigabyte).toFixed(precision) + ' GB';
    
      } else if (bytes >= terabyte) {
          return (bytes / terabyte).toFixed(precision) + ' TB';
    
      } else {
          return bytes + ' B';
      }
    }
    
    $(document).on('click', '.hide_notice_button', function(){
      $(this).closest('.top_notice').remove();
    });
    
    $(document)
      // раскрывашка дропдаунов в верхнем меню
      .on('click', '.top_menu_dropdown .label', openDropdown)
      .on('click', '.top_menu_dropdown .toggler', openDropdown)
    
    function openDropdown () {
      var dropdown = $(this).closest('.top_menu_dropdown')
      var isOpen = dropdown.hasClass('open')
    
      $('.top_menu_dropdown').removeClass('open')
    
      if (!isOpen) {
        dropdown.addClass('open')
    
        $(document).one('click', function () {
          $('.top_menu_dropdown').removeClass('open')
        })
      }
    
      return false
    }
    
    var verificationInterval;
    function runVerificationCountdown() {
      clearInterval(verificationInterval);
      verificationInterval = setInterval(verify_countdown, 1000);
    }
    
    function verify_countdown() {
      timeLeft = parseInt($('#verify_countdown').text());
      if (timeLeft == 0) {
        $('#verify_countdown').closest('.form-fields__group').find('.resend_block').removeClass('hidden');
        $('.resend_countdown_wrapper').addClass('hidden');
        $('.resend_countdown_wrapper').addClass('ready');
        clearInterval(verificationInterval);
      } else {
        timeLeft--;
        $('#verify_countdown').text(timeLeft);
      }
    }
    
    function check_verification() {
      var fromModal = $('#from_modal').val();
      $.ajax({
        method: 'get',
        url: '/sms_verifications/check',
        data: {'from_modal': fromModal},
        dataType: 'script'
      })
    }
    
    $(document).on('click', '.recall_btn', function(){
      var form = $(this).closest('form');
      form.find('.form-fields__group.pin').remove();
      form.find('.form-fields__group.recall_check').removeClass('hidden');
      setTimeout(check_verification, 1000);
    });
    
    $(document).on('click', '.show_verification_popup', function(){
      try {
        trackEvent('verification', 'show_verification_popup', $(this).data('label'));
      } catch {}
      $('body').append('<div class="overlayed"></div>');
      $('#verifications_modal').show()
      $('#verifications_modal button, #verifications_modal .modal__close').on('click', function () {
        $('.overlayed').click()
        return false
      })
      $(document).on('click', '.overlayed', function(){
        $(this).remove();
        $('#verifications_modal').hide();
      });
    });
    
    $(document).on('click', '.show_resend', function(){
      var counter = $(this).closest('.form-fields__group').find('.resend_countdown_wrapper');
      if (counter.hasClass('ready')) {
        $(this).closest('.form-fields__group').find('.resend_block').removeClass('hidden');
      } else {
        counter.removeClass('hidden');
      }
      $(this).addClass('hidden');
      $('#sms_verification_pin').val('').closest('.field').removeClass('field_error').find('.field__help').remove();
    });
    
    $(document).on('click', '.verification_call', function(){
      var root = $(this).closest('.confirm-field');
      var el = root.find('.resend_countdown_wrapper');
      var btn = root.find('.resend_btn');
      el.find('.desc').text('Обратный звонок доступен через');
      btn.text('Обратный звонок');
      btn.attr('href', btn.attr('href') + '?call=true');
      $(this).closest('.hint').remove();
      root.find('.show_resend').click();
      if ($('#verify_countdown').text() == '0') {
        $('.resend_btn').click();
      }
    });
    
    $(document).on('click', '#dropzone', function(e){
      $(this).closest('.form-fields_upload').find('#anyfile_item').click();
    });
    
    $(document).on('click', '.skip_link', function(e){
      var ea = $(this).data('track'),
          label = $(this).data('label');
      if (ea) { 
        trackEvent('onboarding', ea, label);
      }
    });
    
    $(document).on('click', '.dropdown_inline .toggler', function(e) {
      e.stopPropagation();
      var dropdown = $(this).closest('.dropdown_inline');
    
      if (dropdown.hasClass('open')) {
        $('.dropdown_inline').removeClass('open');
      } else {
        $('.dropdown_inline').removeClass('open');
        dropdown.addClass('open');
      }
    });
    
    $(document).on('click', function(e) {
      var close = $(e.target).closest('.dropdown_inline').length === 0
      if (close) {
        $('.dropdown_inline').removeClass('open');
      }
    });
    
    $(function() {
      var dropdown = document.querySelector('#dropdown');
      var dropdownControl = document.querySelector('#dropdown-control');
      var logoWrapper = document.querySelector('.logo-wrapper');
    
      document.addEventListener('click', function(e) {
          var isClickInside = logoWrapper.contains(e.target);
          var dropdownClosed = dropdown.classList.contains('hidden');
          if (!isClickInside && !dropdownClosed) {
            dropdown.classList.add('hidden');
            dropdownControl.classList.remove('reverted');
          }
      });
    
      dropdownControl.onclick = function () {
        dropdown.classList.toggle('hidden');
        dropdownControl.classList.toggle('reverted');
      };
    });
    
    // effect feature and megaposts
    
    class EffectApi {
      constructor() {
        this.baseUrl = $('meta[name="effect_url"]')[0].content;
      }
      /**
       * @param {string} fl
       * @returns {Promise<EffectSearchResponse<FeaturerAdvert>>}
       */
      getFeature({ fl = 'ru' } = {}) {
        return this.search({
          feature: {
            type: 'featurer',
            view: {
              lang: fl,
            }
          },
        }).then(({ results }) => results.feature);
      }
    
      /**
       * @param {number} count
       * @param {string} fl
       * @returns {Promise<EffectSearchResponse<MegapostAdvert>>}
       */
      getMegaposts({ count = 1, fl = 'ru' } = {}) {
        return this.search({
          megaposts: {
            type: 'megapost',
            filter: {
              langs: [fl],
            },
            count,
          },
        }).then(({ results }) => results.megaposts);
      }
    
      /**
       * @param {Record<string, EffectQuery>} queries
       * @returns {Promise<EffectSearchResponse<FeaturerAdvert>>}
       */
      search(queries) {
        const data = {
          queries,
          version: '1.0',
        };
        return $.ajax({
          url: this.baseUrl,
          method: 'SEARCH',
          dataType: 'json',
          data: JSON.stringify(data),
          processData: false,
        });
      }
    }
    
    const effectResource = new EffectApi();
    
    $(function() {
      const $feature = $('[data-feature]');
    
      effectResource.getFeature()
        .then(({ adverts }) => {
          if (!adverts.length) return;
    
          const feature = adverts[0];
          const { link, title, image, gal: gaLabel } = feature;
    
          let element = '<a class="tm-panel__featured" href="' + link.url + '" target="_blank">';
    
          if (image && image.url) {
            element += '<img class="tm-panel__featured-icon" alt="" src="' + image.url + '">';
          }
    
          element += title + '</a>';
    
          $feature.append(element);
    
          $feature.on('click', function() {
            trackEvent('click', 'top_panel', 'feature', gaLabel);
          })
        });
    });
    
    $(function() {
      var $megaposts = $('[data-megaposts]');
    
      effectResource.getMegaposts()
        .then(({ adverts }) => {
          if (!adverts.length) return;
    
          const [megapost] = adverts;
          if (!megapost) return;
    
          const { link, title, color, events } = megapost;
    
          const html = '<a href="' + link.url + '" class="bmenu slink" target="_blank" rel="noopener" style="color:' + color + '">' + title + '</a>';
    
          $megaposts.append(html);
    
          if (events.view && window.trackPageView) window.trackPageView(events.view);
        });
    });
    